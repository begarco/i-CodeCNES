/* The following code was generated by JFlex 1.4.3 on 14/03/17 15:12 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                               */
/************************************************************************************************/ 

/**********************************************************************************/
/* This file is used to generate a rule checker for COM.NAME.Homonomy rule.		  */
/* For further information on this, we advise you to refer to RNC manuals.	      */
/* As many comments have been done on the ExampleRule.lex file, this file         */
/* will restrain its comments on modifications.								      */
/*																			      */
/**********************************************************************************/

package fr.cnes.analysis.tools.shell.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/03/17 15:12 from the specification file
 * <tt>lex/COMNAMEHomonymy.lex</tt>
 */
public class COMNAMEHomonymy extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FUNCTIONSTATE = 8;
  public static final int DECLARESTATE = 14;
  public static final int FUNCDECLARESTATE = 16;
  public static final int BEGINFUNC = 12;
  public static final int LOCAL = 6;
  public static final int FUNCOMMENT = 10;
  public static final int YYINITIAL = 0;
  public static final int NAMING = 4;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\40\1\0\2\13\22\0\1\13\1\17\1\16\1\1"+
    "\1\23\1\17\1\0\1\15\1\11\1\12\1\17\1\17\1\17\1\26"+
    "\1\0\1\17\12\14\1\17\2\0\1\20\1\0\1\17\1\17\32\14"+
    "\1\21\1\0\1\22\1\17\1\14\1\0\1\31\1\27\1\5\1\32"+
    "\1\33\1\2\1\27\1\37\1\7\2\27\1\30\1\27\1\4\1\10"+
    "\2\27\1\34\1\35\1\6\1\3\1\27\1\36\3\27\1\24\1\0"+
    "\1\25\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\5\1\1\3\1\4\1\5\1\6"+
    "\1\7\5\1\1\10\1\11\3\1\1\10\1\11\11\1"+
    "\1\12\1\1\1\12\2\1\1\13\1\14\4\0\1\15"+
    "\5\0\1\11\3\0\1\16\2\0\1\10\15\0\1\17"+
    "\2\0\1\20\34\0\1\21\13\0\1\22\1\23\1\24"+
    "\1\25\2\0\1\23\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce"+
    "\0\u0129\0\u01ef\0\u0210\0\u0129\0\u0129\0\u0231\0\u0252\0\u0273"+
    "\0\u0294\0\u02b5\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a\0\u0129"+
    "\0\u0129\0\u037b\0\u039c\0\u03bd\0\u03de\0\u03ff\0\u0420\0\u0441"+
    "\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u0129\0\u04e6\0\u0507\0\u0528"+
    "\0\u0549\0\u016b\0\u056a\0\u058b\0\u05ac\0\u0129\0\u018c\0\u01ad"+
    "\0\u05cd\0\u0273\0\u05ee\0\u0273\0\u060f\0\u0630\0\u0651\0\u0129"+
    "\0\u0672\0\u0693\0\u0273\0\u06b4\0\u06d5\0\u06f6\0\u0717\0\u0738"+
    "\0\u0759\0\u077a\0\u079b\0\u07bc\0\u07dd\0\u07fe\0\u081f\0\u0840"+
    "\0\u0129\0\u0861\0\u0882\0\u0129\0\u08a3\0\u08c4\0\u08e5\0\u0906"+
    "\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\u0a0e"+
    "\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16"+
    "\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e"+
    "\0\u0273\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05"+
    "\0\u0d26\0\u0d47\0\u0d68\0\u0d89\0\u016b\0\u0daa\0\u0273\0\u0dcb"+
    "\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\6\15\3\12\1\15\1\16\1\17"+
    "\7\12\4\15\1\20\5\15\41\12\1\21\2\12\7\22"+
    "\3\12\1\22\11\12\12\22\1\21\2\12\7\23\3\12"+
    "\1\23\1\16\1\17\7\12\12\23\1\24\1\12\1\25"+
    "\1\26\1\27\1\30\1\31\1\30\1\32\1\30\1\33"+
    "\1\34\1\12\1\30\1\16\1\17\2\12\1\35\1\36"+
    "\1\37\1\40\1\41\2\30\1\42\1\30\1\43\1\44"+
    "\1\30\1\45\1\46\1\30\41\12\1\24\2\12\1\47"+
    "\1\50\1\12\1\51\1\12\1\52\1\12\1\53\7\12"+
    "\1\54\2\12\1\55\10\12\1\56\1\57\4\12\7\60"+
    "\3\12\1\60\11\12\12\60\1\21\2\12\7\61\3\12"+
    "\1\61\11\12\12\61\1\24\43\0\1\62\1\63\5\62"+
    "\1\64\1\0\1\65\1\62\3\0\1\66\5\0\12\62"+
    "\3\0\7\62\1\64\1\0\1\65\1\62\3\0\1\66"+
    "\5\0\12\62\1\0\15\67\1\12\23\67\16\70\1\12"+
    "\22\70\2\0\7\62\1\64\1\0\1\65\1\62\3\0"+
    "\1\66\5\0\5\62\1\71\4\62\3\0\7\22\3\0"+
    "\1\22\11\0\12\22\3\0\7\23\3\0\1\23\11\0"+
    "\12\23\3\0\1\72\1\73\3\72\1\74\1\75\1\76"+
    "\1\0\1\77\1\72\3\0\1\100\5\0\12\72\3\0"+
    "\2\72\1\101\4\72\1\76\1\0\1\77\1\72\3\0"+
    "\1\100\5\0\12\72\3\0\7\72\1\76\1\0\1\77"+
    "\1\72\3\0\1\100\5\0\12\72\3\0\7\72\1\76"+
    "\1\0\1\77\1\72\3\0\1\100\5\0\3\72\1\102"+
    "\6\72\3\0\1\103\6\72\1\76\1\0\1\77\1\72"+
    "\3\0\1\100\5\0\12\72\12\0\1\40\41\0\1\41"+
    "\47\0\1\40\41\0\1\41\42\0\1\104\16\0\6\72"+
    "\1\105\1\76\1\0\1\77\1\72\3\0\1\100\5\0"+
    "\12\72\3\0\6\72\1\106\1\76\1\0\1\77\1\72"+
    "\3\0\1\100\5\0\5\72\1\107\4\72\3\0\7\72"+
    "\1\76\1\0\1\77\1\72\3\0\1\100\5\0\7\72"+
    "\1\110\2\72\3\0\7\72\1\76\1\0\1\77\1\72"+
    "\3\0\1\100\5\0\5\72\1\111\4\72\3\0\7\72"+
    "\1\76\1\0\1\77\1\72\3\0\1\100\5\0\11\72"+
    "\1\112\11\0\1\113\34\0\1\114\65\0\1\115\11\0"+
    "\1\55\47\0\1\55\1\12\47\0\1\55\52\0\1\116"+
    "\44\0\1\117\3\0\7\60\3\0\1\60\11\0\12\60"+
    "\3\0\7\61\3\0\1\61\11\0\12\61\3\0\2\62"+
    "\1\120\4\62\1\64\1\0\1\65\1\62\3\0\1\66"+
    "\5\0\12\62\13\0\1\121\37\0\1\64\1\0\1\65"+
    "\27\0\3\62\1\122\3\62\1\64\1\0\1\65\1\62"+
    "\3\0\1\66\5\0\12\62\3\0\2\72\1\123\4\72"+
    "\1\76\1\0\1\77\1\72\3\0\1\100\5\0\12\72"+
    "\3\0\7\72\1\76\1\0\1\77\1\72\3\0\1\100"+
    "\5\0\6\72\1\103\3\72\13\0\1\124\37\0\1\76"+
    "\1\0\1\77\27\0\4\72\1\125\2\72\1\76\1\0"+
    "\1\77\1\72\3\0\1\100\5\0\12\72\3\0\7\72"+
    "\1\76\1\0\1\77\1\72\3\0\1\100\5\0\7\72"+
    "\1\126\2\72\2\0\10\127\3\0\2\127\1\0\4\127"+
    "\1\130\2\0\12\127\3\0\3\72\1\131\3\72\1\76"+
    "\1\0\1\77\1\72\3\0\1\100\5\0\12\72\3\0"+
    "\2\72\1\132\4\72\1\76\1\0\1\77\1\72\3\0"+
    "\1\100\5\0\12\72\3\0\3\72\1\133\3\72\1\76"+
    "\1\0\1\77\1\72\3\0\1\100\5\0\12\72\3\0"+
    "\7\72\1\76\1\0\1\77\1\72\3\0\1\100\5\0"+
    "\3\72\1\134\6\72\3\0\7\72\1\76\1\0\1\77"+
    "\1\72\3\0\1\100\5\0\2\72\1\135\7\72\3\0"+
    "\5\72\1\136\1\72\1\76\1\0\1\77\1\72\3\0"+
    "\1\100\5\0\12\72\35\0\1\55\12\0\1\137\67\0"+
    "\1\140\33\0\1\141\17\0\1\142\33\0\3\62\1\143"+
    "\3\62\1\64\1\0\1\65\1\62\3\0\1\66\5\0"+
    "\12\62\3\0\7\62\1\64\1\0\1\65\1\62\3\0"+
    "\1\66\5\0\2\62\1\144\7\62\3\0\3\72\1\145"+
    "\3\72\1\76\1\0\1\77\1\72\3\0\1\100\5\0"+
    "\12\72\3\0\5\72\1\146\1\72\1\76\1\0\1\77"+
    "\1\72\3\0\1\100\5\0\12\72\3\0\7\72\1\76"+
    "\1\0\1\77\1\72\3\0\1\100\5\0\5\72\1\103"+
    "\4\72\2\0\10\127\3\0\2\127\1\0\4\127\1\130"+
    "\1\0\1\12\12\127\3\0\7\127\3\0\1\127\7\0"+
    "\1\147\1\0\12\127\3\0\7\72\1\76\1\0\1\77"+
    "\1\72\3\0\1\100\5\0\3\72\1\150\6\72\3\0"+
    "\7\72\1\76\1\0\1\77\1\72\3\0\1\100\5\0"+
    "\5\72\1\74\4\72\3\0\7\72\1\76\1\0\1\77"+
    "\1\72\3\0\1\100\5\0\2\72\1\151\7\72\3\0"+
    "\3\72\1\74\3\72\1\76\1\0\1\77\1\72\3\0"+
    "\1\100\5\0\12\72\3\0\7\72\1\76\1\0\1\77"+
    "\1\72\3\0\1\100\5\0\5\72\1\152\4\72\3\0"+
    "\7\72\1\76\1\0\1\77\1\72\3\0\1\100\5\0"+
    "\2\72\1\126\7\72\10\0\1\153\64\0\1\55\40\0"+
    "\1\154\35\0\1\140\12\0\4\62\1\155\2\62\1\64"+
    "\1\0\1\65\1\62\3\0\1\66\5\0\12\62\3\0"+
    "\7\62\1\64\1\0\1\65\1\62\3\0\1\66\5\0"+
    "\3\62\1\156\6\62\3\0\4\72\1\157\2\72\1\76"+
    "\1\0\1\77\1\72\3\0\1\100\5\0\12\72\3\0"+
    "\7\72\1\76\1\0\1\77\1\72\3\0\1\100\5\0"+
    "\2\72\1\103\7\72\3\0\7\160\3\0\1\160\11\0"+
    "\12\160\3\0\7\72\1\76\1\0\1\77\1\72\3\0"+
    "\1\100\5\0\2\72\1\161\7\72\3\0\7\72\1\76"+
    "\1\0\1\77\1\72\3\0\1\100\5\0\3\72\1\162"+
    "\6\72\3\0\3\72\1\163\3\72\1\76\1\0\1\77"+
    "\1\72\3\0\1\100\5\0\12\72\31\0\1\55\15\0"+
    "\1\164\35\0\5\62\1\165\1\62\1\64\1\0\1\65"+
    "\1\62\3\0\1\66\5\0\12\62\3\0\7\62\1\64"+
    "\1\0\1\65\1\62\3\0\1\66\5\0\6\62\1\166"+
    "\3\62\3\0\5\72\1\167\1\72\1\76\1\0\1\77"+
    "\1\72\3\0\1\100\5\0\12\72\3\0\7\160\3\0"+
    "\1\160\10\0\1\127\12\160\3\0\7\72\1\76\1\0"+
    "\1\77\1\72\3\0\1\100\5\0\6\72\1\170\3\72"+
    "\3\0\4\72\1\103\2\72\1\76\1\0\1\77\1\72"+
    "\3\0\1\100\5\0\12\72\7\0\1\55\34\0\6\62"+
    "\1\171\1\64\1\0\1\65\1\62\3\0\1\66\5\0"+
    "\12\62\3\0\7\62\1\64\1\0\1\65\1\62\3\0"+
    "\1\66\5\0\5\62\1\172\4\62\3\0\6\72\1\173"+
    "\1\76\1\0\1\77\1\72\3\0\1\100\5\0\12\72"+
    "\3\0\7\72\1\76\1\0\1\77\1\72\3\0\1\100"+
    "\5\0\5\72\1\174\4\72\3\0\2\62\1\175\4\62"+
    "\1\64\1\0\1\65\1\62\3\0\1\66\5\0\12\62"+
    "\3\0\7\62\1\64\1\0\1\176\1\62\3\0\1\66"+
    "\5\0\12\62\3\0\2\72\1\177\4\72\1\76\1\0"+
    "\1\77\1\72\3\0\1\100\5\0\12\72\3\0\7\72"+
    "\1\76\1\0\1\200\1\72\3\0\1\100\5\0\12\72"+
    "\12\0\1\64\1\0\1\176\12\0\1\201\23\0\1\76"+
    "\1\0\1\200\12\0\1\202\14\0\7\203\16\0\11\203"+
    "\3\0\7\204\16\0\11\204\27\0\1\201\40\0\1\202"+
    "\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3696];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\11\5\1\1\11\2\1\2\11\12\1\2\11"+
    "\13\1\1\11\4\1\4\0\1\11\5\0\1\1\3\0"+
    "\1\11\2\0\1\1\15\0\1\11\2\0\1\11\34\0"+
    "\1\1\13\0\4\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /* MAINPROGRAM: constant for main program localisation */
    private static final String MAINPROGRAM = "MAIN PROGRAM";
    /* ERROR_ON_VARIABLE: constant for variable error message */
    private static final String ERROR_ON_VARIABLE = " -> Error with the variable named ";
    /* LOCAL_VAR_SAME_NAME: constant for local variable message */
    private static final String LOCAL_VAR_SAME_NAME = ". There is a local variable with the same name.";
    /* FUNCT_SAME_NAME: constant for function name message */
    private static final String FUNCT_SAME_NAME = ". There is a function with the same name.";
    /* location: the current function name, or main program, that is the initial value */
    private String location = MAINPROGRAM;
    /* functions: the list of function names in the code analyzed so far */
    private List<String> functions = new ArrayList<String>();
    /* localVariables: the list of local variables in the code analyzed so far */
    private List<String> localVariables = new ArrayList<String>();
    /* globalVariables: the list of global variables in the code analyzed so far */
    private List<String> globalVariables = new ArrayList<String>();
    /* currentLocals: the list of local variables in the current function */
    private List<String> currentLocals = new ArrayList<String>();
    /* extraGlobals: the list of the local variables of an encapsulating function */
    private List<String> extraGlobals = new ArrayList<String>();
    
    /* currentOpening: the opening type of the current function */
    private String currentOpening = "";
    /* nbOpenings: the nuber of times the current opening has been used in the function number */ 
    private int nbOpenings = 0;
    /* doneOpenings: a list containing the "done" type family of openings */
    private final List<String> doneOpenings = new ArrayList<String>(Arrays.asList("select", "for", "while", "until"));
    
    /* FunctionInfo: structure recording current function information */
    /* Only used in this class */
    private static class FunctionInfo {
        /* name: function name (localisation) */
        private String name; 
        /* openingType: function opening type */
        private String openingType;  
        /* nbOpenings: number of current openings used */
        private int    nbOpenings;
        /* parentCurrentLocals: list of current locals of the encapsulating function */
        /* It is kept to be able to restore the current locals values in the encapsulating */
        /* function when the current function ends and we go back up a level */
        private List<String>  parentCurrentLocals;
        /* parentExtraGlobals: list of extra globals: the locals of the encapsulating function */
        /* It is kept to be able to restore the extra globals values in the encapsulating */
        /* function when the current function ends and we go back up a level */
        private List<String>  parentExtraGlobals;
        
        /* Class constructors */
        public FunctionInfo() {}
        public FunctionInfo(final String namePar, final String openingTypePar, 
                            final int nbOpeningsPar, final List<String> parentCurrentLocalsPar, 
                            final List<String> parentExtraGlobalsPar) {
            name = namePar;
            openingType = openingTypePar;
            nbOpenings = nbOpeningsPar;
            parentCurrentLocals = new ArrayList<String>(parentCurrentLocalsPar);
            parentExtraGlobals = new ArrayList<String>();
            parentExtraGlobals.addAll(parentExtraGlobalsPar);
        }
        
        /* Class member accessors */
        /* Only the getters are defined: the values are set by the constructor */
        public String getName() { return this.name; }
        public String getOpeningType() { return this.openingType; }
        public int getNbOpenings() { return this.nbOpenings; }
        public List<String> getParentCurrentLocals() { return this.parentCurrentLocals; }
        public List<String> getParentExtraGlobals() { return this.parentExtraGlobals; }
        
    }
    
    /* currentFuncInfo: the function information for the current function */ 
    private FunctionInfo currentFuncInfo = null;
    
    /* Pile to stack up function information when there are nested functions */
    private final Stack<FunctionInfo> functionPile = new Stack<FunctionInfo>();
    
    public COMNAMEHomonymy() {
        
    }
    
    @Override
    public void setInputFile(IPath file) throws FileNotFoundException {
        super.setInputFile(file);
        this.zzReader = new FileReader(file.toOSString());
    }

    /** 
      * checkVar: adds the current variable name (var) to the list of global variables  
      * and checks for violations. Called from YYINITIAL.
      */
    private void checkVar(final String var) throws JFlexException {
        if(functions.contains(var)) {
            setError(location, ERROR_ON_VARIABLE + var + FUNCT_SAME_NAME, yyline+1);
        }
        if(location.equals(MAINPROGRAM)) {
            globalVariables.add(var);
            if(localVariables.contains(var)) {
                setError(location, ERROR_ON_VARIABLE + var + LOCAL_VAR_SAME_NAME, yyline+1);
            }
        }
    }    

    /** 
      * checkVarFunc: adds the current variable name (var) to the list of global variables
      * and checks for violations. Called from FUNCTIONSTATE, so when within a function
      */
    private void checkVarFunc(final String var) throws JFlexException {
        if(functions.contains(var)) {
            setError(location, ERROR_ON_VARIABLE + var + FUNCT_SAME_NAME, yyline+1);
        }
        if(! globalVariables.contains(var)) {
            if(! currentLocals.contains(var)) {
                globalVariables.add(var);
                if (localVariables.contains(var)) {
                    setError(location, ERROR_ON_VARIABLE + var + LOCAL_VAR_SAME_NAME, yyline+1);
                }
            }
        }
    }

    /** 
      * isSameFamily: checks if 2 opening values are in the same opening mode family
      */
    private Boolean isSameFamily(final String opening1, final String opening2) throws JFlexException {
        return doneOpenings.contains(opening1) && doneOpenings.contains(opening2);
    }    
    
    /** 
      * isCurrentOpening: checks if the opening value (opening) is the current function opening 
      * mode or belongs to the same family of openings
      */
    private Boolean isCurrentOpening(final String opening) throws JFlexException {
        return opening.equals(currentOpening) || isSameFamily(opening, currentOpening); 
    }    

    /** 
      * isCurrentClosing: checks if the closing value is the current function closing mode
      */
    private Boolean isCurrentClosing(final String closing) throws JFlexException {
        Boolean returnValue = false;
        switch (closing) {
            case "}": 
                returnValue = currentOpening.equals("{");
                break;
            case ")":
                returnValue = currentOpening.equals("(");
                break;
            case "))":
                returnValue = currentOpening.equals("((");
                break;
            case "]]":
                returnValue = currentOpening.equals("[[");
                break;
            case "fi":
                returnValue = currentOpening.equals("if");
                break;
            case "esac":
                returnValue = currentOpening.equals("case");
                break;
            case "done":
                returnValue = doneOpenings.contains(currentOpening);
                break;
            default :
                returnValue = false;
        } 
        return returnValue;
    }    
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMNAMEHomonymy(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public COMNAMEHomonymy(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { yybegin(NAMING);
          }
        case 22: break;
        case 12: 
          { String var = yytext().substring(0, yytext().length()-1); checkVarFunc(var); yybegin(FUNCTIONSTATE);
          }
        case 23: break;
        case 14: 
          { String var = yytext().substring(0, yytext().length()-1); checkVarFunc(var);
          }
        case 24: break;
        case 17: 
          { yybegin(LOCAL);
          }
        case 25: break;
        case 16: 
          { location = yytext().substring(0,yytext().length()-2).trim();
								 functions.add(location);
								 functionPile.push(currentFuncInfo);
								 yybegin(BEGINFUNC);
          }
        case 26: break;
        case 7: 
          { yybegin(FUNCOMMENT);
          }
        case 27: break;
        case 20: 
          { functionPile.push(currentFuncInfo);
								 yybegin(NAMING);
          }
        case 28: break;
        case 3: 
          { yybegin(YYINITIAL);
          }
        case 29: break;
        case 9: 
          { if(isCurrentClosing(yytext())) nbOpenings--;
								 if(nbOpenings==0) {
									 if (!functionPile.empty()) {
										/* Reload higher level function information */ 
										currentFuncInfo = functionPile.pop();
										location = currentFuncInfo.getName();
										currentOpening = currentFuncInfo.getOpeningType();
										nbOpenings = currentFuncInfo.getNbOpenings();
										currentLocals = currentFuncInfo.getParentCurrentLocals();
										extraGlobals = currentFuncInfo.getParentExtraGlobals();
									 } else {						 
									    /* We are back at main program level */
										location = MAINPROGRAM;
										currentOpening = "";
										nbOpenings = 0;
										currentLocals.clear();
										extraGlobals.clear();
										yybegin(YYINITIAL);
									}
								 }
          }
        case 30: break;
        case 5: 
          { localVariables.add(yytext()); 
								 currentLocals.add(yytext()); 
								 if(functions.contains(yytext())) setError(location,ERROR_ON_VARIABLE + yytext() + FUNCT_SAME_NAME, yyline+1);
								 if(globalVariables.contains(yytext())) setError(location,ERROR_ON_VARIABLE + yytext() + ". There is a global variable with the same name.", yyline+1);						 
								 if(extraGlobals.contains(yytext())) setError(location,ERROR_ON_VARIABLE + yytext() + ". There is a local variable of encapsulation function with the same name.", yyline+1);						 
								 yybegin(FUNCTIONSTATE);
          }
        case 31: break;
        case 2: 
          { yybegin(COMMENT);
          }
        case 32: break;
        case 6: 
          { yybegin(FUNCTIONSTATE);
          }
        case 33: break;
        case 10: 
          { currentOpening = yytext(); 
								 nbOpenings=1; 
								 currentFuncInfo = new FunctionInfo(location, currentOpening, nbOpenings, currentLocals, extraGlobals);
								 extraGlobals.addAll(currentLocals);
								 currentLocals.clear();
								 yybegin(FUNCTIONSTATE);
          }
        case 34: break;
        case 21: 
          { yybegin(FUNCDECLARESTATE);
          }
        case 35: break;
        case 19: 
          { yybegin(DECLARESTATE);
          }
        case 36: break;
        case 11: 
          { String var = yytext();checkVar(var); yybegin(YYINITIAL);
          }
        case 37: break;
        case 13: 
          { String var = yytext().substring(0, yytext().length()-1); checkVar(var);
          }
        case 38: break;
        case 15: 
          { location = yytext().substring(0,yytext().length()-2).trim();
								 functions.add(location);  
								 yybegin(BEGINFUNC);
          }
        case 39: break;
        case 1: 
          { 
          }
        case 40: break;
        case 4: 
          { location = yytext(); functions.add(yytext()); yybegin(BEGINFUNC);
          }
        case 41: break;
        case 8: 
          { if(isCurrentOpening(yytext())) nbOpenings++;
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return getViolations();
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
