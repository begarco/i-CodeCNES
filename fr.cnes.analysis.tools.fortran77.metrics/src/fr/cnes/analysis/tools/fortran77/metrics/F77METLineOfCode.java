/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                              */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a metric checker for comment's rate. For 		*/
/* further information on this, we advise you to refer to CNES manual dealing	*/
/* with metrics.																*/
/* As many comments have been done on the NBLine.lex file, this file 			*/
/* will restrain its comments on modifications.									*/
/*																				*/
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.metrics;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractMetric;
import fr.cnes.analysis.tools.analyzer.datas.FileValue;
import fr.cnes.analysis.tools.analyzer.datas.FunctionValue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77METLineOfCode.lex</tt>
 */
public class F77METLineOfCode extends AbstractMetric {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\33\1\35\1\34\1\34\22\0\1\11\1\1\1\31"+
    "\4\0\1\30\2\0\1\1\5\0\12\27\7\0\1\21\1\17\1\2"+
    "\1\15\1\14\1\3\1\20\1\24\1\25\2\24\1\23\1\22\1\5"+
    "\1\10\1\12\1\24\1\13\1\26\1\6\1\4\5\24\4\0\1\27"+
    "\1\0\1\21\1\17\1\2\1\15\1\14\1\3\1\20\1\24\1\25"+
    "\2\24\1\23\1\22\1\5\1\10\1\12\1\24\1\13\1\26\1\6"+
    "\1\4\5\24\12\0\1\35\252\0\2\7\115\0\1\16\u1ea8\0\1\35"+
    "\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\6\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\12\4\13\1\11\2\13\2\11"+
    "\11\5\1\14\5\0\1\15\1\0\3\13\1\0\2\13"+
    "\1\0\1\16\1\0\3\5\1\0\2\5\6\0\2\13"+
    "\1\17\1\0\2\13\2\5\1\20\1\0\2\5\5\0"+
    "\3\13\2\0\2\13\1\0\2\13\3\5\3\0\2\5"+
    "\5\0\3\13\1\21\1\0\1\21\1\0\2\13\3\5"+
    "\2\0\2\5\6\0\3\13\1\0\2\13\1\0\3\5"+
    "\1\0\2\5\3\0\1\22\1\0\2\13\1\0\1\23"+
    "\1\13\1\0\2\5\1\0\1\24\1\5\3\0\1\13"+
    "\2\0\1\5\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\226\0\264"+
    "\0\322\0\360\0\u010e\0\u012c\0\u014a\0\226\0\226\0\226"+
    "\0\226\0\u0168\0\226\0\226\0\226\0\u0186\0\u01a4\0\u0186"+
    "\0\u01c2\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\u0294"+
    "\0\u02b2\0\u02d0\0\u02ee\0\u030c\0\u032a\0\u0348\0\u0366\0\u0384"+
    "\0\226\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u012c\0\226\0\u014a"+
    "\0\u041a\0\u0438\0\u0456\0\u0474\0\u0492\0\u04b0\0\u0258\0\226"+
    "\0\u0276\0\u04ce\0\u04ec\0\u050a\0\u0528\0\u0546\0\u0564\0\u0366"+
    "\0\u0384\0\u0582\0\u05a0\0\u05be\0\u05dc\0\u05fa\0\u0618\0\u0636"+
    "\0\u0654\0\u0672\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726"+
    "\0\u0744\0\u0762\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8\0\u0816"+
    "\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8\0\u0906"+
    "\0\u0924\0\u0942\0\u0960\0\u097e\0\u099c\0\u09ba\0\u09d8\0\u09f6"+
    "\0\u0a14\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa\0\u0ac8\0\u0ae6"+
    "\0\226\0\u0b04\0\u0186\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a"+
    "\0\u0bb8\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c\0\u0c8a"+
    "\0\u0ca8\0\u0cc6\0\u0ce4\0\u0d02\0\u0d20\0\u0d3e\0\u0d5c\0\u0d7a"+
    "\0\u0d98\0\u0db6\0\u0dd4\0\u0df2\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a"+
    "\0\u0e88\0\u0ea6\0\u0ec4\0\226\0\u0ee2\0\u0f00\0\u0f1e\0\u0f3c"+
    "\0\226\0\u0f5a\0\u0f78\0\u0f96\0\u0fb4\0\u0fd2\0\226\0\u0ff0"+
    "\0\u100e\0\u102c\0\u104a\0\u1068\0\u1086\0\u10a4\0\u10c2\0\u10e0"+
    "\0\u10fe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\6\6\1\11\3\6\1\12\3\6"+
    "\1\13\3\6\1\12\1\6\1\14\1\15\1\6\1\16"+
    "\2\17\33\20\1\21\2\17\2\20\5\22\1\20\1\22"+
    "\1\20\4\22\1\20\10\22\4\20\1\23\2\17\1\24"+
    "\1\25\1\26\1\27\3\30\1\24\1\30\1\20\1\31"+
    "\1\30\1\32\1\30\1\33\3\30\1\34\3\30\1\35"+
    "\1\24\1\36\1\37\3\20\1\17\2\20\1\40\1\41"+
    "\3\40\1\20\1\40\1\20\1\42\1\40\1\43\1\40"+
    "\1\44\3\40\1\45\3\40\1\46\1\20\1\47\1\50"+
    "\1\20\1\51\2\17\42\0\1\52\44\0\1\53\26\0"+
    "\1\54\41\0\1\55\25\0\30\56\1\57\5\56\31\60"+
    "\1\57\4\60\2\0\5\22\1\0\1\22\1\0\4\22"+
    "\1\0\11\22\10\0\5\30\1\0\1\30\1\0\4\30"+
    "\1\0\11\30\10\0\2\30\1\61\2\30\1\0\1\30"+
    "\1\0\4\30\1\0\11\30\10\0\5\30\1\0\1\30"+
    "\1\0\1\30\1\62\2\30\1\0\11\30\10\0\3\30"+
    "\1\63\1\30\1\0\1\30\1\0\4\30\1\0\11\30"+
    "\12\0\1\64\33\0\5\30\1\0\1\65\1\0\4\30"+
    "\1\0\11\30\10\0\2\30\1\66\2\30\1\0\1\30"+
    "\1\0\4\30\1\0\11\30\6\0\30\67\1\70\5\67"+
    "\31\71\1\70\4\71\2\0\5\40\1\0\1\40\1\0"+
    "\4\40\1\0\11\40\10\0\2\40\1\72\2\40\1\0"+
    "\1\40\1\0\4\40\1\0\11\40\10\0\5\40\1\0"+
    "\1\40\1\0\1\40\1\73\2\40\1\0\11\40\10\0"+
    "\3\40\1\74\1\40\1\0\1\40\1\0\4\40\1\0"+
    "\11\40\12\0\1\75\33\0\5\40\1\0\1\76\1\0"+
    "\4\40\1\0\11\40\10\0\2\40\1\77\2\40\1\0"+
    "\1\40\1\0\4\40\1\0\11\40\6\0\30\100\1\20"+
    "\5\100\31\101\1\20\4\101\5\0\1\102\40\0\1\103"+
    "\44\0\1\104\33\0\1\105\22\0\3\30\1\106\1\30"+
    "\1\0\1\30\1\0\4\30\1\0\11\30\10\0\5\30"+
    "\1\0\1\107\1\0\4\30\1\0\11\30\10\0\5\30"+
    "\1\0\1\30\1\0\3\30\1\110\1\0\11\30\25\0"+
    "\1\111\20\0\5\30\1\0\1\30\1\0\3\30\1\112"+
    "\1\0\11\30\10\0\5\30\1\0\1\30\1\0\4\30"+
    "\1\0\1\113\10\30\10\0\3\40\1\114\1\40\1\0"+
    "\1\40\1\0\4\40\1\0\11\40\10\0\5\40\1\0"+
    "\1\115\1\0\4\40\1\0\11\40\10\0\5\40\1\0"+
    "\1\40\1\0\3\40\1\116\1\0\11\40\25\0\1\117"+
    "\20\0\5\40\1\0\1\40\1\0\3\40\1\120\1\0"+
    "\11\40\10\0\5\40\1\0\1\40\1\0\4\40\1\0"+
    "\1\121\10\40\10\0\1\122\35\0\1\123\15\0\1\124"+
    "\30\0\1\125\26\0\1\126\33\0\1\127\4\30\1\0"+
    "\1\30\1\0\4\30\1\0\11\30\10\0\1\130\4\30"+
    "\1\0\1\30\1\0\4\30\1\0\1\30\1\131\7\30"+
    "\10\0\5\30\1\132\1\30\1\133\3\30\1\134\1\0"+
    "\6\30\1\135\2\30\21\0\1\136\24\0\2\30\1\137"+
    "\2\30\1\0\1\30\1\0\4\30\1\0\11\30\10\0"+
    "\5\30\1\0\1\30\1\0\1\30\1\140\2\30\1\0"+
    "\11\30\10\0\1\141\4\40\1\0\1\40\1\0\4\40"+
    "\1\0\11\40\10\0\1\142\4\40\1\0\1\40\1\0"+
    "\4\40\1\0\1\40\1\143\7\40\10\0\5\40\1\144"+
    "\1\40\1\145\4\40\1\0\11\40\21\0\1\146\24\0"+
    "\2\40\1\147\2\40\1\0\1\40\1\0\4\40\1\0"+
    "\11\40\10\0\5\40\1\0\1\40\1\0\1\40\1\150"+
    "\2\40\1\0\11\40\14\0\1\151\43\0\1\152\34\0"+
    "\1\153\32\0\1\154\50\0\1\155\14\0\4\30\1\156"+
    "\1\0\1\30\1\0\4\30\1\0\11\30\10\0\5\30"+
    "\1\0\1\30\1\0\2\30\1\157\1\30\1\0\11\30"+
    "\10\0\5\30\1\0\1\30\1\0\1\30\1\160\2\30"+
    "\1\0\11\30\11\0\1\161\41\0\1\132\1\0\1\133"+
    "\3\0\1\162\7\0\1\132\12\0\5\30\1\0\1\163"+
    "\1\0\4\30\1\0\11\30\10\0\1\30\1\163\3\30"+
    "\1\0\1\30\1\0\4\30\1\0\11\30\16\0\1\164"+
    "\27\0\5\30\1\0\1\30\1\0\4\30\1\0\4\30"+
    "\1\165\4\30\10\0\5\30\1\0\1\166\1\0\4\30"+
    "\1\0\11\30\10\0\4\40\1\167\1\0\1\40\1\0"+
    "\4\40\1\0\11\40\10\0\5\40\1\0\1\40\1\0"+
    "\2\40\1\170\1\40\1\0\11\40\10\0\5\40\1\0"+
    "\1\40\1\0\1\40\1\171\2\40\1\0\11\40\11\0"+
    "\1\20\41\0\1\144\1\0\1\145\3\0\1\172\7\0"+
    "\1\144\20\0\1\173\27\0\5\40\1\0\1\40\1\0"+
    "\4\40\1\0\4\40\1\174\4\40\10\0\5\40\1\0"+
    "\1\175\1\0\4\40\1\0\11\40\15\0\1\176\15\0"+
    "\1\176\25\0\1\177\41\0\1\200\20\0\1\201\45\0"+
    "\1\202\23\0\5\30\1\203\1\30\1\0\4\30\1\0"+
    "\6\30\1\204\2\30\10\0\5\30\1\0\1\30\1\0"+
    "\3\30\1\205\1\0\11\30\10\0\5\30\1\0\1\30"+
    "\1\0\4\30\1\0\2\30\1\206\6\30\16\0\1\161"+
    "\31\0\1\207\33\0\5\30\1\0\1\30\1\0\2\30"+
    "\1\210\1\30\1\0\11\30\10\0\2\30\1\211\2\30"+
    "\1\0\1\30\1\0\4\30\1\0\11\30\10\0\5\40"+
    "\1\212\1\40\1\0\4\40\1\0\6\40\1\213\2\40"+
    "\10\0\5\40\1\0\1\40\1\0\3\40\1\214\1\0"+
    "\11\40\10\0\5\40\1\0\1\40\1\0\4\40\1\0"+
    "\2\40\1\215\6\40\16\0\1\20\31\0\1\216\33\0"+
    "\5\40\1\0\1\40\1\0\2\40\1\217\1\40\1\0"+
    "\11\40\10\0\2\40\1\220\2\40\1\0\1\40\1\0"+
    "\4\40\1\0\11\40\16\0\1\221\31\0\1\222\53\0"+
    "\1\202\21\0\1\223\40\0\1\224\34\0\1\225\27\0"+
    "\5\30\1\0\1\226\1\0\4\30\1\0\11\30\10\0"+
    "\2\30\1\227\2\30\1\0\1\30\1\0\4\30\1\0"+
    "\11\30\10\0\5\30\1\0\1\30\1\0\4\30\1\0"+
    "\3\30\1\210\5\30\14\0\1\230\31\0\5\30\1\0"+
    "\1\30\1\231\4\30\1\0\11\30\10\0\4\30\1\232"+
    "\1\0\1\30\1\0\4\30\1\0\11\30\16\0\1\233"+
    "\27\0\5\40\1\0\1\234\1\0\4\40\1\0\11\40"+
    "\10\0\2\40\1\235\2\40\1\0\1\40\1\0\4\40"+
    "\1\0\11\40\10\0\5\40\1\0\1\40\1\0\4\40"+
    "\1\0\3\40\1\217\5\40\14\0\1\236\31\0\5\40"+
    "\1\0\1\40\1\237\4\40\1\0\11\40\10\0\4\40"+
    "\1\240\1\0\1\40\1\0\4\40\1\0\11\40\13\0"+
    "\1\202\43\0\1\155\31\0\1\241\15\0\1\241\15\0"+
    "\1\242\32\0\3\30\1\210\1\30\1\0\1\30\1\0"+
    "\4\30\1\0\11\30\10\0\5\30\1\0\1\30\1\0"+
    "\1\30\1\165\2\30\1\0\11\30\15\0\1\243\15\0"+
    "\1\243\12\0\5\30\1\243\1\30\1\0\4\30\1\0"+
    "\6\30\1\244\2\30\13\0\1\245\32\0\3\40\1\217"+
    "\1\40\1\0\1\40\1\0\4\40\1\0\11\40\10\0"+
    "\5\40\1\0\1\40\1\0\1\40\1\174\2\40\1\0"+
    "\11\40\15\0\1\246\15\0\1\246\12\0\5\40\1\246"+
    "\1\40\1\0\4\40\1\0\6\40\1\247\2\40\13\0"+
    "\1\155\41\0\1\231\31\0\1\250\32\0\3\30\1\165"+
    "\1\30\1\0\1\30\1\0\4\30\1\0\11\30\17\0"+
    "\1\237\31\0\1\251\32\0\3\40\1\174\1\40\1\0"+
    "\1\40\1\0\4\40\1\0\11\40\22\0\1\242\35\0"+
    "\1\245\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4380];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\6\1\4\11\1\1\3\11\23\1\1\11"+
    "\5\0\1\11\1\0\3\1\1\0\2\1\1\0\1\11"+
    "\1\0\3\1\1\0\2\1\6\0\3\1\1\0\5\1"+
    "\1\0\2\1\5\0\3\1\2\0\2\1\1\0\5\1"+
    "\3\0\2\1\5\0\3\1\1\11\1\0\1\1\1\0"+
    "\5\1\2\0\2\1\6\0\3\1\1\0\2\1\1\0"+
    "\3\1\1\0\2\1\3\0\1\11\1\0\2\1\1\0"+
    "\1\11\1\1\1\0\2\1\1\0\1\11\1\1\3\0"+
    "\1\1\2\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    private static final Logger LOGGER = Logger.getLogger(F77METLineOfCode.class.getName());
    
	String location = "MAIN PROGRAM";
	FileValue fileValue;
	float numLines = 0;
	float numTotal = 0;
	int functionLine = 0;
    String parsedFileName;
	
	
	public F77METLineOfCode(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
        LOGGER.finest("begin method setInputFile");
		fileValue = new FileValue(this.getContribution().getAttribute("id"), this.getContribution().getAttribute("name"), file);
        this.parsedFileName = file.toString();
		this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");       
	}
	
	private void endLocation() {
        LOGGER.finest("begin method endLocation");
		final List<FunctionValue> list =
                this.fileValue.getFunctionValues();
        if (list.isEmpty()) {
            list.add(new FunctionValue(this.location, numLines, functionLine+1));
        } else {
            final FunctionValue last = list.get(list.size() - 1);
            if (last.getLocation().equals(this.location)) {
                last.setValue(numLines);
            } else {
				list.add(new FunctionValue(this.location, numLines, functionLine+1));
			}
        }
		
        LOGGER.finest("end method endLocation");
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77METLineOfCode(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public FileValue run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	fileValue.setValue(numTotal);
	return fileValue;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.finest("YYINITIAL -> LINE (Transition : .)");
			 	                   yybegin(LINE);
            }
          case 21: break;
          case 2: 
            { LOGGER.finest("YYINITIAL -> COMMENT (Transition : COMMENT_WORD)");
                			  	  yybegin(COMMENT);
            }
          case 22: break;
          case 3: 
            { LOGGER.finest("YYINITIAL -> NEW_LINE (Transition : \\n)");
			 	                   yybegin(NEW_LINE);
            }
          case 23: break;
          case 4: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+yyline+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 24: break;
          case 5: 
            { 
            }
          case 25: break;
          case 6: 
            { LOGGER.finest("COMMENT -> NEW_LINE (Transition : \\n)");
                			   	     yybegin(NEW_LINE);
            }
          case 26: break;
          case 7: 
            { numLines = 1; 
                    			     numTotal++;
                    			     location = location + " " + yytext();
                    			     functionLine=yyline; 
                    			     LOGGER.finest("Setting values [numLines = "+numLines+" | numTotal = "+numTotal+" | location = "+location+" | functionLine = "+functionLine+"]");
                    			     LOGGER.finest("NAMING -> COMMENT (Transition : VAR)");
    							     yybegin(COMMENT);
            }
          case 27: break;
          case 8: 
            { LOGGER.finest("NAMING -> NEW_LINE (Transition : \\n)");
                		    	     yybegin(NEW_LINE);
            }
          case 28: break;
          case 9: 
            { LOGGER.finest("NEW_LINE -> LINE (Transition : .)");
                                    yybegin(LINE);
            }
          case 29: break;
          case 10: 
            { LOGGER.finest("NEW_LINE -> COMMENT (Transition : COMMENT_WORD)");
                				    yybegin(COMMENT);
            }
          case 30: break;
          case 11: 
            { LOGGER.finest("NEW_LINE -> LINE (Transition : VAR)");
                				    yybegin(LINE);
            }
          case 31: break;
          case 12: 
            { numLines++;
                    		      	numTotal++;
                    		      	LOGGER.finest("Setting values [numLines = "+numLines+" | numTotal = "+numTotal+"]");
                    		      	LOGGER.finest("LINE -> NEW_LINE (Transition : \\n)");
                    				yybegin(NEW_LINE);
            }
          case 32: break;
          case 13: 
            { LOGGER.finest("YYINITIAL -> LINE (Transition : STRING)");
                				    yybegin(LINE);
            }
          case 33: break;
          case 14: 
            { LOGGER.finest("NEW_LINE -> LINE (Transition : STRING)");
                				    yybegin(LINE);
            }
          case 34: break;
          case 15: 
            { numLines++;
                    				numTotal++;
                    				LOGGER.finest("Setting values [numLines = "+numLines+" | numTotal = "+numTotal+"]");
                    				endLocation();
                    				LOGGER.finest("NEW_LINE -> COMMENT (Transition : END)");
                    				yybegin(COMMENT);
            }
          case 35: break;
          case 16: 
            { numLines++;
                    				numTotal++;
                    				LOGGER.finest("Setting values [numLines = "+numLines+" | numTotal = "+numTotal+"]");
                                    endLocation();
                    				LOGGER.finest("LINE -> COMMENT (Transition : END)");
                    				yybegin(COMMENT);
            }
          case 36: break;
          case 17: 
            { LOGGER.finest("NEW_LINE -> LINE (Transition : CLOSING)");
                				    yybegin(LINE);
            }
          case 37: break;
          case 18: 
            { LOGGER.finest("YYINITIAL -> NAMING (Transition : TYPE)");
				                    location = yytext();
								    yybegin(NAMING);
            }
          case 38: break;
          case 19: 
            { location = yytext();
                    		  		LOGGER.finest("Setting value [location = "+location+"]");
                    		  		LOGGER.finest("NEW_LINE -> NAMING (Transition : TYPE)");
                    		  		yybegin(NAMING);
            }
          case 39: break;
          case 20: 
            { location = yytext();
                                    LOGGER.finest("Setting value [location = "+location+"]");
    								LOGGER.finest("LINE -> NAMING (Transition : TYPE)");
    								yybegin(NAMING);
            }
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
