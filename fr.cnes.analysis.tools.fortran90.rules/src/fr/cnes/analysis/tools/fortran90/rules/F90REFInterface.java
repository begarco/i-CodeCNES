/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.REF.Interface rule. */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90REFInterface.lex</tt>
 */
public class F90REFInterface extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int CALLING = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\32\1\33\1\33\1\33\22\0\1\23\1\1\1\31\4\0"+
    "\1\30\10\0\12\27\7\0\1\20\1\16\1\5\1\14\1\13\1\2"+
    "\1\17\1\24\1\25\2\24\1\22\1\21\1\4\1\10\1\11\1\24"+
    "\1\12\1\26\1\6\1\3\5\24\4\0\1\27\1\0\1\20\1\16"+
    "\1\5\1\14\1\13\1\2\1\17\1\24\1\25\2\24\1\22\1\21"+
    "\1\4\1\10\1\11\1\24\1\12\1\26\1\6\1\3\5\24\12\0"+
    "\1\33\252\0\2\7\115\0\1\15\u1ea8\0\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\7\1\1\3\1\4\1\5\1\6"+
    "\1\7\14\5\1\10\7\0\7\5\7\0\7\5\6\0"+
    "\1\5\1\11\3\5\1\0\1\5\1\0\1\5\1\0"+
    "\5\5\6\0\4\5\1\0\1\5\1\0\1\5\3\0"+
    "\5\5\5\0\1\12\4\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\12\2\5\4\0\3\5\1\0\2\5"+
    "\1\0\1\5\3\0\4\5\1\0\1\5\1\0\2\5"+
    "\1\0\1\5\4\0\3\5\1\0\1\5\1\0\2\5"+
    "\1\0\1\13\4\0\2\5\1\0\1\5\1\0\1\5"+
    "\3\0\1\13\2\5\2\0\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\250"+
    "\0\304\0\340\0\374\0\u0118\0\u0134\0\u0150\0\u016c\0\250"+
    "\0\250\0\250\0\u0188\0\250\0\u01a4\0\u01c0\0\u01dc\0\u01f8"+
    "\0\u0214\0\u0230\0\u024c\0\u0268\0\340\0\u0118\0\u0284\0\u02a0"+
    "\0\u02bc\0\u02d8\0\u02f4\0\u0310\0\u032c\0\u0348\0\u0150\0\u016c"+
    "\0\u0364\0\u0380\0\u039c\0\u03b8\0\u03d4\0\u03f0\0\u040c\0\u0284"+
    "\0\u02a0\0\u0428\0\u0444\0\u0460\0\u047c\0\u0498\0\u04b4\0\u04d0"+
    "\0\u04ec\0\u0508\0\u0524\0\u0540\0\u055c\0\u0578\0\u0594\0\u05b0"+
    "\0\u05cc\0\u05e8\0\u0604\0\u0620\0\u01c0\0\u063c\0\u0658\0\u0674"+
    "\0\u0690\0\u06ac\0\u06c8\0\u06e4\0\u0700\0\u071c\0\u0738\0\u0754"+
    "\0\u0770\0\u078c\0\u07a8\0\u07c4\0\u07e0\0\u07fc\0\u0818\0\u0834"+
    "\0\u0850\0\u086c\0\u0888\0\u08a4\0\u08c0\0\u08dc\0\u08f8\0\u0914"+
    "\0\u0930\0\u094c\0\u0968\0\u0984\0\u09a0\0\u09bc\0\u09d8\0\u09f4"+
    "\0\u0a10\0\u0a2c\0\u0a48\0\u0a64\0\u0a80\0\250\0\u0a9c\0\u0ab8"+
    "\0\u0ad4\0\u0af0\0\u0b0c\0\u0b28\0\u0b44\0\u0b60\0\u0b7c\0\u0b98"+
    "\0\u0bb4\0\u0bd0\0\u0bec\0\u01c0\0\u0c08\0\u0c24\0\u0c40\0\u0c5c"+
    "\0\u0c78\0\u0c94\0\u0cb0\0\u0ccc\0\u0ce8\0\u0d04\0\u0d20\0\u0d3c"+
    "\0\u0d58\0\u0d74\0\u0d90\0\u0dac\0\u0dc8\0\u0de4\0\u0e00\0\u0e1c"+
    "\0\u0e38\0\u0e54\0\u0e70\0\u0e8c\0\u0ea8\0\u0ec4\0\u0ee0\0\u0efc"+
    "\0\u0f18\0\u0f34\0\u0f50\0\u0f6c\0\u0f88\0\u0fa4\0\u0fc0\0\u0fdc"+
    "\0\u0ff8\0\u1014\0\u1030\0\u104c\0\u1068\0\u01c0\0\u1084\0\u10a0"+
    "\0\u10bc\0\u10d8\0\u10f4\0\u1110\0\u112c\0\u1148\0\u1164\0\u1180"+
    "\0\u119c\0\u11b8\0\u11d4\0\250\0\u11f0\0\u120c\0\u1228\0\u1244"+
    "\0\u1260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\4\7\1\12\1\7\1\13\3\7"+
    "\1\14\3\7\1\15\3\7\1\12\1\14\1\7\1\16"+
    "\1\17\1\20\1\21\1\22\1\10\30\22\1\20\1\21"+
    "\1\22\1\10\5\23\1\22\5\23\1\22\5\23\1\22"+
    "\3\23\3\22\1\24\1\21\1\7\1\10\1\25\2\26"+
    "\1\27\1\26\1\12\1\26\1\30\1\26\1\31\1\26"+
    "\1\14\3\26\1\32\1\26\1\7\1\26\1\33\1\34"+
    "\1\7\1\16\1\17\1\22\1\21\1\22\1\10\1\25"+
    "\2\26\1\27\1\26\1\35\1\26\1\30\1\26\1\31"+
    "\1\26\1\36\3\26\1\32\1\26\1\22\1\26\1\33"+
    "\1\34\1\22\1\37\1\40\1\20\1\21\1\22\1\10"+
    "\5\41\1\22\5\41\1\22\5\41\1\22\3\41\3\22"+
    "\1\20\1\21\37\0\1\42\34\0\1\43\41\0\1\44"+
    "\24\0\1\45\40\0\1\46\23\0\30\47\1\7\3\47"+
    "\31\50\1\7\2\50\2\0\5\23\1\0\5\23\1\0"+
    "\5\23\1\0\4\23\6\0\1\26\1\51\3\26\1\0"+
    "\5\26\1\0\5\26\1\0\4\26\6\0\5\26\1\0"+
    "\5\26\1\0\5\26\1\0\4\26\6\0\5\26\1\0"+
    "\5\26\1\0\2\26\1\52\2\26\1\0\4\26\6\0"+
    "\5\26\1\0\2\26\1\53\2\26\1\0\5\26\1\0"+
    "\4\26\6\0\2\26\1\54\2\26\1\0\5\26\1\0"+
    "\5\26\1\0\4\26\6\0\5\26\1\0\1\55\4\26"+
    "\1\0\5\26\1\0\4\26\6\0\2\26\1\56\2\26"+
    "\1\0\5\26\1\0\5\26\1\0\4\26\6\0\1\26"+
    "\1\57\3\26\1\0\5\26\1\0\5\26\1\0\4\26"+
    "\4\0\30\60\1\22\3\60\31\61\1\22\2\61\2\0"+
    "\5\41\1\0\5\41\1\0\5\41\1\0\4\41\10\0"+
    "\1\62\35\0\1\63\35\0\1\64\41\0\1\65\31\0"+
    "\1\66\21\0\2\26\1\67\2\26\1\0\5\26\1\0"+
    "\5\26\1\0\4\26\6\0\5\26\1\0\5\26\1\0"+
    "\4\26\1\70\1\0\4\26\6\0\5\26\1\0\1\71"+
    "\4\26\1\0\5\26\1\0\4\26\6\0\5\26\1\0"+
    "\4\26\1\72\1\0\5\26\1\0\4\26\6\0\5\26"+
    "\1\0\4\26\1\73\1\0\5\26\1\0\4\26\6\0"+
    "\4\26\1\74\1\0\5\26\1\0\5\26\1\0\4\26"+
    "\6\0\5\26\1\0\5\26\1\0\1\75\4\26\1\0"+
    "\4\26\11\0\1\76\41\0\1\77\25\0\1\100\11\0"+
    "\1\101\26\0\1\102\24\0\1\103\32\0\3\26\1\104"+
    "\1\26\1\0\5\26\1\0\5\26\1\0\4\26\6\0"+
    "\5\26\1\0\5\26\1\0\4\26\1\105\1\0\4\26"+
    "\6\0\3\26\1\106\1\26\1\0\5\26\1\0\1\26"+
    "\1\107\3\26\1\0\4\26\6\0\1\110\4\26\1\111"+
    "\1\26\1\112\3\26\1\113\3\26\1\114\1\26\1\115"+
    "\1\26\1\116\1\117\1\26\6\0\1\26\1\120\3\26"+
    "\1\0\5\26\1\0\5\26\1\0\4\26\6\0\5\26"+
    "\1\0\3\26\1\121\1\26\1\0\5\26\1\0\4\26"+
    "\6\0\5\26\1\0\2\26\1\122\2\26\1\0\5\26"+
    "\1\0\4\26\12\0\1\123\37\0\1\124\34\0\1\125"+
    "\32\0\1\126\31\0\1\127\45\0\1\130\13\0\4\26"+
    "\1\131\1\0\5\26\1\0\5\26\1\0\4\26\6\0"+
    "\5\26\1\0\3\26\1\132\1\26\1\0\5\26\1\0"+
    "\4\26\6\0\5\26\1\0\2\26\1\133\2\26\1\0"+
    "\5\26\1\0\4\26\6\0\1\26\1\134\3\26\1\0"+
    "\5\26\1\0\5\26\1\0\4\26\10\0\1\135\31\0"+
    "\5\26\1\0\2\26\1\136\2\26\1\0\5\26\1\0"+
    "\4\26\7\0\1\137\32\0\5\26\1\0\1\140\4\26"+
    "\1\0\5\26\1\0\4\26\6\0\1\141\4\0\1\111"+
    "\1\0\1\142\3\0\1\113\3\0\1\143\1\0\1\115"+
    "\1\0\1\111\1\113\7\0\2\26\1\144\2\26\1\0"+
    "\5\26\1\0\5\26\1\0\4\26\6\0\1\26\1\145"+
    "\3\26\1\0\5\26\1\0\5\26\1\0\4\26\6\0"+
    "\5\26\1\0\5\26\1\0\4\26\1\146\1\0\4\26"+
    "\6\0\5\26\1\0\2\26\1\147\2\26\1\0\5\26"+
    "\1\0\4\26\6\0\5\26\1\0\1\150\4\26\1\0"+
    "\5\26\1\0\4\26\13\0\1\151\15\0\1\151\10\0"+
    "\1\152\45\0\1\153\37\0\1\154\16\0\1\155\43\0"+
    "\1\156\22\0\5\26\1\151\5\26\1\0\5\26\1\0"+
    "\1\26\1\157\2\26\6\0\5\26\1\0\4\26\1\160"+
    "\1\0\5\26\1\0\4\26\6\0\5\26\1\0\5\26"+
    "\1\0\2\26\1\161\2\26\1\0\4\26\6\0\2\26"+
    "\1\162\2\26\1\0\5\26\1\0\5\26\1\0\4\26"+
    "\12\0\1\163\27\0\5\26\1\0\1\164\4\26\1\0"+
    "\5\26\1\0\4\26\22\0\1\165\17\0\5\26\1\0"+
    "\4\26\1\166\1\0\5\26\1\0\4\26\7\0\1\167"+
    "\42\0\1\170\31\0\1\171\25\0\4\26\1\172\1\0"+
    "\5\26\1\0\5\26\1\0\4\26\6\0\5\26\1\0"+
    "\5\26\1\0\1\173\4\26\1\0\4\26\6\0\5\26"+
    "\1\0\3\26\1\174\1\26\1\0\5\26\1\0\4\26"+
    "\6\0\1\175\4\26\1\0\5\26\1\0\5\26\1\0"+
    "\4\26\6\0\1\26\1\176\3\26\1\0\5\26\1\0"+
    "\5\26\1\0\4\26\14\0\1\177\43\0\1\200\16\0"+
    "\1\201\51\0\1\156\20\0\1\202\27\0\5\26\1\0"+
    "\1\203\4\26\1\0\5\26\1\0\4\26\6\0\1\26"+
    "\1\204\3\26\1\0\5\26\1\0\5\26\1\0\4\26"+
    "\6\0\5\26\1\0\5\26\1\0\3\26\1\174\1\26"+
    "\1\0\4\26\6\0\3\26\1\205\1\26\1\0\5\26"+
    "\1\0\5\26\1\0\4\26\17\0\1\206\22\0\3\26"+
    "\1\207\1\26\1\0\5\26\1\0\1\26\1\210\3\26"+
    "\1\0\4\26\16\0\1\211\23\0\1\26\1\212\3\26"+
    "\1\0\5\26\1\0\5\26\1\0\4\26\10\0\1\213"+
    "\37\0\1\214\37\0\1\215\21\0\5\26\1\0\3\26"+
    "\1\216\1\26\1\0\5\26\1\0\4\26\6\0\5\26"+
    "\1\0\2\26\1\217\2\26\1\0\5\26\1\0\4\26"+
    "\6\0\5\26\1\0\5\26\1\0\2\26\1\220\2\26"+
    "\1\0\4\26\6\0\4\26\1\221\1\0\5\26\1\0"+
    "\5\26\1\0\4\26\10\0\1\156\34\0\1\130\40\0"+
    "\1\130\30\0\1\222\15\0\1\222\10\0\2\26\1\174"+
    "\2\26\1\0\5\26\1\0\5\26\1\0\4\26\6\0"+
    "\5\26\1\0\2\26\1\146\2\26\1\0\5\26\1\0"+
    "\4\26\6\0\4\26\1\223\1\0\5\26\1\0\5\26"+
    "\1\0\4\26\16\0\1\224\23\0\5\26\1\0\3\26"+
    "\1\225\1\26\1\0\5\26\1\0\4\26\6\0\5\26"+
    "\1\0\2\26\1\226\2\26\1\0\5\26\1\0\4\26"+
    "\14\0\1\227\25\0\5\26\1\0\5\26\1\0\4\26"+
    "\1\230\1\0\4\26\11\0\1\231\33\0\1\232\11\0"+
    "\1\233\17\0\1\234\32\0\5\26\1\0\2\26\1\235"+
    "\2\26\1\0\5\26\1\0\4\26\6\0\5\26\1\0"+
    "\1\236\4\26\1\0\5\26\1\0\4\26\6\0\3\26"+
    "\1\146\1\26\1\0\5\26\1\0\5\26\1\0\4\26"+
    "\6\0\5\26\1\222\5\26\1\0\5\26\1\0\1\26"+
    "\1\237\2\26\10\0\1\130\31\0\5\26\1\240\5\26"+
    "\1\0\5\26\1\0\1\26\1\241\2\26\6\0\1\242"+
    "\33\0\5\26\1\0\4\26\1\243\1\0\5\26\1\0"+
    "\4\26\6\0\5\26\1\0\5\26\1\0\2\26\1\244"+
    "\2\26\1\0\4\26\7\0\1\245\32\0\5\26\1\0"+
    "\3\26\1\246\1\26\1\0\5\26\1\0\4\26\12\0"+
    "\1\247\40\0\1\250\32\0\1\251\43\0\1\252\13\0"+
    "\1\253\4\26\1\0\5\26\1\0\5\26\1\0\4\26"+
    "\6\0\1\26\1\254\3\26\1\0\5\26\1\0\5\26"+
    "\1\0\4\26\6\0\2\26\1\146\2\26\1\0\5\26"+
    "\1\0\5\26\1\0\4\26\14\0\1\255\25\0\5\26"+
    "\1\0\1\256\4\26\1\0\5\26\1\0\4\26\24\0"+
    "\1\257\15\0\1\26\1\260\3\26\1\0\5\26\1\0"+
    "\5\26\1\0\4\26\6\0\5\26\1\0\5\26\1\0"+
    "\3\26\1\246\1\26\1\0\4\26\12\0\1\261\34\0"+
    "\1\240\15\0\1\240\22\0\1\262\37\0\1\263\26\0"+
    "\1\264\22\0\5\26\1\0\5\26\1\0\2\26\1\265"+
    "\2\26\1\0\4\26\6\0\4\26\1\266\1\0\5\26"+
    "\1\0\5\26\1\0\4\26\10\0\1\264\31\0\2\26"+
    "\1\246\2\26\1\0\5\26\1\0\5\26\1\0\4\26"+
    "\11\0\1\252\30\0\5\26\1\0\2\26\1\230\2\26"+
    "\1\0\5\26\1\0\4\26\13\0\1\267\15\0\1\267"+
    "\11\0\1\270\51\0\1\264\14\0\3\26\1\230\1\26"+
    "\1\0\5\26\1\0\5\26\1\0\4\26\6\0\5\26"+
    "\1\267\5\26\1\0\5\26\1\0\1\26\1\271\2\26"+
    "\10\0\1\252\41\0\1\252\23\0\2\26\1\230\2\26"+
    "\1\0\5\26\1\0\5\26\1\0\4\26\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4732];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\7\1\3\11\1\1\1\11\15\1\7\0"+
    "\7\1\7\0\7\1\6\0\5\1\1\0\1\1\1\0"+
    "\1\1\1\0\5\1\6\0\4\1\1\0\1\1\1\0"+
    "\1\1\3\0\5\1\5\0\1\11\4\1\1\0\1\1"+
    "\1\0\1\1\3\0\5\1\4\0\3\1\1\0\2\1"+
    "\1\0\1\1\3\0\4\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\4\0\3\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\4\0\2\1\1\0\1\1\1\0\1\1"+
    "\3\0\1\11\2\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM"; 
 	List<Violation> list = new LinkedList<Violation>();
 	List<String> call     = new LinkedList<String>();
 	List<String> callFrom = new LinkedList<String>();
 	List<String> locList  = new LinkedList<String>();
 	List<String> allLocs  = new LinkedList<String>();
 	List<Integer> lines   = new LinkedList<Integer>();
 	

	
	public F90REFInterface() {

    }
    
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	
	
	private void checkCalls(String word) {
		for (int i = 0; i < call.size(); i++) {
			if(call.get(i).equals(word) && locList.contains(callFrom.get(i))) {
				call.remove(i);
				callFrom.remove(i);
				lines.remove(i);
			}
		}
	}
	
	/** Print the error that appears in the list **/
	private void printErrors() throws JFlexException {
		/** Only print the functions declared in this file **/
		for (int i = 0; i < call.size(); i++) {
			if(allLocs.contains(call.get(i))) 
				setError(callFrom.get(i),"The function " + call.get(i) + " is not visible in this point.", lines.get(i));
		}
	}

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90REFInterface(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {  printErrors();
  
 return getViolations(); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 12: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 13: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 14: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 15: break;
          case 5: 
            { 
            }
          case 16: break;
          case 6: 
            { String text = yytext().toLowerCase().trim();
								 if(!location.toLowerCase().trim().equals("module") || !text.equals("procedure")) {
								 	location = location + " " + text;
								 	locList.add(location); 
								 	allLocs.add(text);
								 }
								 checkCalls(text);
								 yybegin(COMMENT);
            }
          case 17: break;
          case 7: 
            { locList.add(location); yybegin(NEW_LINE);
            }
          case 18: break;
          case 8: 
            { String called = yytext().toLowerCase();
								 /** If this function isdeclared before in the file -> visible -> no error **/
								 if (!allLocs.contains(called) && locList.size()==1) {
								 	call.add(yytext().toLowerCase()); 
								 	callFrom.add(locList.get(locList.size()-1)); 
								 	lines.add(yyline+1); yybegin(COMMENT);
								 }
            }
          case 19: break;
          case 9: 
            { yybegin(CALLING);
            }
          case 20: break;
          case 10: 
            { location = yytext(); yybegin(NAMING);
            }
          case 21: break;
          case 11: 
            { locList.remove(locList.size()-1);
            }
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
