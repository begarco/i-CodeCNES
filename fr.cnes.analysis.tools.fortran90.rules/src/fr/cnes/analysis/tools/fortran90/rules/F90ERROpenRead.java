/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.ERR.OpenRead rule	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;

import java.util.List;

import org.eclipse.core.runtime.IPath;




import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90ERROpenRead.lex</tt>
 */
public class F90ERROpenRead extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int OPEN = 10;
  public static final int READ = 12;
  public static final int IF_STATE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\2\1\36\1\37\1\35\22\0\1\27\1\1\1\32"+
    "\1\1\2\0\1\41\1\31\1\33\1\0\1\40\5\0\12\24\3\0"+
    "\1\34\3\0\1\21\1\17\1\6\1\15\1\14\1\3\1\20\1\30"+
    "\1\25\2\30\1\23\1\22\1\5\1\11\1\12\1\30\1\13\1\26"+
    "\1\7\1\4\5\30\4\0\1\24\1\0\1\21\1\17\1\6\1\15"+
    "\1\14\1\3\1\20\1\30\1\25\2\30\1\23\1\22\1\5\1\11"+
    "\1\12\1\30\1\13\1\26\1\7\1\4\5\30\12\0\1\36\252\0"+
    "\2\10\115\0\1\16\u1ea8\0\1\36\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\17\1\1\2\1\1\1\3\1\2\1\4\1\1"+
    "\1\5\3\6\1\1\1\6\2\1\1\6\1\7\1\10"+
    "\3\11\1\12\1\1\3\12\1\1\3\0\3\1\2\0"+
    "\1\1\1\0\3\1\1\0\1\1\3\0\2\1\5\0"+
    "\2\6\1\0\1\6\2\11\1\0\3\12\2\0\2\1"+
    "\2\0\1\1\1\0\3\1\1\0\1\1\3\0\2\1"+
    "\3\0\1\6\1\0\1\6\1\0\1\6\2\11\1\0"+
    "\2\12\2\0\2\1\2\0\1\1\1\0\4\1\1\0"+
    "\1\1\3\0\2\1\2\0\2\13\1\1\1\0\1\6"+
    "\1\1\1\11\1\14\2\12\2\0\2\1\2\0\1\1"+
    "\2\0\1\15\2\1\1\0\1\16\1\0\1\1\4\0"+
    "\2\1\3\0\1\6\1\11\1\0\1\17\1\0\1\20"+
    "\2\0\1\1\1\0\1\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\21\4\0\2\1\3\0\1\6\1\11\4\0"+
    "\1\1\2\0\1\1\1\0\1\1\3\0\3\1\6\0"+
    "\1\21\2\0\1\1\3\0\1\1\2\0\1\22\41\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\356\0\u02ec"+
    "\0\u02ec\0\u02ec\0\u030e\0\u0330\0\u02ec\0\u0352\0\u0374\0\u0396"+
    "\0\u03b8\0\u03da\0\u03fc\0\u041e\0\u02ec\0\u0440\0\u02ec\0\u0462"+
    "\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0440"+
    "\0\u0572\0\u0330\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\u061c\0\u063e"+
    "\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e"+
    "\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u03fc\0\u07f8\0\u041e\0\u081a"+
    "\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a"+
    "\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a"+
    "\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a"+
    "\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a"+
    "\0\u0c7c\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u0d48\0\u0d6a"+
    "\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\u0e7a"+
    "\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24\0\u0f46\0\u0f68\0\u0f8a"+
    "\0\u0fac\0\u0fce\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\u02ec"+
    "\0\u0396\0\u0396\0\u109a\0\u10bc\0\u0462\0\u10de\0\u1100\0\u1122"+
    "\0\u1144\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\u1210\0\u1232"+
    "\0\u1254\0\u1276\0\u02ec\0\u1298\0\u12ba\0\u12dc\0\u02ec\0\u12fe"+
    "\0\u1320\0\u1342\0\u1364\0\u1386\0\u13a8\0\u13ca\0\u13ec\0\u140e"+
    "\0\u1430\0\u1452\0\u1474\0\u1496\0\u14b8\0\u02ec\0\u14da\0\u02ec"+
    "\0\u14fc\0\u151e\0\u1540\0\u1562\0\u1584\0\u15a6\0\u15c8\0\u15ea"+
    "\0\u160c\0\u162e\0\u1650\0\u1672\0\u05fa\0\u1694\0\u16b6\0\u16d8"+
    "\0\u16fa\0\u171c\0\u173e\0\u1760\0\u1782\0\u17a4\0\u17c6\0\u17e8"+
    "\0\u180a\0\u182c\0\u184e\0\u1870\0\u1892\0\u18b4\0\u18d6\0\u18f8"+
    "\0\u191a\0\u193c\0\u195e\0\u1980\0\u19a2\0\u19c4\0\u19e6\0\u1a08"+
    "\0\u1a2a\0\u1a4c\0\u1a6e\0\u1a90\0\u1ab2\0\u1ad4\0\u19c4\0\u1af6"+
    "\0\u1b18\0\u1b3a\0\u1b5c\0\u1b7e\0\u1ba0\0\u1bc2\0\u1be4\0\u1c06"+
    "\0\u1c28\0\u1c4a\0\u1c6c\0\u1c8e\0\u1cb0\0\u1cd2\0\u1cf4\0\u1d16"+
    "\0\u1d38\0\u1d5a\0\u1d7c\0\u1d9e\0\u1dc0\0\u1de2\0\u1e04\0\u1e26"+
    "\0\u1e48\0\u1e6a\0\u1e8c\0\u1eae\0\u1ed0\0\u1ef2\0\u1f14\0\u1f36"+
    "\0\u1f58\0\u1f7a\0\u1f9c\0\u1fbe\0\u1fe0\0\u2002\0\u2024\0\u2046"+
    "\0\u2068\0\u208a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\10\1\12\4\13\1\14\1\15\1\16"+
    "\1\17\2\13\1\20\3\13\1\21\1\13\1\22\1\23"+
    "\1\24\1\10\1\13\1\25\1\26\3\10\2\27\2\10"+
    "\2\30\1\31\32\30\1\31\2\32\4\30\1\31\5\33"+
    "\1\30\5\33\1\30\5\33\1\30\2\33\1\30\1\33"+
    "\4\30\1\31\2\32\2\30\42\32\1\30\1\34\1\35"+
    "\1\36\1\37\3\40\1\41\5\40\1\30\5\40\1\30"+
    "\1\42\1\40\1\30\1\40\1\43\1\44\2\30\3\32"+
    "\1\45\1\46\1\30\1\34\1\47\1\50\1\51\3\50"+
    "\1\41\5\50\1\30\5\50\1\30\1\52\1\50\1\30"+
    "\1\50\1\43\1\44\2\30\3\32\1\30\1\46\1\30"+
    "\1\34\1\30\5\53\1\54\1\55\1\53\1\56\2\53"+
    "\1\30\5\53\1\30\1\57\1\53\1\30\1\53\5\30"+
    "\2\32\1\30\1\60\22\0\1\61\17\0\2\62\1\30"+
    "\17\62\1\63\17\62\3\0\1\64\1\65\3\66\1\67"+
    "\5\66\1\70\7\66\1\71\1\0\1\66\14\0\1\64"+
    "\4\66\1\67\5\66\1\70\7\66\1\71\1\0\1\66"+
    "\16\0\1\72\14\0\1\61\22\0\1\64\4\66\1\67"+
    "\1\66\1\73\3\66\1\70\7\66\1\71\1\0\1\66"+
    "\14\0\1\64\4\66\1\67\2\66\1\74\2\66\1\70"+
    "\7\66\1\71\1\0\1\66\14\0\1\64\4\66\1\67"+
    "\3\66\1\75\1\66\1\70\7\66\1\71\1\0\1\66"+
    "\15\0\1\76\15\0\1\61\22\0\1\64\4\66\1\67"+
    "\1\77\4\66\1\70\7\66\1\71\1\0\1\66\14\0"+
    "\1\100\4\0\1\67\1\0\1\101\3\0\1\70\3\0"+
    "\1\102\2\0\1\67\1\70\16\0\1\64\1\66\1\103"+
    "\2\66\1\67\5\66\1\70\7\66\1\71\1\0\1\66"+
    "\14\0\1\64\1\104\3\66\1\67\5\66\1\70\7\66"+
    "\1\71\1\0\1\66\11\0\22\105\1\106\6\105\1\30"+
    "\10\105\22\107\1\110\7\107\1\30\7\107\45\0\5\33"+
    "\1\0\5\33\1\0\10\33\1\0\1\33\11\0\2\62"+
    "\1\30\37\62\3\0\5\40\1\111\5\40\1\0\6\40"+
    "\1\112\1\40\1\0\1\40\14\0\2\40\1\113\2\40"+
    "\1\0\5\40\1\0\10\40\1\0\1\40\14\0\5\40"+
    "\1\0\5\40\1\0\10\40\1\0\1\40\22\0\1\114"+
    "\33\0\5\40\1\0\1\115\4\40\1\0\10\40\1\0"+
    "\1\40\11\0\31\105\1\30\10\105\32\107\1\30\7\107"+
    "\2\30\1\0\24\30\1\60\5\30\1\0\1\30\1\60"+
    "\2\30\3\0\5\50\1\0\5\50\1\0\10\50\1\0"+
    "\1\50\14\0\2\50\1\116\2\50\1\0\5\50\1\0"+
    "\10\50\1\0\1\50\14\0\5\50\1\0\1\117\4\50"+
    "\1\0\10\50\1\0\1\50\14\0\5\53\1\0\5\53"+
    "\1\0\10\53\1\0\1\53\14\0\1\120\41\0\5\53"+
    "\1\0\1\53\1\121\3\53\1\0\10\53\1\0\1\53"+
    "\14\0\5\53\1\0\3\53\1\122\1\53\1\0\10\53"+
    "\1\0\1\53\14\0\1\123\4\53\1\0\5\53\1\0"+
    "\10\53\1\0\1\53\22\0\1\124\30\0\2\62\1\30"+
    "\6\62\1\125\30\62\3\0\1\66\1\126\3\66\1\0"+
    "\5\66\1\0\10\66\1\0\1\66\14\0\2\66\1\127"+
    "\2\66\1\0\5\66\1\0\10\66\1\0\1\66\14\0"+
    "\5\66\1\0\5\66\1\0\10\66\1\0\1\66\16\0"+
    "\1\130\40\0\1\131\40\0\1\66\1\132\3\66\1\0"+
    "\5\66\1\0\10\66\1\0\1\66\20\0\1\133\35\0"+
    "\5\66\1\0\3\66\1\134\1\66\1\0\10\66\1\0"+
    "\1\66\14\0\5\66\1\0\1\135\4\66\1\0\10\66"+
    "\1\0\1\66\14\0\5\66\1\0\5\66\1\0\2\66"+
    "\1\136\5\66\1\0\1\66\30\0\1\137\25\0\5\66"+
    "\1\0\4\66\1\140\1\0\10\66\1\0\1\66\15\0"+
    "\1\141\50\0\1\142\37\0\1\143\33\0\4\66\1\144"+
    "\1\0\5\66\1\0\10\66\1\0\1\66\14\0\5\66"+
    "\1\0\5\66\1\0\1\145\7\66\1\0\1\66\11\0"+
    "\11\105\1\146\17\105\1\30\10\105\11\107\1\147\20\107"+
    "\1\30\7\107\23\0\1\150\21\0\5\40\1\0\5\40"+
    "\1\0\4\40\1\151\3\40\1\0\1\40\14\0\5\40"+
    "\1\152\5\40\1\0\6\40\1\153\1\40\1\0\1\40"+
    "\27\0\1\154\7\0\1\154\16\0\5\40\1\0\5\40"+
    "\1\154\7\40\1\155\1\0\1\40\14\0\5\50\1\152"+
    "\5\50\1\0\6\50\1\156\1\50\1\0\1\50\14\0"+
    "\5\50\1\0\5\50\1\154\7\50\1\157\1\0\1\50"+
    "\40\0\1\120\3\0\1\160\3\0\1\120\5\0\5\53"+
    "\1\0\3\53\1\161\1\53\1\0\10\53\1\0\1\53"+
    "\14\0\5\53\1\0\5\53\1\0\2\53\1\162\5\53"+
    "\1\0\1\53\14\0\5\53\1\0\5\53\1\0\10\53"+
    "\1\120\1\53\2\0\1\160\3\0\1\120\17\0\1\163"+
    "\24\0\2\62\1\30\12\62\1\164\24\62\3\0\2\66"+
    "\1\165\2\66\1\0\5\66\1\0\10\66\1\0\1\66"+
    "\14\0\3\66\1\166\1\66\1\0\5\66\1\0\10\66"+
    "\1\0\1\66\20\0\1\167\51\0\1\170\25\0\5\66"+
    "\1\0\5\66\1\0\1\171\7\66\1\0\1\66\25\0"+
    "\1\172\30\0\2\66\1\173\2\66\1\0\5\66\1\0"+
    "\10\66\1\0\1\66\14\0\3\66\1\174\1\66\1\0"+
    "\5\66\1\0\1\66\1\175\6\66\1\0\1\66\14\0"+
    "\5\66\1\0\4\66\1\176\1\0\10\66\1\0\1\66"+
    "\24\0\1\177\31\0\1\66\1\200\3\66\1\0\5\66"+
    "\1\0\10\66\1\0\1\66\16\0\1\201\45\0\1\202"+
    "\45\0\1\203\27\0\5\66\1\0\3\66\1\204\1\66"+
    "\1\0\10\66\1\0\1\66\14\0\5\66\1\0\2\66"+
    "\1\205\2\66\1\0\10\66\1\0\1\66\11\0\15\105"+
    "\1\206\13\105\1\30\10\105\15\107\1\207\14\107\1\30"+
    "\7\107\14\0\1\210\30\0\5\40\1\0\3\40\1\211"+
    "\1\40\1\0\10\40\1\0\1\40\20\0\1\30\35\0"+
    "\4\40\1\212\1\0\5\40\1\0\10\40\1\0\1\40"+
    "\20\0\1\213\35\0\4\40\1\214\1\0\5\40\1\0"+
    "\10\40\1\0\1\40\14\0\4\50\1\215\1\0\5\50"+
    "\1\0\10\50\1\0\1\50\14\0\4\50\1\216\1\0"+
    "\5\50\1\0\10\50\1\0\1\50\14\0\5\217\1\0"+
    "\5\217\1\0\5\217\1\0\2\217\1\160\1\217\6\0"+
    "\1\160\5\0\2\53\1\220\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\1\53\14\0\5\53\1\0\4\53\1\221"+
    "\1\0\10\53\1\0\1\53\15\0\1\222\35\0\2\62"+
    "\1\30\1\62\1\223\35\62\3\0\3\66\1\224\1\66"+
    "\1\0\5\66\1\0\10\66\1\0\1\66\14\0\4\66"+
    "\1\225\1\0\5\66\1\0\10\66\1\0\1\66\25\0"+
    "\1\226\40\0\1\227\31\0\5\66\1\0\2\66\1\230"+
    "\2\66\1\0\10\66\1\0\1\66\24\0\1\231\31\0"+
    "\5\66\1\0\5\66\1\0\10\66\1\232\1\66\2\0"+
    "\1\233\3\0\1\232\5\0\5\66\1\0\3\66\1\234"+
    "\1\66\1\0\10\66\1\0\1\66\14\0\5\66\1\0"+
    "\2\66\1\235\2\66\1\0\10\66\1\0\1\66\14\0"+
    "\5\66\1\0\5\66\1\0\10\66\1\236\1\66\2\0"+
    "\1\237\3\0\1\236\13\0\1\240\33\0\5\66\1\0"+
    "\5\66\1\0\4\66\1\241\3\66\1\0\1\66\17\0"+
    "\1\242\41\0\1\243\11\0\1\244\25\0\1\245\40\0"+
    "\5\66\1\0\2\66\1\246\2\66\1\0\10\66\1\0"+
    "\1\66\14\0\5\66\1\0\1\247\4\66\1\0\10\66"+
    "\1\0\1\66\11\0\4\105\1\250\24\105\1\30\10\105"+
    "\4\107\1\251\25\107\1\30\7\107\21\0\1\252\23\0"+
    "\5\40\1\0\5\40\1\0\2\40\1\253\5\40\1\0"+
    "\1\40\14\0\5\50\1\0\5\50\1\0\2\50\1\254"+
    "\5\50\1\0\1\50\14\0\5\217\1\0\5\217\1\0"+
    "\10\217\1\0\1\217\14\0\5\53\1\0\5\53\1\0"+
    "\10\53\1\255\1\53\2\0\1\256\3\0\1\255\5\0"+
    "\5\53\1\0\5\53\1\0\10\53\1\257\1\53\2\0"+
    "\1\260\3\0\1\257\25\0\1\261\16\0\2\62\1\30"+
    "\20\62\1\262\16\62\3\0\4\66\1\263\1\0\5\66"+
    "\1\0\10\66\1\0\1\66\14\0\5\66\1\264\5\66"+
    "\1\0\6\66\1\265\1\66\1\0\1\66\24\0\1\266"+
    "\37\0\1\267\33\0\5\66\1\0\1\270\4\66\1\0"+
    "\10\66\1\0\1\66\14\0\1\271\65\0\1\232\3\0"+
    "\1\233\3\0\1\232\5\0\5\66\1\0\4\66\1\272"+
    "\1\0\10\66\1\0\1\66\14\0\5\66\1\0\5\66"+
    "\1\0\2\66\1\273\5\66\1\0\1\66\40\0\1\236"+
    "\3\0\1\237\3\0\1\236\6\0\1\274\40\0\5\66"+
    "\1\0\3\66\1\275\1\66\1\0\10\66\1\0\1\66"+
    "\20\0\1\276\46\0\1\277\40\0\1\300\51\0\1\301"+
    "\21\0\1\302\4\66\1\0\5\66\1\0\10\66\1\0"+
    "\1\66\14\0\1\66\1\303\3\66\1\0\5\66\1\0"+
    "\10\66\1\0\1\66\11\0\23\105\1\304\5\105\1\30"+
    "\10\105\23\107\1\305\6\107\1\30\7\107\7\0\1\306"+
    "\35\0\4\40\1\307\1\0\5\40\1\0\10\40\1\0"+
    "\1\40\14\0\4\50\1\310\1\0\5\50\1\0\10\50"+
    "\1\0\1\50\40\0\1\255\3\0\1\256\3\0\1\255"+
    "\31\0\1\257\3\0\1\260\3\0\1\257\16\0\1\311"+
    "\25\0\2\62\1\30\11\62\1\312\25\62\3\0\5\66"+
    "\1\313\5\66\1\0\10\66\1\0\1\66\22\0\1\314"+
    "\33\0\5\66\1\0\1\315\4\66\1\0\10\66\1\0"+
    "\1\66\14\0\1\316\42\0\1\317\40\0\1\66\1\320"+
    "\3\66\1\0\5\66\1\0\10\66\1\0\1\66\32\0"+
    "\1\321\23\0\1\66\1\322\3\66\1\0\5\66\1\0"+
    "\10\66\1\0\1\66\14\0\5\66\1\0\5\66\1\0"+
    "\3\66\1\275\4\66\1\0\1\66\20\0\1\323\42\0"+
    "\1\313\14\0\1\313\31\0\1\324\45\0\1\325\34\0"+
    "\1\326\30\0\5\66\1\0\5\66\1\0\2\66\1\327"+
    "\5\66\1\0\1\66\14\0\4\66\1\330\1\0\5\66"+
    "\1\0\10\66\1\0\1\66\11\0\14\105\1\331\14\105"+
    "\1\30\10\105\14\107\1\332\15\107\1\30\7\107\27\0"+
    "\1\306\4\0\1\333\2\0\1\306\5\0\5\40\1\0"+
    "\5\40\1\0\10\40\1\306\1\40\3\0\1\333\2\0"+
    "\1\306\5\0\5\50\1\0\5\50\1\0\10\50\1\306"+
    "\1\50\3\0\1\333\2\0\1\306\14\0\1\334\14\0"+
    "\1\311\7\0\1\311\2\0\2\62\1\30\7\62\1\335"+
    "\14\62\1\312\7\62\1\312\2\62\11\0\1\336\35\0"+
    "\1\337\37\0\2\66\1\275\2\66\1\0\5\66\1\0"+
    "\10\66\1\0\1\66\32\0\1\340\27\0\1\341\35\0"+
    "\4\66\1\342\1\0\5\66\1\0\10\66\1\0\1\66"+
    "\17\0\1\343\36\0\5\66\1\0\2\66\1\241\2\66"+
    "\1\0\10\66\1\0\1\66\21\0\1\344\14\0\1\344"+
    "\20\0\1\345\57\0\1\326\22\0\5\30\1\0\5\30"+
    "\1\0\10\30\1\0\1\30\14\0\3\66\1\241\1\66"+
    "\1\0\5\66\1\0\10\66\1\0\1\66\14\0\5\66"+
    "\1\344\5\66\1\0\6\66\1\346\1\66\1\0\1\66"+
    "\11\0\12\105\1\347\14\105\1\331\1\105\1\30\5\105"+
    "\1\331\2\105\12\107\1\350\14\107\1\332\2\107\1\30"+
    "\4\107\1\332\2\107\3\0\5\351\1\0\5\351\1\0"+
    "\5\351\1\0\2\351\1\333\1\351\6\0\1\333\15\0"+
    "\1\352\26\0\2\62\1\30\10\62\1\353\26\62\5\0"+
    "\1\326\42\0\1\301\43\0\1\354\14\0\1\354\17\0"+
    "\5\66\1\354\5\66\1\0\10\66\1\0\1\66\25\0"+
    "\1\337\32\0\1\343\47\0\1\301\31\0\2\66\1\241"+
    "\2\66\1\0\5\66\1\0\10\66\1\0\1\66\11\0"+
    "\13\105\1\355\15\105\1\30\10\105\13\107\1\356\16\107"+
    "\1\30\7\107\3\0\5\351\1\0\5\351\1\0\10\351"+
    "\1\0\1\351\22\0\1\357\30\0\2\62\1\30\6\62"+
    "\1\360\30\62\5\0\1\301\34\0\11\105\1\361\17\105"+
    "\1\30\10\105\11\107\1\362\20\107\1\30\7\107\6\0"+
    "\1\363\33\0\2\62\1\30\3\62\1\364\33\62\6\105"+
    "\1\365\22\105\1\30\10\105\6\107\1\366\23\107\1\30"+
    "\7\107\14\0\1\367\25\0\2\62\1\30\11\62\1\370"+
    "\25\62\14\105\1\371\14\105\1\30\10\105\14\107\1\372"+
    "\15\107\1\30\7\107\15\0\1\373\24\0\2\62\1\30"+
    "\12\62\1\374\24\62\15\105\1\375\13\105\1\30\10\105"+
    "\15\107\1\376\14\107\1\30\7\107\4\0\1\377\35\0"+
    "\2\62\1\30\1\62\1\u0100\35\62\4\105\1\u0101\24\105"+
    "\1\30\10\105\4\107\1\u0102\25\107\1\30\7\107\13\0"+
    "\1\u0103\26\0\2\62\1\30\10\62\1\u0104\26\62\13\105"+
    "\1\u0105\15\105\1\30\10\105\13\107\1\u0106\16\107\1\30"+
    "\7\107\14\0\1\u0107\25\0\2\62\1\30\11\62\1\u0108"+
    "\25\62\14\105\1\u0109\14\105\1\30\10\105\14\107\1\u010a"+
    "\15\107\1\30\7\107\3\30\5\0\1\30\5\0\1\30"+
    "\10\0\1\30\1\0\11\30\2\34\1\30\5\62\1\34"+
    "\5\62\1\34\10\62\1\34\1\62\11\34\3\43\5\105"+
    "\1\43\5\105\1\43\10\105\1\43\1\105\1\30\10\43"+
    "\3\44\5\107\1\44\5\107\1\44\10\107\1\44\1\107"+
    "\1\44\1\30\7\44";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\20\1\3\11\2\1\1\11\7\1\1\11\1\1"+
    "\1\11\11\1\3\0\3\1\2\0\1\1\1\0\3\1"+
    "\1\0\1\1\3\0\2\1\5\0\2\1\1\0\3\1"+
    "\1\0\3\1\2\0\2\1\2\0\1\1\1\0\3\1"+
    "\1\0\1\1\3\0\2\1\3\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\2\0\2\1\2\0\1\1"+
    "\1\0\4\1\1\0\1\1\3\0\2\1\2\0\1\11"+
    "\2\1\1\0\6\1\2\0\2\1\2\0\1\1\2\0"+
    "\1\11\2\1\1\0\1\11\1\0\1\1\4\0\2\1"+
    "\3\0\2\1\1\0\1\11\1\0\1\11\2\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\2\1\1\0\1\1"+
    "\4\0\2\1\3\0\2\1\4\0\1\1\2\0\1\1"+
    "\1\0\1\1\3\0\3\1\6\0\1\1\2\0\1\1"+
    "\3\0\1\1\2\0\1\1\41\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM"; 
    List<Violation> list = new LinkedList<Violation>();
	boolean iostat = false, file = false, add=false;
	boolean multLines = false;
	List<String> files = new LinkedList<String>();
	int errorLine = 0;
	String descr = "", iostatVal = "";
	
	public F90ERROpenRead() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90ERROpenRead(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 19: break;
          case 2: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 20: break;
          case 3: 
            { yybegin(YYINITIAL);
            }
          case 21: break;
          case 4: 
            { location = location + " " + yytext(); 
							 yybegin(COMMENT);
            }
          case 22: break;
          case 5: 
            { if(!multLines) {
									if (!iostat&&file) {
										this.setError(location,"There is no parameter IOSTAT in the " + descr + " instruction.", errorLine);
										yybegin(YYINITIAL);
									}
									else if(iostat&&file) {
										yybegin(IF_STATE);
									}
									else {
										files.remove(files.size()-1); //delete the last element -> this instruction does not open a file
										yybegin(YYINITIAL);
									}
								 } 
								 multLines = false;
            }
          case 23: break;
          case 6: 
            { if(!add) {files.add(yytext()); add=true;}
            }
          case 24: break;
          case 7: 
            { multLines = true;
            }
          case 25: break;
          case 8: 
            { if(!multLines) {
									if (!iostat) {
										this.setError(location,"There is no parameter IOSTAT in the " + descr + " instruction.", errorLine);
										yybegin(YYINITIAL);
									}
									else
										yybegin(IF_STATE);
								 } 
								 multLines = false;
            }
          case 26: break;
          case 9: 
            { if(!add) {     // if the first value read and existing file opened -> verify iostat
								 	if (!files.contains(yytext())) {
								 		yybegin(YYINITIAL);
								 	} else {
								 		add=true;
								 }}
            }
          case 27: break;
          case 10: 
            { this.setError(location,"The return of IOSTAT is no checked in the " + descr + " instruction.", errorLine);
								 yybegin(YYINITIAL);
            }
          case 28: break;
          case 11: 
            { file=true;
            }
          case 29: break;
          case 12: 
            { String checkedVal = yytext().replace(" ","").split("\\(")[1];
								 if (!checkedVal.equals(iostatVal)) this.setError(location,"The return of IOSTAT is no checked in the " + descr + " instruction.", errorLine); 
								 yybegin(YYINITIAL);
            }
          case 30: break;
          case 13: 
            { errorLine = yyline + 1; descr = yytext().toUpperCase().replaceAll("\\(", "").trim(); iostat=false; file=false; add=false; yybegin(OPEN);
            }
          case 31: break;
          case 14: 
            { errorLine = yyline + 1; descr = yytext().toUpperCase().replaceAll("\\(", "").trim(); iostat=false; add=false; yybegin(READ);
            }
          case 32: break;
          case 15: 
            { this.setError(location,"The return of IOSTAT is no checked in the " + descr + " instruction.", errorLine);
								 errorLine = yyline + 1; descr = yytext().toUpperCase().replaceAll("\\(", "").trim(); iostat=false; file=false; add=false; yybegin(OPEN);
            }
          case 33: break;
          case 16: 
            { this.setError(location,"The return of IOSTAT is no checked in the " + descr + " instruction.", errorLine);
								 errorLine = yyline + 1; descr = yytext().toUpperCase().replaceAll("\\(", "").trim(); iostat=false; add=false; yybegin(READ);
            }
          case 34: break;
          case 17: 
            { location = yytext(); 
							 yybegin(NAMING);
            }
          case 35: break;
          case 18: 
            { iostat = true;
								 iostatVal = yytext().replace(" ","").split("=")[1];
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
