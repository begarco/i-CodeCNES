/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.INST.If rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90INSTIf.lex</tt>
 */
public class F90INSTIf extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int IF_EXEC = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\35\1\36\1\37\1\35\22\0\1\26\1\1\1\31"+
    "\3\0\1\40\1\30\10\0\12\23\7\0\1\20\1\16\1\5\1\14"+
    "\1\13\1\2\1\17\1\32\1\24\2\27\1\22\1\21\1\4\1\10"+
    "\1\11\1\27\1\12\1\25\1\6\1\3\2\27\1\33\1\34\1\27"+
    "\4\0\1\23\1\0\1\20\1\16\1\5\1\14\1\13\1\2\1\17"+
    "\1\32\1\24\2\27\1\22\1\21\1\4\1\10\1\11\1\27\1\12"+
    "\1\25\1\6\1\3\2\27\1\33\1\34\1\27\12\0\1\36\252\0"+
    "\2\7\115\0\1\15\u1ea8\0\1\36\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\12\1\1\3\1\1\1\2\1\4"+
    "\1\3\1\5\1\1\1\2\1\6\1\3\1\7\32\0"+
    "\6\1\30\0\1\10\15\0\1\10\2\0\1\10\32\0"+
    "\1\11\16\0\1\12\1\1\1\0\1\1\2\0\1\13"+
    "\7\0\1\1\46\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\245\0\306"+
    "\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce"+
    "\0\u01ef\0\245\0\u0210\0\u0210\0\u0210\0\u0210\0\u0231\0\u0252"+
    "\0\u0252\0\u0252\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7"+
    "\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd\0\u03de\0\u03ff"+
    "\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u0507"+
    "\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u0549\0\u056a"+
    "\0\u058b\0\u05ac\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672"+
    "\0\u0693\0\u06b4\0\u06d5\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a"+
    "\0\u079b\0\u07bc\0\u07dd\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882"+
    "\0\u08a3\0\u08c4\0\u08e5\0\u0906\0\u0210\0\u0927\0\u0948\0\u0969"+
    "\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71"+
    "\0\u0a92\0\u0ab3\0\u0441\0\u0ad4\0\u0af5\0\u04c5\0\u0b16\0\u0b37"+
    "\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f"+
    "\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47"+
    "\0\u0d68\0\u0d89\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f"+
    "\0\u0210\0\u0e70\0\u0e91\0\u0eb2\0\u0ed3\0\u0ef4\0\u0f15\0\u0f36"+
    "\0\u0f57\0\u0f78\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\u103e"+
    "\0\u0441\0\u105f\0\u04c5\0\u1080\0\u10a1\0\u0210\0\u10c2\0\u10e3"+
    "\0\u1104\0\u1125\0\u1146\0\u1167\0\u1188\0\u103e\0\u11a9\0\u11ca"+
    "\0\u11eb\0\u120c\0\u122d\0\u124e\0\u126f\0\u1290\0\u12b1\0\u12d2"+
    "\0\u12f3\0\u1314\0\u1335\0\u1356\0\u1377\0\u1398\0\u13b9\0\u13da"+
    "\0\u13fb\0\u141c\0\u143d\0\u145e\0\u147f\0\u14a0\0\u14c1\0\u14e2"+
    "\0\u1503\0\u1524\0\u1545\0\u1566\0\u1587\0\u15a8\0\u15c9\0\u15ea"+
    "\0\u160b\0\u162c\0\u164d\0\u166e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\4\11\1\12\1\11\1\13\3\11"+
    "\1\14\3\11\1\15\2\11\1\16\1\17\1\6\1\11"+
    "\1\20\1\21\3\11\1\6\2\22\1\6\1\23\1\24"+
    "\33\23\1\25\2\26\2\23\1\24\5\27\1\23\5\27"+
    "\1\23\5\27\1\23\2\27\1\23\1\27\2\23\3\27"+
    "\1\25\2\26\1\23\1\26\1\24\37\26\1\30\1\31"+
    "\5\23\1\30\5\23\1\30\10\23\1\30\1\23\2\30"+
    "\3\23\1\32\2\33\1\34\7\0\1\35\3\0\1\36"+
    "\5\0\1\37\2\0\1\35\16\0\1\40\1\41\3\0"+
    "\1\42\1\0\1\43\3\0\1\44\3\0\1\45\2\0"+
    "\1\42\1\44\15\0\1\40\4\0\1\42\1\0\1\43"+
    "\3\0\1\44\3\0\1\45\2\0\1\42\1\44\17\0"+
    "\1\46\2\0\1\35\3\0\1\36\5\0\1\37\2\0"+
    "\1\35\16\0\1\40\4\0\1\42\1\0\1\43\1\47"+
    "\2\0\1\44\3\0\1\45\2\0\1\42\1\44\16\0"+
    "\1\50\3\0\1\35\3\0\1\36\5\0\1\37\2\0"+
    "\1\35\16\0\1\40\4\0\1\42\1\51\1\43\3\0"+
    "\1\44\3\0\1\45\2\0\1\42\1\44\15\0\1\40"+
    "\1\0\1\46\2\0\1\42\1\0\1\43\3\0\1\44"+
    "\3\0\1\45\2\0\1\42\1\44\15\0\1\40\1\50"+
    "\3\0\1\42\1\0\1\43\3\0\1\44\3\0\1\45"+
    "\2\0\1\42\1\44\13\0\7\52\1\53\3\52\1\54"+
    "\5\52\1\55\2\52\1\53\3\52\1\23\10\52\7\56"+
    "\1\57\3\56\1\60\5\56\1\61\2\56\1\57\4\56"+
    "\1\23\7\56\43\0\5\27\1\0\5\27\1\0\10\27"+
    "\1\0\1\27\2\0\3\27\11\0\1\62\1\63\3\0"+
    "\1\64\1\65\3\0\1\66\21\0\5\23\1\67\1\70"+
    "\3\23\1\71\1\72\3\23\1\73\6\23\1\74\6\23"+
    "\1\0\1\23\1\74\1\23\2\0\1\75\42\0\1\76"+
    "\44\0\1\77\33\0\1\100\41\0\1\101\40\0\1\102"+
    "\46\0\1\103\31\0\1\104\45\0\1\105\36\0\1\106"+
    "\42\0\1\107\46\0\1\110\36\0\1\111\24\0\30\52"+
    "\1\23\12\52\1\112\25\52\1\23\14\52\1\113\23\52"+
    "\1\23\20\52\1\114\17\52\1\23\10\52\31\56\1\23"+
    "\11\56\1\115\26\56\1\23\13\56\1\116\24\56\1\23"+
    "\17\56\1\117\20\56\1\23\7\56\34\0\1\120\36\0"+
    "\1\121\21\0\1\122\60\0\1\123\15\0\1\124\30\0"+
    "\26\23\1\74\6\23\1\0\1\23\1\74\1\23\2\125"+
    "\5\0\1\125\5\0\1\125\10\0\1\125\1\0\2\125"+
    "\3\0\4\125\14\0\1\126\40\0\1\127\30\0\1\130"+
    "\41\0\1\131\41\0\1\132\42\0\1\133\46\0\1\134"+
    "\36\0\1\135\37\0\1\136\32\0\1\137\11\0\1\140"+
    "\33\0\1\141\31\0\1\142\35\0\2\143\5\52\1\143"+
    "\5\52\1\143\10\52\1\143\1\52\1\23\1\143\3\52"+
    "\4\143\14\52\1\144\13\52\1\23\24\52\1\145\13\52"+
    "\1\23\10\52\2\146\5\56\1\146\5\56\1\146\10\56"+
    "\1\146\1\56\1\146\1\23\3\56\4\146\14\56\1\147"+
    "\14\56\1\23\23\56\1\150\14\56\1\23\7\56\5\0"+
    "\1\151\46\0\1\152\33\0\1\153\41\0\1\154\14\0"+
    "\1\154\22\0\1\155\41\0\1\156\14\0\1\156\1\0"+
    "\1\126\10\0\1\126\4\0\1\157\42\0\1\160\41\0"+
    "\1\161\45\0\1\162\32\0\1\163\11\0\1\164\33\0"+
    "\1\165\31\0\1\166\47\0\1\167\41\0\1\170\37\0"+
    "\1\171\36\0\1\172\52\0\1\173\16\0\7\52\1\174"+
    "\14\52\1\174\1\52\1\144\1\52\1\23\6\52\1\144"+
    "\4\52\1\175\24\52\1\23\10\52\7\56\1\176\14\56"+
    "\1\176\1\56\1\147\2\56\1\23\5\56\1\147\4\56"+
    "\1\177\25\56\1\23\7\56\22\0\1\200\22\0\1\201"+
    "\37\0\1\202\43\0\1\203\42\0\1\203\32\0\1\23"+
    "\60\0\1\204\24\0\1\205\41\0\1\206\14\0\1\206"+
    "\26\0\1\207\41\0\1\210\37\0\1\211\36\0\1\212"+
    "\52\0\1\213\20\0\1\214\52\0\1\215\44\0\1\216"+
    "\23\0\1\217\50\0\1\220\25\0\2\52\1\221\25\52"+
    "\1\23\32\52\1\222\5\52\1\23\10\52\2\56\1\223"+
    "\26\56\1\23\31\56\1\224\6\56\1\23\7\56\13\0"+
    "\1\203\37\0\1\225\26\0\2\226\5\0\1\226\5\0"+
    "\1\226\10\0\1\226\1\0\2\226\3\0\4\226\13\0"+
    "\1\227\34\0\1\230\14\0\1\230\24\0\1\231\32\0"+
    "\1\232\52\0\1\233\44\0\1\234\23\0\1\235\50\0"+
    "\1\236\45\0\1\237\23\0\1\240\56\0\1\220\25\0"+
    "\1\241\34\0\5\23\1\0\5\23\1\0\10\23\1\0"+
    "\1\23\2\0\3\23\4\0\13\52\1\242\14\52\1\23"+
    "\10\52\13\56\1\243\15\56\1\23\7\56\4\0\1\203"+
    "\45\0\1\244\14\0\1\227\10\0\1\227\11\0\1\245"+
    "\34\0\1\220\54\0\1\246\23\0\1\247\56\0\1\236"+
    "\25\0\1\250\37\0\1\173\45\0\1\173\35\0\1\251"+
    "\14\0\1\251\14\0\11\52\1\252\14\52\1\242\1\52"+
    "\1\23\6\52\1\242\1\52\11\56\1\253\14\56\1\243"+
    "\2\56\1\23\5\56\1\243\1\56\12\0\1\254\32\0"+
    "\1\236\41\0\1\213\45\0\1\213\35\0\1\255\14\0"+
    "\1\255\20\0\1\173\34\0\12\52\1\256\15\52\1\23"+
    "\10\52\12\56\1\257\16\56\1\23\7\56\10\0\1\260"+
    "\34\0\1\213\34\0\10\52\1\261\17\52\1\23\10\52"+
    "\10\56\1\262\20\56\1\23\7\56\5\0\1\263\33\0"+
    "\5\52\1\264\22\52\1\23\10\52\5\56\1\265\23\56"+
    "\1\23\7\56\13\0\1\266\25\0\13\52\1\267\14\52"+
    "\1\23\10\52\13\56\1\270\15\56\1\23\7\56\14\0"+
    "\1\271\24\0\14\52\1\272\13\52\1\23\10\52\14\56"+
    "\1\273\14\56\1\23\7\56\3\0\1\274\35\0\3\52"+
    "\1\275\24\52\1\23\10\52\3\56\1\276\25\56\1\23"+
    "\7\56\12\0\1\277\26\0\12\52\1\300\15\52\1\23"+
    "\10\52\12\56\1\301\16\56\1\23\7\56\13\0\1\302"+
    "\25\0\13\52\1\303\14\52\1\23\10\52\13\56\1\304"+
    "\15\56\1\23\7\56\2\23\5\0\1\23\5\0\1\23"+
    "\10\0\1\23\1\0\2\23\3\0\4\23\2\221\5\52"+
    "\1\221\5\52\1\221\10\52\1\221\1\52\1\23\1\221"+
    "\3\52\4\221\2\223\5\56\1\223\5\56\1\223\10\56"+
    "\1\223\1\56\1\223\1\23\3\56\4\223";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5775];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\15\1\4\11\6\1\32\0\6\1\30\0\1\11"+
    "\15\0\1\1\2\0\1\1\32\0\1\11\16\0\2\1"+
    "\1\0\1\1\2\0\1\11\7\0\1\1\46\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/** Variable used to store violation location and variable involved. **/
	String location = "MAIN PROGRAM";
	/** Variable used to store file value and function values associated. **/
	boolean hasBranch = false;
	boolean hasThen = false;
	boolean endLine = true;
	int errorLine = 0;
	
	public F90INSTIf() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90INSTIf(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	 
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 12: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 13: break;
          case 3: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 14: break;
          case 4: 
            { yybegin(YYINITIAL);
            }
          case 15: break;
          case 5: 
            { location = location + " " + yytext(); 
							 yybegin(COMMENT);
            }
          case 16: break;
          case 6: 
            { if (endLine){
									if (!hasThen && !hasBranch) {
										this.setError(location,"Logical IF (without THEN and ENDIF) is only allowed with EXIT, CYCLE, GOTO, RETURN statements.", errorLine);
									}
									hasBranch = false;
									hasThen = false;
									yybegin(YYINITIAL);
								 }
								 endLine = true;
            }
          case 17: break;
          case 7: 
            { endLine = false;
            }
          case 18: break;
          case 8: 
            { errorLine = yyline + 1;
							 yybegin(IF_EXEC);
            }
          case 19: break;
          case 9: 
            { hasThen = true;
            }
          case 20: break;
          case 10: 
            { location = yytext(); 
							 yybegin(NAMING);
            }
          case 21: break;
          case 11: 
            { hasBranch = true;
            }
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
