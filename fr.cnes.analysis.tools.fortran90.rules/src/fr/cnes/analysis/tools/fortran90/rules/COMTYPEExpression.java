/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.TYPE.Expression rule. 	*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMTYPEExpression.lex</tt>
 */
public class COMTYPEExpression extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int DECL_PARAMS = 10;
  public static final int DECLARATION = 12;
  public static final int AVOID = 14;
  public static final int CONV_FUNC = 16;
  public static final int REAL = 18;
  public static final int DIMENSION = 20;
  public static final int IF_STATE = 22;
  public static final int AVOIDI = 24;
  public static final int IO = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\54\1\55\1\55\1\55\22\0\1\26\1\1\1\53\2\0"+
    "\1\44\1\35\1\52\1\31\1\43\1\3\1\33\1\56\1\33\1\36"+
    "\1\34\12\51\1\57\1\0\1\41\1\42\1\41\2\0\1\21\1\17"+
    "\1\2\1\15\1\14\1\4\1\20\1\24\1\46\1\45\1\50\1\23"+
    "\1\22\1\6\1\11\1\12\1\37\1\13\1\47\1\7\1\5\1\40"+
    "\1\27\1\25\1\45\1\32\4\0\1\51\1\0\1\21\1\17\1\2"+
    "\1\15\1\14\1\4\1\20\1\24\1\46\1\45\1\50\1\23\1\22"+
    "\1\6\1\11\1\12\1\37\1\13\1\47\1\7\1\5\1\40\1\27"+
    "\1\25\1\45\1\32\12\0\1\55\252\0\2\10\115\0\1\16\u1ea8\0"+
    "\1\55\1\55\u0100\0\1\30\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\6\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\2\3\10\1\1\4\10\1\1\4\10\1\11"+
    "\1\12\2\1\1\13\1\1\1\14\2\10\1\15\1\16"+
    "\1\17\3\16\1\5\4\16\1\5\4\16\1\11\1\5"+
    "\1\20\2\5\1\21\2\16\2\5\1\22\2\5\1\23"+
    "\1\5\1\24\1\25\1\26\1\27\1\30\1\5\1\30"+
    "\1\31\1\32\1\5\1\33\1\16\1\34\1\35\1\36"+
    "\6\0\5\10\1\0\1\37\1\17\3\10\1\0\1\10"+
    "\1\40\2\0\5\10\1\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\13\6\0\1\40\4\10\5\16\1\37"+
    "\3\16\1\0\1\16\2\0\11\16\1\0\1\16\1\0"+
    "\5\16\1\0\1\40\4\16\2\0\1\41\1\0\1\42"+
    "\1\0\1\30\4\0\1\10\1\0\7\10\1\0\1\10"+
    "\2\0\5\10\1\0\4\10\1\0\1\10\1\0\3\10"+
    "\1\43\1\0\1\10\1\12\5\0\2\10\1\16\1\0"+
    "\4\16\2\0\3\16\1\0\1\16\2\0\11\16\1\0"+
    "\1\16\1\0\3\16\1\43\3\16\1\0\1\44\1\0"+
    "\1\30\5\0\1\10\1\0\7\10\1\0\1\10\1\0"+
    "\1\45\1\0\1\46\3\10\1\47\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\1\10\1\0\1\10\2\12\1\0"+
    "\2\10\1\16\1\0\7\16\1\0\1\16\1\50\1\0"+
    "\1\46\3\16\1\47\3\16\1\0\3\16\1\50\3\16"+
    "\1\0\1\32\5\0\1\10\1\0\1\10\1\0\3\10"+
    "\2\0\2\46\3\10\1\0\1\51\1\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\16\1\0\4\16\1\0\1\46"+
    "\3\16\1\0\1\52\6\16\5\0\1\53\1\10\1\46"+
    "\2\10\1\0\3\10\1\0\2\10\1\53\1\0\3\10"+
    "\6\16\1\52\2\16\1\53\3\16\4\0\1\47\1\10"+
    "\1\47\2\10\2\0\2\10\1\47\5\16\2\0\1\10"+
    "\2\0\2\10\3\16\1\43\1\0\2\43\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[469];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u02a0\0\u02a0"+
    "\0\u02a0\0\u02a0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660"+
    "\0\u0690\0\u06c0\0\u02a0\0\u02a0\0\u06f0\0\u0720\0\u0750\0\u0750"+
    "\0\u02a0\0\u0780\0\u07b0\0\u02a0\0\u07e0\0\u0450\0\u0810\0\u0840"+
    "\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u06f0\0\u02a0\0\u0720\0\u0750"+
    "\0\u02a0\0\u0ab0\0\u0ae0\0\u0390\0\u03c0\0\u02a0\0\u0b10\0\u0b40"+
    "\0\u02a0\0\u0b70\0\u0ba0\0\u02a0\0\u02a0\0\u02a0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u02a0\0\u02a0\0\u0c60\0\u0c90\0\u0cc0\0\u02a0\0\u02a0"+
    "\0\u02a0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0390\0\u03c0\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u02a0\0\u02a0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u02a0\0\u0fc0\0\u0ff0\0\u1020"+
    "\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0"+
    "\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u02a0\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470"+
    "\0\u14a0\0\u04b0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0"+
    "\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740"+
    "\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0"+
    "\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40"+
    "\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u0840\0\u1b60\0\u1b90"+
    "\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u02a0\0\u1c80\0\u02a0\0\u1cb0"+
    "\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30"+
    "\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130"+
    "\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430"+
    "\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0"+
    "\0\u25e0\0\u2610\0\u2640\0\u1680\0\u2670\0\u26a0\0\u26d0\0\u2700"+
    "\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880"+
    "\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00"+
    "\0\u2a30\0\u2a60\0\u2a90\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80"+
    "\0\u02a0\0\u2bb0\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0"+
    "\0\u2d00\0\u2d30\0\u2d60\0\u2d90\0\u2dc0\0\u2df0\0\u2e20\0\u2e50"+
    "\0\u2e80\0\u2eb0\0\u2340\0\u2ee0\0\u02a0\0\u2f10\0\u2f40\0\u2f70"+
    "\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060\0\u3090\0\u30c0\0\u30f0"+
    "\0\u3120\0\u3150\0\u3180\0\u31b0\0\u31e0\0\u3210\0\u3240\0\u3270"+
    "\0\u32a0\0\u32d0\0\u3300\0\u3330\0\u3360\0\u3390\0\u33c0\0\u33f0"+
    "\0\u3420\0\u3450\0\u3480\0\u34b0\0\u34e0\0\u2ac0\0\u02a0\0\u3510"+
    "\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600\0\u3630\0\u3660\0\u3690"+
    "\0\u36c0\0\u36f0\0\u3720\0\u3750\0\u1680\0\u3780\0\u37b0\0\u37e0"+
    "\0\u3810\0\u0bd0\0\u3840\0\u3870\0\u38a0\0\u38d0\0\u3900\0\u3930"+
    "\0\u3960\0\u3990\0\u39c0\0\u39f0\0\u3a20\0\u3a50\0\u3a80\0\u3ab0"+
    "\0\u3ae0\0\u02a0\0\u3b10\0\u3b40\0\u3b70\0\u3ba0\0\u02a0\0\u3bd0"+
    "\0\u3c00\0\u3c30\0\u3c60\0\u3c90\0\u3cc0\0\u3240\0\u3cf0\0\u3d20"+
    "\0\u3d50\0\u3d80\0\u3db0\0\u3de0\0\u3e10\0\u3e40\0\u3e70\0\u1680"+
    "\0\u3ea0\0\u3ed0\0\u3f00\0\u3f30\0\u1680\0\u3f60\0\u3f90\0\u3fc0"+
    "\0\u3ff0\0\u4020\0\u4050\0\u4080\0\u40b0\0\u40e0\0\u4110\0\u4140"+
    "\0\u02a0\0\u4170\0\u41a0\0\u41d0\0\u4200\0\u4230\0\u4260\0\u4290"+
    "\0\u42c0\0\u42f0\0\u4320\0\u4350\0\u04b0\0\u4380\0\u43b0\0\u43e0"+
    "\0\u4410\0\u4440\0\u4470\0\u44a0\0\u44d0\0\u4500\0\u4530\0\u02a0"+
    "\0\u4560\0\u4590\0\u0840\0\u45c0\0\u45f0\0\u4620\0\u4650\0\u4680"+
    "\0\u46b0\0\u46e0\0\u04b0\0\u4710\0\u02a0\0\u4740\0\u4770\0\u47a0"+
    "\0\u47d0\0\u4800\0\u4830\0\u0840\0\u4860\0\u4890\0\u48c0\0\u48f0"+
    "\0\u4920\0\u4950\0\u4980\0\u49b0\0\u49e0\0\u4a10\0\u4a40\0\u4a70"+
    "\0\u4aa0\0\u4ad0\0\u4b00\0\u02a0\0\u4b30\0\u04b0\0\u0840\0\u4b60"+
    "\0\u4b90\0\u4bc0\0\u4bf0\0\u4c20\0\u4c50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[469];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\3\20\1\21\5\17\1\22\3\17\1\23\3\17"+
    "\1\24\24\17\1\23\2\17\1\25\1\26\1\27\1\30"+
    "\2\17\1\31\1\20\52\31\1\32\1\30\3\31\1\20"+
    "\1\33\1\31\4\33\1\31\5\33\1\31\7\33\1\31"+
    "\1\33\2\31\1\33\4\31\2\33\4\31\4\33\3\31"+
    "\1\27\1\30\2\31\1\17\1\20\1\34\1\35\1\36"+
    "\1\37\1\40\1\37\1\41\1\42\1\43\1\44\1\37"+
    "\1\45\1\46\2\37\1\47\1\50\1\51\2\37\1\17"+
    "\1\52\1\17\1\53\1\37\1\54\1\55\1\17\1\56"+
    "\2\37\1\57\1\60\1\61\1\17\1\37\1\62\1\63"+
    "\1\37\1\17\1\25\1\26\1\64\1\30\2\17\1\31"+
    "\1\20\1\65\1\66\1\67\1\70\1\71\1\70\1\72"+
    "\1\73\1\74\1\75\1\70\1\76\1\77\2\70\1\100"+
    "\1\101\1\102\2\70\1\31\1\103\1\31\1\104\1\70"+
    "\1\54\1\105\1\106\1\107\2\70\1\57\1\110\1\61"+
    "\1\111\1\70\1\112\1\113\1\70\1\31\1\114\1\115"+
    "\1\116\1\30\1\111\2\31\1\20\13\31\1\117\5\31"+
    "\1\120\26\31\1\114\1\115\1\121\1\30\1\31\1\122"+
    "\1\31\1\20\1\123\1\31\4\123\1\31\5\123\1\31"+
    "\7\123\1\31\1\123\2\31\1\123\2\31\1\106\1\31"+
    "\2\123\4\31\4\123\1\31\1\114\1\115\1\124\1\30"+
    "\3\31\1\20\27\31\1\53\11\31\1\125\15\31\1\20"+
    "\27\31\1\53\11\31\1\126\6\31\1\114\1\115\1\121"+
    "\1\30\3\31\1\20\1\127\1\31\4\127\1\31\5\127"+
    "\1\31\7\127\1\31\1\127\1\130\1\31\1\127\4\31"+
    "\2\127\4\31\3\127\1\131\1\31\1\114\1\115\1\132"+
    "\1\30\1\133\1\134\1\31\1\20\1\135\1\31\4\135"+
    "\1\31\5\135\1\31\7\135\1\31\1\135\2\31\1\135"+
    "\4\31\2\135\4\31\4\135\1\31\1\114\1\115\1\27"+
    "\1\30\3\31\1\20\1\136\1\66\4\136\1\31\5\136"+
    "\1\31\7\136\1\31\1\136\1\31\1\53\1\136\1\54"+
    "\1\105\1\31\1\107\2\136\1\57\1\110\1\137\1\31"+
    "\4\136\1\31\1\114\1\115\1\31\1\30\3\31\1\20"+
    "\27\31\1\53\11\31\1\140\15\31\1\20\33\31\1\106"+
    "\16\31\1\141\1\30\2\31\65\0\1\142\65\0\1\143"+
    "\51\0\1\144\63\0\1\145\46\0\52\146\1\31\5\146"+
    "\53\147\1\31\4\147\2\0\1\33\1\0\4\33\1\0"+
    "\5\33\1\0\7\33\1\0\1\33\2\0\1\33\4\0"+
    "\2\33\4\0\5\33\10\0\1\37\1\0\4\37\1\0"+
    "\1\150\2\37\1\151\1\37\1\0\2\37\1\152\1\153"+
    "\1\37\1\154\1\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\11\0\1\157\56\0\1\37"+
    "\1\0\1\37\1\160\2\37\1\0\1\161\4\37\1\0"+
    "\4\37\1\162\2\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\10\0\1\37\1\0"+
    "\4\37\1\163\5\37\1\0\7\37\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\1\37\1\164\3\37"+
    "\12\0\1\165\1\0\1\166\12\0\1\167\40\0\1\37"+
    "\1\0\4\37\1\0\1\37\1\170\3\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\37\1\0\4\37\1\0\2\37\1\171"+
    "\2\37\1\0\2\37\1\172\4\37\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\5\37\10\0\1\37"+
    "\1\0\4\37\1\0\3\37\1\173\1\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\37\1\0\1\174\3\37\1\175\1\176"+
    "\4\37\1\0\1\177\1\37\1\200\4\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\1\37\1\201"+
    "\3\37\13\0\1\144\2\0\1\202\35\0\1\202\13\0"+
    "\1\203\1\0\4\37\1\204\5\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\1\37"+
    "\1\205\3\37\10\0\1\37\1\0\4\37\1\0\1\206"+
    "\4\37\1\0\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\1\207\2\37\1\210\1\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\10\0\1\37\1\0\4\37\1\0\2\37\1\211\2\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\43\0\1\212\4\0\1\213\23\0"+
    "\1\214\2\0\1\215\2\0\1\216\3\0\1\217\1\220"+
    "\1\0\1\217\1\0\1\221\74\0\1\213\17\0\1\37"+
    "\1\0\1\222\1\37\1\223\1\37\1\0\5\37\1\0"+
    "\2\37\1\224\4\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\1\37"+
    "\1\225\2\37\1\202\5\37\1\0\7\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\1\37\1\226"+
    "\3\37\10\0\1\70\1\0\4\70\1\0\1\227\2\70"+
    "\1\230\1\70\1\0\2\70\1\231\1\232\1\70\1\233"+
    "\1\70\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\5\70\10\0\1\70\1\0\1\70\1\235"+
    "\2\70\1\0\1\236\4\70\1\0\4\70\1\237\2\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\5\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\4\70"+
    "\1\240\5\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\1\70\1\241\3\70"+
    "\12\0\1\165\1\0\1\242\12\0\1\243\40\0\1\70"+
    "\1\0\4\70\1\0\1\70\1\244\3\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\2\70"+
    "\1\245\2\70\1\0\2\70\1\246\4\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\3\70\1\247\1\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\1\250"+
    "\3\70\1\175\1\251\4\70\1\0\1\252\1\70\1\253"+
    "\4\70\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\1\70\1\254\3\70\13\0\1\144\2\0"+
    "\1\255\35\0\1\255\13\0\1\256\1\0\4\70\1\257"+
    "\5\70\1\0\7\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\1\70\1\260\3\70\10\0"+
    "\1\70\1\0\4\70\1\0\1\261\4\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\1\262"+
    "\2\70\1\263\1\70\1\0\7\70\1\155\1\70\1\0"+
    "\1\234\1\70\4\0\2\70\3\0\1\111\5\70\10\0"+
    "\1\70\1\0\4\70\1\0\2\70\1\264\2\70\1\0"+
    "\7\70\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\5\70\10\0\1\265\1\0\4\265\1\0"+
    "\5\265\1\0\7\265\1\0\1\265\2\0\1\265\4\0"+
    "\2\265\4\0\4\265\11\0\1\70\1\0\1\266\1\70"+
    "\1\267\1\70\1\0\5\70\1\0\2\70\1\270\4\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\1\70\1\271\2\70"+
    "\1\255\5\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\1\70\1\272\3\70"+
    "\16\0\1\273\35\0\1\273\25\0\1\274\122\0\1\275"+
    "\2\0\1\123\1\0\4\123\1\0\5\123\1\0\7\123"+
    "\1\276\1\123\1\0\1\277\1\123\4\0\2\123\4\0"+
    "\5\123\10\0\1\127\1\0\4\127\1\0\5\127\1\0"+
    "\7\127\1\0\1\127\2\0\1\127\4\0\2\127\4\0"+
    "\5\127\16\0\1\300\35\0\1\300\13\0\1\127\1\0"+
    "\4\127\1\300\5\127\1\0\7\127\1\0\1\127\2\0"+
    "\1\127\4\0\2\127\4\0\1\127\1\301\3\127\65\0"+
    "\1\133\2\0\1\135\1\0\4\135\1\0\5\135\1\0"+
    "\7\135\1\0\1\135\2\0\1\135\4\0\2\135\4\0"+
    "\5\135\10\0\1\136\1\0\4\136\1\0\5\136\1\0"+
    "\7\136\1\0\1\136\2\0\1\136\4\0\2\136\4\0"+
    "\5\136\14\0\1\302\62\0\1\303\65\0\1\304\55\0"+
    "\1\305\44\0\1\37\1\0\4\37\1\0\5\37\1\0"+
    "\3\37\1\306\3\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\307\5\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\1\37\1\310\3\37\10\0"+
    "\1\37\1\0\4\37\1\0\5\37\1\0\4\37\1\311"+
    "\2\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\0\1\37"+
    "\1\312\3\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\10\0\1\37\1\0"+
    "\4\37\1\0\5\37\1\0\2\37\1\313\4\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\34\0\1\155\2\0\1\156\30\0\1\37\1\0\2\37"+
    "\1\314\1\37\1\0\5\37\1\0\7\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\10\0"+
    "\1\37\1\0\4\37\1\0\2\37\1\315\2\37\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\0\1\316"+
    "\4\37\1\0\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\14\0\1\317\53\0\1\37"+
    "\1\0\2\37\1\320\1\37\1\0\5\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\15\0\1\321\52\0\1\322\57\0\1\37\1\0"+
    "\4\37\1\0\3\37\1\323\1\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\10\0\1\37\1\0\4\37\1\0\1\324\4\37\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\0\2\37"+
    "\1\325\2\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\10\0\1\37\1\0"+
    "\4\37\1\0\5\37\1\0\2\37\1\326\4\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\10\0\1\37\1\0\4\37\1\0\5\37\1\0\4\37"+
    "\1\327\2\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\30\0\1\330\37\0\1\37\1\0"+
    "\1\37\1\331\2\37\1\0\5\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\10\0\1\37\1\0\4\37\1\0\5\37\1\0\4\37"+
    "\1\332\2\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\3\37\1\333"+
    "\1\0\5\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\10\0\1\37\1\0"+
    "\4\37\1\0\5\37\1\0\3\37\1\334\3\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\40\0\1\335\27\0\1\37\1\0\4\37\1\0\5\37"+
    "\1\0\5\37\1\336\1\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\30\0\1\337\37\0"+
    "\1\37\1\0\4\37\1\0\5\37\1\0\3\37\1\340"+
    "\3\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\0\4\37"+
    "\1\341\1\0\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\1\37\1\342\5\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\10\0"+
    "\1\37\1\0\2\37\1\343\1\37\1\0\5\37\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\344\5\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\1\37\1\345\3\37\43\0\1\346\33\0"+
    "\1\347\2\0\1\350\56\0\1\351\103\0\1\352\27\0"+
    "\1\351\4\0\1\351\51\0\1\353\62\0\1\215\50\0"+
    "\1\37\1\0\3\37\1\354\1\0\5\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\203\1\0\4\37\1\0\5\37\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\0\5\37"+
    "\1\0\1\355\6\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\332\4\0\2\37\4\0\5\37\10\0\1\70\1\0"+
    "\4\70\1\0\5\70\1\0\3\70\1\356\3\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\4\70\1\357\5\70\1\0"+
    "\7\70\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\1\70\1\360\3\70\10\0\1\70\1\0"+
    "\4\70\1\0\5\70\1\0\4\70\1\361\2\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\4\70\1\0\1\70\1\362"+
    "\3\70\1\0\7\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\4\70\1\0\5\70\1\0\2\70\1\363\4\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\6\0\43\364\1\365\14\364\2\0\1\70\1\0"+
    "\2\70\1\366\1\70\1\0\5\70\1\0\7\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\4\70\1\0\2\70\1\367"+
    "\2\70\1\0\7\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\4\70\1\0\1\370\4\70\1\0\7\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\14\0\1\371\53\0\1\70\1\0\2\70\1\372\1\70"+
    "\1\0\5\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\15\0\1\373"+
    "\52\0\1\374\57\0\1\70\1\0\4\70\1\0\3\70"+
    "\1\375\1\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\70"+
    "\1\0\4\70\1\0\1\376\4\70\1\0\7\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\4\70\1\0\2\70\1\377"+
    "\2\70\1\0\7\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\4\70\1\0\5\70\1\0\2\70\1\u0100\4\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\4\70\1\0\5\70\1\0"+
    "\4\70\1\u0101\2\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\1\70\1\u0102\2\70\1\0\5\70\1\0\7\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\4\70\1\0\5\70\1\0"+
    "\4\70\1\u0103\2\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\3\70\1\u0104\1\0\5\70\1\0\7\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\5\70\1\0\3\70"+
    "\1\u0105\3\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\40\0\1\u0106\27\0\1\70"+
    "\1\0\4\70\1\0\5\70\1\0\5\70\1\u0107\1\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\30\0\1\u0108\37\0\1\70\1\0\4\70"+
    "\1\0\5\70\1\0\3\70\1\u0109\3\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\4\70\1\u010a\1\0"+
    "\7\70\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\5\70\10\0\1\70\1\0\4\70\1\0"+
    "\5\70\1\0\1\70\1\u010b\5\70\1\155\1\70\1\0"+
    "\1\234\1\70\4\0\2\70\3\0\1\111\5\70\10\0"+
    "\1\70\1\0\2\70\1\u010c\1\70\1\0\5\70\1\0"+
    "\7\70\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\5\70\10\0\1\70\1\0\4\70\1\344"+
    "\5\70\1\0\7\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\1\70\1\u010d\3\70\10\0"+
    "\1\265\1\0\4\265\1\0\5\265\1\0\7\265\1\0"+
    "\1\265\2\0\1\265\4\0\2\265\2\0\1\31\1\0"+
    "\5\265\10\0\1\70\1\0\3\70\1\u010e\1\0\5\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\256\1\0\4\70"+
    "\1\0\5\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\70"+
    "\1\0\4\70\1\0\5\70\1\0\1\u010f\6\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\4\70\1\0\5\70\1\0"+
    "\7\70\1\155\1\70\1\0\1\234\1\u0103\4\0\2\70"+
    "\3\0\1\111\5\70\30\0\1\u0110\43\0\1\u0111\77\0"+
    "\1\276\2\0\1\277\34\0\1\u0112\53\0\1\127\1\0"+
    "\2\127\1\u0113\1\127\1\0\5\127\1\0\7\127\1\0"+
    "\1\127\2\0\1\127\4\0\2\127\4\0\5\127\10\0"+
    "\1\u0114\57\0\1\u0115\15\0\1\u0116\52\0\1\u0117\51\0"+
    "\1\u0118\54\0\1\37\1\0\4\37\1\0\1\37\1\u0119"+
    "\3\37\1\0\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\31\0\1\u011a\36\0\1\37"+
    "\1\0\4\37\1\0\5\37\1\0\4\37\1\u011b\2\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\37\1\0\4\37\1\0\5\37\1\0"+
    "\4\37\1\u011c\2\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\4\37\1\u011d\2\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\10\0"+
    "\1\37\1\0\4\37\1\0\2\37\1\u011e\2\37\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\u011f\1\0\4\37\1\0\5\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\4\37\1\0"+
    "\5\37\1\0\3\37\1\u0120\3\37\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\5\37\10\0\1\37"+
    "\1\0\4\37\1\0\1\u0121\4\37\1\0\2\37\1\320"+
    "\4\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\15\0\1\u0122\52\0\1\37\1\0\3\37"+
    "\1\u0123\1\0\5\37\1\0\7\37\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\5\37\22\0\1\u0124"+
    "\11\0\1\u0122\2\0\1\u0125\52\0\1\u0126\35\0\1\37"+
    "\1\0\2\37\1\u0127\1\37\1\0\5\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\u0128\1\0\4\37\1\0\5\37\1\0"+
    "\1\37\1\u0129\5\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\2\37\1\u012a\4\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\10\0"+
    "\1\37\1\0\4\37\1\0\4\37\1\u0127\1\0\4\37"+
    "\1\u012b\2\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\4\37\1\0"+
    "\1\u012c\4\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\22\0\1\u012d\45\0"+
    "\1\37\1\0\4\37\1\0\5\37\1\0\1\u012e\6\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\37\1\0\4\37\1\0\3\37\1\u0123"+
    "\1\37\1\0\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\2\37\1\u0127\4\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\10\0"+
    "\1\37\1\0\4\37\1\0\3\37\1\u012f\1\37\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\22\0\1\u0122\45\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\2\37\1\u0121\4\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\27\0"+
    "\1\u0130\40\0\1\37\1\0\4\37\1\0\5\37\1\0"+
    "\2\37\1\u0131\4\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\1\37"+
    "\1\u0132\2\37\1\0\5\37\1\0\7\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\10\0"+
    "\1\37\1\0\4\37\1\u0133\5\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\1\37"+
    "\1\u0134\3\37\10\0\1\37\1\0\4\37\1\0\5\37"+
    "\1\0\7\37\1\u0122\1\37\1\0\1\u0125\1\37\4\0"+
    "\2\37\4\0\5\37\15\0\1\u0135\52\0\1\37\1\0"+
    "\3\37\1\u0136\1\0\5\37\1\0\7\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\6\0"+
    "\34\u0137\1\u0138\23\u0137\7\0\1\351\106\0\1\213\1\u0139"+
    "\56\0\1\213\57\0\1\213\1\0\1\351\34\0\1\351"+
    "\44\0\1\37\1\0\4\37\1\0\3\37\1\u013a\1\37"+
    "\1\0\7\37\1\u0122\1\37\1\0\1\u0125\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\4\37\1\0"+
    "\2\37\1\u013b\2\37\1\0\7\37\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\5\37\10\0\1\70"+
    "\1\0\4\70\1\0\1\70\1\u013c\3\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\31\0\1\u013d\36\0\1\70\1\0\4\70"+
    "\1\0\5\70\1\0\4\70\1\u013e\2\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\5\70\1\0\4\70"+
    "\1\u013f\2\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\4\70"+
    "\1\0\5\70\1\0\4\70\1\u0140\2\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\2\70\1\u0141\2\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\52\0\1\111\15\0\1\u0142"+
    "\1\0\4\70\1\0\5\70\1\0\7\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\5\70\1\0\3\70"+
    "\1\u0143\3\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\4\70"+
    "\1\0\1\u0144\4\70\1\0\2\70\1\372\4\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\15\0\1\u0145\52\0\1\70\1\0\3\70\1\u0146"+
    "\1\0\5\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\22\0\1\u0124"+
    "\11\0\1\u0145\2\0\1\u0147\52\0\1\u0148\35\0\1\70"+
    "\1\0\2\70\1\u0149\1\70\1\0\5\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\u014a\1\0\4\70\1\0\5\70"+
    "\1\0\1\70\1\u014b\5\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\70"+
    "\1\0\4\70\1\0\5\70\1\0\2\70\1\u014c\4\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\4\70"+
    "\1\u0149\1\0\4\70\1\u014d\2\70\1\155\1\70\1\0"+
    "\1\234\1\70\4\0\2\70\3\0\1\111\5\70\10\0"+
    "\1\70\1\0\4\70\1\0\1\u014e\4\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\5\70"+
    "\1\0\1\u014f\6\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\4\70\1\0\3\70\1\u0146\1\70\1\0\7\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\4\70\1\0\5\70\1\0"+
    "\2\70\1\u0149\4\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\4\70\1\0\3\70\1\u0150\1\70\1\0\7\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\22\0\1\u0145\45\0\1\70\1\0\4\70\1\0"+
    "\5\70\1\0\2\70\1\u0144\4\70\1\155\1\70\1\0"+
    "\1\234\1\70\4\0\2\70\3\0\1\111\5\70\27\0"+
    "\1\u0151\40\0\1\70\1\0\4\70\1\0\5\70\1\0"+
    "\2\70\1\u0152\4\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\1\70\1\u0153\2\70\1\0\5\70\1\0\7\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\4\70\1\u0133\5\70\1\0"+
    "\7\70\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\1\70\1\u0154\3\70\10\0\1\70\1\0"+
    "\4\70\1\0\5\70\1\0\7\70\1\u0145\1\70\1\0"+
    "\1\u0155\1\70\4\0\2\70\3\0\1\111\5\70\10\0"+
    "\1\70\1\0\3\70\1\u0156\1\0\5\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\3\70"+
    "\1\u0157\1\70\1\0\7\70\1\u0145\1\70\1\0\1\u0155"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\70"+
    "\1\0\4\70\1\0\2\70\1\u0158\2\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\22\0\1\u0159\60\0\1\133\44\0\1\127"+
    "\1\0\4\127\1\0\4\127\1\u015a\1\0\7\127\1\0"+
    "\1\127\2\0\1\127\4\0\2\127\4\0\5\127\15\0"+
    "\1\u015b\64\0\1\u015c\56\0\1\u015d\55\0\1\u015e\71\0"+
    "\1\u015f\36\0\1\37\1\0\4\37\1\0\5\37\1\0"+
    "\4\37\1\u0160\2\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\16\0\1\u0161\35\0\1\u0161"+
    "\13\0\1\37\1\0\4\37\1\u0161\5\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\1\37\1\u0162\3\37\10\0\1\37\1\0\4\37\1\0"+
    "\5\37\1\0\7\37\1\u0163\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\6\37\1\u0123\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\5\37\10\0\1\37"+
    "\1\0\4\37\1\0\5\37\1\0\2\37\1\u0164\4\37"+
    "\1\u0122\1\37\1\0\1\u0125\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\37\1\0\3\37\1\u0165\1\0\5\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\4\37\1\0"+
    "\5\37\1\0\2\37\1\u0166\4\37\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\5\37\10\0\1\37"+
    "\1\0\4\37\1\0\2\37\1\u0123\2\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\34\0\1\u0122\2\0\1\u0125\46\0\1\u0167\60\0"+
    "\1\u0168\40\0\1\37\1\0\4\37\1\0\5\37\1\0"+
    "\7\37\1\u0169\1\37\1\0\1\u016a\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\0\3\37"+
    "\1\u016b\1\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\10\0\1\37\1\0"+
    "\4\37\1\0\2\37\1\u016c\2\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\10\0\1\37\1\0\4\37\1\0\5\37\1\0\3\37"+
    "\1\u016d\3\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\4\37\1\0"+
    "\5\37\1\0\7\37\1\u016e\1\37\1\0\1\u016f\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\2\37\1\320\4\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\14\0"+
    "\1\u0170\53\0\1\37\1\0\4\37\1\0\5\37\1\0"+
    "\4\37\1\u0171\2\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\2\37"+
    "\1\u0172\1\37\1\0\5\37\1\0\7\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\26\0"+
    "\1\u0122\41\0\1\37\1\0\4\37\1\0\5\37\1\0"+
    "\1\37\1\u0123\5\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\4\37\1\u0173\2\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\10\0"+
    "\1\u0174\57\0\1\u0175\1\0\4\37\1\0\5\37\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\22\0\1\u0169\45\0\1\37\1\0\4\37"+
    "\1\0\3\37\1\u0127\1\37\1\0\7\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\6\0"+
    "\114\u0137\1\u0176\23\u0137\40\0\1\351\21\0\1\37\1\0"+
    "\4\37\1\0\5\37\1\0\1\37\1\u0177\5\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\10\0\1\37\1\0\4\37\1\0\1\u0178\4\37\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\70\1\0\4\70\1\0\5\70"+
    "\1\0\4\70\1\u0179\2\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\16\0\1\u017a"+
    "\35\0\1\u017a\13\0\1\70\1\0\4\70\1\u017a\5\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\1\70\1\u017b\3\70\10\0\1\70"+
    "\1\0\4\70\1\0\5\70\1\0\7\70\1\u0163\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\5\70\1\0\6\70"+
    "\1\u0146\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\5\70\10\0\1\70\1\0\4\70\1\0"+
    "\5\70\1\0\2\70\1\u017c\4\70\1\u0145\1\70\1\0"+
    "\1\u0155\1\70\4\0\2\70\3\0\1\111\5\70\10\0"+
    "\1\70\1\0\3\70\1\u017d\1\0\5\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\5\70"+
    "\1\0\2\70\1\u017e\4\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\70"+
    "\1\0\4\70\1\0\2\70\1\u0146\2\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\34\0\1\u0145\2\0\1\u0147\47\0\1\u017f"+
    "\40\0\1\70\1\0\4\70\1\0\5\70\1\0\7\70"+
    "\1\u0169\1\70\1\0\1\u0180\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\3\70"+
    "\1\u0181\1\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\70"+
    "\1\0\4\70\1\0\2\70\1\u0182\2\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\5\70"+
    "\1\0\3\70\1\u0183\3\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\70"+
    "\1\0\4\70\1\0\5\70\1\0\7\70\1\u0184\1\70"+
    "\1\0\1\u0185\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\5\70\1\0\2\70"+
    "\1\372\4\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\4\70"+
    "\1\0\5\70\1\0\4\70\1\u0186\2\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\2\70\1\u0187\1\70\1\0\5\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\26\0\1\u0145\41\0\1\70"+
    "\1\0\4\70\1\0\5\70\1\0\1\70\1\u0146\5\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\5\70"+
    "\1\0\4\70\1\u0188\2\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\u0189"+
    "\1\0\4\70\1\0\5\70\1\0\7\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\3\70\1\u0149\1\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\4\70"+
    "\1\0\5\70\1\0\1\70\1\u018a\5\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\1\u018b\4\70\1\0"+
    "\7\70\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\5\70\14\0\1\u018c\61\0\1\u018d\35\0"+
    "\1\u018d\26\0\1\u018e\63\0\1\u018f\43\0\1\u0190\66\0"+
    "\1\u0191\45\0\1\37\1\0\4\37\1\0\3\37\1\u0192"+
    "\1\37\1\0\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\14\0\1\u0130\53\0\1\37"+
    "\1\0\2\37\1\u0131\1\37\1\0\5\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\u0193\1\0\4\u0193\1\0\5\u0193\1\0"+
    "\7\u0193\1\u0163\1\u0193\1\0\1\156\1\u0193\4\0\2\u0193"+
    "\4\0\4\u0193\11\0\1\u0194\1\0\4\37\1\0\5\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\4\37\1\u018d"+
    "\5\37\1\0\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\1\37\1\u0195\3\37\10\0\1\37"+
    "\1\0\3\37\1\u0127\1\0\5\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\22\0\1\u0196\56\0\1\u0122\72\0\1\u0169\2\0\1\u016a"+
    "\30\0\1\37\1\0\4\37\1\0\4\37\1\u0197\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\0\5\37"+
    "\1\0\2\37\1\u0198\4\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\10\0\1\37\1\0"+
    "\4\37\1\0\3\37\1\u0199\1\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\34\0\1\u016e\2\0\1\u016f\44\0\1\u019a\30\0\1\u019a"+
    "\12\0\1\37\1\0\4\37\1\0\3\37\1\u019b\1\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\4\37\1\0"+
    "\5\37\1\u019a\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\2\37\1\u019c\2\37\10\0\1\37"+
    "\1\0\4\37\1\0\3\37\1\u019d\1\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\27\0\1\u019e\40\0\1\37\1\0\4\37\1\0"+
    "\5\37\1\0\2\37\1\u019f\4\37\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\5\37\10\0\1\37"+
    "\1\0\4\37\1\0\3\37\1\u01a0\1\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\37\1\0\1\37\1\u01a1\2\37\1\0"+
    "\5\37\1\0\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\5\37\10\0\1\70\1\0\4\70"+
    "\1\0\3\70\1\u01a2\1\70\1\0\7\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\14\0\1\u0151\53\0\1\70\1\0\2\70\1\u0152\1\70"+
    "\1\0\5\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\u01a3"+
    "\1\0\4\70\1\0\5\70\1\0\7\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\u018d\5\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\1\70\1\u01a4\3\70\10\0\1\70\1\0\3\70"+
    "\1\u0149\1\0\5\70\1\0\7\70\1\155\1\70\1\0"+
    "\1\234\1\70\4\0\2\70\3\0\1\111\5\70\21\0"+
    "\1\u0145\46\0\1\70\1\0\4\70\1\0\4\70\1\u01a5"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\4\70"+
    "\1\0\5\70\1\0\2\70\1\u01a6\4\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\3\70\1\u01a7\1\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\34\0\1\u0184\2\0\1\u01a8"+
    "\30\0\1\70\1\0\4\70\1\0\3\70\1\u01a9\1\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\4\70"+
    "\1\0\5\70\1\u019a\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\2\70\1\u01aa\2\70"+
    "\10\0\1\70\1\0\4\70\1\0\3\70\1\u01ab\1\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\4\70"+
    "\1\0\5\70\1\0\2\70\1\u01ac\4\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\4\70\1\0\3\70\1\u01ad\1\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\1\70"+
    "\1\u01ae\2\70\1\0\5\70\1\0\7\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\24\0\1\u01af\30\0\1\u01af\21\0\1\u01b0\53\0\1\u01b1"+
    "\74\0\1\u0191\44\0\1\u01b2\52\0\1\37\1\0\4\37"+
    "\1\0\5\37\1\0\6\37\1\u01b3\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\5\37\10\0\1\u0193"+
    "\1\0\4\u0193\1\0\5\u0193\1\0\7\u0193\1\u0169\1\u0193"+
    "\1\0\1\u016a\1\u0193\4\0\2\u0193\4\0\5\u0193\10\0"+
    "\1\37\1\0\3\37\1\u0177\1\0\5\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\10\0\1\37\1\0\4\37\1\0\1\u01b4\4\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\21\0\1\u01b5\46\0\1\37\1\0"+
    "\1\37\1\u01b6\2\37\1\0\5\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\10\0\1\37\1\0\4\37\1\0\5\37\1\0\3\37"+
    "\1\u019d\3\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\3\37\1\u01b7"+
    "\1\0\5\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\16\0\1\u01b8\35\0"+
    "\1\u01b8\13\0\1\37\1\0\4\37\1\0\5\37\1\0"+
    "\7\37\1\u01b9\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\u01b8\5\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\1\37\1\u01ba\3\37\31\0\1\u01b5\36\0"+
    "\1\37\1\0\4\37\1\0\5\37\1\0\4\37\1\u01b3"+
    "\2\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\37\1\0\4\37\1\0\2\37"+
    "\1\u01b3\2\37\1\0\7\37\1\155\1\37\1\0\1\156"+
    "\1\37\4\0\2\37\4\0\5\37\10\0\1\37\1\0"+
    "\3\37\1\u01bb\1\0\5\37\1\0\7\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\10\0"+
    "\1\70\1\0\4\70\1\0\5\70\1\0\6\70\1\u01bc"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\3\70\1\u018a\1\0"+
    "\5\70\1\0\7\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\4\70\1\0\1\u01bd\4\70\1\0\7\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\1\70\1\u01be\2\70\1\0\5\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\10\0\1\70\1\0\4\70"+
    "\1\0\5\70\1\0\3\70\1\u01ab\3\70\1\155\1\70"+
    "\1\0\1\234\1\70\4\0\2\70\3\0\1\111\5\70"+
    "\10\0\1\70\1\0\3\70\1\u01bf\1\0\5\70\1\0"+
    "\7\70\1\155\1\70\1\0\1\234\1\70\4\0\2\70"+
    "\3\0\1\111\5\70\10\0\1\70\1\0\4\70\1\0"+
    "\5\70\1\0\7\70\1\u01b9\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\4\70\1\u01b8\5\70\1\0\7\70\1\155\1\70\1\0"+
    "\1\234\1\70\4\0\2\70\3\0\1\111\1\70\1\u01c0"+
    "\3\70\10\0\1\70\1\0\4\70\1\0\5\70\1\0"+
    "\4\70\1\u01bc\2\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\4\70\1\0\2\70\1\u01bc\2\70\1\0\7\70\1\155"+
    "\1\70\1\0\1\234\1\70\4\0\2\70\3\0\1\111"+
    "\5\70\10\0\1\70\1\0\3\70\1\u01c1\1\0\5\70"+
    "\1\0\7\70\1\155\1\70\1\0\1\234\1\70\4\0"+
    "\2\70\3\0\1\111\5\70\16\0\1\u01c2\35\0\1\u01c2"+
    "\17\0\1\u0191\64\0\1\u015f\54\0\1\u01c3\35\0\1\u01c3"+
    "\13\0\1\37\1\0\2\37\1\u019d\1\37\1\0\5\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\4\37\1\0"+
    "\2\37\1\u0173\2\37\1\0\7\37\1\155\1\37\1\0"+
    "\1\156\1\37\4\0\2\37\4\0\5\37\10\0\1\37"+
    "\1\0\4\37\1\0\3\37\1\u01c4\1\37\1\0\7\37"+
    "\1\155\1\37\1\0\1\156\1\37\4\0\2\37\4\0"+
    "\5\37\17\0\1\u01c5\60\0\1\u01c6\13\0\1\u01b9\2\0"+
    "\1\156\30\0\1\37\1\0\4\37\1\0\1\u01c7\4\37"+
    "\1\0\7\37\1\155\1\37\1\0\1\156\1\37\4\0"+
    "\2\37\4\0\5\37\10\0\1\37\1\0\4\37\1\u01c3"+
    "\5\37\1\0\7\37\1\155\1\37\1\0\1\156\1\37"+
    "\4\0\2\37\4\0\1\37\1\u01c8\3\37\10\0\1\70"+
    "\1\0\2\70\1\u01ab\1\70\1\0\5\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\2\70"+
    "\1\u0188\2\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\70"+
    "\1\0\4\70\1\0\3\70\1\u01c9\1\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\4\70\1\0\1\u01ca"+
    "\4\70\1\0\7\70\1\155\1\70\1\0\1\234\1\70"+
    "\4\0\2\70\3\0\1\111\5\70\10\0\1\70\1\0"+
    "\4\70\1\u01c3\5\70\1\0\7\70\1\155\1\70\1\0"+
    "\1\234\1\70\4\0\2\70\3\0\1\111\1\70\1\u01cb"+
    "\3\70\17\0\1\274\54\0\1\u015f\53\0\1\37\1\0"+
    "\4\37\1\0\2\37\1\u0127\2\37\1\0\7\37\1\155"+
    "\1\37\1\0\1\156\1\37\4\0\2\37\4\0\5\37"+
    "\14\0\1\u01cc\64\0\1\u01cd\46\0\1\37\1\0\2\37"+
    "\1\u01ce\1\37\1\0\5\37\1\0\7\37\1\155\1\37"+
    "\1\0\1\156\1\37\4\0\2\37\4\0\5\37\10\0"+
    "\1\37\1\0\2\37\1\u0173\1\37\1\0\5\37\1\0"+
    "\7\37\1\155\1\37\1\0\1\156\1\37\4\0\2\37"+
    "\4\0\5\37\10\0\1\70\1\0\4\70\1\0\2\70"+
    "\1\u0149\2\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\10\0\1\70"+
    "\1\0\2\70\1\u01cf\1\70\1\0\5\70\1\0\7\70"+
    "\1\155\1\70\1\0\1\234\1\70\4\0\2\70\3\0"+
    "\1\111\5\70\10\0\1\70\1\0\2\70\1\u0188\1\70"+
    "\1\0\5\70\1\0\7\70\1\155\1\70\1\0\1\234"+
    "\1\70\4\0\2\70\3\0\1\111\5\70\22\0\1\u01d0"+
    "\45\0\1\u01d1\65\0\1\u01d2\35\0\1\u01d2\27\0\1\u01d3"+
    "\30\0\1\u01d3\20\0\1\u01d4\35\0\1\u01d4\22\0\1\u01d5"+
    "\54\0\1\u01b5\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\2\11\6\1\4\11\20\1\2\11\4\1\1\11"+
    "\2\1\1\11\21\1\1\11\2\1\1\11\4\1\1\11"+
    "\2\1\1\11\2\1\3\11\3\1\2\11\3\1\3\11"+
    "\6\0\5\1\1\0\2\11\3\1\1\0\1\1\1\11"+
    "\2\0\5\1\1\0\4\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\11\6\0\16\1\1\0\1\1\2\0\11\1"+
    "\1\0\1\1\1\0\5\1\1\0\5\1\2\0\1\11"+
    "\1\0\1\11\1\0\1\1\4\0\1\1\1\0\7\1"+
    "\1\0\1\1\2\0\5\1\1\0\4\1\1\0\1\1"+
    "\1\0\4\1\1\0\2\1\5\0\3\1\1\0\4\1"+
    "\2\0\3\1\1\0\1\1\2\0\11\1\1\0\1\1"+
    "\1\0\7\1\1\0\1\11\1\0\1\1\5\0\1\1"+
    "\1\0\7\1\1\0\1\1\1\0\1\11\1\0\6\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\0\7\1\1\0\1\1\1\11\1\0"+
    "\10\1\1\0\7\1\1\0\1\1\5\0\1\1\1\0"+
    "\1\1\1\0\3\1\2\0\1\1\1\11\3\1\1\0"+
    "\1\11\1\0\3\1\1\0\1\1\1\0\3\1\1\0"+
    "\4\1\1\0\4\1\1\0\7\1\5\0\1\11\4\1"+
    "\1\0\3\1\1\0\3\1\1\0\11\1\1\11\6\1"+
    "\4\0\2\1\1\11\2\1\2\0\10\1\2\0\1\1"+
    "\2\0\5\1\1\11\1\0\2\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[469];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	Map<String, String> variables = new HashMap<String, String>();
	List<String> arrays = new LinkedList<String>();
	List<Integer> errors = new LinkedList<Integer>();
	String type;
	String expressionType = "empty";
	boolean exception = false;
	boolean expression = false;
	boolean error = false;
	boolean errorThrown = false;
	boolean dim = false;
	boolean isArray = false;
	boolean end = true;
	int par = 0;
	String conv = "";
	
	public COMTYPEExpression(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	
	
	private void checkExpression(String var) throws JFlexException {
		String key = variables.get(var);
		if (key != null) {
			if(exception && expression) {
				if(!key.equals("integer") && !expressionType.equals(key) && !expressionType.equals("empty"))
					error = true;
				exception = false;
			}
			else  {
				if (expressionType.equals("empty")) 
					expressionType = key;
				else if (!expressionType.equals(key)) 
					error = true;
			}
			
			if (expression && error && !errorThrown && !errors.contains(yyline)) {
				errorThrown = true;
				setError(location,"Mixed type " + expressionType + " with " + key, yyline+1);
				errors.add(yyline);
			}
		}
		if (arrays.contains(var)) isArray = true;
	}

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMTYPEExpression(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 44: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 45: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 46: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 47: break;
          case 5: 
            { 
            }
          case 48: break;
          case 6: 
            { error = false; errorThrown=false; yybegin(NEW_LINE);
            }
          case 49: break;
          case 7: 
            { location = location + " " + yytext(); yybegin(COMMENT);
            }
          case 50: break;
          case 8: 
            { if(!isArray) { checkExpression(yytext()); }
            }
          case 51: break;
          case 9: 
            { par++;
            }
          case 52: break;
          case 10: 
            { expression = true;
            }
          case 53: break;
          case 11: 
            { expression = false; expressionType = "empty";
            }
          case 54: break;
          case 12: 
            { par--; if(isArray) isArray=false;
            }
          case 55: break;
          case 13: 
            { expressionType="empty"; expression = false; exception = false; error = false; errorThrown=false; isArray = false; par=0;
            }
          case 56: break;
          case 14: 
            { if(!isArray) { checkExpression(yytext()); } end=true;
            }
          case 57: break;
          case 15: 
            { exception=true; expression = true;
            }
          case 58: break;
          case 16: 
            { end=false;
            }
          case 59: break;
          case 17: 
            { expressionType="empty"; expression=false; exception=false; error=false;
            }
          case 60: break;
          case 18: 
            { if(end) {expressionType="empty"; expression = false; exception = false; error = false; errorThrown=false; isArray = false; par=0; yybegin(NEW_LINE);}
            }
          case 61: break;
          case 19: 
            { expressionType="empty"; expression = false; exception = false; error = false; errorThrown=false; isArray = false; par=0; yybegin(NEW_LINE);
            }
          case 62: break;
          case 20: 
            { variables.put(yytext(), type);
								 if(dim) arrays.add(yytext());
            }
          case 63: break;
          case 21: 
            { if (end ) {expressionType="empty"; expression = false; exception = false; error = false; errorThrown=false; isArray = false; dim = false; par= 0; yybegin(NEW_LINE);}
								 end = true;
            }
          case 64: break;
          case 22: 
            { par--; if (par==0) yybegin(LINE);
            }
          case 65: break;
          case 23: 
            { par--; if (par==0) {
									String et = "";
									if(conv.contains("real") || conv.contains("aimag")) et = "REAL";
									else if(conv.contains("dble")|| conv.contains("float")) et = "DOUBLE PRECISION";
									else if(conv.contains("cmplx")) et = "COMPLEX";
									else if(conv.contains("char") || conv.contains("len")) et = "CHARACTER";
									else et = "INTEGER";
									if(expression) {
										if(expressionType.equals("empty")) expressionType = et;
										else if(!et.equals(expressionType) && !errors.contains(yyline)) {
											setError(location,"Mixed type " + expressionType + " with " + et, yyline+1);
											errors.add(yyline);
										}
									} 
									yybegin(LINE);
								 }
            }
          case 66: break;
          case 24: 
            { String key = variables.get(yytext());
								 if(key != null) { type="REAL"; yybegin(DECL_PARAMS);}
								 else {par=1; conv="real"; yybegin(CONV_FUNC);}
            }
          case 67: break;
          case 25: 
            { expressionType="empty"; expression = false; exception = false; error = false; errorThrown=false; isArray = false;par=0;yybegin(NEW_LINE);
            }
          case 68: break;
          case 26: 
            { type="REAL"; yybegin(DECL_PARAMS);
            }
          case 69: break;
          case 27: 
            { arrays.add(yytext());
            }
          case 70: break;
          case 28: 
            { par--; if(isArray) isArray=false;
								 if(par==0){expressionType="empty"; expression = false; exception = false; error = false; isArray = false; yybegin(LINE);}
            }
          case 71: break;
          case 29: 
            { par--; if(par==0) yybegin(DECLARATION);
            }
          case 72: break;
          case 30: 
            { if (end) yybegin(LINE);
								 end = true;
            }
          case 73: break;
          case 31: 
            { String v = yytext().substring(0, yytext().length()-1).trim(); 
								 if(variables.get(v) != null) {par=1; checkExpression(v); yybegin(AVOID);}
            }
          case 74: break;
          case 32: 
            { yybegin(IF_STATE);
            }
          case 75: break;
          case 33: 
            { yybegin(DECLARATION);
            }
          case 76: break;
          case 34: 
            { par++; String var = yytext(); var = var.substring(0, var.length()-1).trim();  
								 variables.put(var, type); arrays.add(yytext().substring(0, yytext().length()-1));
								 par=1; yybegin(AVOIDI);
            }
          case 77: break;
          case 35: 
            { yybegin(DIMENSION);
            }
          case 78: break;
          case 36: 
            { dim = true;
            }
          case 79: break;
          case 37: 
            { par++; conv=yytext().toLowerCase(); yybegin(CONV_FUNC);
            }
          case 80: break;
          case 38: 
            { yybegin(IO);
            }
          case 81: break;
          case 39: 
            { type=yytext().toUpperCase(); yybegin(DECL_PARAMS);
            }
          case 82: break;
          case 40: 
            { par++; conv=yytext().toLowerCase(); yybegin(CONV_FUNC); end=true;
            }
          case 83: break;
          case 41: 
            { par++; yybegin(REAL);
            }
          case 84: break;
          case 42: 
            { par++;yybegin(REAL);
            }
          case 85: break;
          case 43: 
            { location = yytext(); yybegin(NAMING);
            }
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
