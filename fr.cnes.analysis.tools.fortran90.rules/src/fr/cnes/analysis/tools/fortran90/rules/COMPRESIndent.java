/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.INST.Indent rule.	    */
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMPRESIndent.lex</tt>
 */
public class COMPRESIndent extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int AVOID = 10;
  public static final int IF_STATE = 12;
  public static final int TYPE_STATE = 14;
  public static final int DO_STATE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\4\1\50\1\51\1\36\22\0\1\25\1\1\1\45"+
    "\1\52\2\0\1\37\1\44\1\27\1\30\1\3\1\0\1\35\3\0"+
    "\12\46\3\0\1\0\3\0\1\22\1\20\1\2\1\16\1\15\1\5"+
    "\1\21\1\31\1\41\2\40\1\24\1\23\1\7\1\12\1\13\1\40"+
    "\1\14\1\42\1\10\1\6\1\26\1\34\1\32\1\33\1\40\4\0"+
    "\1\43\1\0\1\22\1\20\1\2\1\16\1\15\1\5\1\21\1\31"+
    "\1\41\2\40\1\24\1\23\1\7\1\12\1\13\1\40\1\14\1\42"+
    "\1\10\1\6\1\26\1\34\1\32\1\33\1\40\12\0\1\50\252\0"+
    "\2\11\115\0\1\17\u1ea8\0\1\50\1\50\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\11\1\1\5\1\6"+
    "\1\7\1\2\1\10\1\11\1\12\1\13\1\14\1\3"+
    "\1\15\20\14\1\16\1\14\1\17\1\14\1\6\1\20"+
    "\20\6\2\21\1\22\1\23\1\3\1\24\1\25\13\0"+
    "\4\14\2\0\5\14\2\0\7\14\2\0\1\14\4\6"+
    "\2\0\5\6\2\0\7\6\14\0\5\14\1\26\2\0"+
    "\3\14\1\0\2\14\2\0\2\14\1\0\7\14\4\6"+
    "\1\27\1\0\3\6\1\0\2\6\2\0\2\6\1\0"+
    "\5\6\14\0\5\14\2\0\2\14\1\30\1\14\1\31"+
    "\2\14\1\0\3\14\1\0\2\14\1\0\3\14\2\32"+
    "\1\14\2\0\1\14\1\0\1\14\1\0\6\14\1\33"+
    "\2\14\1\0\3\14\1\0\2\14\1\0\3\14\4\6"+
    "\1\0\4\6\1\34\2\6\1\0\3\6\1\0\2\6"+
    "\1\0\3\6\2\35\1\6\2\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\36\15\0\4\14\2\26\3\0\2\14"+
    "\2\0\4\14\1\0\2\14\1\31\2\0\2\14\13\0"+
    "\1\14\1\31\3\14\2\0\2\14\2\0\1\14\1\0"+
    "\11\14\1\0\2\14\1\33\2\0\2\14\13\0\1\14"+
    "\1\33\3\14\3\6\2\27\2\0\2\6\2\0\4\6"+
    "\1\0\2\6\1\34\2\0\2\6\13\0\1\6\1\34"+
    "\3\6\2\0\2\6\2\0\1\6\1\0\4\6\14\0"+
    "\1\37\1\0\3\14\1\0\1\14\6\0\6\14\1\0"+
    "\3\14\2\0\2\14\6\0\1\31\3\0\1\31\1\0"+
    "\5\14\2\32\1\14\1\0\1\40\1\0\10\14\1\0"+
    "\3\14\2\0\2\14\6\0\1\33\3\0\1\33\1\0"+
    "\5\14\2\6\1\0\1\6\5\0\6\6\1\0\3\6"+
    "\2\0\2\6\6\0\1\34\3\0\1\34\1\0\5\6"+
    "\2\35\1\6\1\0\1\41\1\0\3\6\10\0\1\14"+
    "\1\0\1\14\5\0\1\30\4\14\1\31\1\0\4\14"+
    "\2\0\1\14\1\0\1\14\13\0\4\14\2\0\6\14"+
    "\1\33\1\0\4\14\2\0\1\14\1\0\1\14\13\0"+
    "\4\14\1\0\1\6\5\0\4\6\1\34\1\0\4\6"+
    "\3\0\1\6\13\0\4\6\2\0\2\6\3\0\2\42"+
    "\1\40\3\0\3\14\4\0\3\14\2\0\1\14\3\0"+
    "\1\31\5\0\4\14\2\0\4\14\4\0\3\14\2\0"+
    "\1\14\3\0\1\33\5\0\4\14\1\41\3\0\3\6"+
    "\4\0\3\6\5\0\1\34\4\0\4\6\2\0\1\6"+
    "\4\0\2\14\1\0\1\14\4\0\3\14\1\0\1\43"+
    "\7\0\3\14\1\0\2\14\1\0\1\14\4\0\3\14"+
    "\1\0\1\44\7\0\3\14\2\0\2\6\1\0\1\6"+
    "\4\0\3\6\7\0\3\6\6\0\1\14\3\0\1\14"+
    "\7\0\1\43\2\14\2\0\1\14\3\0\1\14\7\0"+
    "\1\44\2\14\3\0\1\6\12\0\2\6\10\0\1\14"+
    "\5\0\1\14\4\0\1\6\75\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1011];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0183\0\u0183\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0183"+
    "\0\u0183\0\u0183\0\u0183\0\u0183\0\u0183\0\u0387\0\u0183\0\u0183"+
    "\0\u03b2\0\u0183\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4"+
    "\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u03b2\0\u0183\0\u06b8\0\u06e3\0\u0183"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0637\0\u0662"+
    "\0\u0183\0\u0968\0\u0183\0\u0183\0\u0993\0\u0183\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41"+
    "\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99"+
    "\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0637\0\u0662"+
    "\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b"+
    "\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3"+
    "\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb"+
    "\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453"+
    "\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u0183\0\u1580"+
    "\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8"+
    "\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830"+
    "\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u0183"+
    "\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5"+
    "\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d"+
    "\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65"+
    "\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd"+
    "\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015"+
    "\0\u0183\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142"+
    "\0\u216d\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a"+
    "\0\u22c5\0\u22f0\0\u231b\0\u2346\0\u2371\0\u239c\0\u23c7\0\u23f2"+
    "\0\u241d\0\u2448\0\u2473\0\u249e\0\u24c9\0\u0183\0\u24f4\0\u251f"+
    "\0\u254a\0\u2575\0\u25a0\0\u25cb\0\u25f6\0\u2621\0\u264c\0\u2677"+
    "\0\u26a2\0\u26cd\0\u26f8\0\u2723\0\u274e\0\u2779\0\u27a4\0\u27cf"+
    "\0\u27fa\0\u2825\0\u2850\0\u287b\0\u0183\0\u28a6\0\u28d1\0\u28fc"+
    "\0\u2927\0\u2952\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u2a29\0\u2a54"+
    "\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00\0\u2b2b\0\u2b56\0\u2b81\0\u2bac"+
    "\0\u2bd7\0\u2c02\0\u2c2d\0\u2c58\0\u2c83\0\u2cae\0\u2cd9\0\u0183"+
    "\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0\0\u2ddb\0\u2e06\0\u2e31"+
    "\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08\0\u2f33\0\u2f5e\0\u2f89"+
    "\0\u2fb4\0\u2fdf\0\u300a\0\u3035\0\u3060\0\u308b\0\u30b6\0\u30e1"+
    "\0\u2fdf\0\u300a\0\u310c\0\u3137\0\u3162\0\u318d\0\u31b8\0\u31e3"+
    "\0\u320e\0\u3239\0\u3264\0\u328f\0\u32ba\0\u32e5\0\u3310\0\u333b"+
    "\0\u3366\0\u3391\0\u33bc\0\u33e7\0\u3412\0\u343d\0\u3468\0\u3493"+
    "\0\u34be\0\u34e9\0\u0408\0\u3514\0\u353f\0\u356a\0\u3595\0\u226f"+
    "\0\u35c0\0\u35eb\0\u3616\0\u3641\0\u366c\0\u3697\0\u36c2\0\u36ed"+
    "\0\u3718\0\u3743\0\u376e\0\u3799\0\u37c4\0\u37ef\0\u381a\0\u3845"+
    "\0\u3870\0\u389b\0\u38c6\0\u38f1\0\u391c\0\u3947\0\u3972\0\u399d"+
    "\0\u39c8\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5"+
    "\0\u3b20\0\u3b4b\0\u3b76\0\u0408\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22"+
    "\0\u3c4d\0\u3c78\0\u3ca3\0\u3cce\0\u3cf9\0\u3d24\0\u3d4f\0\u3d7a"+
    "\0\u3ca3\0\u3cce\0\u3da5\0\u3dd0\0\u3dfb\0\u3e26\0\u3e51\0\u3e7c"+
    "\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28\0\u3f53\0\u3f7e\0\u3fa9\0\u3fd4"+
    "\0\u3fff\0\u402a\0\u4055\0\u4080\0\u40ab\0\u40d6\0\u4101\0\u412c"+
    "\0\u4157\0\u4182\0\u0739\0\u41ad\0\u41d8\0\u4203\0\u422e\0\u2ad5"+
    "\0\u4259\0\u4284\0\u42af\0\u42da\0\u4305\0\u4330\0\u435b\0\u4386"+
    "\0\u43b1\0\u43dc\0\u4407\0\u4432\0\u445d\0\u0204\0\u4488\0\u44b3"+
    "\0\u44de\0\u4509\0\u4534\0\u455f\0\u458a\0\u45b5\0\u0183\0\u45e0"+
    "\0\u460b\0\u4636\0\u4661\0\u468c\0\u46b7\0\u46e2\0\u470d\0\u4738"+
    "\0\u4763\0\u478e\0\u47b9\0\u47e4\0\u480f\0\u483a\0\u4865\0\u4890"+
    "\0\u48bb\0\u48e6\0\u4911\0\u493c\0\u4967\0\u4992\0\u49bd\0\u49e8"+
    "\0\u4a13\0\u4a3e\0\u4a69\0\u4a94\0\u4abf\0\u4aea\0\u4b15\0\u4b40"+
    "\0\u4b6b\0\u4b96\0\u4bc1\0\u4bec\0\u4c17\0\u4c42\0\u4c6d\0\u4c98"+
    "\0\u4cc3\0\u4cee\0\u0183\0\u0408\0\u4d19\0\u4d44\0\u0408\0\u4d6f"+
    "\0\u4d9a\0\u4dc5\0\u4df0\0\u4e1b\0\u4e46\0\u4e71\0\u4e9c\0\u4ec7"+
    "\0\u4ef2\0\u4f1d\0\u4f48\0\u4f73\0\u4f9e\0\u4fc9\0\u4ff4\0\u501f"+
    "\0\u504a\0\u5075\0\u50a0\0\u50cb\0\u50f6\0\u5121\0\u514c\0\u5177"+
    "\0\u51a2\0\u51cd\0\u51f8\0\u5223\0\u524e\0\u5279\0\u52a4\0\u52cf"+
    "\0\u52fa\0\u5325\0\u5350\0\u537b\0\u53a6\0\u53d1\0\u53fc\0\u5427"+
    "\0\u5452\0\u547d\0\u54a8\0\u54d3\0\u54fe\0\u5529\0\u5554\0\u557f"+
    "\0\u55aa\0\u55d5\0\u5600\0\u562b\0\u5656\0\u5681\0\u56ac\0\u56d7"+
    "\0\u5702\0\u572d\0\u5758\0\u5783\0\u57ae\0\u57d9\0\u5804\0\u582f"+
    "\0\u585a\0\u5885\0\u58b0\0\u58db\0\u5906\0\u5931\0\u595c\0\u5987"+
    "\0\u59b2\0\u0183\0\u0739\0\u59dd\0\u5a08\0\u0739\0\u5a33\0\u5a5e"+
    "\0\u5a89\0\u5ab4\0\u5adf\0\u5b0a\0\u5b35\0\u5b60\0\u5b8b\0\u5bb6"+
    "\0\u5be1\0\u5c0c\0\u5c37\0\u5c62\0\u5c8d\0\u5cb8\0\u5ce3\0\u5d0e"+
    "\0\u5d39\0\u5d64\0\u5d8f\0\u5dba\0\u5de5\0\u5e10\0\u5e3b\0\u5e66"+
    "\0\u5e91\0\u5ebc\0\u5ee7\0\u5e66\0\u5f12\0\u5f3d\0\u5f68\0\u5f93"+
    "\0\u5fbe\0\u5fe9\0\u6014\0\u603f\0\u606a\0\u6095\0\u60c0\0\u60eb"+
    "\0\u6116\0\u6141\0\u616c\0\u6197\0\u61c2\0\u61ed\0\u6218\0\u6243"+
    "\0\u626e\0\u6299\0\u62c4\0\u62ef\0\u631a\0\u6345\0\u6370\0\u639b"+
    "\0\u63c6\0\u63f1\0\u641c\0\u6447\0\u6472\0\u63f1\0\u649d\0\u64c8"+
    "\0\u64f3\0\u651e\0\u6549\0\u6574\0\u659f\0\u65ca\0\u65f5\0\u6620"+
    "\0\u664b\0\u6676\0\u66a1\0\u66cc\0\u66f7\0\u6722\0\u674d\0\u6778"+
    "\0\u67a3\0\u67ce\0\u67f9\0\u6824\0\u684f\0\u687a\0\u68a5\0\u68d0"+
    "\0\u68fb\0\u6926\0\u6951\0\u697c\0\u69a7\0\u69d2\0\u69fd\0\u6a28"+
    "\0\u6a53\0\u6a7e\0\u69fd\0\u6aa9\0\u6ad4\0\u6aff\0\u6b2a\0\u6b55"+
    "\0\u6b80\0\u6bab\0\u6bd6\0\u6c01\0\u6c2c\0\u6c57\0\u6c82\0\u6cad"+
    "\0\u6cd8\0\u6d03\0\u6d2e\0\u6d59\0\u6d84\0\u6daf\0\u6dda\0\u6e05"+
    "\0\u6e30\0\u6e5b\0\u6e86\0\u6eb1\0\u6edc\0\u6f07\0\u0183\0\u0408"+
    "\0\u0183\0\u6f32\0\u6f5d\0\u6f88\0\u6fb3\0\u6fde\0\u7009\0\u7034"+
    "\0\u705f\0\u708a\0\u70b5\0\u70e0\0\u710b\0\u7136\0\u7161\0\u718c"+
    "\0\u71b7\0\u71e2\0\u720d\0\u7238\0\u7263\0\u728e\0\u72b9\0\u7263"+
    "\0\u72e4\0\u730f\0\u733a\0\u7365\0\u7390\0\u73bb\0\u73e6\0\u7411"+
    "\0\u743c\0\u7467\0\u7492\0\u74bd\0\u74e8\0\u7513\0\u753e\0\u7569"+
    "\0\u7594\0\u75bf\0\u75ea\0\u7615\0\u7640\0\u766b\0\u7696\0\u76c1"+
    "\0\u76ec\0\u7717\0\u7742\0\u776d\0\u7717\0\u7798\0\u77c3\0\u77ee"+
    "\0\u7819\0\u7844\0\u786f\0\u0183\0\u789a\0\u78c5\0\u78f0\0\u791b"+
    "\0\u7946\0\u7971\0\u799c\0\u79c7\0\u79f2\0\u7a1d\0\u7a48\0\u7a73"+
    "\0\u7a9e\0\u7ac9\0\u7af4\0\u7b1f\0\u7b4a\0\u7b75\0\u7ba0\0\u7bcb"+
    "\0\u7bf6\0\u7ba0\0\u7c21\0\u7c4c\0\u7c77\0\u7ca2\0\u7ccd\0\u7cf8"+
    "\0\u7d23\0\u7d4e\0\u7d79\0\u7da4\0\u7dcf\0\u7dfa\0\u7e25\0\u7e50"+
    "\0\u7e7b\0\u7ea6\0\u7ed1\0\u7efc\0\u7f27\0\u7f52\0\u7f7d\0\u7fa8"+
    "\0\u7fd3\0\u7ffe\0\u0408\0\u8029\0\u8054\0\u807f\0\u80aa\0\u80d5"+
    "\0\u8100\0\u812b\0\u8156\0\u8181\0\u81ac\0\u81d7\0\u8202\0\u822d"+
    "\0\u8258\0\u8283\0\u82ae\0\u82d9\0\u8304\0\u832f\0\u835a\0\u8385"+
    "\0\u83b0\0\u83db\0\u0408\0\u8406\0\u8431\0\u845c\0\u8487\0\u84b2"+
    "\0\u84dd\0\u8508\0\u8533\0\u855e\0\u8589\0\u85b4\0\u85df\0\u860a"+
    "\0\u8635\0\u8660\0\u868b\0\u86b6\0\u86e1\0\u870c\0\u8737\0\u8762"+
    "\0\u878d\0\u87b8\0\u87e3\0\u880e\0\u8839\0\u8864\0\u888f\0\u88ba"+
    "\0\u88e5\0\u8910\0\u893b\0\u8966\0\u8991\0\u89bc\0\u89e7\0\u8a12"+
    "\0\u8a3d\0\u8a68\0\u8a93\0\u8abe\0\u8ae9\0\u8b14\0\u8b3f\0\u8b6a"+
    "\0\u8b95\0\u8bc0\0\u8beb\0\u8c16\0\u8c41\0\u8c6c\0\u0183\0\u8c97"+
    "\0\u8cc2\0\u8ced\0\u8d18\0\u8d43\0\u8d6e\0\u8d99\0\u8dc4\0\u8def"+
    "\0\u8e1a\0\u8e45\0\u8e70\0\u8e9b\0\u8ec6\0\u8ef1\0\u8f1c\0\u0183"+
    "\0\u8f47\0\u8f72\0\u8f9d\0\u8fc8\0\u8ff3\0\u901e\0\u9049\0\u9074"+
    "\0\u909f\0\u90ca\0\u90f5\0\u9120\0\u914b\0\u9176\0\u91a1\0\u91cc"+
    "\0\u91f7\0\u9222\0\u924d\0\u9278\0\u92a3\0\u92ce\0\u92f9\0\u9324"+
    "\0\u934f\0\u937a\0\u93a5\0\u93d0\0\u93fb\0\u9426\0\u9451\0\u947c"+
    "\0\u94a7\0\u94d2\0\u94fd\0\u9528\0\u9553\0\u957e\0\u95a9\0\u95d4"+
    "\0\u95ff\0\u962a\0\u9655\0\u9680\0\u96ab\0\u96d6\0\u9701\0\u972c"+
    "\0\u9757\0\u9782\0\u97ad\0\u97d8\0\u9803\0\u982e\0\u9859\0\u9884"+
    "\0\u98af\0\u98da\0\u9905\0\u9930\0\u995b\0\u9986\0\u99b1\0\u99dc"+
    "\0\u9a07\0\u9a32\0\u9a5d\0\u9a88\0\u9ab3\0\u9ade\0\u9b09\0\u9b34"+
    "\0\u9b5f\0\u9b8a\0\u9bb5\0\u9be0\0\u9c0b\0\u9c36\0\u9c61\0\u9c8c"+
    "\0\u9cb7\0\u9ce2\0\u9d0d\0\u9d38\0\u9d63\0\u9d8e\0\u9db9\0\u9de4"+
    "\0\u9e0f\0\u9e3a\0\u9e65\0\u9e90\0\u9ebb\0\u9ee6\0\u9f11\0\u9f3c"+
    "\0\u9f67\0\u9f92\0\u9fbd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1011];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\12\1\20"+
    "\1\21\1\12\1\22\1\23\1\12\1\24\1\25\3\12"+
    "\1\26\1\27\11\12\1\30\2\12\1\21\1\25\5\12"+
    "\2\30\1\12\1\31\1\13\2\31\1\32\20\31\1\33"+
    "\10\31\1\33\1\34\7\31\1\33\1\30\1\33\1\31"+
    "\1\35\1\13\1\36\1\35\1\37\4\36\1\35\5\36"+
    "\1\35\5\36\1\35\1\36\2\35\4\36\3\35\3\36"+
    "\5\35\1\30\2\35\1\40\1\13\1\41\1\15\1\42"+
    "\1\43\2\44\1\45\1\46\1\44\1\47\1\50\1\51"+
    "\1\52\1\53\3\44\1\54\1\55\1\12\1\44\2\40"+
    "\3\44\1\56\1\40\1\12\1\40\1\44\1\57\1\60"+
    "\1\40\1\61\1\62\1\63\1\12\1\30\1\12\1\15"+
    "\1\40\1\13\1\64\1\40\1\65\1\43\2\44\1\45"+
    "\1\46\1\44\1\47\1\50\1\66\1\52\1\53\3\44"+
    "\1\54\1\55\1\35\1\44\2\40\3\44\1\56\1\40"+
    "\1\35\1\40\1\44\1\57\1\60\1\40\1\61\1\62"+
    "\1\63\1\35\1\30\1\35\1\15\1\31\1\13\1\67"+
    "\1\31\1\70\1\71\2\72\1\73\1\74\1\72\1\75"+
    "\1\76\1\77\1\100\1\101\3\72\1\102\1\103\1\33"+
    "\1\72\2\31\3\72\1\104\1\31\1\33\1\34\1\72"+
    "\1\105\1\106\1\31\1\107\1\110\1\31\1\33\1\30"+
    "\1\33\1\15\1\111\1\13\2\111\1\32\3\111\1\112"+
    "\14\111\1\33\10\111\1\33\1\34\7\111\1\33\1\30"+
    "\1\33\1\15\1\113\1\13\2\113\1\114\20\113\1\33"+
    "\1\113\1\15\6\113\1\33\10\113\1\33\1\30\1\33"+
    "\1\15\1\33\1\13\1\115\1\33\1\116\4\115\1\33"+
    "\5\115\1\33\5\115\1\33\1\115\2\33\4\115\1\33"+
    "\1\30\1\33\3\115\3\33\1\117\1\33\2\30\1\15"+
    "\53\0\4\13\1\0\46\13\12\0\1\120\16\0\1\121"+
    "\27\0\1\122\77\0\1\123\26\0\1\124\57\0\1\125"+
    "\53\0\1\126\47\0\1\127\46\0\1\130\56\0\1\131"+
    "\52\0\1\132\42\0\1\36\2\0\4\36\1\0\5\36"+
    "\1\0\5\36\1\0\1\36\2\0\4\36\3\0\4\36"+
    "\2\0\1\36\6\0\1\44\2\0\4\44\1\0\1\133"+
    "\4\44\1\0\5\44\1\0\1\44\2\0\1\134\3\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\1\44"+
    "\1\135\2\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\2\44\1\136\1\44\3\0\4\44\2\0\1\44"+
    "\11\0\1\137\1\0\1\140\45\0\1\44\2\0\4\44"+
    "\1\0\2\44\1\141\2\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\3\44\1\142\1\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\2\44\1\143\1\44\1\0\5\44"+
    "\1\0\4\44\1\144\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\1\145\4\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\12\0\1\146\6\0\1\147"+
    "\37\0\1\44\2\0\4\44\1\0\1\150\4\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\1\151\4\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\5\44\1\0\1\44\2\0\1\152\3\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\1\153\1\44"+
    "\1\154\1\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\1\44\1\155\2\44\1\0\3\44\1\156\1\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\4\0\44\157\1\33\6\157\45\160\1\33"+
    "\5\160\46\0\1\63\6\0\1\44\2\0\2\44\1\161"+
    "\1\44\1\0\5\44\1\0\4\44\1\144\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\72"+
    "\2\0\4\72\1\0\1\162\4\72\1\0\5\72\1\0"+
    "\1\72\2\0\1\163\3\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\1\72\1\164\2\72\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\2\72\1\165\1\72"+
    "\3\0\4\72\2\0\1\72\11\0\1\166\1\0\1\167"+
    "\45\0\1\72\2\0\4\72\1\0\2\72\1\170\2\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\3\72"+
    "\1\171\1\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\2\72"+
    "\1\172\1\72\1\0\5\72\1\0\4\72\1\173\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\1\174\4\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\12\0\1\175\6\0\1\176\37\0\1\72\2\0\4\72"+
    "\1\0\1\177\4\72\1\0\5\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\4\72\1\0\1\200\4\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\4\72\1\0\5\72\1\0\5\72\1\0\1\72"+
    "\2\0\1\201\3\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\1\202\1\72\1\203\1\72\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\1\72\1\204\2\72"+
    "\1\0\3\72\1\205\1\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\35\0\1\206"+
    "\23\0\1\115\2\0\4\115\1\0\5\115\1\0\5\115"+
    "\1\0\1\115\2\0\4\115\3\0\4\115\2\0\1\115"+
    "\52\0\1\117\27\0\1\207\51\0\1\210\37\0\1\211"+
    "\56\0\1\212\47\0\1\213\54\0\1\214\62\0\1\215"+
    "\36\0\1\216\64\0\1\217\50\0\1\220\55\0\1\221"+
    "\33\0\1\44\2\0\2\44\1\222\1\44\1\0\5\44"+
    "\1\0\3\44\1\223\1\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\2\44\1\224\2\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\2\44\1\225\1\44\1\0\5\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\1\44\1\226\3\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\10\0\1\227\20\0\1\227\1\0\1\227"+
    "\5\0\2\227\16\0\1\230\5\0\1\231\44\0\1\44"+
    "\2\0\4\44\1\0\1\232\4\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\5\44\1\0\2\44\1\233"+
    "\2\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\4\44\1\234"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\235\5\44\1\0\1\44\2\0\4\44\3\0\2\44"+
    "\1\236\1\44\2\0\1\44\6\0\1\44\1\0\1\227"+
    "\1\44\1\237\2\44\1\0\5\44\1\0\5\44\1\227"+
    "\1\44\1\227\1\0\4\44\2\227\1\0\4\44\2\0"+
    "\1\44\24\0\1\240\56\0\1\241\30\0\1\44\2\0"+
    "\4\44\1\0\4\44\1\242\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\5\44\1\0\1\44\1\243\3\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\244\3\44\1\245\1\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\1\44"+
    "\1\246\2\44\2\0\1\44\6\0\1\44\1\0\1\227"+
    "\4\44\1\0\5\44\1\0\5\44\1\227\1\44\1\227"+
    "\1\0\4\44\2\227\1\0\4\44\2\0\1\44\6\0"+
    "\1\247\2\0\3\44\1\250\1\0\5\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\5\44\1\0\1\251"+
    "\4\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\5\44\1\0"+
    "\4\44\1\252\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\4\44"+
    "\1\253\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\72\2\0\4\72\1\0"+
    "\5\72\1\0\3\72\1\254\1\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\4\72\1\0\5\72\1\0\2\72\1\255\2\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\2\72\1\256\1\72\1\0\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\4\72\1\0\1\72\1\257"+
    "\3\72\1\0\5\72\1\0\1\72\2\0\4\72\3\0"+
    "\4\72\2\0\1\72\10\0\1\260\20\0\1\260\1\0"+
    "\1\260\5\0\2\260\24\0\1\261\44\0\1\72\2\0"+
    "\4\72\1\0\1\262\4\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\4\72\1\0\5\72\1\0\2\72\1\263\2\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\4\72\1\264\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\4\72\1\0\5\72\1\265"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\2\72\1\266"+
    "\1\72\2\0\1\72\6\0\1\72\1\0\1\260\1\72"+
    "\1\267\2\72\1\0\5\72\1\0\5\72\1\260\1\72"+
    "\1\260\1\0\4\72\2\260\1\0\4\72\2\0\1\72"+
    "\24\0\1\270\56\0\1\271\30\0\1\72\2\0\4\72"+
    "\1\0\4\72\1\272\1\0\5\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\4\72\1\0\5\72\1\0\1\72\1\273\3\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\274\3\72\1\275\1\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\1\72\1\276"+
    "\2\72\2\0\1\72\6\0\1\72\1\0\1\260\4\72"+
    "\1\0\5\72\1\0\5\72\1\260\1\72\1\260\1\0"+
    "\4\72\2\260\1\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\3\72\1\277\1\0\5\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\5\72\1\0\1\300\4\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\5\72\1\0\4\72"+
    "\1\301\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\21\0\1\302\50\0\1\303\53\0\1\304\40\0"+
    "\1\305\65\0\1\306\52\0\1\307\37\0\1\310\16\0"+
    "\1\311\55\0\1\306\46\0\1\312\46\0\1\313\44\0"+
    "\1\314\55\0\1\315\27\0\1\315\13\0\1\44\2\0"+
    "\3\44\1\316\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\1\44\1\317\3\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\2\44\1\320\2\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\321\2\0\4\44\1\0\5\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\3\44"+
    "\1\322\1\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\30\0\1\323\43\0\1\324"+
    "\37\0\1\325\2\0\4\44\1\0\5\44\1\0\1\44"+
    "\1\326\3\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\4\44\1\327\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\330\1\0\1\331\1\332"+
    "\2\44\1\333\1\334\1\44\1\335\1\336\1\44\1\337"+
    "\1\340\3\44\1\341\1\342\1\343\1\44\2\0\3\44"+
    "\1\344\3\0\1\44\1\345\1\346\1\44\2\0\1\44"+
    "\21\0\1\347\37\0\1\44\2\0\4\44\1\0\3\44"+
    "\1\350\1\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\1\351\4\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\20\0\1\352\53\0"+
    "\1\353\37\0\1\44\2\0\1\44\1\354\2\44\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\355"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\1\44\1\356\2\44\2\0\1\44\30\0\1\357\30\0"+
    "\1\44\2\0\4\44\1\0\2\44\1\360\2\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\5\44\1\0"+
    "\4\44\1\360\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\4\44\1\361\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\3\44\1\362\1\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\2\44\1\363\2\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\3\44\1\364\1\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\365\1\0\1\366\1\367\2\44\1\370"+
    "\1\371\1\44\1\372\1\373\1\44\1\374\1\375\3\44"+
    "\1\376\1\377\1\u0100\1\44\2\0\3\44\1\u0101\3\0"+
    "\1\44\1\u0102\1\u0103\1\44\2\0\1\44\6\0\1\72"+
    "\2\0\4\72\1\0\1\72\1\u0104\3\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\2\72\1\u0105\2\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\u0106\2\0\4\72\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\3\72"+
    "\1\u0107\1\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\21\0\1\u0108\37\0\1\u0109"+
    "\2\0\4\72\1\0\5\72\1\0\1\72\1\u010a\3\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\5\72\1\0\4\72"+
    "\1\u010b\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\u010c\1\0\1\u010d\1\u010e\2\72\1\u010f"+
    "\1\u0110\1\72\1\u0111\1\u0112\1\72\1\u0113\1\u0114\3\72"+
    "\1\u0115\1\u0116\1\u0117\1\72\2\0\3\72\1\u0118\3\0"+
    "\1\72\1\u0119\1\u011a\1\72\2\0\1\72\21\0\1\u011b"+
    "\37\0\1\72\2\0\4\72\1\0\3\72\1\u011c\1\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\5\72"+
    "\1\0\1\u011d\4\72\1\0\1\72\2\0\4\72\3\0"+
    "\4\72\2\0\1\72\20\0\1\u011e\53\0\1\u011f\37\0"+
    "\1\72\2\0\1\72\1\u0120\2\72\1\0\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\4\72\1\u0121\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\1\72\1\u0122"+
    "\2\72\2\0\1\72\30\0\1\u0123\30\0\1\72\2\0"+
    "\4\72\1\0\2\72\1\u0124\2\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\5\72\1\0\4\72\1\u0124"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\3\72\1\u0125\1\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\2\72"+
    "\1\u0126\2\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\4\72"+
    "\1\0\3\72\1\u0127\1\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\13\0\1\u0128"+
    "\67\0\1\u0129\50\0\1\u012a\40\0\1\u012b\67\0\1\u012c"+
    "\1\0\1\u012d\37\0\1\u012e\4\0\1\u012f\46\0\1\u0130"+
    "\51\0\1\u0131\62\0\1\u0132\40\0\1\u0133\64\0\1\u0134"+
    "\30\0\1\126\52\0\1\44\2\0\4\44\1\u0135\5\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\1\44"+
    "\1\u0136\2\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\4\44\1\u0137\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\5\44\1\0\2\44\1\u0138\2\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\3\44\1\u0139\1\0\5\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\1\0\1\227\4\44\1\0\5\44\1\0"+
    "\5\44\1\u013a\1\44\1\u013b\1\0\4\44\2\227\1\0"+
    "\4\44\2\0\1\44\12\0\1\u013c\60\0\1\u013d\4\0"+
    "\1\u013e\33\0\1\44\2\0\4\44\1\0\3\44\1\u013f"+
    "\1\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\2\44\1\u0140\2\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\5\44\1\0\5\44\1\u0141\1\44\1\u0142"+
    "\1\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\1\u0143\4\44\1\0\5\44\1\0"+
    "\1\44\2\0\1\u0144\3\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\1\44\1\u0145\2\44\1\0\5\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\5\44\1\0\1\44\2\0\2\44\1\u0146\1\44"+
    "\3\0\4\44\2\0\1\44\11\0\1\331\1\0\1\u0147"+
    "\45\0\1\44\2\0\4\44\1\0\2\44\1\u0148\2\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\3\44"+
    "\1\u0149\1\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\1\u014a\4\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\12\0\1\u014b\6\0"+
    "\1\u014c\37\0\1\44\2\0\4\44\1\0\1\u014d\4\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\1\u014e"+
    "\4\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\u014f\2\0\1\u0150\2\0"+
    "\1\u0151\1\334\1\0\1\u0152\1\u0153\1\0\1\u0154\1\340"+
    "\3\0\1\u0155\1\u0156\1\u0157\6\0\1\u0158\2\0\1\u0159"+
    "\1\0\1\334\1\340\12\0\1\44\2\0\4\44\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\1\u015a\3\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\1\u015b"+
    "\1\44\1\u015c\1\44\1\0\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\1\44\1\u015d\2\44\1\0\3\44\1\u015e"+
    "\1\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\15\0\1\u015f\13\0\1\u0160\13\0"+
    "\1\u015f\13\0\1\44\2\0\4\44\1\u015f\5\44\1\0"+
    "\5\44\1\u0160\1\44\2\0\4\44\3\0\1\44\1\u0161"+
    "\2\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\5\44\1\0\4\44\1\u0162\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\16\0\1\u0163\42\0\1\u0164"+
    "\52\0\1\44\2\0\4\44\1\0\5\44\1\0\4\44"+
    "\1\u0165\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\u0166\52\0\1\142\2\0\4\44\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\21\0\1\137\37\0\1\44\2\0"+
    "\4\44\1\0\3\44\1\153\1\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\1\44\1\u0167\2\44\1\0\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\2\44\1\u0168"+
    "\2\44\1\0\1\44\1\u0169\3\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\1\u016a\4\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\u016b"+
    "\2\0\4\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\1\u016c\4\44\1\0\5\44\1\0"+
    "\1\44\2\0\1\u016d\3\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\1\44\1\u016e\2\44\1\0\5\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\5\44\1\0\1\44\2\0\2\44\1\u016f\1\44"+
    "\3\0\4\44\2\0\1\44\11\0\1\366\1\0\1\u0170"+
    "\45\0\1\44\2\0\4\44\1\0\2\44\1\u0171\2\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\3\44"+
    "\1\u0172\1\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\1\u0173\4\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\12\0\1\u0174\6\0"+
    "\1\u0175\37\0\1\44\2\0\4\44\1\0\1\u0176\4\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\1\u0177"+
    "\4\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\u0178\2\0\1\u0179\2\0"+
    "\1\u017a\1\371\1\0\1\u017b\1\u017c\1\0\1\u017d\1\375"+
    "\3\0\1\u017e\1\u017f\1\u0180\6\0\1\u0181\2\0\1\u0182"+
    "\1\0\1\371\1\375\12\0\1\44\2\0\4\44\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\1\u0183\3\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\1\u0184"+
    "\1\44\1\u0185\1\44\1\0\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\1\44\1\u0186\2\44\1\0\3\44\1\u0187"+
    "\1\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\72\2\0\4\72\1\0"+
    "\5\72\1\0\4\72\1\u0188\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\4\72"+
    "\1\0\5\72\1\0\2\72\1\u0189\2\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\3\72\1\u018a\1\0\5\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\1\0\1\260\4\72\1\0\5\72\1\0\5\72"+
    "\1\u018b\1\72\1\u018c\1\0\4\72\2\260\1\0\4\72"+
    "\2\0\1\72\20\0\1\u018d\4\0\1\u018e\33\0\1\72"+
    "\2\0\4\72\1\0\3\72\1\u018f\1\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\2\72\1\u0190\2\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\5\72"+
    "\1\0\5\72\1\u0191\1\72\1\u0192\1\0\4\72\3\0"+
    "\4\72\2\0\1\72\6\0\1\72\2\0\4\72\1\0"+
    "\1\u0193\4\72\1\0\5\72\1\0\1\72\2\0\1\u0194"+
    "\3\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\1\72\1\u0195\2\72\1\0\5\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\5\72\1\0\5\72\1\0"+
    "\1\72\2\0\2\72\1\u0196\1\72\3\0\4\72\2\0"+
    "\1\72\11\0\1\u010d\1\0\1\u0197\45\0\1\72\2\0"+
    "\4\72\1\0\2\72\1\u0198\2\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\3\72\1\u0199\1\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\4\72\1\0\1\u019a\4\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\12\0\1\u019b\6\0\1\u019c\37\0\1\72"+
    "\2\0\4\72\1\0\1\u019d\4\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\1\u019e\4\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\u019f\2\0\1\u01a0\2\0\1\u01a1\1\u0110\1\0"+
    "\1\u01a2\1\u01a3\1\0\1\u01a4\1\u0114\3\0\1\u01a5\1\u01a6"+
    "\1\u01a7\6\0\1\u01a8\2\0\1\u01a9\1\0\1\u0110\1\u0114"+
    "\12\0\1\72\2\0\4\72\1\0\5\72\1\0\5\72"+
    "\1\0\1\72\2\0\1\u01aa\3\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\1\u01ab\1\72\1\u01ac\1\72"+
    "\1\0\5\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\1\72"+
    "\1\u01ad\2\72\1\0\3\72\1\u01ae\1\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\15\0\1\u01af\13\0\1\u01b0\13\0\1\u01af\13\0\1\72"+
    "\2\0\4\72\1\u01af\5\72\1\0\5\72\1\u01b0\1\72"+
    "\2\0\4\72\3\0\1\72\1\u01b1\2\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\5\72\1\0\4\72"+
    "\1\u01b2\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\16\0\1\u01b3\42\0\1\u01b4\52\0\1\72\2\0"+
    "\4\72\1\0\5\72\1\0\4\72\1\u01b5\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\u01b6"+
    "\52\0\1\171\2\0\4\72\1\0\5\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\21\0\1\166\37\0\1\72\2\0\4\72\1\0\3\72"+
    "\1\202\1\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\4\72"+
    "\1\0\2\72\1\u01b7\2\72\1\0\1\72\1\u01b8\3\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\1\u01b9\4\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\u01ba\2\0\4\72\1\0\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\21\0\1\u01bb\37\0\1\u01bc\61\0\1\u01bd\27\0"+
    "\1\u01bd\16\0\1\u01be\6\0\1\u01bf\10\0\1\u012c\1\0"+
    "\1\u012d\23\0\30\u01c0\1\0\22\u01c0\5\0\1\u01c1\62\0"+
    "\1\u01c2\53\0\1\u01c3\56\0\1\u01c4\45\0\1\u01c5\43\0"+
    "\1\u01c6\61\0\1\u01c7\44\0\1\u01c8\45\0\1\44\2\0"+
    "\2\44\1\u01c9\1\44\1\0\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\3\44\1\u01ca\1\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\u01cb\2\0\4\44\1\0\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\u01cc\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\1\44\1\u01cd"+
    "\2\44\2\0\1\44\11\0\1\u01ce\6\0\1\u01cf\10\0"+
    "\1\u0141\1\0\1\u0142\23\0\30\u01d0\1\0\22\u01d0\16\0"+
    "\1\u01d1\41\0\1\u01d2\62\0\1\u01d3\37\0\1\44\2\0"+
    "\4\44\1\0\4\44\1\u01d4\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\5\44\1\0\2\44\1\u01d5\2\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\5\44\1\0\3\44"+
    "\1\u01d6\1\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\2\44\1\u01d7\2\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\2\44"+
    "\1\u01d8\1\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\1\44\1\u01d9\3\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\14\0\1\u01da\44\0\1\44\2\0\4\44\1\0\1\u01db"+
    "\4\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\5\44\1\0\2\44\1\u01dc\2\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\1\44\1\u01dd\2\44\1\0\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\24\0"+
    "\1\u01de\56\0\1\u01df\30\0\1\44\2\0\4\44\1\0"+
    "\4\44\1\u01e0\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\1\44\1\u01e1\3\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\16\0\1\u01e2"+
    "\16\0\1\u01e3\27\0\1\u01e4\77\0\1\u01e5\33\0\1\u01e6"+
    "\53\0\1\u01e7\47\0\1\u01e8\52\0\1\u01e9\52\0\1\u01ea"+
    "\42\0\1\u014f\2\0\1\u0150\2\0\1\u0151\1\334\1\0"+
    "\1\u0152\1\u0153\1\0\1\u0154\1\340\3\0\1\u0155\1\u0156"+
    "\1\u0157\6\0\1\u0158\4\0\1\334\1\340\41\0\1\u01eb"+
    "\60\0\1\u01ec\15\0\1\44\2\0\4\44\1\u01ed\3\44"+
    "\1\u01ee\1\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\1\44\1\u01ef\2\44\2\0\1\44\6\0\1\44"+
    "\2\0\3\44\1\u01f0\1\0\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\5\44\1\0\1\u01f1\4\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\5\44\1\0\4\44"+
    "\1\u01f2\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\11\0\1\u01f3\47\0\1\44\2\0\1\u01f4\3\44"+
    "\1\0\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\3\44\1\u01f5\1\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\12\0\1\u01f6"+
    "\54\0\1\137\44\0\1\44\2\0\4\44\1\0\3\44"+
    "\1\u01f7\1\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\26\0\1\u01f8\32\0\1\44"+
    "\2\0\4\44\1\0\4\44\1\u01f9\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\1\u01fa\3\44\1\0\5\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\3\44\1\u01fb\1\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\1\44\1\u01fc\2\44"+
    "\1\0\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\3\44"+
    "\1\153\1\0\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\5\44\1\0\3\44\1\u01fd\1\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\5\44\1\0\2\44\1\u01fe"+
    "\2\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\2\44\1\u01ff\1\44\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\1\44\1\u0200\3\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\14\0\1\u0201\44\0"+
    "\1\44\2\0\4\44\1\0\1\u0202\4\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\5\44\1\0\2\44"+
    "\1\u0203\2\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\1\44\1\u0204\2\44"+
    "\1\0\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\24\0\1\u0205\56\0\1\u0206"+
    "\30\0\1\44\2\0\4\44\1\0\4\44\1\u0207\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\5\44\1\0"+
    "\1\44\1\u0208\3\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\16\0\1\u0209\16\0\1\u020a\27\0"+
    "\1\u020b\77\0\1\u020c\33\0\1\u020d\53\0\1\u020e\47\0"+
    "\1\u020f\52\0\1\u0210\52\0\1\u0211\42\0\1\u0178\2\0"+
    "\1\u0179\2\0\1\u017a\1\371\1\0\1\u017b\1\u017c\1\0"+
    "\1\u017d\1\375\3\0\1\u017e\1\u017f\1\u0180\6\0\1\u0181"+
    "\4\0\1\371\1\375\41\0\1\u0212\60\0\1\u0213\15\0"+
    "\1\44\2\0\4\44\1\u0214\3\44\1\u0215\1\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\1\44\1\u0216"+
    "\2\44\2\0\1\44\6\0\1\44\2\0\3\44\1\u0217"+
    "\1\0\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\1\u0218\4\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\5\44\1\0\4\44\1\u0219\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\72"+
    "\2\0\4\72\1\0\3\72\1\u021a\1\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\u021b\2\0\4\72\1\0\5\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\u021c\5\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\1\72\1\u021d\2\72"+
    "\2\0\1\72\11\0\1\u021e\6\0\1\u021f\10\0\1\u0191"+
    "\1\0\1\u0192\23\0\30\u0220\1\0\22\u0220\5\0\1\u0221"+
    "\62\0\1\u0222\37\0\1\72\2\0\4\72\1\0\4\72"+
    "\1\u0223\1\0\5\72\1\0\1\72\2\0\4\72\3\0"+
    "\4\72\2\0\1\72\6\0\1\72\2\0\4\72\1\0"+
    "\5\72\1\0\2\72\1\u0224\2\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\4\72\1\0\5\72\1\0\3\72\1\u0225\1\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\5\72\1\0\2\72\1\u0226"+
    "\2\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\2\72\1\u0227\1\72\1\0"+
    "\5\72\1\0\5\72\1\0\1\72\2\0\4\72\3\0"+
    "\4\72\2\0\1\72\6\0\1\72\2\0\4\72\1\0"+
    "\1\72\1\u0228\3\72\1\0\5\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\14\0\1\u0229\44\0"+
    "\1\72\2\0\4\72\1\0\1\u022a\4\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\5\72\1\0\2\72"+
    "\1\u022b\2\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\1\72\1\u022c\2\72"+
    "\1\0\5\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\24\0\1\u022d\56\0\1\u022e"+
    "\30\0\1\72\2\0\4\72\1\0\4\72\1\u022f\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\4\72\1\0\5\72\1\0"+
    "\1\72\1\u0230\3\72\1\0\1\72\2\0\4\72\3\0"+
    "\4\72\2\0\1\72\16\0\1\u0231\16\0\1\u0232\27\0"+
    "\1\u0233\77\0\1\u0234\33\0\1\u0235\53\0\1\u0236\47\0"+
    "\1\u0237\52\0\1\u0238\52\0\1\u0239\42\0\1\u019f\2\0"+
    "\1\u01a0\2\0\1\u01a1\1\u0110\1\0\1\u01a2\1\u01a3\1\0"+
    "\1\u01a4\1\u0114\3\0\1\u01a5\1\u01a6\1\u01a7\6\0\1\u01a8"+
    "\4\0\1\u0110\1\u0114\41\0\1\u023a\60\0\1\u023b\15\0"+
    "\1\72\2\0\4\72\1\u023c\3\72\1\u023d\1\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\1\72\1\u023e"+
    "\2\72\2\0\1\72\6\0\1\72\2\0\3\72\1\u023f"+
    "\1\0\5\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\4\72"+
    "\1\0\5\72\1\0\1\u0240\4\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\4\72\1\0\5\72\1\0\4\72\1\u0241\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\11\0\1\u0242"+
    "\47\0\1\72\2\0\1\u0243\3\72\1\0\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\4\72\1\0\3\72\1\u0244"+
    "\1\72\1\0\5\72\1\0\1\72\2\0\4\72\3\0"+
    "\4\72\2\0\1\72\12\0\1\u0245\54\0\1\166\44\0"+
    "\1\72\2\0\4\72\1\0\3\72\1\u0246\1\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\26\0\1\u0247\32\0\1\72\2\0\1\u0248\3\72"+
    "\1\0\5\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\4\72"+
    "\1\0\3\72\1\u0249\1\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\1\72\1\u024a\2\72\1\0\5\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\3\72\1\202\1\0\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\36\0\1\306\30\0\1\u012f\54\0\1\u024b\55\0"+
    "\1\u024c\35\0\30\u01c0\1\u024d\22\u01c0\22\0\1\u024e\44\0"+
    "\1\306\44\0\1\u024f\67\0\1\u01c7\54\0\1\u0250\35\0"+
    "\1\u0251\50\0\1\u0252\46\0\1\44\2\0\1\44\1\u0253"+
    "\2\44\1\0\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\1\44\1\327\2\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\3\44\1\u0169\1\0\5\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\16\0\1\u0254\42\0\1\44\2\0\4\44\1\0\1\u0255"+
    "\4\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\12\0\1\u0256\61\0\1\u0257\35\0"+
    "\30\u01d0\1\u0258\22\u01d0\15\0\1\u0259\57\0\1\u025a\44\0"+
    "\1\u025b\40\0\1\44\2\0\1\44\1\u025c\2\44\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\5\44\1\0\3\44\1\u01f7\1\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\1\44\1\u025d\3\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\2\44\1\u025e\2\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\u025f\2\0\4\44\1\0\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\3\44\1\u0260"+
    "\1\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\21\0\1\u0261\37\0\1\u0262\2\0"+
    "\4\44\1\0\5\44\1\0\1\44\1\u0263\3\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\5\44\1\0\4\44\1\u0264"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\5\44\1\0\1\u0265"+
    "\4\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\20\0\1\u0266\53\0\1\u0267\37\0\1\44\2\0"+
    "\1\44\1\u0268\2\44\1\0\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\u0269\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\1\44\1\u026a\2\44\2\0"+
    "\1\44\27\0\1\u026b\51\0\1\u026c\37\0\1\u026d\56\0"+
    "\1\u026e\51\0\1\u026f\62\0\1\u0270\36\0\1\u0271\62\0"+
    "\1\u0272\55\0\1\u0273\42\0\1\u01ed\3\0\1\u0274\23\0"+
    "\1\u01ed\11\0\53\u01ec\24\0\1\u0275\30\0\1\44\2\0"+
    "\4\44\1\0\2\44\1\u0276\2\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\5\44\1\0\4\44\1\u0276"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\3\44\1\u0277\1\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\2\44"+
    "\1\u0278\2\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\3\44\1\u0279\1\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\5\44\1\0\5\44\1\u027a\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\14\0\1\u027b"+
    "\66\0\1\u025b\30\0\1\44\2\0\4\44\1\0\3\44"+
    "\1\u027c\1\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\2\44\1\u027d\2\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\2\44\1\327\2\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\3\44\1\u027e\1\0\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\1\44\1\u027f"+
    "\3\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\2\44\1\u0280\2\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\u0281\2\0"+
    "\4\44\1\0\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\3\44\1\u0282\1\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\21\0"+
    "\1\u0283\37\0\1\u0284\2\0\4\44\1\0\5\44\1\0"+
    "\1\44\1\u0285\3\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\5\44\1\0\4\44\1\u0286\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\1\u0287\4\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\20\0\1\u0288\53\0"+
    "\1\u0289\37\0\1\44\2\0\1\44\1\u028a\2\44\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\u028b"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\1\44\1\u028c\2\44\2\0\1\44\27\0\1\u028d\51\0"+
    "\1\u028e\37\0\1\u028f\56\0\1\u0290\51\0\1\u0291\62\0"+
    "\1\u0292\36\0\1\u0293\62\0\1\u0294\55\0\1\u0295\42\0"+
    "\1\u0214\3\0\1\u0296\23\0\1\u0214\11\0\53\u0213\24\0"+
    "\1\u0297\30\0\1\44\2\0\4\44\1\0\2\44\1\u0298"+
    "\2\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\5\44\1\0\4\44\1\u0298\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\3\44\1\u0299\1\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\0\2\44\1\u029a\2\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\3\44\1\u029b\1\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\72\2\0\4\72\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\1\72\1\u010b\2\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\3\72"+
    "\1\u01b8\1\0\5\72\1\0\5\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\16\0\1\u029c\42\0"+
    "\1\72\2\0\4\72\1\0\1\u029d\4\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\12\0\1\u029e\61\0\1\u029f\35\0\30\u0220\1\u02a0\22\u0220"+
    "\22\0\1\u02a1\44\0\1\u02a2\40\0\1\72\2\0\1\72"+
    "\1\u02a3\2\72\1\0\5\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\4\72\1\0\5\72\1\0\3\72\1\u0246\1\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\1\72\1\u02a4\3\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\2\72"+
    "\1\u02a5\2\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\u02a6\2\0\4\72"+
    "\1\0\5\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\4\72"+
    "\1\0\3\72\1\u02a7\1\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\21\0\1\u02a8"+
    "\37\0\1\u02a9\2\0\4\72\1\0\5\72\1\0\1\72"+
    "\1\u02aa\3\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\5\72"+
    "\1\0\4\72\1\u02ab\1\0\1\72\2\0\4\72\3\0"+
    "\4\72\2\0\1\72\6\0\1\72\2\0\4\72\1\0"+
    "\5\72\1\0\1\u02ac\4\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\20\0\1\u02ad\53\0\1\u02ae"+
    "\37\0\1\72\2\0\1\72\1\u023e\2\72\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\u02af\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\1\72"+
    "\1\u02b0\2\72\2\0\1\72\27\0\1\u02b1\51\0\1\u02b2"+
    "\37\0\1\u02b3\56\0\1\u02b4\51\0\1\u02b5\62\0\1\u02b6"+
    "\36\0\1\u02b7\62\0\1\u02b8\55\0\1\u02b9\42\0\1\u023c"+
    "\3\0\1\u02ba\23\0\1\u023c\11\0\53\u023b\24\0\1\u02bb"+
    "\30\0\1\72\2\0\4\72\1\0\2\72\1\u02bc\2\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\5\72"+
    "\1\0\4\72\1\u02bc\1\0\1\72\2\0\4\72\3\0"+
    "\4\72\2\0\1\72\6\0\1\72\2\0\4\72\1\0"+
    "\3\72\1\u02bd\1\72\1\0\5\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\4\72\1\0\2\72\1\u02be\2\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\3\72\1\u02bf\1\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\4\72\1\0\5\72\1\0"+
    "\5\72\1\u02c0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\14\0\1\u02c1\66\0\1\u02a2\30\0\1\72\2\0"+
    "\4\72\1\0\5\72\1\0\2\72\1\u02c2\2\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\2\72\1\u010b\2\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\3\72\1\u02c3\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\13\0\1\u01c7\45\0\1\u02c4\55\0\1\u01be"+
    "\17\0\1\u024d\27\0\1\u0134\64\0\1\u0134\51\0\1\u02c5"+
    "\11\0\1\u0250\36\0\1\u02c6\27\0\1\u02c6\26\0\1\u02c7"+
    "\37\0\1\44\2\0\4\44\1\0\3\44\1\u02c8\1\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\13\0\1\u02c9\45\0\1\44\2\0\2\44"+
    "\1\u01f7\1\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\13\0\1\u02ca"+
    "\45\0\1\u02cb\55\0\1\u01ce\17\0\1\u0258\52\0\1\15"+
    "\27\0\1\u02cc\75\0\1\u0141\1\0\1\u0142\25\0\1\44"+
    "\2\0\4\44\1\0\2\44\1\u0165\2\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\5\44\1\0\4\44"+
    "\1\u02cd\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\5\44\1\0"+
    "\2\44\1\u02ce\2\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\3\44\1\u02cf"+
    "\1\0\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\5\44\1\u02d0\1\44\1\u02d1\1\0"+
    "\4\44\3\0\4\44\2\0\1\44\20\0\1\u02d2\4\0"+
    "\1\u02d3\33\0\1\44\2\0\4\44\1\0\3\44\1\u02d4"+
    "\1\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\2\44\1\u02d5\2\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\5\44\1\0\4\44\1\u02d6\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\16\0\1\u02d7"+
    "\42\0\1\u02d8\52\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\4\44\1\u02d9\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\u01e7\52\0\1\u0149\2\0"+
    "\4\44\1\0\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\17\0\1\u02da\53\0"+
    "\1\u02db\40\0\1\u02dc\65\0\1\u02dd\37\0\1\u02de\16\0"+
    "\1\u02df\55\0\1\u02e0\46\0\1\u02e1\40\0\1\u02e2\55\0"+
    "\1\u0269\27\0\1\u0269\25\0\1\u0275\53\0\1\331\37\0"+
    "\1\44\2\0\4\44\1\0\3\44\1\u015b\1\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\2\44\1\u02e3"+
    "\2\44\1\0\1\44\1\u02e4\3\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\1\u02e5\4\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\u02e6"+
    "\2\0\4\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\17\0\1\u02e7"+
    "\11\0\1\u027a\36\0\1\u02e8\27\0\1\u02e8\13\0\1\44"+
    "\2\0\4\44\1\0\5\44\1\0\5\44\1\15\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\u0165"+
    "\2\0\4\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\4\44\1\u02e8\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\1\44\1\u02e9\2\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\5\44\1\0\4\44"+
    "\1\u02ea\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\5\44\1\0"+
    "\2\44\1\u02eb\2\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\3\44\1\u02ec"+
    "\1\0\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\5\44\1\u02ed\1\44\1\u02ee\1\0"+
    "\4\44\3\0\4\44\2\0\1\44\20\0\1\u02ef\4\0"+
    "\1\u02f0\33\0\1\44\2\0\4\44\1\0\3\44\1\u02f1"+
    "\1\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\4\44\1\0"+
    "\2\44\1\u02f2\2\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\5\44\1\0\4\44\1\u02f3\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\16\0\1\u02f4"+
    "\42\0\1\u02f5\52\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\4\44\1\u02f6\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\u020e\52\0\1\u0172\2\0"+
    "\4\44\1\0\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\17\0\1\u02f7\53\0"+
    "\1\u02f8\40\0\1\u02f9\65\0\1\u02fa\37\0\1\u02fb\16\0"+
    "\1\u02fc\55\0\1\u02fd\46\0\1\u02fe\40\0\1\u02ff\55\0"+
    "\1\u028b\27\0\1\u028b\25\0\1\u0297\53\0\1\366\37\0"+
    "\1\44\2\0\4\44\1\0\3\44\1\u0184\1\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\2\44\1\u0300"+
    "\2\44\1\0\1\44\1\u0301\3\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\1\u0302\4\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\u0303"+
    "\2\0\4\44\1\0\5\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\13\0\1\u0304"+
    "\45\0\1\72\2\0\2\72\1\u0246\1\72\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\13\0\1\u0305\45\0\1\u0306\55\0\1\u021e"+
    "\17\0\1\u02a0\27\0\1\u0307\75\0\1\u0191\1\0\1\u0192"+
    "\25\0\1\72\2\0\4\72\1\0\2\72\1\u01b5\2\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\5\72"+
    "\1\0\4\72\1\u0308\1\0\1\72\2\0\4\72\3\0"+
    "\4\72\2\0\1\72\6\0\1\72\2\0\4\72\1\0"+
    "\5\72\1\0\2\72\1\u0309\2\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\3\72\1\u030a\1\0\5\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\4\72\1\0\5\72\1\0\5\72\1\u030b\1\72"+
    "\1\u030c\1\0\4\72\3\0\4\72\2\0\1\72\20\0"+
    "\1\u030d\4\0\1\u030e\33\0\1\72\2\0\4\72\1\0"+
    "\3\72\1\u030f\1\72\1\0\5\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\4\72\1\0\2\72\1\u0310\2\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\0\5\72\1\0\4\72\1\u0311"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\16\0\1\u0312\42\0\1\u0313\52\0\1\u0236\52\0\1\u0199"+
    "\2\0\4\72\1\0\5\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\17\0\1\u0314"+
    "\53\0\1\u0315\40\0\1\u0316\65\0\1\u0317\37\0\1\u0318"+
    "\16\0\1\u0319\55\0\1\u031a\46\0\1\u031b\40\0\1\u023c"+
    "\55\0\1\u02af\27\0\1\u02af\25\0\1\u02bb\53\0\1\u010d"+
    "\37\0\1\72\2\0\4\72\1\0\3\72\1\u01ab\1\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\2\72"+
    "\1\u031c\2\72\1\0\1\72\1\u031d\3\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\4\72\1\0\1\u031e\4\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\u031f\2\0\4\72\1\0\5\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\17\0"+
    "\1\u0320\11\0\1\u02c0\36\0\1\u0321\27\0\1\u0321\13\0"+
    "\1\u01b5\2\0\4\72\1\0\5\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\4\72\1\u0321\5\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\1\72\1\u0322\2\72\2\0"+
    "\1\72\12\0\1\u0323\60\0\1\u0324\45\0\1\u0134\45\0"+
    "\1\u0325\56\0\1\u0326\61\0\1\u02c9\37\0\1\44\2\0"+
    "\4\44\1\0\3\44\1\u0327\1\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\u0328\2\0\4\44\1\0\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\u0329\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\1\44\1\u032a\2\44\2\0"+
    "\1\44\11\0\1\u0150\6\0\1\u032b\10\0\1\u02d0\1\0"+
    "\1\u02d1\23\0\30\u032c\1\0\22\u032c\5\0\1\u032d\62\0"+
    "\1\u032e\37\0\1\44\2\0\4\44\1\0\4\44\1\u032f"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\2\44\1\u0330\2\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\3\44\1\u0331\1\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\12\0\1\u0332"+
    "\54\0\1\331\44\0\1\44\2\0\4\44\1\0\3\44"+
    "\1\u0333\1\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\30\0\1\u0334\50\0\1\u0335"+
    "\40\0\1\u0336\67\0\1\u02d0\1\0\1\u02d1\40\0\1\u0337"+
    "\51\0\1\u0338\62\0\1\u0339\52\0\1\u033a\30\0\1\44"+
    "\2\0\1\u033b\3\44\1\0\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\3\44\1\u033c\1\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\1\44\1\u033d\2\44\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\6\0\1\44\2\0\3\44\1\u015b"+
    "\1\0\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\20\0\1\u033e\45\0\1\u02cc"+
    "\45\0\1\44\2\0\2\44\1\u0165\1\44\1\0\5\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\3\44"+
    "\1\u033f\1\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\u0340\2\0\4\44"+
    "\1\0\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\u0341\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\1\44\1\u0342\2\44\2\0\1\44\11\0\1\u0179"+
    "\6\0\1\u0343\10\0\1\u02ed\1\0\1\u02ee\23\0\30\u0344"+
    "\1\0\22\u0344\5\0\1\u0345\62\0\1\u0346\37\0\1\44"+
    "\2\0\4\44\1\0\4\44\1\u0347\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\5\44\1\0\2\44\1\u0348"+
    "\2\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\3\44\1\u0349"+
    "\1\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\12\0\1\u034a\54\0\1\366\44\0"+
    "\1\44\2\0\4\44\1\0\3\44\1\u034b\1\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\30\0\1\u034c\50\0\1\u034d\40\0\1\u034e\67\0"+
    "\1\u02ed\1\0\1\u02ee\40\0\1\u034f\51\0\1\u0350\62\0"+
    "\1\u0351\52\0\1\u0352\30\0\1\44\2\0\1\u0353\3\44"+
    "\1\0\5\44\1\0\5\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\3\44\1\u0354\1\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\6\0\1\44"+
    "\2\0\1\44\1\u0355\2\44\1\0\5\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\3\44\1\u0184\1\0\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\u0356\56\0\1\u0357\61\0\1\u0304\37\0"+
    "\1\72\2\0\4\72\1\0\3\72\1\u0358\1\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\u0359\2\0\4\72\1\0\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\4\72\1\u035a\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\1\72\1\u035b"+
    "\2\72\2\0\1\72\11\0\1\u01a0\6\0\1\u035c\10\0"+
    "\1\u030b\1\0\1\u030c\23\0\30\u035d\1\0\22\u035d\5\0"+
    "\1\u035e\62\0\1\u035f\37\0\1\72\2\0\4\72\1\0"+
    "\4\72\1\u0360\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\4\72"+
    "\1\0\5\72\1\0\2\72\1\u0361\2\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\4\72\1\0\3\72\1\u0362\1\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\12\0\1\u0363\54\0\1\u010d\66\0\1\u0364\50\0\1\u0365"+
    "\40\0\1\u0366\67\0\1\u030b\1\0\1\u030c\40\0\1\u0367"+
    "\51\0\1\u0368\62\0\1\u0369\30\0\1\72\2\0\1\u036a"+
    "\3\72\1\0\5\72\1\0\5\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\6\0\1\72\2\0"+
    "\4\72\1\0\3\72\1\u036b\1\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\72\2\0\1\72\1\u036c\2\72\1\0\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\3\72\1\u01ab\1\0\5\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\20\0\1\u036d\45\0\1\u0307\45\0\1\72"+
    "\2\0\2\72\1\u01b5\1\72\1\0\5\72\1\0\5\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\20\0\1\u036e\53\0\1\u036f\45\0\1\u0370\56\0\1\u0371"+
    "\40\0\1\44\2\0\4\44\1\0\5\44\1\0\5\44"+
    "\1\0\1\44\2\0\1\44\1\u0264\2\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\3\44\1\u02e4\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\16\0\1\u0372\42\0\1\44\2\0"+
    "\4\44\1\0\1\u0373\4\44\1\0\5\44\1\0\1\44"+
    "\2\0\4\44\3\0\4\44\2\0\1\44\21\0\1\u0374"+
    "\35\0\30\u032c\1\u0375\22\u032c\22\0\1\u0376\44\0\1\u02e0"+
    "\40\0\1\44\2\0\1\44\1\u0377\2\44\1\0\5\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\4\44\1\0\5\44"+
    "\1\0\3\44\1\u0333\1\44\1\0\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\6\0\1\44\2\0\4\44"+
    "\1\0\5\44\1\0\5\44\1\u0378\1\44\2\0\4\44"+
    "\3\0\4\44\2\0\1\44\14\0\1\u0379\57\0\1\u037a"+
    "\37\0\1\u037b\61\0\1\u0329\27\0\1\u0329\27\0\1\u037c"+
    "\56\0\1\u037d\45\0\1\u037e\52\0\1\u037f\37\0\1\44"+
    "\2\0\4\44\1\0\5\44\1\0\2\44\1\u0380\2\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\6\0\1\44\2\0\4\44\1\0\2\44\1\u0264\2\44"+
    "\1\0\5\44\1\0\1\44\2\0\4\44\3\0\4\44"+
    "\2\0\1\44\6\0\1\44\2\0\3\44\1\u0381\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\21\0\1\u0382\37\0\1\44\2\0"+
    "\4\44\1\0\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\1\44\1\u0286\2\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\3\44\1\u0301\1\0\5\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\16\0\1\u0383\42\0\1\44\2\0\4\44\1\0\1\u0384"+
    "\4\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\21\0\1\u0385\35\0\30\u0344\1\u0386"+
    "\22\u0344\22\0\1\u0387\44\0\1\u02fd\40\0\1\44\2\0"+
    "\1\44\1\u0388\2\44\1\0\5\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\4\44\1\0\5\44\1\0\3\44\1\u034b"+
    "\1\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\0\5\44\1\0"+
    "\5\44\1\u0389\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\14\0\1\u038a\57\0\1\u038b\37\0\1\u038c\61\0"+
    "\1\u0341\27\0\1\u0341\27\0\1\u038d\56\0\1\u038e\45\0"+
    "\1\u038f\52\0\1\u0390\37\0\1\44\2\0\4\44\1\0"+
    "\5\44\1\0\2\44\1\u0391\2\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\0\2\44\1\u0286\2\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\6\0"+
    "\1\44\2\0\3\44\1\u0392\1\0\5\44\1\0\5\44"+
    "\1\0\1\44\2\0\4\44\3\0\4\44\2\0\1\44"+
    "\14\0\1\u0393\56\0\1\u0394\40\0\1\72\2\0\4\72"+
    "\1\0\5\72\1\0\5\72\1\0\1\72\2\0\1\72"+
    "\1\u02ab\2\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\3\72\1\u031d\1\0\5\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\16\0"+
    "\1\u0395\42\0\1\72\2\0\4\72\1\0\1\u0396\4\72"+
    "\1\0\5\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\21\0\1\u0397\35\0\30\u035d\1\u0398\22\u035d"+
    "\22\0\1\u0399\44\0\1\u031a\40\0\1\72\2\0\1\72"+
    "\1\u023d\2\72\1\0\5\72\1\0\5\72\1\0\1\72"+
    "\2\0\4\72\3\0\4\72\2\0\1\72\6\0\1\72"+
    "\2\0\4\72\1\0\5\72\1\0\3\72\1\u01ab\1\72"+
    "\1\0\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\6\0\1\72\2\0\4\72\1\0\5\72\1\0\5\72"+
    "\1\u039a\1\72\2\0\4\72\3\0\4\72\2\0\1\72"+
    "\14\0\1\u039b\57\0\1\u039c\37\0\1\u039d\61\0\1\u035a"+
    "\27\0\1\u035a\27\0\1\u039e\56\0\1\u039f\45\0\1\u03a0"+
    "\37\0\1\72\2\0\4\72\1\0\5\72\1\0\2\72"+
    "\1\u03a1\2\72\1\0\1\72\2\0\4\72\3\0\4\72"+
    "\2\0\1\72\6\0\1\72\2\0\4\72\1\0\2\72"+
    "\1\u02ab\2\72\1\0\5\72\1\0\1\72\2\0\4\72"+
    "\3\0\4\72\2\0\1\72\6\0\1\72\2\0\3\72"+
    "\1\u03a2\1\0\5\72\1\0\5\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\21\0\1\u03a3\54\0"+
    "\1\u03a4\22\0\1\u03a4\12\0\1\u03a5\61\0\1\u01cc\27\0"+
    "\1\u01cc\30\0\1\u03a6\22\0\1\u03a6\17\0\1\u037f\45\0"+
    "\1\44\2\0\2\44\1\u0333\1\44\1\0\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\u03a7\55\0\1\u0150\17\0\1\u0375\27\0"+
    "\1\u033a\52\0\1\44\2\0\4\44\1\0\2\44\1\u02d9"+
    "\2\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\17\0\1\u03a8\11\0\1\u0378\36\0"+
    "\1\u03a9\27\0\1\u03a9\43\0\1\u02e0\30\0\1\u02d3\50\0"+
    "\1\u03aa\67\0\1\u037f\54\0\1\u0378\27\0\1\u02d9\2\0"+
    "\4\44\1\0\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\44\2\0"+
    "\4\44\1\u03a9\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\1\44\1\u03ab\2\44\2\0\1\44\6\0"+
    "\1\u03ac\57\0\1\u0390\45\0\1\44\2\0\2\44\1\u034b"+
    "\1\44\1\0\5\44\1\0\5\44\1\0\1\44\2\0"+
    "\4\44\3\0\4\44\2\0\1\44\6\0\1\u03ad\55\0"+
    "\1\u0179\17\0\1\u0386\27\0\1\u0352\52\0\1\44\2\0"+
    "\4\44\1\0\2\44\1\u02f6\2\44\1\0\5\44\1\0"+
    "\1\44\2\0\4\44\3\0\4\44\2\0\1\44\17\0"+
    "\1\u03ae\11\0\1\u0389\36\0\1\u03af\27\0\1\u03af\43\0"+
    "\1\u02fd\30\0\1\u02f0\50\0\1\u03b0\67\0\1\u0390\54\0"+
    "\1\u0389\27\0\1\u02f6\2\0\4\44\1\0\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\6\0\1\44\2\0\4\44\1\u03af\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\1\44\1\u03b1"+
    "\2\44\2\0\1\44\15\0\1\u021c\27\0\1\u021c\30\0"+
    "\1\u03b2\22\0\1\u03b2\17\0\1\u010d\45\0\1\72\2\0"+
    "\2\72\1\u01ab\1\72\1\0\5\72\1\0\5\72\1\0"+
    "\1\72\2\0\4\72\3\0\4\72\2\0\1\72\6\0"+
    "\1\u03b3\55\0\1\u01a0\17\0\1\u0398\27\0\1\u02bb\63\0"+
    "\1\u03b4\11\0\1\u039a\36\0\1\u03b5\27\0\1\u03b5\43\0"+
    "\1\u031a\30\0\1\u030e\50\0\1\u02ba\67\0\1\u010d\54\0"+
    "\1\u039a\27\0\1\u02bc\2\0\4\72\1\0\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\4\72\2\0"+
    "\1\72\6\0\1\72\2\0\4\72\1\u03b5\5\72\1\0"+
    "\5\72\1\0\1\72\2\0\4\72\3\0\1\72\1\u03b6"+
    "\2\72\2\0\1\72\6\0\1\u03b7\61\0\1\u03b8\27\0"+
    "\1\u03b8\22\0\1\u03b9\27\0\1\u03b9\22\0\1\u03ba\27\0"+
    "\1\u03ba\17\0\1\u03bb\60\0\1\u03bc\45\0\1\u033a\57\0"+
    "\1\u033a\40\0\1\44\2\0\2\44\1\u02d9\1\44\1\0"+
    "\5\44\1\0\5\44\1\0\1\44\2\0\4\44\3\0"+
    "\4\44\2\0\1\44\15\0\1\u03bd\27\0\1\u03bd\17\0"+
    "\1\u03be\60\0\1\u03bf\45\0\1\u0352\57\0\1\u0352\40\0"+
    "\1\44\2\0\2\44\1\u02f6\1\44\1\0\5\44\1\0"+
    "\5\44\1\0\1\44\2\0\4\44\3\0\4\44\2\0"+
    "\1\44\15\0\1\u03c0\27\0\1\u03c0\17\0\1\u03c1\60\0"+
    "\1\u03c2\45\0\1\u02bb\45\0\1\72\2\0\2\72\1\u02bc"+
    "\1\72\1\0\5\72\1\0\5\72\1\0\1\72\2\0"+
    "\4\72\3\0\4\72\2\0\1\72\15\0\1\u03c3\27\0"+
    "\1\u03c3\37\0\1\u03c4\43\0\1\u03c5\22\0\1\u03c5\36\0"+
    "\1\u03c6\40\0\1\u03c7\53\0\1\u03c8\54\0\1\u03c9\22\0"+
    "\1\u03c9\24\0\1\u03ca\53\0\1\u03cb\63\0\1\u03cc\40\0"+
    "\1\u03cd\53\0\1\u03ce\54\0\1\u03cf\22\0\1\u03cf\25\0"+
    "\1\u03d0\46\0\1\u03d1\27\0\1\u03d1\26\0\1\u03d2\54\0"+
    "\1\u03d3\22\0\1\u03d3\12\0\1\u03d4\61\0\1\u03d5\27\0"+
    "\1\u03d5\30\0\1\u03d6\22\0\1\u03d6\12\0\1\u03d7\65\0"+
    "\1\u03d8\54\0\1\u03d9\22\0\1\u03d9\12\0\1\u03da\61\0"+
    "\1\u03db\27\0\1\u03db\36\0\1\u024d\37\0\1\u03dc\65\0"+
    "\1\u0258\36\0\1\u03dd\27\0\1\u03dd\22\0\1\u03de\27\0"+
    "\1\u03de\23\0\1\u03df\51\0\1\u03e0\27\0\1\u03e0\22\0"+
    "\1\u03e1\27\0\1\u03e1\36\0\1\u02a0\36\0\1\u03e2\27\0"+
    "\1\u03e2\22\0\1\u03e3\27\0\1\u03e3\23\0\1\u03e4\47\0"+
    "\1\306\71\0\1\u03e5\43\0\1\u03e6\22\0\1\u03e6\17\0"+
    "\1\u025b\71\0\1\u03e7\43\0\1\u03e8\22\0\1\u03e8\36\0"+
    "\1\u03e9\43\0\1\u03ea\22\0\1\u03ea\17\0\1\u02a2\60\0"+
    "\1\u03eb\46\0\1\u03ec\27\0\1\u03ec\26\0\1\u03ed\46\0"+
    "\1\u03ee\27\0\1\u03ee\26\0\1\u03ef\46\0\1\u03f0\27\0"+
    "\1\u03f0\36\0\1\u0375\37\0\1\u03f1\65\0\1\u0386\37\0"+
    "\1\u03f2\65\0\1\u0398\37\0\1\u03f3\47\0\1\u02e0\52\0"+
    "\1\u02fd\52\0\1\u031a\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\2\1\2\11\11\1\6\11\1\1\2\11"+
    "\1\1\1\11\22\1\1\11\2\1\1\11\20\1\1\11"+
    "\1\1\2\11\1\1\1\11\1\1\13\0\4\1\2\0"+
    "\5\1\2\0\7\1\2\0\5\1\2\0\5\1\2\0"+
    "\7\1\14\0\5\1\1\11\2\0\3\1\1\0\2\1"+
    "\2\0\2\1\1\0\13\1\1\11\1\0\3\1\1\0"+
    "\2\1\2\0\2\1\1\0\5\1\14\0\5\1\2\0"+
    "\4\1\1\11\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\6\1\2\0\1\1\1\0\1\1\1\0\6\1\1\11"+
    "\2\1\1\0\3\1\1\0\2\1\1\0\7\1\1\0"+
    "\4\1\1\11\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\6\1\2\0\1\1\1\0\1\1\1\0\4\1\1\11"+
    "\15\0\6\1\3\0\2\1\2\0\4\1\1\0\3\1"+
    "\2\0\2\1\13\0\5\1\2\0\2\1\2\0\1\1"+
    "\1\0\11\1\1\0\3\1\2\0\2\1\13\0\12\1"+
    "\2\0\2\1\2\0\4\1\1\0\3\1\2\0\2\1"+
    "\13\0\5\1\2\0\2\1\2\0\1\1\1\0\4\1"+
    "\14\0\1\11\1\0\3\1\1\0\1\1\6\0\6\1"+
    "\1\0\3\1\2\0\2\1\6\0\1\1\3\0\1\1"+
    "\1\0\5\1\1\11\2\1\1\0\1\1\1\0\10\1"+
    "\1\0\3\1\2\0\2\1\6\0\1\1\3\0\1\1"+
    "\1\0\7\1\1\0\1\1\5\0\6\1\1\0\3\1"+
    "\2\0\2\1\6\0\1\1\3\0\1\1\1\0\5\1"+
    "\1\11\2\1\1\0\1\1\1\0\3\1\10\0\1\1"+
    "\1\0\1\1\5\0\6\1\1\0\4\1\2\0\1\1"+
    "\1\0\1\1\13\0\4\1\2\0\7\1\1\0\4\1"+
    "\2\0\1\1\1\0\1\1\13\0\4\1\1\0\1\1"+
    "\5\0\5\1\1\0\4\1\3\0\1\1\13\0\4\1"+
    "\2\0\2\1\3\0\1\11\1\1\1\11\3\0\3\1"+
    "\4\0\3\1\2\0\1\1\3\0\1\1\5\0\4\1"+
    "\2\0\4\1\4\0\3\1\2\0\1\1\3\0\1\1"+
    "\5\0\4\1\1\11\3\0\3\1\4\0\3\1\5\0"+
    "\1\1\4\0\4\1\2\0\1\1\4\0\2\1\1\0"+
    "\1\1\4\0\3\1\1\0\1\1\7\0\3\1\1\0"+
    "\2\1\1\0\1\1\4\0\3\1\1\0\1\1\7\0"+
    "\3\1\2\0\2\1\1\0\1\1\4\0\3\1\7\0"+
    "\3\1\6\0\1\1\3\0\1\1\7\0\1\11\2\1"+
    "\2\0\1\1\3\0\1\1\7\0\1\11\2\1\3\0"+
    "\1\1\12\0\2\1\10\0\1\1\5\0\1\1\4\0"+
    "\1\1\75\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1011];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	int currentCol = 0;
	List<Integer> theoricCol = new LinkedList<Integer>();
	List<Integer> numbers    = new LinkedList<Integer>();
	boolean funct = false;
	boolean endLine = true;
	int lastNum = 0;
	
	public COMPRESIndent(){
		theoricCol.add(0);
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMPRESIndent(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     
	
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { currentCol+=yytext().length(); yybegin(LINE);
            }
          case 37: break;
          case 2: 
            { 
            }
          case 38: break;
          case 3: 
            { yybegin(COMMENT);
            }
          case 39: break;
          case 4: 
            { currentCol=0; currentCol+=yytext().length(); yybegin(NEW_LINE);
            }
          case 40: break;
          case 5: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 41: break;
          case 6: 
            { endLine=true;
            }
          case 42: break;
          case 7: 
            { if(endLine) { currentCol=0; yybegin(NEW_LINE);}
            }
          case 43: break;
          case 8: 
            { endLine=false;
            }
          case 44: break;
          case 9: 
            { currentCol+=yytext().length();
            }
          case 45: break;
          case 10: 
            { currentCol+=yytext().length(); 
								 location = location + " " + yytext(); yybegin(COMMENT);
            }
          case 46: break;
          case 11: 
            { currentCol = 0;yybegin(NEW_LINE);
            }
          case 47: break;
          case 12: 
            { if((theoricCol.size() > 0) && currentCol<=theoricCol.get(theoricCol.size()-1)) setError(location,"The code is not indented.", yyline+1); 
                                 yybegin(AVOID);
            }
          case 48: break;
          case 13: 
            { currentCol=0;
            }
          case 49: break;
          case 14: 
            { currentCol+=yytext().length(); lastNum = Integer.parseInt(yytext());
            }
          case 50: break;
          case 15: 
            { currentCol=0; yybegin(NEW_LINE);
            }
          case 51: break;
          case 16: 
            { if(endLine) { currentCol=0; yybegin(NEW_LINE); }
            }
          case 52: break;
          case 17: 
            { endLine = true;
            }
          case 53: break;
          case 18: 
            { theoricCol.add(currentCol); currentCol=0; yybegin(COMMENT);
            }
          case 54: break;
          case 19: 
            { theoricCol.add(currentCol); currentCol=0; yybegin(NEW_LINE);
            }
          case 55: break;
          case 20: 
            { yybegin(NEW_LINE);
            }
          case 56: break;
          case 21: 
            { numbers.add(Integer.parseInt(yytext())); yybegin(COMMENT);
            }
          case 57: break;
          case 22: 
            { if((theoricCol.size() > 0) && currentCol<=theoricCol.get(theoricCol.size()-1)) setError(location,"The code is not indented.", yyline+1); 
								 if(yytext().toLowerCase().contains("if")) { yybegin(IF_STATE); }
								 else if(yytext().toLowerCase().contains("type")) {
								 	if(yytext().contains("(")) yybegin(COMMENT);
								 	else yybegin(TYPE_STATE);
								 }
								 else if(yytext().toLowerCase().contains("do")) {
								 	theoricCol.add(currentCol); 
								 	if(yytext().contains("\n"))yybegin(NEW_LINE);
								 	yybegin(DO_STATE);
								 }
								 else { theoricCol.add(currentCol); 
								 	if(yytext().contains("\n"))yybegin(NEW_LINE);
								 	else yybegin(COMMENT);
								 }
            }
          case 58: break;
          case 23: 
            { endLine=true;
								 if(yytext().toLowerCase().contains("if")) { yybegin(IF_STATE);}
								 else { theoricCol.add(currentCol); yybegin(COMMENT);}
            }
          case 59: break;
          case 24: 
            { if((theoricCol.size() > 0) && currentCol<=theoricCol.get(theoricCol.size()-1)) setError(location,"The code is not indented.", yyline+1); yybegin(COMMENT);
            }
          case 60: break;
          case 25: 
            { if((theoricCol.size() > 0) && theoricCol.get(theoricCol.size()-1) !=0 && currentCol!=theoricCol.get(theoricCol.size()-1)) { setError(location,"The code is not indented.", yyline+1); }
                                 if(theoricCol.size() > 0) theoricCol.remove(theoricCol.size()-1);
                                 yybegin(COMMENT);
            }
          case 61: break;
          case 26: 
            { if((theoricCol.size() > 0) && currentCol!=theoricCol.get(theoricCol.size()-1)) { setError(location,"The code is not indented.", yyline+1); }
                                 yybegin(COMMENT);
            }
          case 62: break;
          case 27: 
            { if((theoricCol.size() > 0) && theoricCol.get(theoricCol.size()-1) !=0 && currentCol!=theoricCol.get(theoricCol.size()-1)) { setError(location,"The code is not indented.", yyline+1); }
								 if(theoricCol.size() > 0) theoricCol.remove(theoricCol.size()-1);
                                 yybegin(COMMENT);
            }
          case 63: break;
          case 28: 
            { endLine=true;if(theoricCol.size() > 0) theoricCol.remove(theoricCol.size()-1); yybegin(COMMENT);
            }
          case 64: break;
          case 29: 
            { endLine=true;yybegin(COMMENT);
            }
          case 65: break;
          case 30: 
            { theoricCol.add(currentCol); yybegin(COMMENT);
            }
          case 66: break;
          case 31: 
            { theoricCol.add(0); location = yytext(); yybegin(NAMING);
            }
          case 67: break;
          case 32: 
            { theoricCol.add(0); numbers.clear(); location = yytext(); yybegin(NAMING);
            }
          case 68: break;
          case 33: 
            { endLine=true;theoricCol.add(0); location = yytext(); yybegin(NAMING);
            }
          case 69: break;
          case 34: 
            { if(numbers.contains(lastNum)) {numbers.remove(numbers.indexOf(lastNum)); theoricCol.remove(theoricCol.size()-1); }
								 if((theoricCol.size() > 0) && currentCol<=theoricCol.get(theoricCol.size()-1)) setError(location,"The code is not indented.", yyline+1);
								 yybegin(COMMENT);
            }
          case 70: break;
          case 35: 
            { if(theoricCol.size() > 0)theoricCol.remove(theoricCol.size()-1);
                                 yybegin(COMMENT);
            }
          case 71: break;
          case 36: 
            { if(theoricCol.size() > 0) theoricCol.remove(theoricCol.size()-1);
                                 yybegin(COMMENT);
            }
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
