/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F77BLOCLoop rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90DESIGNObsoleteDoEnding.lex</tt>
 */
public class F90DESIGNObsoleteDoEnding extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int DO_LINE = 10;
  public static final int ENDING = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\31\1\33\1\34\1\32\22\0\1\24\1\1\1\27"+
    "\4\0\1\26\10\0\12\30\7\0\32\25\4\0\1\23\1\0\1\20"+
    "\1\16\1\5\1\14\1\13\1\2\1\17\1\25\1\7\2\25\1\22"+
    "\1\21\1\4\1\10\1\11\1\25\1\12\1\15\1\6\1\3\5\25"+
    "\12\0\1\33\u1fa2\0\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\10\1\1\3\1\4\1\5\1\2"+
    "\1\3\1\4\1\6\1\7\1\1\1\2\7\1\1\10"+
    "\1\5\1\4\1\5\1\2\10\5\1\3\1\4\1\2"+
    "\1\11\1\12\1\2\1\12\1\5\1\3\1\4\15\0"+
    "\1\1\12\0\1\10\107\0\1\13\6\0\2\13\14\0"+
    "\1\13\1\0\1\13\2\0\1\2\62\0\1\14\7\0"+
    "\1\15\14\0\1\15\12\0\1\1\20\0\1\5\113\0"+
    "\2\1\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\313\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196"+
    "\0\u01b3\0\313\0\313\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u01ed"+
    "\0\u01d0\0\u020a\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e\0\u029b"+
    "\0\u02b8\0\u02d5\0\u02f2\0\u020a\0\u020a\0\u030f\0\u030f\0\u032c"+
    "\0\u0349\0\u0366\0\u0383\0\u03a0\0\u03bd\0\u03da\0\u03f7\0\u030f"+
    "\0\u030f\0\u0414\0\u0431\0\u044e\0\u044e\0\u01d0\0\u044e\0\u044e"+
    "\0\u044e\0\u046b\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u04fc\0\u0519"+
    "\0\u0536\0\u0553\0\u0570\0\u058d\0\u05aa\0\u05c7\0\u01d0\0\u05e4"+
    "\0\u0601\0\u061e\0\u063b\0\u0658\0\u0675\0\u0692\0\u06af\0\u06cc"+
    "\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d\0\u077a\0\u0797\0\u07b4"+
    "\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845\0\u0862\0\u087f\0\u089c"+
    "\0\u08b9\0\u08d6\0\u08f3\0\u0910\0\u092d\0\u094a\0\u0967\0\u0984"+
    "\0\u09a1\0\u09be\0\u09db\0\u09f8\0\u0a15\0\u0a32\0\u0a4f\0\u0a6c"+
    "\0\u0a89\0\u0aa6\0\u0ac3\0\u0ae0\0\u0afd\0\u0b1a\0\u0b37\0\u0b54"+
    "\0\u0b71\0\u0b8e\0\u0bab\0\u0bc8\0\u0be5\0\u0c02\0\u0c1f\0\u0c3c"+
    "\0\u0c59\0\u0c76\0\u0c93\0\u0cb0\0\u0ccd\0\u0cea\0\u0d07\0\u0d24"+
    "\0\u0d41\0\u0d5e\0\u0d7b\0\u0d98\0\u0db5\0\u0dd2\0\u0def\0\u0e0c"+
    "\0\u0e29\0\u0e46\0\u0e63\0\u0e80\0\u0e9d\0\u0eba\0\u0ed7\0\u0ef4"+
    "\0\u0f11\0\u01d0\0\u0f2e\0\u0f4b\0\u0f68\0\u0f85\0\u0fa2\0\u0fbf"+
    "\0\u05aa\0\u05e4\0\u0fdc\0\u0ff9\0\u1016\0\u1033\0\u1050\0\u106d"+
    "\0\u108a\0\u10a7\0\u10c4\0\u10e1\0\u10fe\0\u111b\0\u0862\0\u1138"+
    "\0\u08b9\0\u1155\0\u1172\0\u118f\0\u11ac\0\u11c9\0\u11e6\0\u1203"+
    "\0\u1220\0\u123d\0\u125a\0\u1277\0\u1294\0\u12b1\0\u12ce\0\u12eb"+
    "\0\u1308\0\u1325\0\u1342\0\u135f\0\u137c\0\u1399\0\u13b6\0\u13d3"+
    "\0\u13f0\0\u140d\0\u142a\0\u1447\0\u1464\0\u1481\0\u149e\0\u14bb"+
    "\0\u14d8\0\u14f5\0\u1512\0\u152f\0\u154c\0\u1569\0\u1586\0\u15a3"+
    "\0\u15c0\0\u15dd\0\u15fa\0\u1617\0\u1634\0\u1651\0\u166e\0\u168b"+
    "\0\u16a8\0\u16c5\0\u16e2\0\u16ff\0\u171c\0\u1739\0\u1756\0\u1773"+
    "\0\u1790\0\u17ad\0\u17ca\0\u17e7\0\u1804\0\u1821\0\u1756\0\u183e"+
    "\0\u185b\0\u1878\0\u1895\0\u18b2\0\u18cf\0\u18ec\0\u1909\0\u1926"+
    "\0\u1943\0\u1960\0\u197d\0\u199a\0\u19b7\0\u19d4\0\u19f1\0\u1a0e"+
    "\0\u1a2b\0\u1a48\0\u1a65\0\u1a82\0\u1a9f\0\u1abc\0\u1756\0\u1ad9"+
    "\0\u1af6\0\u1b13\0\u1b30\0\u1b4d\0\u1b6a\0\u1b87\0\u1ba4\0\u1bc1"+
    "\0\u1bde\0\u1bfb\0\u1c18\0\u1c35\0\u1c52\0\u1c6f\0\u1c8c\0\u199a"+
    "\0\u1ca9\0\u1cc6\0\u1ce3\0\u1d00\0\u1d1d\0\u1d3a\0\u1d57\0\u1d74"+
    "\0\u1d91\0\u1dae\0\u1dcb\0\u1de8\0\u1e05\0\u1e22\0\u1e3f\0\u1e5c"+
    "\0\u1e79\0\u1e96\0\u1eb3\0\u1ed0\0\u1eed\0\u1f0a\0\u1f27\0\u1f44"+
    "\0\u1f61\0\u1f7e\0\u1f9b\0\u1fb8\0\u1fd5\0\u1ff2\0\u200f\0\u202c"+
    "\0\u2049\0\u2066\0\u2083\0\u20a0\0\u20bd\0\u20da\0\u20f7\0\u2114"+
    "\0\u2131\0\u214e\0\u216b\0\u2188\0\u21a5\0\u21c2\0\u21df\0\u21fc"+
    "\0\u2219\0\u2236\0\u2253\0\u2270\0\u228d\0\u22aa\0\u22c7\0\u22e4"+
    "\0\u2301\0\u231e\0\u233b\0\u2358\0\u2375\0\u2392\0\u23af\0\u23cc"+
    "\0\u23e9\0\u2406\0\u2423\0\u2440\0\u245d\0\u247a\0\u2497\0\u24b4"+
    "\0\u24d1\0\u24ee\0\u250b\0\u05aa\0\u05e4\0\u0862\0\u08b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\4\13\1\14\1\13\1\15\3\13"+
    "\1\16\3\13\1\17\2\13\1\10\1\13\1\20\1\21"+
    "\1\13\1\22\3\23\1\24\1\25\27\24\1\26\3\27"+
    "\1\24\1\25\21\30\2\24\1\30\3\24\1\31\3\27"+
    "\1\32\1\33\1\34\4\13\1\35\1\13\1\36\3\13"+
    "\1\37\3\13\1\40\2\13\1\32\1\13\1\41\1\42"+
    "\1\43\1\44\3\45\1\46\1\47\1\50\4\51\1\52"+
    "\1\51\1\53\3\51\1\54\3\51\1\55\2\51\1\46"+
    "\1\51\1\56\1\57\1\51\1\60\3\61\2\25\21\62"+
    "\1\25\1\24\1\62\2\25\1\63\1\26\2\27\1\24"+
    "\1\64\1\65\22\66\1\67\1\66\2\64\1\66\2\70"+
    "\1\71\1\67\21\0\1\72\15\0\1\73\1\74\3\0"+
    "\1\75\1\0\1\76\3\0\1\77\3\0\1\100\15\0"+
    "\1\73\4\0\1\75\1\0\1\76\3\0\1\77\3\0"+
    "\1\100\15\0\1\73\1\0\1\101\2\0\1\75\1\0"+
    "\1\76\3\0\1\77\3\0\1\100\15\0\1\73\4\0"+
    "\1\75\1\0\1\76\1\102\2\0\1\77\3\0\1\100"+
    "\15\0\1\73\1\103\3\0\1\75\1\0\1\76\3\0"+
    "\1\77\3\0\1\100\15\0\1\73\4\0\1\75\1\104"+
    "\1\76\3\0\1\77\3\0\1\100\13\0\21\105\1\106"+
    "\4\105\1\107\6\105\21\110\1\111\5\110\1\107\5\110"+
    "\37\0\22\30\1\0\1\30\2\0\1\30\20\0\1\112"+
    "\4\0\1\72\15\0\1\73\1\113\3\0\1\75\1\0"+
    "\1\76\3\0\1\77\3\0\1\100\15\0\1\73\1\0"+
    "\1\114\2\0\1\75\1\0\1\76\3\0\1\77\3\0"+
    "\1\100\15\0\1\73\4\0\1\75\1\0\1\76\1\115"+
    "\2\0\1\77\3\0\1\100\15\0\1\73\1\116\3\0"+
    "\1\75\1\0\1\76\3\0\1\77\3\0\1\100\15\0"+
    "\1\73\4\0\1\75\1\117\1\76\3\0\1\77\3\0"+
    "\1\100\13\0\14\105\1\120\4\105\1\106\4\105\1\107"+
    "\6\105\14\110\1\121\4\110\1\111\5\110\1\107\5\110"+
    "\2\0\1\73\4\0\1\75\1\0\1\76\3\0\1\77"+
    "\3\0\1\100\6\0\1\122\20\0\1\112\4\0\1\123"+
    "\15\0\1\124\1\125\3\0\1\126\1\0\1\127\3\0"+
    "\1\130\3\0\1\131\15\0\1\124\4\0\1\126\1\0"+
    "\1\127\3\0\1\130\3\0\1\131\15\0\1\124\1\0"+
    "\1\132\2\0\1\126\1\0\1\127\3\0\1\130\3\0"+
    "\1\131\15\0\1\124\4\0\1\126\1\0\1\127\1\133"+
    "\2\0\1\130\3\0\1\131\15\0\1\124\1\134\3\0"+
    "\1\126\1\0\1\127\3\0\1\130\3\0\1\131\15\0"+
    "\1\124\4\0\1\126\1\135\1\127\3\0\1\130\3\0"+
    "\1\131\13\0\14\136\1\137\4\136\1\140\4\136\1\24"+
    "\6\136\14\141\1\142\4\141\1\143\5\141\1\24\5\141"+
    "\2\0\22\62\1\0\1\62\2\0\1\62\34\0\1\63"+
    "\11\0\1\144\5\0\1\145\31\0\1\146\27\0\1\147"+
    "\35\0\1\150\34\0\1\151\42\0\1\152\25\0\1\153"+
    "\41\0\1\154\32\0\1\155\36\0\1\156\42\0\1\157"+
    "\32\0\1\160\20\0\26\105\1\107\16\105\1\161\15\105"+
    "\1\107\6\105\27\110\1\107\15\110\1\162\16\110\1\107"+
    "\5\110\10\0\1\163\30\0\1\164\36\0\1\165\36\0"+
    "\1\166\42\0\1\167\32\0\1\170\20\0\10\105\1\171"+
    "\15\105\1\107\6\105\10\110\1\172\16\110\1\107\5\110"+
    "\30\0\1\122\14\0\1\173\27\0\1\174\35\0\1\175"+
    "\34\0\1\176\42\0\1\177\25\0\1\200\41\0\1\201"+
    "\32\0\1\202\36\0\1\203\42\0\1\204\32\0\1\205"+
    "\20\0\26\136\1\24\16\136\1\206\15\136\1\24\16\136"+
    "\1\207\15\136\1\24\6\136\27\141\1\24\15\141\1\210"+
    "\16\141\1\24\15\141\1\211\16\141\1\24\5\141\10\0"+
    "\1\212\30\0\1\213\44\0\1\214\24\0\1\215\35\0"+
    "\1\216\35\0\1\217\36\0\1\220\42\0\1\221\32\0"+
    "\1\222\33\0\1\223\26\0\1\224\11\0\1\225\27\0"+
    "\1\226\25\0\1\227\31\0\14\105\1\230\11\105\1\107"+
    "\6\105\14\110\1\231\12\110\1\107\5\110\2\232\22\0"+
    "\1\232\1\0\2\232\1\0\4\232\5\0\1\233\42\0"+
    "\1\234\26\0\1\235\11\0\1\236\27\0\1\237\25\0"+
    "\1\240\31\0\2\241\22\105\1\241\1\105\1\107\1\241"+
    "\1\105\4\241\2\242\22\110\1\242\1\110\1\242\1\107"+
    "\1\110\4\242\14\0\1\243\24\0\1\244\35\0\1\245"+
    "\35\0\1\246\36\0\1\247\42\0\1\250\32\0\1\251"+
    "\33\0\1\252\26\0\1\253\11\0\1\254\27\0\1\255"+
    "\25\0\1\256\31\0\2\257\22\136\1\257\1\136\1\24"+
    "\1\257\1\136\4\257\14\136\1\260\11\136\1\24\6\136"+
    "\2\261\22\141\1\261\1\141\1\261\1\24\1\141\4\261"+
    "\14\141\1\262\12\141\1\24\5\141\4\0\1\263\44\0"+
    "\1\264\23\0\1\265\36\0\1\266\35\0\1\267\41\0"+
    "\1\270\26\0\1\271\11\0\1\272\27\0\1\273\25\0"+
    "\1\274\43\0\1\275\35\0\1\276\33\0\1\277\32\0"+
    "\1\300\46\0\1\301\12\0\3\105\1\302\22\105\1\107"+
    "\6\105\3\110\1\303\23\110\1\107\5\110\6\0\1\304"+
    "\40\0\1\305\35\0\1\306\33\0\1\307\32\0\1\310"+
    "\46\0\1\311\15\0\1\312\36\0\1\313\35\0\1\314"+
    "\41\0\1\315\26\0\1\316\11\0\1\317\27\0\1\320"+
    "\25\0\1\321\43\0\1\322\35\0\1\323\33\0\1\324"+
    "\32\0\1\325\46\0\1\326\12\0\3\136\1\327\22\136"+
    "\1\24\6\136\3\141\1\330\23\141\1\24\5\141\6\0"+
    "\1\331\42\0\1\332\7\0\1\264\7\0\1\264\22\0"+
    "\1\333\20\0\1\334\35\0\1\335\37\0\1\336\35\0"+
    "\1\337\33\0\1\340\32\0\1\341\46\0\1\342\14\0"+
    "\1\343\46\0\1\344\40\0\1\345\17\0\1\346\44\0"+
    "\1\347\21\0\22\105\1\350\3\105\1\107\6\105\22\110"+
    "\1\351\4\110\1\107\5\110\7\0\1\352\27\0\1\353"+
    "\46\0\1\354\40\0\1\355\17\0\1\356\44\0\1\357"+
    "\43\0\1\360\20\0\1\361\35\0\1\362\37\0\1\363"+
    "\35\0\1\364\33\0\1\365\32\0\1\366\46\0\1\367"+
    "\14\0\1\370\46\0\1\371\40\0\1\372\17\0\1\373"+
    "\44\0\1\374\21\0\22\136\1\375\3\136\1\24\6\136"+
    "\22\141\1\376\4\141\1\24\5\141\7\0\1\377\35\0"+
    "\1\25\37\0\1\u0100\30\0\1\u0101\35\0\1\u0102\26\0"+
    "\1\u0103\46\0\1\u0104\40\0\1\u0105\17\0\1\u0106\44\0"+
    "\1\u0107\41\0\1\u0108\17\0\1\u0109\52\0\1\347\21\0"+
    "\1\u010a\30\0\22\107\1\0\1\107\2\0\1\107\4\0"+
    "\13\105\1\u010b\12\105\1\107\6\105\13\110\1\u010c\13\110"+
    "\1\107\5\110\10\0\1\u010d\44\0\1\u010e\17\0\1\u010f"+
    "\52\0\1\357\21\0\1\u0110\41\0\1\u0111\30\0\1\u0112"+
    "\35\0\1\u0113\26\0\1\u0114\46\0\1\u0115\40\0\1\u0116"+
    "\17\0\1\u0117\44\0\1\u0118\41\0\1\u0119\17\0\1\u011a"+
    "\52\0\1\374\21\0\1\u011b\30\0\22\24\1\0\1\24"+
    "\2\0\1\24\4\0\13\136\1\u011c\12\136\1\24\6\136"+
    "\13\141\1\u011d\13\141\1\24\5\141\4\0\1\u011e\41\0"+
    "\1\u011f\12\0\1\u0100\7\0\1\u0100\10\0\1\u0120\30\0"+
    "\1\347\50\0\1\u0121\17\0\1\u0122\52\0\1\u0107\21\0"+
    "\1\u0123\33\0\1\301\41\0\1\301\31\0\1\u0124\25\0"+
    "\11\105\1\u0125\12\105\1\u010b\1\105\1\107\5\105\1\u010b"+
    "\11\110\1\u0126\12\110\1\u010c\2\110\1\107\4\110\1\u010c"+
    "\4\0\1\357\35\0\1\311\41\0\1\311\31\0\1\u0127"+
    "\36\0\1\u0128\12\0\1\u0111\7\0\1\u0111\10\0\1\u0129"+
    "\30\0\1\374\50\0\1\u012a\17\0\1\u012b\52\0\1\u0118"+
    "\21\0\1\u012c\33\0\1\326\41\0\1\326\31\0\1\u012d"+
    "\25\0\11\136\1\u012e\12\136\1\u011c\1\136\1\24\5\136"+
    "\1\u011c\11\141\1\u012f\12\141\1\u011d\2\141\1\24\4\141"+
    "\1\u011d\3\0\1\u0130\43\0\1\u0131\26\0\1\u0107\35\0"+
    "\1\342\41\0\1\342\31\0\1\u0132\31\0\1\301\30\0"+
    "\12\105\1\u0133\13\105\1\107\6\105\12\110\1\u0134\14\110"+
    "\1\107\5\110\4\0\1\311\42\0\1\u0135\26\0\1\u0118"+
    "\35\0\1\367\41\0\1\367\31\0\1\u0136\31\0\1\326"+
    "\30\0\12\136\1\u0137\13\136\1\24\6\136\12\141\1\u0138"+
    "\14\141\1\24\5\141\13\0\1\u0139\31\0\1\u013a\30\0"+
    "\1\342\30\0\10\105\1\u013b\15\105\1\107\6\105\10\110"+
    "\1\u013c\16\110\1\107\5\110\10\0\1\u013d\30\0\1\367"+
    "\30\0\10\136\1\u013e\15\136\1\24\6\136\10\141\1\u013f"+
    "\16\141\1\24\5\141\2\25\22\0\1\25\1\0\2\25"+
    "\1\0\4\25\5\0\1\u0140\27\0\5\105\1\u0141\20\105"+
    "\1\107\6\105\5\110\1\u0142\21\110\1\107\5\110\5\0"+
    "\1\u0143\27\0\5\136\1\u0144\20\136\1\24\6\136\5\141"+
    "\1\u0145\21\141\1\24\5\141\13\0\1\u0146\21\0\13\105"+
    "\1\u0147\12\105\1\107\6\105\13\110\1\u0148\13\110\1\107"+
    "\5\110\13\0\1\u0149\21\0\13\136\1\u014a\12\136\1\24"+
    "\6\136\13\141\1\u014b\13\141\1\24\5\141\14\0\1\u014c"+
    "\20\0\14\105\1\u014d\11\105\1\107\6\105\14\110\1\u014e"+
    "\12\110\1\107\5\110\14\0\1\u014f\20\0\14\136\1\u0150"+
    "\11\136\1\24\6\136\14\141\1\u0151\12\141\1\24\5\141"+
    "\3\0\1\u0152\31\0\3\105\1\u0153\22\105\1\107\6\105"+
    "\3\110\1\u0154\23\110\1\107\5\110\3\0\1\u0155\31\0"+
    "\3\136\1\u0156\22\136\1\24\6\136\3\141\1\u0157\23\141"+
    "\1\24\5\141\12\0\1\u0158\22\0\12\105\1\u0159\13\105"+
    "\1\107\6\105\12\110\1\u015a\14\110\1\107\5\110\12\0"+
    "\1\u015b\22\0\12\136\1\u015c\13\136\1\24\6\136\12\141"+
    "\1\u015d\14\141\1\24\5\141\13\0\1\u015e\21\0\13\105"+
    "\1\u015f\12\105\1\107\6\105\13\110\1\u0160\13\110\1\107"+
    "\5\110\13\0\1\u0161\21\0\13\136\1\u0162\12\136\1\24"+
    "\6\136\13\141\1\u0163\13\141\1\24\5\141\2\107\22\0"+
    "\1\107\1\0\2\107\1\0\4\107\2\u0164\22\105\1\u0164"+
    "\1\105\1\107\1\u0164\1\105\4\u0164\2\u0165\22\110\1\u0165"+
    "\1\110\1\u0165\1\107\1\110\4\u0165\2\24\22\0\1\24"+
    "\1\0\2\24\1\0\4\24\2\u0166\22\136\1\u0166\1\136"+
    "\1\24\1\u0166\1\136\4\u0166\2\u0167\22\141\1\u0167\1\141"+
    "\1\u0167\1\24\1\141\4\u0167";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\14\1\4\11\1\1\1\11\34\1\1\11\3\1"+
    "\15\0\1\11\12\0\1\1\107\0\1\11\6\0\2\1"+
    "\14\0\1\1\1\0\1\1\2\0\1\1\62\0\1\1"+
    "\7\0\1\1\14\0\1\1\12\0\1\1\20\0\1\1"+
    "\113\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	/** List of labels found during analysis, following a DO. **/
	List<String> labels = new LinkedList<String>();
	
	public F90DESIGNObsoleteDoEnding() {
    }

	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	private void addLabel(String label) throws JFlexException {
		if (!labels.contains(label)) {
			labels.add(label);
		}
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90DESIGNObsoleteDoEnding(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 14: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 15: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 16: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 17: break;
          case 5: 
            { 
            }
          case 18: break;
          case 6: 
            { location = location + " " + yytext(); 
							 labels.clear();
							 yybegin(COMMENT);
            }
          case 19: break;
          case 7: 
            { labels.clear();
							 yybegin(NEW_LINE);
            }
          case 20: break;
          case 8: 
            { if (labels.contains(yytext())){
								labels.remove(yytext());
								yybegin(ENDING);
							 } else {
								yybegin(LINE);
							 }
            }
          case 21: break;
          case 9: 
            { addLabel(yytext());
							 yybegin(COMMENT);
            }
          case 22: break;
          case 10: 
            { setError(location,"A DO loop shall end with END DO. ", yyline + 1); 
							 yybegin(COMMENT);
            }
          case 23: break;
          case 11: 
            { yybegin(DO_LINE);
            }
          case 24: break;
          case 12: 
            { location = yytext(); yybegin(NAMING);
            }
          case 25: break;
          case 13: 
            { location = yytext(); 
							 yybegin(NAMING);
            }
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
