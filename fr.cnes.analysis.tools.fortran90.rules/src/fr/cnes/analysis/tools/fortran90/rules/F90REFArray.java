/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.REF.Array rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90REFArray.lex</tt>
 */
public class F90REFArray extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int ARRAY_CHECK = 10;
  public static final int ARRAY_DEC = 12;
  public static final int ARRAY_PAR = 14;
  public static final int ARRAY_DEC_NAME = 16;
  public static final int ARRAY_WAIT = 18;
  public static final int AVOID = 20;
  public static final int BRACKET = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\62\1\63\1\64\1\65\1\64\22\0\1\44\1\1\1\61"+
    "\3\0\1\57\1\60\1\45\1\46\1\54\1\55\1\66\1\50\1\0"+
    "\1\56\12\53\1\47\2\0\1\67\3\0\1\35\1\31\1\5\1\23"+
    "\1\22\1\2\1\34\1\51\1\7\2\51\1\42\1\36\1\4\1\10"+
    "\1\20\1\51\1\21\1\30\1\6\1\3\5\51\4\0\1\52\1\0"+
    "\1\40\1\33\1\14\1\27\1\26\1\11\1\37\1\51\1\16\2\51"+
    "\1\43\1\41\1\13\1\17\1\24\1\51\1\25\1\32\1\15\1\12"+
    "\5\51\12\0\1\64\u1fa2\0\1\64\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\15\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\15\11\2\12\3\1\1\13\15\14\1\15"+
    "\2\16\1\5\1\17\2\5\1\20\1\21\2\5\1\22"+
    "\1\5\2\22\1\5\1\23\1\24\2\5\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\17\0\15\11\3\0\15\14\10\0\1\37\17\0\15\11"+
    "\1\12\15\14\1\16\1\0\1\22\17\0\12\11\1\40"+
    "\4\11\2\12\12\14\1\40\4\14\2\16\1\0\2\22"+
    "\16\0\1\41\16\11\1\0\16\14\1\0\1\1\15\0"+
    "\1\42\14\11\1\42\14\14\1\42\13\0\12\11\12\14"+
    "\4\0\4\11\4\14\1\0\1\41\1\43\1\0\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u05b0"+
    "\0\u02a0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u02a0\0\u08c0"+
    "\0\u08f8\0\u0930\0\u0968\0\u02a0\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u02a0\0\u02a0\0\u0c78\0\u0cb0\0\u02a0\0\u0930\0\u0968"+
    "\0\u02a0\0\u02a0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u02a0"+
    "\0\u0e00\0\u02a0\0\u02a0\0\u0e38\0\u0e70\0\u02a0\0\u0ea8\0\u02a0"+
    "\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u0578\0\u11f0\0\u1228"+
    "\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\u1420\0\u1458\0\u1490\0\u14c8\0\u0930\0\u0968\0\u1500\0\u1538"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u0d20\0\u0ce8\0\u1810\0\u1848"+
    "\0\u1880\0\u0d90\0\u18b8\0\u02a0\0\u0e70\0\u18f0\0\u1928\0\u1960"+
    "\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0"+
    "\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220"+
    "\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0"+
    "\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0"+
    "\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760"+
    "\0\u2798\0\u27d0\0\u0620\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8"+
    "\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8"+
    "\0\u2ae0\0\u2b18\0\u2b50\0\u09d8\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0"+
    "\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0"+
    "\0\u2fe8\0\u3020\0\u3058\0\u02a0\0\u3090\0\u30c8\0\u3100\0\u3138"+
    "\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8"+
    "\0\u3330\0\u3368\0\u28e8\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480"+
    "\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640"+
    "\0\u3678\0\u2c68\0\u36b0\0\u2d10\0\u36e8\0\u3720\0\u3758\0\u3790"+
    "\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950"+
    "\0\u02a0\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8"+
    "\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u0620\0\u3c28\0\u3c60"+
    "\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20"+
    "\0\u3e58\0\u3e90\0\u09d8\0\u36b0\0\u3ec8\0\u3f00\0\u3f38\0\u3f70"+
    "\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130"+
    "\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0"+
    "\0\u4328\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0"+
    "\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670"+
    "\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u0620"+
    "\0\u09d8\0\u4830\0\u4868";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\4\15\1\20\1\15\1\21\4\15"+
    "\1\22\1\15\1\23\2\15\1\24\1\25\2\15\1\26"+
    "\1\27\1\15\1\30\3\15\1\31\2\15\1\32\11\15"+
    "\1\33\7\15\1\34\2\35\2\15\1\36\1\16\61\36"+
    "\1\37\2\35\3\36\1\16\42\40\5\36\1\40\11\36"+
    "\1\41\2\35\2\36\1\15\1\16\1\42\4\43\1\44"+
    "\1\43\1\45\4\43\1\46\1\43\1\47\2\43\1\50"+
    "\1\51\2\43\1\52\1\53\1\43\1\54\3\43\1\55"+
    "\2\43\1\56\2\43\4\15\1\57\1\43\2\15\1\60"+
    "\1\57\1\61\1\15\1\62\1\63\1\15\1\64\2\35"+
    "\2\15\1\36\1\16\1\65\4\66\1\67\1\66\1\70"+
    "\4\66\1\71\1\66\1\72\2\66\1\73\1\74\2\66"+
    "\1\75\1\76\1\66\1\77\3\66\1\100\2\66\1\101"+
    "\2\66\1\36\1\102\2\36\1\103\1\66\2\36\1\104"+
    "\1\103\1\105\1\106\1\107\1\110\1\36\1\111\2\35"+
    "\1\112\2\36\1\16\42\113\3\36\1\114\1\115\1\113"+
    "\1\36\1\116\1\117\1\120\1\121\1\106\3\36\1\122"+
    "\1\35\2\36\1\123\1\36\1\16\45\36\1\124\13\36"+
    "\1\41\2\35\3\36\1\16\42\36\1\125\1\126\2\36"+
    "\1\120\3\36\1\117\1\120\1\121\1\106\3\36\1\122"+
    "\1\35\2\36\1\123\1\36\1\16\42\127\5\36\1\127"+
    "\11\36\1\41\2\35\1\36\1\130\1\131\1\16\43\131"+
    "\1\132\1\133\10\131\1\106\3\131\1\134\2\35\1\135"+
    "\2\131\1\16\42\131\1\36\12\131\1\106\2\131\1\36"+
    "\1\136\1\35\1\36\2\131\1\36\1\16\43\36\1\132"+
    "\1\137\21\36\73\0\1\140\70\0\1\141\75\0\1\142"+
    "\70\0\1\143\75\0\1\144\55\0\1\145\105\0\1\146"+
    "\60\0\1\147\21\0\1\150\32\0\1\151\76\0\1\152"+
    "\65\0\1\153\76\0\1\154\116\0\1\155\4\0\1\156"+
    "\16\0\42\40\5\0\3\40\16\0\1\43\1\157\40\43"+
    "\5\0\3\43\16\0\42\43\5\0\3\43\16\0\2\43"+
    "\1\160\37\43\5\0\3\43\16\0\10\43\1\161\31\43"+
    "\5\0\3\43\16\0\11\43\1\162\30\43\5\0\3\43"+
    "\16\0\17\43\1\163\22\43\5\0\3\43\16\0\5\43"+
    "\1\164\34\43\5\0\3\43\16\0\23\43\1\165\16\43"+
    "\5\0\3\43\16\0\14\43\1\166\21\43\1\167\3\43"+
    "\5\0\3\43\16\0\1\43\1\170\40\43\5\0\3\43"+
    "\16\0\10\43\1\171\31\43\5\0\3\43\16\0\6\43"+
    "\1\172\33\43\5\0\3\43\16\0\15\43\1\173\24\43"+
    "\5\0\3\43\70\0\1\57\72\0\1\174\10\0\60\175"+
    "\1\36\7\175\61\176\1\36\6\176\2\0\1\66\1\177"+
    "\40\66\5\0\3\66\16\0\42\66\5\0\3\66\16\0"+
    "\2\66\1\200\37\66\5\0\3\66\16\0\10\66\1\201"+
    "\31\66\5\0\3\66\16\0\11\66\1\202\30\66\5\0"+
    "\3\66\16\0\17\66\1\203\22\66\5\0\3\66\16\0"+
    "\5\66\1\204\34\66\5\0\3\66\16\0\23\66\1\205"+
    "\16\66\5\0\3\66\16\0\14\66\1\206\21\66\1\207"+
    "\3\66\5\0\3\66\16\0\1\66\1\210\40\66\5\0"+
    "\3\66\16\0\10\66\1\211\31\66\5\0\3\66\16\0"+
    "\6\66\1\212\33\66\5\0\3\66\16\0\15\66\1\213"+
    "\24\66\5\0\3\66\70\0\1\103\72\0\1\214\10\0"+
    "\2\215\42\216\2\215\1\15\1\215\1\217\3\216\1\220"+
    "\1\217\1\221\57\215\1\15\21\215\2\0\42\216\3\0"+
    "\1\215\1\0\1\216\1\0\1\222\14\0\46\215\1\15"+
    "\1\215\1\217\2\215\1\222\1\220\1\217\1\221\11\215"+
    "\54\0\1\120\72\0\1\223\57\0\1\224\64\0\1\225"+
    "\1\126\24\0\42\127\5\0\3\127\20\0\1\226\71\0"+
    "\1\227\74\0\1\230\71\0\1\231\62\0\1\232\115\0"+
    "\1\233\50\0\1\234\111\0\1\235\43\0\1\236\103\0"+
    "\1\237\71\0\1\240\57\0\1\241\73\0\1\242\104\0"+
    "\1\243\25\0\2\43\1\244\37\43\5\0\3\43\16\0"+
    "\4\43\1\245\35\43\5\0\3\43\16\0\11\43\1\246"+
    "\30\43\5\0\3\43\16\0\13\43\1\247\26\43\5\0"+
    "\3\43\16\0\6\43\1\250\33\43\5\0\3\43\16\0"+
    "\34\43\1\251\5\43\5\0\3\43\16\0\15\43\1\252"+
    "\24\43\5\0\3\43\16\0\37\43\1\253\2\43\5\0"+
    "\3\43\16\0\13\43\1\254\26\43\5\0\3\43\16\0"+
    "\27\43\1\255\12\43\5\0\3\43\16\0\31\43\1\256"+
    "\10\43\5\0\3\43\16\0\21\43\1\257\20\43\5\0"+
    "\3\43\16\0\25\43\1\260\14\43\5\0\3\43\73\0"+
    "\1\261\12\0\2\66\1\262\37\66\5\0\3\66\16\0"+
    "\4\66\1\263\35\66\5\0\3\66\16\0\11\66\1\264"+
    "\30\66\5\0\3\66\16\0\13\66\1\265\26\66\5\0"+
    "\3\66\16\0\6\66\1\266\33\66\5\0\3\66\16\0"+
    "\34\66\1\267\5\66\5\0\3\66\16\0\15\66\1\270"+
    "\24\66\5\0\3\66\16\0\37\66\1\271\2\66\5\0"+
    "\3\66\16\0\13\66\1\272\26\66\5\0\3\66\16\0"+
    "\27\66\1\273\12\66\5\0\3\66\16\0\31\66\1\274"+
    "\10\66\5\0\3\66\16\0\21\66\1\275\20\66\5\0"+
    "\3\66\16\0\25\66\1\276\14\66\5\0\3\66\73\0"+
    "\1\277\10\0\2\215\42\216\2\215\1\15\2\215\1\216"+
    "\1\215\1\222\16\215\42\216\2\215\1\15\2\215\1\216"+
    "\1\215\1\222\1\217\61\215\1\15\10\215\1\300\10\215"+
    "\57\0\1\301\15\0\1\302\104\0\1\303\61\0\1\304"+
    "\101\0\1\305\46\0\1\306\26\0\1\307\55\0\1\310"+
    "\61\0\1\311\22\0\1\312\56\0\1\313\101\0\1\16"+
    "\50\0\1\314\73\0\1\315\45\0\1\316\76\0\1\317"+
    "\121\0\1\243\2\0\1\320\22\0\3\43\1\321\36\43"+
    "\5\0\3\43\16\0\20\43\1\322\21\43\5\0\3\43"+
    "\16\0\12\43\1\323\27\43\5\0\3\43\16\0\24\43"+
    "\1\324\15\43\5\0\3\43\16\0\3\43\1\325\26\43"+
    "\1\326\7\43\5\0\3\43\16\0\20\43\1\327\21\43"+
    "\5\0\3\43\16\0\12\43\1\330\22\43\1\331\4\43"+
    "\5\0\3\43\16\0\24\43\1\332\15\43\5\0\3\43"+
    "\16\0\36\43\1\333\3\43\5\0\3\43\16\0\17\43"+
    "\1\334\22\43\5\0\3\43\16\0\23\43\1\335\16\43"+
    "\5\0\3\43\16\0\1\43\1\336\40\43\5\0\3\43"+
    "\16\0\10\43\1\337\31\43\5\0\3\43\14\0\56\340"+
    "\1\341\11\340\2\0\3\66\1\342\36\66\5\0\3\66"+
    "\16\0\20\66\1\343\21\66\5\0\3\66\16\0\12\66"+
    "\1\344\27\66\5\0\3\66\16\0\24\66\1\345\15\66"+
    "\5\0\3\66\16\0\3\66\1\346\26\66\1\347\7\66"+
    "\5\0\3\66\16\0\20\66\1\350\21\66\5\0\3\66"+
    "\16\0\12\66\1\351\22\66\1\352\4\66\5\0\3\66"+
    "\16\0\24\66\1\353\15\66\5\0\3\66\16\0\36\66"+
    "\1\354\3\66\5\0\3\66\16\0\17\66\1\355\22\66"+
    "\5\0\3\66\16\0\23\66\1\356\16\66\5\0\3\66"+
    "\16\0\1\66\1\357\40\66\5\0\3\66\16\0\10\66"+
    "\1\360\31\66\5\0\3\66\14\0\56\361\1\362\11\361"+
    "\46\215\1\15\10\215\1\363\10\215\56\364\1\365\11\364"+
    "\6\0\1\366\102\0\1\367\63\0\1\370\77\0\1\371"+
    "\64\0\1\372\66\0\1\373\52\0\1\374\111\0\1\375"+
    "\66\0\1\376\55\0\1\377\64\0\1\u0100\76\0\1\u0101"+
    "\112\0\1\u0102\70\0\1\u0103\73\0\1\u0104\22\0\4\43"+
    "\1\u0105\35\43\5\0\3\43\16\0\17\43\1\u0106\22\43"+
    "\5\0\3\43\16\0\13\43\1\u0107\26\43\5\0\3\43"+
    "\16\0\23\43\1\u0108\16\43\5\0\3\43\16\0\20\43"+
    "\1\u0109\21\43\5\0\3\43\16\0\17\43\1\u010a\22\43"+
    "\5\0\3\43\16\0\2\43\1\u010b\37\43\5\0\3\43"+
    "\16\0\24\43\1\u010c\15\43\5\0\3\43\16\0\23\43"+
    "\1\u010d\16\43\5\0\3\43\16\0\11\43\1\u010e\30\43"+
    "\5\0\3\43\16\0\6\43\1\u010f\33\43\5\0\3\43"+
    "\16\0\15\43\1\u0110\24\43\5\0\3\43\16\0\40\43"+
    "\1\u0111\1\43\5\0\3\43\16\0\41\43\1\u0112\5\0"+
    "\3\43\14\0\146\340\1\u0113\11\340\2\0\4\66\1\u0114"+
    "\35\66\5\0\3\66\16\0\17\66\1\u0115\22\66\5\0"+
    "\3\66\16\0\13\66\1\u0116\26\66\5\0\3\66\16\0"+
    "\23\66\1\u0117\16\66\5\0\3\66\16\0\20\66\1\u0118"+
    "\21\66\5\0\3\66\16\0\17\66\1\u0119\22\66\5\0"+
    "\3\66\16\0\2\66\1\u011a\37\66\5\0\3\66\16\0"+
    "\24\66\1\u011b\15\66\5\0\3\66\16\0\23\66\1\u011c"+
    "\16\66\5\0\3\66\16\0\11\66\1\u011d\30\66\5\0"+
    "\3\66\16\0\6\66\1\u011e\33\66\5\0\3\66\16\0"+
    "\15\66\1\u011f\24\66\5\0\3\66\16\0\40\66\1\u0120"+
    "\1\66\5\0\3\66\16\0\41\66\1\u0121\5\0\3\66"+
    "\14\0\146\361\1\u0122\11\361\46\363\1\u0123\21\363\146\364"+
    "\1\u0124\11\364\7\0\1\u0125\62\0\1\u0126\103\0\1\u0127"+
    "\62\0\1\u0128\101\0\1\u0129\101\0\1\u012a\62\0\1\u012b"+
    "\66\0\1\u012c\100\0\1\u012d\61\0\1\u012e\40\0\1\u012f"+
    "\76\0\1\u0130\77\0\1\u0131\73\0\1\u0131\43\0\5\43"+
    "\1\u0132\34\43\5\0\3\43\16\0\1\u0133\41\43\5\0"+
    "\3\43\16\0\14\43\1\u0134\25\43\5\0\3\43\16\0"+
    "\7\43\1\u0135\32\43\5\0\3\43\16\0\21\43\1\u0136"+
    "\20\43\5\0\3\43\16\0\33\43\1\u0137\6\43\5\0"+
    "\3\43\16\0\26\43\1\u0138\13\43\5\0\3\43\16\0"+
    "\25\43\1\u0139\14\43\5\0\3\43\16\0\36\43\1\u013a"+
    "\3\43\5\0\3\43\16\0\30\43\1\u013b\11\43\5\0"+
    "\3\43\16\0\1\43\1\u013c\40\43\5\0\3\43\16\0"+
    "\10\43\1\u013d\31\43\5\0\3\43\16\0\20\43\1\u013e"+
    "\21\43\5\0\3\43\16\0\24\43\1\u013e\15\43\5\0"+
    "\3\43\16\0\5\66\1\u013f\34\66\5\0\3\66\16\0"+
    "\1\u0140\41\66\5\0\3\66\16\0\14\66\1\u0141\25\66"+
    "\5\0\3\66\16\0\7\66\1\u0142\32\66\5\0\3\66"+
    "\16\0\21\66\1\u0143\20\66\5\0\3\66\16\0\33\66"+
    "\1\u0144\6\66\5\0\3\66\16\0\26\66\1\u0145\13\66"+
    "\5\0\3\66\16\0\25\66\1\u0146\14\66\5\0\3\66"+
    "\16\0\36\66\1\u0147\3\66\5\0\3\66\16\0\30\66"+
    "\1\u0148\11\66\5\0\3\66\16\0\1\66\1\u0149\40\66"+
    "\5\0\3\66\16\0\10\66\1\u014a\31\66\5\0\3\66"+
    "\16\0\20\66\1\u014b\21\66\5\0\3\66\16\0\24\66"+
    "\1\u014b\15\66\5\0\3\66\14\0\2\u014c\42\363\5\u014c"+
    "\1\363\1\u014c\1\363\14\u014c\10\0\1\u014d\114\0\1\u014e"+
    "\51\0\1\u014f\110\0\1\u0150\32\0\1\u0151\122\0\1\u0131"+
    "\40\0\1\u0152\72\0\1\u0153\116\0\1\u0131\44\0\1\u0154"+
    "\57\0\1\u0155\76\0\1\u0156\54\0\6\43\1\u0157\33\43"+
    "\5\0\3\43\16\0\33\43\1\u0158\6\43\5\0\3\43"+
    "\16\0\15\43\1\u0159\24\43\5\0\3\43\16\0\36\43"+
    "\1\u015a\3\43\5\0\3\43\16\0\1\43\1\u015b\40\43"+
    "\5\0\3\43\16\0\34\43\1\u013e\5\43\5\0\3\43"+
    "\16\0\5\43\1\u015c\34\43\5\0\3\43\16\0\10\43"+
    "\1\u015d\31\43\5\0\3\43\16\0\37\43\1\u013e\2\43"+
    "\5\0\3\43\16\0\14\43\1\u015e\25\43\5\0\3\43"+
    "\16\0\4\43\1\u015f\35\43\5\0\3\43\16\0\13\43"+
    "\1\u0160\26\43\5\0\3\43\16\0\6\66\1\u0161\33\66"+
    "\5\0\3\66\16\0\33\66\1\u0162\6\66\5\0\3\66"+
    "\16\0\15\66\1\u0163\24\66\5\0\3\66\16\0\36\66"+
    "\1\u0164\3\66\5\0\3\66\16\0\1\66\1\u0165\40\66"+
    "\5\0\3\66\16\0\34\66\1\u014b\5\66\5\0\3\66"+
    "\16\0\5\66\1\u0166\34\66\5\0\3\66\16\0\10\66"+
    "\1\u0167\31\66\5\0\3\66\16\0\37\66\1\u014b\2\66"+
    "\5\0\3\66\16\0\14\66\1\u0168\25\66\5\0\3\66"+
    "\16\0\4\66\1\u0169\35\66\5\0\3\66\16\0\13\66"+
    "\1\u016a\26\66\5\0\3\66\20\0\1\u0131\70\0\1\u0102"+
    "\75\0\1\u0131\70\0\1\u0103\74\0\1\u0102\56\0\1\u016b"+
    "\104\0\1\u0103\61\0\1\u016c\57\0\1\u016d\76\0\1\u016e"+
    "\53\0\2\43\1\u013e\37\43\5\0\3\43\16\0\3\43"+
    "\1\u0111\36\43\5\0\3\43\16\0\11\43\1\u013e\30\43"+
    "\5\0\3\43\16\0\12\43\1\u0112\27\43\5\0\3\43"+
    "\16\0\17\43\1\u0111\22\43\5\0\3\43\16\0\6\43"+
    "\1\u016f\33\43\5\0\3\43\16\0\23\43\1\u0112\16\43"+
    "\5\0\3\43\16\0\15\43\1\u0170\24\43\5\0\3\43"+
    "\16\0\5\43\1\u0171\34\43\5\0\3\43\16\0\14\43"+
    "\1\u0172\25\43\5\0\3\43\16\0\2\66\1\u014b\37\66"+
    "\5\0\3\66\16\0\3\66\1\u0120\36\66\5\0\3\66"+
    "\16\0\11\66\1\u014b\30\66\5\0\3\66\16\0\12\66"+
    "\1\u0121\27\66\5\0\3\66\16\0\17\66\1\u0120\22\66"+
    "\5\0\3\66\16\0\6\66\1\u0173\33\66\5\0\3\66"+
    "\16\0\23\66\1\u0121\16\66\5\0\3\66\16\0\15\66"+
    "\1\u0174\24\66\5\0\3\66\16\0\5\66\1\u0175\34\66"+
    "\5\0\3\66\16\0\14\66\1\u0176\25\66\5\0\3\66"+
    "\20\0\1\u0177\76\0\1\u0177\60\0\1\u0102\76\0\1\u0103"+
    "\56\0\2\43\1\u0178\37\43\5\0\3\43\16\0\11\43"+
    "\1\u0178\30\43\5\0\3\43\16\0\2\43\1\u0111\37\43"+
    "\5\0\3\43\16\0\11\43\1\u0112\30\43\5\0\3\43"+
    "\16\0\2\66\1\u0179\37\66\5\0\3\66\16\0\11\66"+
    "\1\u0179\30\66\5\0\3\66\16\0\2\66\1\u0120\37\66"+
    "\5\0\3\66\16\0\11\66\1\u0121\30\66\5\0\3\66"+
    "\60\0\1\u0177\1\u017a\24\0\42\u017b\5\0\1\u017b\20\0"+
    "\42\u017b\5\0\3\u017b\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18592];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\11\15\1\4\11\1\1\1\11\15\1\1\11"+
    "\4\1\1\11\15\1\2\11\2\1\1\11\2\1\2\11"+
    "\5\1\1\11\1\1\2\11\2\1\1\11\1\1\10\11"+
    "\17\0\15\1\3\0\15\1\10\0\1\11\17\0\34\1"+
    "\1\0\1\1\17\0\42\1\1\0\2\1\16\0\1\11"+
    "\16\1\1\0\16\1\1\0\1\1\15\0\1\11\32\1"+
    "\13\0\24\1\4\0\10\1\1\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM"; 
	/** List where to save the name of all the arrays **/
	List<String> arrays = new LinkedList<String>();
	/** Variable to print with the error **/
	String variable = "";
	String variableFinal = "";
	/** Determine if the line is an expression **/
	boolean expression = false;
	/** Boolean to verify the end of line **/
	boolean end = true;
	/** Boolean to determine error **/
	boolean error = false;
	/** Integer t count the number of pair of brackets **/
	int par = 0;
	
	
	public F90REFArray() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90REFArray(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {  return getViolations(); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 36: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 37: break;
          case 3: 
            { expression=false; yybegin(NEW_LINE);
            }
          case 38: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 39: break;
          case 5: 
            { 
            }
          case 40: break;
          case 6: 
            { yybegin(NEW_LINE);
            }
          case 41: break;
          case 7: 
            { location = location + " " + yytext(); arrays.clear(); yybegin(COMMENT);
            }
          case 42: break;
          case 8: 
            { expression=false; variableFinal = ""; yybegin(NEW_LINE);
            }
          case 43: break;
          case 9: 
            { if(arrays.contains(yytext().toLowerCase())) { variable = yytext().toLowerCase(); yybegin(ARRAY_PAR); }
            }
          case 44: break;
          case 10: 
            { expression=true;
            }
          case 45: break;
          case 11: 
            { expression=false; variableFinal = "";
            }
          case 46: break;
          case 12: 
            { end = true;  if(arrays.contains(yytext().toLowerCase())) { variable = yytext().toLowerCase(); yybegin(ARRAY_PAR); }
            }
          case 47: break;
          case 13: 
            { par=1; yybegin(BRACKET);
            }
          case 48: break;
          case 14: 
            { end = true; expression = true;
            }
          case 49: break;
          case 15: 
            { end = false;
            }
          case 50: break;
          case 16: 
            { if (end) { expression=false; variableFinal = ""; yybegin(NEW_LINE); }
            }
          case 51: break;
          case 17: 
            { expression = false;
            }
          case 52: break;
          case 18: 
            { expression=true; variableFinal = variableFinal + " " + variable; yybegin(LINE);
            }
          case 53: break;
          case 19: 
            { if (end) {
									if(expression) setError(location,"It should be used the notation(:) to specify the entire use of the arrays:  " + variableFinal + " " + variable, yyline+1);
									expression = false;
									variableFinal = "";
									yybegin(NEW_LINE);
								 }
            }
          case 54: break;
          case 20: 
            { variableFinal = variableFinal + " " + variable; yybegin(LINE);
            }
          case 55: break;
          case 21: 
            { yybegin(ARRAY_CHECK);
            }
          case 56: break;
          case 22: 
            { arrays.add(yytext().toLowerCase());
            }
          case 57: break;
          case 23: 
            { par=0; yybegin(ARRAY_WAIT);
            }
          case 58: break;
          case 24: 
            { end = true;
            }
          case 59: break;
          case 25: 
            { par++;
            }
          case 60: break;
          case 26: 
            { par--;
            }
          case 61: break;
          case 27: 
            { if (end) { expression=false; variableFinal = ""; yybegin(NEW_LINE);}
            }
          case 62: break;
          case 28: 
            { if(par==0) yybegin(ARRAY_DEC_NAME);
            }
          case 63: break;
          case 29: 
            { if(end) yybegin(NEW_LINE);
            }
          case 64: break;
          case 30: 
            { par--; if(par==0) yybegin(LINE);
            }
          case 65: break;
          case 31: 
            { yybegin(ARRAY_DEC_NAME);
            }
          case 66: break;
          case 32: 
            { yybegin(AVOID);
            }
          case 67: break;
          case 33: 
            { yybegin(ARRAY_DEC);
            }
          case 68: break;
          case 34: 
            { location = yytext(); yybegin(NAMING);
            }
          case 69: break;
          case 35: 
            { end = true; yybegin(ARRAY_DEC);
            }
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
