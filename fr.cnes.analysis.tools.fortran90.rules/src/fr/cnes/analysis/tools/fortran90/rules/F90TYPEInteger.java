/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.TYPE.Integer rule.	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;

import java.util.List;

import org.eclipse.core.runtime.IPath;




import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90TYPEInteger.lex</tt>
 */
public class F90TYPEInteger extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int DECL = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\2\1\40\1\41\1\2\22\0\1\27\1\1\1\32"+
    "\4\0\1\31\1\33\7\0\12\24\1\42\2\0\1\43\3\0\1\21"+
    "\1\17\1\6\1\15\1\14\1\3\1\20\1\35\1\25\1\30\1\37"+
    "\1\23\1\22\1\5\1\11\1\12\1\30\1\13\1\26\1\7\1\4"+
    "\5\30\4\0\1\34\1\0\1\21\1\17\1\6\1\15\1\14\1\3"+
    "\1\20\1\35\1\25\1\30\1\37\1\23\1\22\1\5\1\11\1\12"+
    "\1\30\1\13\1\26\1\7\1\4\5\30\12\0\1\40\252\0\2\10"+
    "\115\0\1\16\u1ea8\0\1\40\1\40\u0100\0\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\12\1\1\3\1\1\1\2\1\4"+
    "\1\3\1\5\1\2\1\6\1\7\1\1\1\7\3\1"+
    "\1\10\17\0\1\1\1\0\1\7\1\11\16\0\1\7"+
    "\17\0\1\7\21\0\1\7\15\0\1\12\3\0\1\7"+
    "\7\0\1\1\1\0\1\13\5\0\1\7\12\0\1\7"+
    "\5\0\1\7\6\0\3\7\6\0\3\7\6\0\3\7"+
    "\4\0\1\7\4\0\1\7\4\0\1\7\4\0\1\7"+
    "\2\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\220\0\264\0\330"+
    "\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8"+
    "\0\220\0\u021c\0\u021c\0\u021c\0\u021c\0\u0240\0\u0264\0\u021c"+
    "\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c\0\u021c\0\u0360"+
    "\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c\0\u0480"+
    "\0\u04a4\0\u04c8\0\u02f4\0\u04ec\0\u0318\0\u0510\0\u0264\0\u0534"+
    "\0\u0558\0\u021c\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630"+
    "\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750"+
    "\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870"+
    "\0\u0894\0\u08b8\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990"+
    "\0\u09b4\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0"+
    "\0\u0ad4\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0"+
    "\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0"+
    "\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4\0\u0dc8\0\u0dec\0\u0e10"+
    "\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30"+
    "\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0e34\0\u0fe4\0\u1008\0\u102c"+
    "\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128\0\u114c"+
    "\0\u1170\0\u1194\0\u1008\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248"+
    "\0\u126c\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344\0\u1368"+
    "\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488"+
    "\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560\0\u1584\0\u15a8"+
    "\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680\0\u16a4\0\u16c8"+
    "\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c\0\u17a0\0\u17c4\0\u17e8"+
    "\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c\0\u18c0\0\u18e4\0\u1908"+
    "\0\u192c\0\u1950\0\u1974\0\u1998\0\u19bc\0\u021c\0\u0288";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\4\10\1\11\1\10\1\12"+
    "\3\10\1\13\3\10\1\14\2\10\1\15\1\16\1\5"+
    "\1\10\1\17\1\20\1\5\2\10\1\5\1\10\2\21"+
    "\2\5\1\22\1\23\1\24\35\22\2\25\3\22\1\23"+
    "\1\24\5\26\1\22\5\26\1\22\5\26\1\22\2\26"+
    "\1\22\1\26\4\22\1\26\1\22\1\26\2\25\3\22"+
    "\1\27\1\30\5\31\1\22\5\31\1\32\5\31\1\22"+
    "\1\31\1\33\1\22\1\31\1\34\1\35\2\22\1\31"+
    "\1\22\1\31\2\25\1\36\1\37\22\0\1\40\24\0"+
    "\1\41\1\42\3\0\1\43\1\0\1\44\3\0\1\45"+
    "\3\0\1\46\2\0\1\43\1\45\20\0\1\41\4\0"+
    "\1\43\1\0\1\44\3\0\1\45\3\0\1\46\2\0"+
    "\1\43\1\45\22\0\1\47\14\0\1\40\24\0\1\41"+
    "\4\0\1\43\1\0\1\44\1\50\2\0\1\45\3\0"+
    "\1\46\2\0\1\43\1\45\21\0\1\51\15\0\1\40"+
    "\24\0\1\41\4\0\1\43\1\52\1\44\3\0\1\45"+
    "\3\0\1\46\2\0\1\43\1\45\20\0\1\41\1\0"+
    "\1\47\2\0\1\43\1\0\1\44\3\0\1\45\3\0"+
    "\1\46\2\0\1\43\1\45\20\0\1\41\1\51\3\0"+
    "\1\43\1\0\1\44\3\0\1\45\3\0\1\46\2\0"+
    "\1\43\1\45\15\0\22\53\1\54\6\53\1\22\12\53"+
    "\22\55\1\56\7\55\1\22\11\55\47\0\5\26\1\0"+
    "\5\26\1\0\10\26\1\0\1\26\3\0\2\26\1\0"+
    "\1\26\4\0\2\57\1\0\41\57\3\0\5\31\1\0"+
    "\5\31\1\0\10\31\1\0\1\31\3\0\2\31\1\0"+
    "\1\31\20\0\1\60\32\0\5\31\1\0\3\31\1\61"+
    "\1\31\1\0\10\31\1\0\1\31\3\0\2\31\1\0"+
    "\1\31\4\0\31\53\1\22\12\53\32\55\1\22\11\55"+
    "\42\0\1\62\12\0\1\63\36\0\1\64\44\0\1\65"+
    "\43\0\1\66\51\0\1\67\34\0\1\70\50\0\1\71"+
    "\41\0\1\72\45\0\1\73\51\0\1\74\41\0\1\75"+
    "\26\0\11\53\1\76\17\53\1\22\12\53\11\55\1\77"+
    "\20\55\1\22\11\55\23\0\1\100\23\0\5\31\1\0"+
    "\5\31\1\0\4\31\1\101\3\31\1\0\1\31\3\0"+
    "\2\31\1\0\1\31\21\0\1\102\33\0\1\103\44\0"+
    "\1\104\44\0\1\105\45\0\1\106\51\0\1\107\41\0"+
    "\1\110\42\0\1\111\35\0\1\112\11\0\1\113\36\0"+
    "\1\114\34\0\1\115\37\0\15\53\1\116\13\53\1\22"+
    "\12\53\15\55\1\117\14\55\1\22\11\55\14\0\1\120"+
    "\32\0\5\31\1\0\3\31\1\121\1\31\1\0\10\31"+
    "\1\0\1\31\3\0\2\31\1\0\1\31\10\0\1\122"+
    "\45\0\1\123\44\0\1\124\50\0\1\125\35\0\1\126"+
    "\11\0\1\127\36\0\1\130\34\0\1\131\52\0\1\132"+
    "\4\0\1\133\37\0\1\134\42\0\1\135\41\0\1\136"+
    "\55\0\1\137\20\0\4\53\1\140\24\53\1\22\12\53"+
    "\4\55\1\141\25\55\1\22\11\55\6\0\1\142\40\0"+
    "\3\31\1\143\1\31\1\0\5\31\1\0\10\31\1\0"+
    "\1\31\3\0\2\31\1\0\1\31\27\0\1\144\27\0"+
    "\1\145\44\0\1\146\14\0\1\146\31\0\1\147\44\0"+
    "\1\150\42\0\1\151\41\0\1\152\55\0\1\153\23\0"+
    "\1\154\54\0\1\155\44\0\1\156\47\0\1\157\26\0"+
    "\1\160\53\0\1\161\27\0\23\53\1\162\5\53\1\22"+
    "\12\53\23\55\1\163\6\55\1\22\11\55\7\0\1\164"+
    "\37\0\4\31\1\165\1\0\5\31\1\0\10\31\1\0"+
    "\1\31\3\0\2\31\1\0\1\31\20\0\1\166\37\0"+
    "\1\167\14\0\1\167\27\0\1\170\35\0\1\171\55\0"+
    "\1\172\47\0\1\173\26\0\1\174\53\0\1\175\50\0"+
    "\1\176\35\0\1\177\34\0\1\200\61\0\1\161\30\0"+
    "\1\201\37\0\5\22\1\0\5\22\1\0\10\22\1\0"+
    "\1\22\3\0\2\22\1\0\1\22\4\0\14\53\1\202"+
    "\14\53\1\22\12\53\14\55\1\203\15\55\1\22\11\55"+
    "\14\0\1\204\32\0\5\31\1\0\3\31\1\205\1\31"+
    "\1\0\10\31\1\0\1\31\3\0\2\31\1\0\1\31"+
    "\16\0\1\206\14\0\1\166\11\0\1\166\13\0\1\207"+
    "\37\0\1\161\57\0\1\210\26\0\1\211\61\0\1\175"+
    "\30\0\1\212\42\0\1\137\64\0\1\213\3\0\1\22"+
    "\5\0\1\213\15\0\1\137\40\0\1\214\14\0\1\214"+
    "\16\0\12\53\1\215\14\53\1\202\1\53\1\22\7\53"+
    "\1\202\2\53\12\55\1\216\14\55\1\203\2\55\1\22"+
    "\6\55\1\203\2\55\15\0\1\217\31\0\5\31\1\0"+
    "\4\31\1\220\1\0\10\31\1\0\1\31\3\0\2\31"+
    "\1\0\1\31\17\0\1\221\35\0\1\175\44\0\1\153"+
    "\50\0\1\153\40\0\1\222\14\0\1\222\23\0\1\137"+
    "\36\0\13\53\1\223\15\53\1\22\12\53\13\55\1\224"+
    "\16\55\1\22\11\55\34\0\1\225\12\0\5\31\1\0"+
    "\5\31\1\0\10\31\1\0\1\31\3\0\1\226\1\31"+
    "\1\0\1\31\15\0\1\227\37\0\1\153\36\0\11\53"+
    "\1\230\17\53\1\22\12\53\11\55\1\231\20\55\1\22"+
    "\11\55\6\0\1\232\1\0\1\233\2\0\1\234\11\0"+
    "\1\233\21\0\3\31\1\235\1\31\1\233\2\31\1\236"+
    "\2\31\1\0\6\31\1\237\1\31\1\0\1\31\3\0"+
    "\2\31\1\0\1\31\12\0\1\240\35\0\6\53\1\241"+
    "\22\53\1\22\12\53\6\55\1\242\23\55\1\22\11\55"+
    "\35\0\1\243\13\0\1\244\52\0\1\245\32\0\5\31"+
    "\1\0\5\31\1\0\10\31\1\0\1\31\3\0\1\31"+
    "\1\246\1\0\1\31\7\0\5\31\1\0\3\31\1\247"+
    "\1\31\1\0\10\31\1\0\1\31\3\0\2\31\1\0"+
    "\1\31\7\0\2\31\1\250\2\31\1\0\5\31\1\0"+
    "\10\31\1\0\1\31\3\0\2\31\1\0\1\31\20\0"+
    "\1\251\27\0\14\53\1\252\14\53\1\22\12\53\14\55"+
    "\1\253\15\55\1\22\11\55\21\0\1\254\31\0\1\255"+
    "\55\0\1\256\25\0\5\31\1\0\5\31\1\0\2\31"+
    "\1\257\5\31\1\0\1\31\3\0\2\31\1\0\1\31"+
    "\7\0\5\31\1\0\5\31\1\0\2\31\1\260\5\31"+
    "\1\0\1\31\3\0\2\31\1\0\1\31\7\0\4\31"+
    "\1\261\1\0\5\31\1\0\10\31\1\0\1\31\3\0"+
    "\2\31\1\0\1\31\21\0\1\262\26\0\15\53\1\263"+
    "\13\53\1\22\12\53\15\55\1\264\14\55\1\22\11\55"+
    "\13\0\1\255\64\0\1\265\32\0\1\255\23\0\5\31"+
    "\1\0\2\31\1\261\2\31\1\0\10\31\1\0\1\31"+
    "\3\0\2\31\1\0\1\31\7\0\5\31\1\0\5\31"+
    "\1\0\4\31\1\261\3\31\1\0\1\31\3\0\2\31"+
    "\1\0\1\31\7\0\5\31\1\0\5\31\1\0\10\31"+
    "\1\0\1\31\3\0\1\266\1\31\1\0\1\31\10\0"+
    "\1\267\37\0\4\53\1\270\24\53\1\22\12\53\4\55"+
    "\1\271\25\55\1\22\11\55\36\0\2\272\7\0\5\31"+
    "\1\0\5\31\1\0\10\31\1\0\1\31\3\0\2\31"+
    "\1\272\1\273\17\0\1\274\30\0\13\53\1\275\15\53"+
    "\1\22\12\53\13\55\1\276\16\55\1\22\11\55\10\0"+
    "\1\277\14\0\1\277\21\0\5\31\1\277\5\31\1\0"+
    "\6\31\1\300\1\31\1\0\1\31\3\0\2\31\1\0"+
    "\1\31\20\0\1\301\27\0\14\53\1\302\14\53\1\22"+
    "\12\53\14\55\1\303\15\55\1\22\11\55\5\0\1\304"+
    "\41\0\2\31\1\305\2\31\1\0\5\31\1\0\10\31"+
    "\1\0\1\31\3\0\2\31\1\0\1\31\4\0\3\22"+
    "\5\0\1\22\5\0\1\22\10\0\1\22\1\0\3\22"+
    "\2\0\1\22\1\0\4\22\3\34\5\53\1\34\5\53"+
    "\1\34\10\53\1\34\1\53\1\22\2\34\2\53\1\34"+
    "\1\53\4\34\3\35\5\55\1\35\5\55\1\35\10\55"+
    "\1\35\1\55\1\35\1\22\1\35\2\55\1\35\1\55"+
    "\4\35\15\0\1\306\31\0\5\31\1\0\4\31\1\307"+
    "\1\0\10\31\1\0\1\31\3\0\2\31\1\0\1\31"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6624];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\15\1\4\11\2\1\1\11\6\1\1\11\17\0"+
    "\1\1\1\0\1\1\1\11\16\0\1\1\17\0\1\1"+
    "\21\0\1\1\15\0\1\1\3\0\1\1\7\0\1\1"+
    "\1\0\1\1\5\0\1\1\12\0\1\1\5\0\1\1"+
    "\6\0\3\1\6\0\3\1\6\0\3\1\4\0\1\1"+
    "\4\0\1\1\4\0\1\1\4\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/** Variable used to store violation location and variable involved. **/
	String location = "MAIN PROGRAM";
	/** Variable used to store file value and function values associated. **/
	/** Boolean to determine if it is a real error **/
	boolean error = false;
	/** Boolean to determine if the variable name needs to be saved **/
	boolean saveVar = true;
	/** String to store the name of the variable who throws the error **/
	String variable = "";
	
	public F90TYPEInteger() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90TYPEInteger(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return getViolations(); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 13: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 14: break;
          case 3: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 15: break;
          case 4: 
            { yybegin(YYINITIAL);
            }
          case 16: break;
          case 5: 
            { location = location + " " + yytext(); 
							 yybegin(COMMENT);
            }
          case 17: break;
          case 6: 
            { if (error) {
								this.setError(location,"It misses the declaration SELECTED_INT_KIND in the initialisation of " + variable, yyline + 1);
							 }
							 error = false;
							 variable = "";
							 saveVar = true;
							 yybegin(YYINITIAL);
            }
          case 18: break;
          case 7: 
            { if(error && saveVar) {
								if(variable == "") variable = yytext();
								else variable = variable + ", " + yytext();
							 }
            }
          case 19: break;
          case 8: 
            { saveVar = false;
            }
          case 20: break;
          case 9: 
            { error = true;
            }
          case 21: break;
          case 10: 
            { location = yytext(); 
							 yybegin(NAMING);
            }
          case 22: break;
          case 11: 
            { yybegin(DECL);
            }
          case 23: break;
          case 12: 
            { error = false;
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
