/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.FLOW.FileExistence rule.*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMFLOWFileExistence.lex</tt>
 */
public class COMFLOWFileExistence extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int IO = 10;
  public static final int INQ = 12;
  public static final int INQ_EXIST = 14;
  public static final int DECL_PARAMS = 16;
  public static final int DECLARATION = 18;
  public static final int ALLOC = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\41\1\42\1\42\1\42\22\0\1\26\1\1\1\40\3\0"+
    "\1\44\1\37\1\31\1\0\1\3\5\0\12\36\1\43\2\0\1\30"+
    "\3\0\1\21\1\17\1\2\1\15\1\14\1\4\1\20\1\24\1\34"+
    "\2\33\1\23\1\22\1\6\1\11\1\12\1\32\1\13\1\35\1\7"+
    "\1\5\1\33\1\27\1\25\2\33\4\0\1\36\1\0\1\21\1\17"+
    "\1\2\1\15\1\14\1\4\1\20\1\24\1\34\2\33\1\23\1\22"+
    "\1\6\1\11\1\12\1\32\1\13\1\35\1\7\1\5\1\33\1\27"+
    "\1\25\2\33\12\0\1\42\252\0\2\10\115\0\1\16\u1ea8\0\1\42"+
    "\1\42\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\4\1\1\3\1\4\1\5\1\6"+
    "\1\2\2\5\1\1\12\5\2\1\11\5\3\7\1\10"+
    "\1\11\3\12\1\5\1\13\1\5\1\14\1\15\4\0"+
    "\3\5\1\0\12\5\2\0\2\5\1\0\2\5\2\7"+
    "\1\0\2\12\1\0\1\16\4\0\3\5\2\0\7\5"+
    "\1\0\6\5\1\0\2\5\1\0\1\7\1\0\1\7"+
    "\1\0\2\12\6\0\3\5\2\0\1\17\2\5\1\20"+
    "\3\5\1\0\1\5\1\0\7\5\1\0\2\5\1\0"+
    "\1\7\1\0\1\7\1\12\6\0\3\5\2\0\5\5"+
    "\1\0\1\5\1\17\6\5\1\0\2\5\4\0\1\21"+
    "\3\5\2\0\4\5\1\21\1\0\4\5\1\0\3\5"+
    "\1\0\1\22\1\5\3\0\1\5\1\20\1\23\1\5"+
    "\1\0\1\5\1\23\1\5\1\0\2\5\1\0\1\5"+
    "\2\0\1\24\1\5\1\22\1\0\1\5\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\u0197\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0197\0\u0197\0\u0197\0\u0250\0\u0275\0\u029a\0\u02bf"+
    "\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7"+
    "\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\u0275\0\u04c5\0\u02e4"+
    "\0\u04ea\0\u050f\0\u0534\0\u0559\0\u047b\0\u04a0\0\u057e\0\u05a3"+
    "\0\u05c8\0\u0197\0\u0197\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0197"+
    "\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0784"+
    "\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac"+
    "\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\u047b\0\u04a0\0\u098a"+
    "\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2"+
    "\0\u0ad7\0\u0afc\0\u0197\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5"+
    "\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd"+
    "\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05"+
    "\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d"+
    "\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055"+
    "\0\u107a\0\u109f\0\u10c4\0\u10e9\0\u110e\0\u1133\0\u1158\0\u02bf"+
    "\0\u117d\0\u11a2\0\u02bf\0\u11c7\0\u11ec\0\u1211\0\u1236\0\u125b"+
    "\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383"+
    "\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486\0\u14ab"+
    "\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae\0\u15d3"+
    "\0\u15f8\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb"+
    "\0\u1720\0\u1745\0\u0197\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe"+
    "\0\u1823\0\u1848\0\u186d\0\u1892\0\u18b7\0\u18dc\0\u1901\0\u1926"+
    "\0\u0197\0\u194b\0\u1970\0\u1995\0\u19ba\0\u19df\0\u1a04\0\u1a29"+
    "\0\u1a4e\0\u1a73\0\u02bf\0\u1a98\0\u1abd\0\u1ae2\0\u1b07\0\u1b2c"+
    "\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5\0\u02bf\0\u1c0a\0\u1c2f"+
    "\0\u1c54\0\u1c79\0\u1c9e\0\u0197\0\u0197\0\u1cc3\0\u1ce8\0\u1d0d"+
    "\0\u02bf\0\u1d32\0\u1d57\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb\0\u1e10"+
    "\0\u1e35\0\u02bf\0\u1e5a\0\u0197\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee"+
    "\0\u1f13\0\u1f38\0\u1f5d\0\u1f82\0\u1fa7\0\u1fcc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\3\15\1\16\5\14\1\17\3\14\1\20\3\14"+
    "\1\21\12\14\1\20\3\14\1\22\1\23\2\14\1\24"+
    "\1\15\37\24\1\22\1\23\3\24\1\15\1\25\1\24"+
    "\4\25\1\24\5\25\1\24\7\25\1\24\1\25\2\24"+
    "\4\25\3\24\1\22\1\23\2\24\1\14\1\15\1\26"+
    "\1\15\1\27\3\30\1\31\1\32\1\33\1\34\1\30"+
    "\1\35\1\20\2\30\1\36\1\37\1\40\2\30\1\14"+
    "\1\41\2\14\2\30\1\42\1\43\1\14\1\44\1\45"+
    "\1\24\1\23\2\14\1\24\1\15\1\46\1\24\1\47"+
    "\3\30\1\50\1\32\1\51\1\34\1\30\1\35\1\52"+
    "\2\30\1\36\1\53\1\40\2\30\1\24\1\41\2\24"+
    "\2\30\1\42\1\54\1\24\1\55\1\56\1\22\1\23"+
    "\3\24\1\15\1\57\1\15\1\57\1\60\1\57\1\61"+
    "\1\24\5\57\1\24\7\57\1\24\1\57\2\24\4\57"+
    "\3\24\1\62\1\23\1\24\1\63\1\24\1\15\1\64"+
    "\1\24\1\65\1\66\2\64\1\24\5\64\1\24\7\64"+
    "\1\24\1\64\2\24\4\64\4\24\1\23\3\24\1\15"+
    "\12\24\1\67\24\24\1\70\1\23\1\24\1\63\1\24"+
    "\1\15\37\24\1\22\1\23\1\71\2\24\1\15\1\72"+
    "\1\24\4\72\1\24\5\72\1\24\7\72\1\24\1\72"+
    "\2\24\4\72\3\24\1\22\1\23\3\24\1\15\1\73"+
    "\1\24\4\73\1\24\5\73\1\24\7\73\1\24\1\73"+
    "\2\24\4\73\4\24\1\23\2\24\52\0\1\74\52\0"+
    "\1\75\36\0\1\76\50\0\1\77\35\0\1\25\1\0"+
    "\4\25\1\0\5\25\1\0\7\25\1\0\1\25\2\0"+
    "\5\25\10\0\1\30\1\0\4\30\1\0\1\100\4\30"+
    "\1\0\5\30\1\101\1\30\1\0\1\30\2\0\5\30"+
    "\10\0\1\30\1\0\1\30\1\102\2\30\1\0\5\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\0\5\30\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\14\0\1\103\40\0\1\30\1\0\4\30"+
    "\1\0\1\30\1\104\3\30\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\30\1\0\4\30\1\0\2\30"+
    "\1\105\2\30\1\0\7\30\1\0\1\30\2\0\5\30"+
    "\10\0\1\30\1\0\4\30\1\0\3\30\1\106\1\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\0\1\107\4\30\1\0\7\30\1\0"+
    "\1\30\2\0\5\30\10\0\1\30\1\0\4\30\1\0"+
    "\5\30\1\0\4\30\1\110\2\30\1\0\1\30\2\0"+
    "\5\30\10\0\1\30\1\0\4\30\1\0\1\111\4\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\0\1\112\4\30\1\0\7\30\1\0"+
    "\1\30\2\0\5\30\10\0\1\30\1\0\4\30\1\0"+
    "\2\30\1\113\2\30\1\0\7\30\1\0\1\30\2\0"+
    "\5\30\10\0\1\30\1\0\2\30\1\114\1\30\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\1\30\1\115\2\30\1\0\5\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\6\0\37\116\1\24"+
    "\5\116\40\117\1\24\4\117\2\0\1\30\1\0\1\30"+
    "\1\120\2\30\1\0\5\30\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\30\1\0\4\30\1\0\2\30"+
    "\1\121\2\30\1\0\7\30\1\0\1\30\2\0\5\30"+
    "\13\0\1\122\41\0\1\30\1\0\4\30\1\0\1\123"+
    "\4\30\1\0\7\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\1\30\1\124\2\30\1\0\5\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\10\0\1\57\1\0"+
    "\4\57\1\0\5\57\1\0\7\57\1\0\1\57\2\0"+
    "\5\57\10\0\1\57\1\0\2\57\1\125\1\57\1\0"+
    "\5\57\1\0\7\57\1\0\1\57\2\0\5\57\10\0"+
    "\1\57\1\0\4\57\1\0\2\57\1\126\2\57\1\0"+
    "\7\57\1\0\1\57\2\0\5\57\10\0\1\64\1\0"+
    "\4\64\1\0\5\64\1\0\7\64\1\0\1\64\2\0"+
    "\5\64\10\0\1\64\1\0\4\64\1\127\5\64\1\0"+
    "\7\64\1\0\1\64\2\0\2\64\1\130\2\64\10\0"+
    "\1\64\1\0\2\64\1\131\1\64\1\0\5\64\1\0"+
    "\7\64\1\0\1\64\2\0\5\64\33\0\1\132\62\0"+
    "\1\133\3\0\1\72\1\0\4\72\1\0\5\72\1\0"+
    "\7\72\1\0\1\72\2\0\5\72\10\0\1\73\1\0"+
    "\4\73\1\0\5\73\1\0\7\73\1\0\1\73\2\0"+
    "\5\73\14\0\1\134\47\0\1\135\52\0\1\136\42\0"+
    "\1\137\31\0\1\30\1\0\4\30\1\0\5\30\1\0"+
    "\3\30\1\140\3\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\0\5\30\1\0\2\30\1\141"+
    "\4\30\1\0\1\30\2\0\5\30\10\0\1\30\1\0"+
    "\2\30\1\142\1\30\1\0\5\30\1\0\7\30\1\0"+
    "\1\30\2\0\5\30\15\0\1\143\22\0\1\144\14\0"+
    "\1\30\1\0\4\30\1\0\3\30\1\145\1\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\10\0\1\30\1\0"+
    "\4\30\1\0\1\146\4\30\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\30\1\0\4\30\1\0\5\30"+
    "\1\0\2\30\1\147\4\30\1\0\1\30\2\0\5\30"+
    "\10\0\1\30\1\0\1\30\1\150\2\30\1\0\5\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\0\5\30\1\0\4\30\1\151\2\30"+
    "\1\0\1\30\2\0\5\30\10\0\1\30\1\0\4\30"+
    "\1\0\4\30\1\152\1\0\7\30\1\0\1\30\2\0"+
    "\5\30\10\0\1\30\1\0\4\30\1\0\5\30\1\0"+
    "\1\30\1\153\5\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\154\5\30\1\0\7\30\1\0"+
    "\1\30\2\0\2\30\1\155\2\30\10\0\1\30\1\0"+
    "\3\30\1\156\1\0\5\30\1\0\7\30\1\0\1\30"+
    "\2\0\1\157\4\30\10\0\1\30\1\0\4\30\1\0"+
    "\5\30\1\0\1\160\6\30\1\0\1\30\2\0\5\30"+
    "\10\0\1\30\1\0\2\30\1\161\1\30\1\0\5\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\0\1\162\4\30\1\0\7\30\1\0"+
    "\1\30\2\0\5\30\25\0\1\163\27\0\1\30\1\0"+
    "\4\30\1\0\4\30\1\164\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\30\1\0\4\30\1\0\5\30"+
    "\1\0\1\165\6\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\57\1\0\4\57\1\166\5\57\1\0\7\57\1\0"+
    "\1\57\2\0\2\57\1\167\2\57\10\0\1\57\1\0"+
    "\4\57\1\170\5\57\1\0\7\57\1\0\1\57\2\0"+
    "\2\57\1\171\2\57\31\0\1\172\23\0\1\64\1\0"+
    "\4\64\1\0\5\64\1\0\4\64\1\173\2\64\1\0"+
    "\1\64\2\0\5\64\10\0\1\64\1\0\4\64\1\166"+
    "\5\64\1\0\7\64\1\0\1\64\2\0\2\64\1\174"+
    "\2\64\16\0\1\175\23\0\1\175\12\0\1\176\44\0"+
    "\1\177\15\0\1\200\37\0\1\201\36\0\1\202\41\0"+
    "\1\30\1\0\4\30\1\0\1\30\1\203\3\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\10\0\1\30\1\0"+
    "\4\30\1\0\2\30\1\204\2\30\1\0\7\30\1\0"+
    "\1\30\2\0\5\30\10\0\1\205\1\0\4\30\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\22\0"+
    "\1\206\35\0\1\207\41\0\1\30\1\0\2\30\1\210"+
    "\1\30\1\0\5\30\1\0\7\30\1\0\1\30\2\0"+
    "\5\30\10\0\1\211\1\0\4\30\1\0\5\30\1\0"+
    "\1\30\1\212\5\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\0\4\30\1\210\1\0\4\30"+
    "\1\213\2\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\0\5\30\1\0\1\214\6\30\1\0"+
    "\1\30\2\0\5\30\10\0\1\30\1\0\4\30\1\0"+
    "\1\215\4\30\1\0\7\30\1\0\1\30\2\0\5\30"+
    "\10\0\1\30\1\0\1\30\1\216\2\30\1\0\5\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\217\5\30\1\0\7\30\1\0\1\30"+
    "\2\0\2\30\1\220\2\30\15\0\1\221\37\0\1\30"+
    "\1\0\3\30\1\222\1\0\5\30\1\0\7\30\1\0"+
    "\1\30\2\0\5\30\10\0\1\30\1\0\4\30\1\0"+
    "\3\30\1\223\1\30\1\0\7\30\1\0\1\30\2\0"+
    "\5\30\10\0\1\30\1\0\1\30\1\224\2\30\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\0\2\30\1\225\2\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\10\0\1\226\1\0"+
    "\4\30\1\0\5\30\1\0\7\30\1\0\1\30\2\0"+
    "\5\30\10\0\1\227\1\0\4\30\1\0\5\30\1\0"+
    "\1\30\1\230\5\30\1\0\1\30\2\0\5\30\21\0"+
    "\1\231\33\0\1\30\1\0\1\30\1\232\2\30\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\0\2\30\1\233\2\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\15\0\1\234\37\0"+
    "\1\57\1\0\3\57\1\235\1\0\5\57\1\0\7\57"+
    "\1\0\1\57\2\0\5\57\30\0\1\236\24\0\1\57"+
    "\1\0\4\57\1\0\5\57\1\0\3\57\1\237\3\57"+
    "\1\0\1\57\2\0\5\57\22\0\1\234\32\0\1\64"+
    "\1\0\4\64\1\0\3\64\1\240\1\64\1\0\7\64"+
    "\1\0\1\64\2\0\5\64\10\0\1\64\1\0\3\64"+
    "\1\240\1\0\5\64\1\0\7\64\1\0\1\64\2\0"+
    "\5\64\24\0\1\241\16\0\1\241\16\0\1\242\51\0"+
    "\1\243\43\0\1\244\42\0\1\245\56\0\1\246\23\0"+
    "\1\30\1\0\4\30\1\0\5\30\1\0\4\30\1\247"+
    "\2\30\1\0\1\30\2\0\5\30\10\0\1\30\1\0"+
    "\4\30\1\0\5\30\1\0\2\30\1\250\4\30\1\0"+
    "\1\30\2\0\5\30\10\0\1\30\1\0\3\30\1\251"+
    "\1\0\5\30\1\0\7\30\1\0\1\30\2\0\5\30"+
    "\26\0\1\252\34\0\1\253\23\0\1\253\12\0\1\30"+
    "\1\0\4\30\1\0\3\30\1\254\1\30\1\0\7\30"+
    "\1\0\1\30\2\0\5\30\10\0\1\30\1\0\4\30"+
    "\1\0\2\30\1\255\2\30\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\30\1\0\4\30\1\0\5\30"+
    "\1\0\4\30\1\256\2\30\1\0\1\30\2\0\5\30"+
    "\10\0\1\257\1\0\4\30\1\0\5\30\1\0\7\30"+
    "\1\0\1\30\2\0\5\30\10\0\1\30\1\0\4\30"+
    "\1\0\5\30\1\0\4\30\1\260\2\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\261\44\0\1\262\1\0\4\30"+
    "\1\0\5\30\1\0\7\30\1\0\1\30\2\0\5\30"+
    "\22\0\1\263\32\0\1\30\1\0\4\30\1\0\3\30"+
    "\1\210\1\30\1\0\7\30\1\0\1\30\2\0\5\30"+
    "\10\0\1\30\1\0\4\30\1\0\5\30\1\0\1\30"+
    "\1\264\5\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\253\5\30\1\0\7\30\1\0\1\30"+
    "\2\0\2\30\1\265\2\30\10\0\1\30\1\0\4\30"+
    "\1\0\1\266\4\30\1\0\7\30\1\0\1\30\2\0"+
    "\5\30\10\0\1\30\1\0\3\30\1\267\1\0\5\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\0\3\30\1\270\1\30\1\0\7\30"+
    "\1\0\1\30\2\0\5\30\10\0\1\30\1\0\4\30"+
    "\1\0\2\30\1\271\2\30\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\17\0\1\272\35\0\1\30\1\0\4\30"+
    "\1\0\5\30\1\0\4\30\1\273\2\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\30\1\0\4\30\1\0\1\274"+
    "\4\30\1\0\7\30\1\0\1\30\2\0\5\30\34\0"+
    "\1\24\1\0\1\24\16\0\1\57\1\0\4\57\1\0"+
    "\5\57\1\0\7\57\1\24\1\57\1\24\1\0\5\57"+
    "\34\0\1\24\2\0\1\24\15\0\1\57\1\0\4\57"+
    "\1\0\5\57\1\0\7\57\1\24\1\57\1\0\1\24"+
    "\5\57\10\0\1\64\1\0\4\64\1\0\5\64\1\0"+
    "\7\64\1\24\1\64\1\24\1\0\5\64\15\0\1\15"+
    "\45\0\1\275\23\0\1\275\25\0\1\276\50\0\1\277"+
    "\30\0\1\300\53\0\1\301\32\0\1\30\1\0\4\30"+
    "\1\0\3\30\1\302\1\30\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\303\1\0\4\30\1\0\5\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\275\5\30\1\0\7\30\1\0\1\30"+
    "\2\0\2\30\1\304\2\30\22\0\1\305\43\0\1\306"+
    "\33\0\1\30\1\0\4\30\1\0\4\30\1\307\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\10\0\1\30\1\0"+
    "\4\30\1\0\5\30\1\0\2\30\1\310\4\30\1\0"+
    "\1\30\2\0\5\30\10\0\1\30\1\0\4\30\1\0"+
    "\3\30\1\311\1\30\1\0\7\30\1\0\1\30\2\0"+
    "\5\30\10\0\1\30\1\0\4\30\1\0\5\30\1\0"+
    "\2\30\1\312\4\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\0\3\30\1\313\1\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\27\0\1\314\25\0"+
    "\1\30\1\0\4\30\1\0\5\30\1\0\2\30\1\315"+
    "\4\30\1\0\1\30\2\0\5\30\10\0\1\30\1\0"+
    "\4\30\1\0\3\30\1\316\1\30\1\0\7\30\1\0"+
    "\1\30\2\0\5\30\10\0\1\30\1\0\4\30\1\0"+
    "\2\30\1\317\2\30\1\0\7\30\1\0\1\30\2\0"+
    "\5\30\10\0\1\30\1\0\1\30\1\320\2\30\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\321\5\30\1\0\7\30\1\0"+
    "\1\30\2\0\2\30\1\322\2\30\10\0\1\30\1\0"+
    "\4\30\1\0\4\30\1\323\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\30\1\0\4\30\1\0\5\30"+
    "\1\0\2\30\1\324\4\30\1\0\1\30\2\0\5\30"+
    "\13\0\1\325\41\0\1\30\1\0\4\30\1\0\3\30"+
    "\1\326\1\30\1\0\7\30\1\0\1\30\2\0\5\30"+
    "\10\0\1\30\1\0\1\30\1\327\2\30\1\0\5\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\17\0\1\330"+
    "\40\0\1\331\61\0\1\301\31\0\1\332\37\0\1\30"+
    "\1\0\4\30\1\0\5\30\1\0\6\30\1\213\1\0"+
    "\1\30\2\0\5\30\10\0\1\30\1\0\3\30\1\264"+
    "\1\0\5\30\1\0\7\30\1\0\1\30\2\0\5\30"+
    "\10\0\1\30\1\0\4\30\1\0\1\333\4\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\21\0\1\334\45\0"+
    "\1\335\32\0\1\30\1\0\1\30\1\336\2\30\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\0\5\30\1\0\3\30\1\313"+
    "\3\30\1\0\1\30\2\0\5\30\10\0\1\30\1\0"+
    "\4\30\1\0\5\30\1\0\7\30\1\337\1\30\2\0"+
    "\5\30\10\0\1\30\1\0\3\30\1\340\1\0\5\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\31\0\1\334"+
    "\23\0\1\30\1\0\4\30\1\0\5\30\1\0\4\30"+
    "\1\213\2\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\4\30\1\0\2\30\1\213\2\30\1\0\7\30"+
    "\1\0\1\30\2\0\5\30\10\0\1\30\1\0\4\30"+
    "\1\0\3\30\1\341\1\30\1\0\7\30\1\0\1\30"+
    "\2\0\5\30\10\0\1\30\1\0\3\30\1\342\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\17\0"+
    "\1\343\35\0\1\30\1\0\4\30\1\0\1\344\4\30"+
    "\1\0\7\30\1\0\1\30\2\0\5\30\10\0\1\30"+
    "\1\0\1\30\1\345\2\30\1\0\5\30\1\0\7\30"+
    "\1\0\1\30\2\0\5\30\10\0\1\30\1\0\4\30"+
    "\1\0\5\30\1\0\3\30\1\326\3\30\1\0\1\30"+
    "\2\0\5\30\15\0\1\346\37\0\1\30\1\0\3\30"+
    "\1\347\1\0\5\30\1\0\7\30\1\0\1\30\2\0"+
    "\5\30\14\0\1\301\51\0\1\246\41\0\1\350\23\0"+
    "\1\350\12\0\1\30\1\0\2\30\1\313\1\30\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\0\2\30\1\260\2\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\20\0\1\351\13\0"+
    "\1\337\20\0\1\30\1\0\4\30\1\0\3\30\1\352"+
    "\1\30\1\0\7\30\1\0\1\30\2\0\5\30\10\0"+
    "\1\30\1\0\4\30\1\350\5\30\1\0\7\30\1\0"+
    "\1\30\2\0\2\30\1\353\2\30\14\0\1\354\40\0"+
    "\1\30\1\0\2\30\1\326\1\30\1\0\5\30\1\0"+
    "\7\30\1\0\1\30\2\0\5\30\10\0\1\30\1\0"+
    "\4\30\1\0\2\30\1\273\2\30\1\0\7\30\1\0"+
    "\1\30\2\0\5\30\16\0\1\355\23\0\1\355\12\0"+
    "\1\30\1\0\4\30\1\355\5\30\1\0\7\30\1\0"+
    "\1\30\2\0\2\30\1\356\2\30\14\0\1\246\51\0"+
    "\1\357\33\0\1\30\1\0\2\30\1\260\1\30\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\14\0"+
    "\1\360\40\0\1\30\1\0\2\30\1\273\1\30\1\0"+
    "\5\30\1\0\7\30\1\0\1\30\2\0\5\30\22\0"+
    "\1\361\44\0\1\354\32\0\1\362\52\0\1\363\23\0"+
    "\1\363\26\0\1\364\16\0\1\364\17\0\1\365\23\0"+
    "\1\365\21\0\1\366\41\0\1\334\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8177];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\2\11\4\1\3\11\35\1\2\11\4\1\1\11"+
    "\3\1\4\0\3\1\1\0\12\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\11\4\0\3\1\2\0"+
    "\7\1\1\0\6\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\6\0\3\1\2\0\7\1\1\0"+
    "\1\1\1\0\7\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\6\0\3\1\2\0\5\1\1\0\1\1\1\11"+
    "\6\1\1\0\2\1\4\0\1\11\3\1\2\0\5\1"+
    "\1\0\4\1\1\0\3\1\1\0\2\1\3\0\1\1"+
    "\2\11\1\1\1\0\3\1\1\0\2\1\1\0\1\1"+
    "\2\0\2\1\1\11\1\0\1\1\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	List<String> files = new LinkedList<String>();
	List<String> chars = new LinkedList<String>();
	boolean endLine = true;
	
	public COMFLOWFileExistence(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMFLOWFileExistence(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     
	
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 21: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 22: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 23: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 24: break;
          case 5: 
            { 
            }
          case 25: break;
          case 6: 
            { location = location + " " + yytext(); files.clear(); yybegin(COMMENT);
            }
          case 26: break;
          case 7: 
            { if(!files.contains(yytext()) && !chars.contains(yytext())) {
									setError(location,"The existences of the file " + yytext() + " must be checked with the instruction INQUIRE before being opened or created. ", yyline+1);
								 } yybegin(COMMENT);
            }
          case 27: break;
          case 8: 
            { if(endLine)yybegin(NEW_LINE);
								 endLine = true;
            }
          case 28: break;
          case 9: 
            { endLine=false;
            }
          case 29: break;
          case 10: 
            { files.add(yytext()); yybegin(INQ_EXIST);
            }
          case 30: break;
          case 11: 
            { if(endLine) {
									files.remove(files.size()-1);
									yybegin(NEW_LINE);
								 } endLine = true;
            }
          case 31: break;
          case 12: 
            { chars.add(yytext());
            }
          case 32: break;
          case 13: 
            { files.add(yytext()); yybegin(COMMENT);
            }
          case 33: break;
          case 14: 
            { yybegin(DECLARATION);
            }
          case 34: break;
          case 15: 
            { yybegin(IO);
            }
          case 35: break;
          case 16: 
            { yybegin(DECL_PARAMS);
            }
          case 36: break;
          case 17: 
            { location = yytext(); yybegin(NAMING);
            }
          case 37: break;
          case 18: 
            { location=yytext(); yybegin(NAMING);
            }
          case 38: break;
          case 19: 
            { yybegin(INQ);
            }
          case 39: break;
          case 20: 
            { yybegin(ALLOC);
            }
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
