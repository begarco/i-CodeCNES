/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for COM.FLOW.Recursion rule. */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMFLOWRecursion.lex</tt>
 */
public class COMFLOWRecursion extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\33\1\34\1\35\1\34\22\0\1\14\1\1\1\31"+
    "\4\0\1\30\10\0\12\2\7\0\1\26\1\24\1\13\1\5\1\10"+
    "\1\15\1\25\1\27\1\21\2\27\1\7\1\3\1\16\1\4\1\11"+
    "\1\27\1\12\1\23\1\17\1\6\1\32\4\27\4\0\1\2\1\0"+
    "\1\26\1\24\1\13\1\5\1\10\1\15\1\25\1\27\1\21\2\27"+
    "\1\7\1\3\1\16\1\4\1\11\1\27\1\12\1\23\1\17\1\6"+
    "\1\32\4\27\12\0\1\34\252\0\2\20\115\0\1\22\u1ea8\0\1\34"+
    "\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\10\1\1\3\1\4\1\5\1\2"+
    "\2\5\1\3\1\4\1\6\1\1\1\2\3\1\1\5"+
    "\1\4\1\5\1\2\10\5\1\3\1\4\134\0\1\7"+
    "\20\0\1\5\73\0\1\10\1\0\1\10\1\0\1\10"+
    "\3\11\3\12\17\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\226\0\264"+
    "\0\322\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\226"+
    "\0\226\0\u01a4\0\u01a4\0\u01c2\0\u01e0\0\u01a4\0\u01a4\0\u01fe"+
    "\0\u021c\0\u021c\0\u023a\0\u0258\0\u0276\0\u021c\0\u021c\0\u0294"+
    "\0\u0294\0\264\0\322\0\360\0\u010e\0\u02b2\0\u014a\0\u02d0"+
    "\0\u02ee\0\u0294\0\u0294\0\u030c\0\u032a\0\u0348\0\u0366\0\u0384"+
    "\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a\0\u01c2\0\u0438\0\u0456"+
    "\0\u01e0\0\u0474\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a\0\u0528"+
    "\0\u0546\0\u0564\0\u0582\0\u05a0\0\u05be\0\u05dc\0\u05fa\0\u0618"+
    "\0\u0636\0\u0654\0\u0672\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708"+
    "\0\u0726\0\u0744\0\u0762\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8"+
    "\0\u0816\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8"+
    "\0\u0906\0\u0924\0\u0942\0\u0960\0\u097e\0\u099c\0\u09ba\0\u09d8"+
    "\0\u09f6\0\u0a14\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa\0\u0ac8"+
    "\0\u0ae6\0\u0b04\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a\0\u0bb8"+
    "\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c\0\u0c8a\0\u0ca8"+
    "\0\u0cc6\0\u0ce4\0\u0d02\0\u0d20\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98"+
    "\0\u0db6\0\u0dd4\0\u0df2\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88"+
    "\0\u0ea6\0\u0ec4\0\u0ee2\0\u0f00\0\u0f1e\0\u0f3c\0\u0f5a\0\u0f78"+
    "\0\u0d98\0\u0f96\0\u0fb4\0\u0fd2\0\u0ff0\0\u100e\0\u102c\0\u104a"+
    "\0\u1068\0\u1086\0\u10a4\0\u10c2\0\u10e0\0\u10fe\0\u111c\0\u113a"+
    "\0\u1158\0\u1176\0\u1194\0\u11b2\0\u11d0\0\u11ee\0\u120c\0\u122a"+
    "\0\u1248\0\u1266\0\u1284\0\u12a2\0\u12c0\0\u12de\0\u12fc\0\u131a"+
    "\0\u1338\0\u1356\0\u1374\0\u1392\0\u13b0\0\u13ce\0\u13ec\0\u140a"+
    "\0\u1428\0\u1446\0\u1464\0\u1482\0\u14a0\0\u14be\0\u14dc\0\u14fa"+
    "\0\u1518\0\u1536\0\u1554\0\u1572\0\u1590\0\u15ae\0\u15cc\0\u15ea"+
    "\0\u1608\0\u1626\0\u1644\0\u1662\0\u01a4\0\u1680\0\u01c2\0\u169e"+
    "\0\u01e0\0\u01a4\0\u01c2\0\u01e0\0\u01a4\0\u01c2\0\u01e0\0\u16bc"+
    "\0\u16da\0\u16f8\0\u1716\0\u1734\0\u1752\0\u1770\0\u178e\0\u17ac"+
    "\0\u17ca\0\u17e8\0\u1806\0\u1824\0\u1842\0\u1860";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\5\10\1\12\2\10\1\6"+
    "\1\13\2\10\1\6\1\10\1\14\1\15\4\10\1\16"+
    "\1\17\1\10\1\20\2\21\1\22\1\23\26\22\1\24"+
    "\1\25\1\22\1\26\2\27\1\22\1\23\1\22\11\30"+
    "\1\22\3\30\1\22\1\30\1\22\5\30\1\24\1\25"+
    "\1\30\1\26\2\27\1\31\1\32\1\10\1\11\5\10"+
    "\1\12\2\10\1\31\1\13\2\10\1\31\1\10\1\33"+
    "\1\15\4\10\1\34\1\35\1\10\1\36\2\37\1\40"+
    "\1\41\1\42\1\43\5\42\1\44\2\42\1\40\1\45"+
    "\2\42\1\40\1\42\1\46\1\47\4\42\1\50\1\51"+
    "\1\42\1\52\2\53\3\0\1\54\6\0\1\55\26\0"+
    "\1\56\5\0\1\57\3\0\1\60\4\0\2\61\15\0"+
    "\1\56\1\62\4\0\1\57\3\0\1\60\4\0\2\61"+
    "\15\0\1\56\5\0\1\57\1\63\2\0\1\60\4\0"+
    "\2\61\15\0\1\56\2\0\1\64\2\0\1\57\3\0"+
    "\1\60\4\0\2\61\15\0\1\54\2\0\1\65\3\0"+
    "\1\55\26\0\1\56\2\0\1\65\2\0\1\57\3\0"+
    "\1\60\4\0\2\61\12\0\3\66\1\67\6\66\1\70"+
    "\15\66\1\22\5\66\3\71\1\72\6\71\1\73\16\71"+
    "\1\22\4\71\36\0\30\66\1\22\5\66\31\71\1\22"+
    "\4\71\2\0\12\30\1\0\3\30\1\0\1\30\1\0"+
    "\5\30\2\0\1\30\6\0\1\54\6\0\1\74\26\0"+
    "\1\54\2\0\1\65\3\0\1\74\23\0\3\66\1\67"+
    "\6\66\1\75\15\66\1\22\5\66\3\71\1\72\6\71"+
    "\1\76\16\71\1\22\4\71\3\0\1\54\6\0\1\77"+
    "\26\0\1\54\2\0\1\65\3\0\1\77\23\0\3\66"+
    "\1\67\6\66\1\100\15\66\1\22\5\66\3\71\1\72"+
    "\6\71\1\101\16\71\1\22\4\71\4\0\1\102\41\0"+
    "\1\103\31\0\1\104\43\0\1\105\31\0\1\106\35\0"+
    "\1\107\34\0\1\110\34\0\1\111\47\0\1\112\43\0"+
    "\1\113\11\0\4\66\1\114\23\66\1\22\15\66\1\115"+
    "\17\66\1\22\5\66\4\71\1\116\24\71\1\22\14\71"+
    "\1\117\20\71\1\22\4\71\10\0\1\120\25\0\10\66"+
    "\1\121\17\66\1\22\5\66\10\71\1\122\20\71\1\22"+
    "\4\71\10\0\1\123\25\0\10\66\1\124\17\66\1\22"+
    "\5\66\10\71\1\125\20\71\1\22\4\71\5\0\1\126"+
    "\43\0\1\127\27\0\1\130\34\0\1\131\47\0\1\132"+
    "\43\0\1\133\17\0\1\134\42\0\1\135\11\0\1\136"+
    "\23\0\1\137\34\0\1\140\23\0\5\66\1\141\22\66"+
    "\1\22\20\66\1\142\14\66\1\22\5\66\5\71\1\143"+
    "\23\71\1\22\17\71\1\144\15\71\1\22\4\71\13\0"+
    "\1\145\22\0\13\66\1\146\14\66\1\22\5\66\13\71"+
    "\1\147\15\71\1\22\4\71\13\0\1\150\22\0\13\66"+
    "\1\151\14\66\1\22\5\66\13\71\1\152\15\71\1\22"+
    "\4\71\6\0\1\153\35\0\1\154\35\0\1\155\42\0"+
    "\1\156\11\0\1\157\23\0\1\160\34\0\1\161\32\0"+
    "\1\162\36\0\1\163\37\0\1\164\42\0\1\165\22\0"+
    "\1\166\31\0\6\66\1\167\21\66\1\22\13\66\1\170"+
    "\21\66\1\22\5\66\6\71\1\171\22\71\1\22\12\71"+
    "\1\172\22\71\1\22\4\71\6\0\1\173\27\0\6\66"+
    "\1\174\21\66\1\22\5\66\6\71\1\175\22\71\1\22"+
    "\4\71\6\0\1\176\27\0\6\66\1\177\21\66\1\22"+
    "\5\66\6\71\1\200\22\71\1\22\4\71\7\0\1\201"+
    "\40\0\1\202\32\0\1\203\36\0\1\204\37\0\1\205"+
    "\42\0\1\206\22\0\1\207\41\0\1\210\32\0\1\211"+
    "\56\0\1\212\27\0\2\213\22\0\1\214\27\0\7\66"+
    "\1\215\20\66\1\22\17\66\1\216\15\66\1\22\5\66"+
    "\7\71\1\217\21\71\1\22\16\71\1\220\16\71\1\22"+
    "\4\71\12\0\1\221\23\0\12\66\1\222\15\66\1\22"+
    "\5\66\12\71\1\223\16\71\1\22\4\71\12\0\1\224"+
    "\23\0\12\66\1\225\15\66\1\22\5\66\12\71\1\226"+
    "\16\71\1\22\4\71\10\0\1\227\47\0\2\230\22\0"+
    "\1\231\32\0\1\232\56\0\1\233\27\0\2\234\22\0"+
    "\1\235\31\0\12\22\1\0\3\22\1\0\1\22\1\0"+
    "\5\22\2\0\1\22\11\0\1\236\32\0\1\210\36\0"+
    "\1\237\50\0\1\240\16\0\10\66\1\241\17\66\1\22"+
    "\27\66\2\242\4\66\1\22\5\66\10\71\1\243\20\71"+
    "\1\22\26\71\2\244\5\71\1\22\4\71\22\0\2\245"+
    "\12\0\22\66\2\246\4\66\1\22\5\66\22\71\2\247"+
    "\5\71\1\22\4\71\22\0\2\250\12\0\22\66\2\251"+
    "\4\66\1\22\5\66\22\71\2\252\5\71\1\22\4\71"+
    "\11\0\1\253\2\0\1\227\20\0\1\227\20\0\2\254"+
    "\22\0\1\255\32\0\1\231\36\0\1\256\50\0\1\257"+
    "\30\0\1\162\41\0\1\210\37\0\2\260\14\0\11\66"+
    "\1\261\2\66\1\241\13\66\1\22\4\66\1\241\20\66"+
    "\2\262\6\66\1\22\5\66\11\71\1\263\2\71\1\243"+
    "\14\71\1\22\3\71\1\243\20\71\2\264\7\71\1\22"+
    "\4\71\20\0\2\265\14\0\20\66\2\266\6\66\1\22"+
    "\5\66\20\71\2\267\7\71\1\22\4\71\20\0\2\270"+
    "\14\0\20\66\2\271\6\66\1\22\5\66\20\71\2\272"+
    "\7\71\1\22\4\71\12\0\1\273\55\0\1\274\15\0"+
    "\1\203\41\0\1\231\37\0\2\275\32\0\1\162\17\0"+
    "\12\66\1\276\15\66\1\22\35\66\1\22\1\66\1\277"+
    "\3\66\12\71\1\300\16\71\1\22\35\71\1\22\1\301"+
    "\3\71\32\0\1\302\3\0\30\66\1\22\1\66\1\303"+
    "\3\66\31\71\1\22\1\304\3\71\32\0\1\305\3\0"+
    "\30\66\1\22\1\66\1\306\3\66\31\71\1\22\1\307"+
    "\3\71\4\0\1\310\41\0\1\311\43\0\1\203\17\0"+
    "\4\66\1\312\23\66\1\22\15\66\1\313\17\66\1\22"+
    "\5\66\4\71\1\314\24\71\1\22\14\71\1\315\20\71"+
    "\1\22\4\71\10\0\1\316\25\0\10\66\1\317\17\66"+
    "\1\22\5\66\10\71\1\320\20\71\1\22\4\71\10\0"+
    "\1\321\25\0\10\66\1\322\17\66\1\22\5\66\10\71"+
    "\1\323\20\71\1\22\4\71\13\0\1\324\22\0\2\325"+
    "\12\0\1\325\3\0\1\325\1\0\1\325\5\0\2\325"+
    "\1\0\3\325\13\66\1\326\14\66\1\22\5\66\2\327"+
    "\12\66\1\327\3\66\1\327\1\66\1\327\5\66\1\22"+
    "\1\327\1\66\3\327\13\71\1\330\15\71\1\22\4\71"+
    "\2\331\12\71\1\331\3\71\1\331\1\71\1\331\5\71"+
    "\1\331\1\22\1\71\3\331\2\332\12\0\1\332\3\0"+
    "\1\332\1\0\1\332\5\0\2\332\1\0\3\332\2\333"+
    "\12\66\1\333\3\66\1\333\1\66\1\333\5\66\1\22"+
    "\1\333\1\66\3\333\2\334\12\71\1\334\3\71\1\334"+
    "\1\71\1\334\5\71\1\334\1\22\1\71\3\334\2\335"+
    "\12\0\1\335\3\0\1\335\1\0\1\335\5\0\2\335"+
    "\1\0\3\335\2\336\12\66\1\336\3\66\1\336\1\66"+
    "\1\336\5\66\1\22\1\336\1\66\3\336\2\337\12\71"+
    "\1\337\3\71\1\337\1\71\1\337\5\71\1\337\1\22"+
    "\1\71\3\337\10\0\1\340\25\0\10\66\1\341\17\66"+
    "\1\22\5\66\10\71\1\342\20\71\1\22\4\71\5\0"+
    "\1\343\30\0\5\66\1\344\22\66\1\22\5\66\5\71"+
    "\1\345\23\71\1\22\4\71\6\0\1\346\27\0\6\66"+
    "\1\347\21\66\1\22\5\66\6\71\1\350\22\71\1\22"+
    "\4\71\12\0\1\351\23\0\12\66\1\352\15\66\1\22"+
    "\5\66\12\71\1\353\16\71\1\22\4\71\10\0\1\354"+
    "\25\0\10\66\1\355\17\66\1\22\5\66\10\71\1\356"+
    "\20\71\1\22\4\71\2\22\12\0\1\22\3\0\1\22"+
    "\1\0\1\22\5\0\2\22\1\0\3\22\2\24\12\66"+
    "\1\24\3\66\1\24\1\66\1\24\5\66\1\22\1\24"+
    "\1\66\3\24\2\25\12\71\1\25\3\71\1\25\1\71"+
    "\1\25\5\71\1\25\1\22\1\71\3\25";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6270];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\14\1\2\11\2\1\2\11\24\1\134\0\1\1"+
    "\20\0\1\1\73\0\1\11\1\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\2\1\17\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	
	public COMFLOWRecursion() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMFLOWRecursion(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     
	
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 11: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 12: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 13: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 14: break;
          case 5: 
            { 
            }
          case 15: break;
          case 6: 
            { location = location + " " + yytext();
								 yybegin(COMMENT);
            }
          case 16: break;
          case 7: 
            { location = yytext(); yybegin(NAMING);
            }
          case 17: break;
          case 8: 
            { this.setError(location,"The use of recursivity is not allowed.", yyline + 1);
								 yybegin(LINE);
            }
          case 18: break;
          case 9: 
            { this.setError(location,"The use of recursivity is not allowed.", yyline + 1); 
			   					 yybegin(LINE);
            }
          case 19: break;
          case 10: 
            { this.setError(location,"The use of recursivity is not allowed.", yyline + 1);
            }
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
