/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.INST.If rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90INSTOperator.lex</tt>
 */
public class F90INSTOperator extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\34\1\35\1\36\1\34\22\0\1\26\1\1\1\31"+
    "\4\0\1\30\6\0\1\32\1\0\12\23\7\0\1\20\1\16\1\5"+
    "\1\14\1\13\1\2\1\17\1\27\1\24\2\27\1\22\1\21\1\4"+
    "\1\10\1\11\1\33\1\12\1\25\1\6\1\3\5\27\4\0\1\23"+
    "\1\0\1\20\1\16\1\5\1\14\1\13\1\2\1\17\1\27\1\24"+
    "\2\27\1\22\1\21\1\4\1\10\1\11\1\33\1\12\1\25\1\6"+
    "\1\3\5\27\12\0\1\35\252\0\2\7\115\0\1\15\u1ea8\0\1\35"+
    "\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\13\1\1\3\1\1\1\2\1\4"+
    "\1\3\1\5\56\0\1\6\33\0\1\7\11\0\1\1"+
    "\46\0\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\135\0\174\0\233\0\272"+
    "\0\331\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2"+
    "\0\135\0\u01d1\0\u01d1\0\u01d1\0\u01d1\0\u01f0\0\u020f\0\u022e"+
    "\0\u024d\0\u026c\0\u028b\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326"+
    "\0\u0345\0\u0364\0\u0383\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e"+
    "\0\u043d\0\u045c\0\u047b\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516"+
    "\0\u0535\0\u0554\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e"+
    "\0\u062d\0\u064c\0\u066b\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u0706"+
    "\0\u0725\0\u0744\0\u0763\0\u0782\0\u01d1\0\u07a1\0\u07c0\0\u07df"+
    "\0\u07fe\0\u081d\0\u083c\0\u085b\0\u087a\0\u0899\0\u08b8\0\u08d7"+
    "\0\u08f6\0\u0915\0\u0934\0\u0953\0\u0972\0\u0991\0\u09b0\0\u09cf"+
    "\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7"+
    "\0\u0ae6\0\u0b05\0\u0b24\0\u0b43\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf"+
    "\0\u0bde\0\u0bfd\0\u0ae6\0\u0c1c\0\u0c3b\0\u0c5a\0\u0c79\0\u0c98"+
    "\0\u0cb7\0\u0cd6\0\u0cf5\0\u0d14\0\u0d33\0\u0d52\0\u0d71\0\u0d90"+
    "\0\u0daf\0\u0dce\0\u0ded\0\u0e0c\0\u0e2b\0\u0e4a\0\u0e69\0\u0e88"+
    "\0\u0ea7\0\u0ec6\0\u0ee5\0\u0f04\0\u0f23\0\u0f42\0\u0f61\0\u0f80"+
    "\0\u0f9f\0\u0fbe\0\u0fdd\0\u0ffc\0\u101b\0\u103a\0\u1059\0\u1078"+
    "\0\u1097\0\u0364\0\u03a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\4\7\1\10\1\7\1\11\3\7"+
    "\1\12\3\7\1\13\2\7\1\14\1\15\1\4\1\7"+
    "\1\16\1\17\1\20\1\7\1\4\2\21\1\22\1\23"+
    "\32\22\1\24\2\25\1\22\1\23\5\26\1\22\5\26"+
    "\1\22\5\26\1\22\2\26\1\22\1\26\3\22\1\26"+
    "\1\24\2\25\21\0\1\27\17\0\1\30\1\31\3\0"+
    "\1\32\1\0\1\33\3\0\1\34\3\0\1\35\2\0"+
    "\1\32\1\34\13\0\1\30\4\0\1\32\1\0\1\33"+
    "\3\0\1\34\3\0\1\35\2\0\1\32\1\34\15\0"+
    "\1\36\14\0\1\27\17\0\1\30\4\0\1\32\1\0"+
    "\1\33\1\37\2\0\1\34\3\0\1\35\2\0\1\32"+
    "\1\34\14\0\1\40\15\0\1\27\17\0\1\30\4\0"+
    "\1\32\1\41\1\33\3\0\1\34\3\0\1\35\2\0"+
    "\1\32\1\34\13\0\1\30\1\0\1\36\2\0\1\32"+
    "\1\0\1\33\3\0\1\34\3\0\1\35\2\0\1\32"+
    "\1\34\13\0\1\30\1\40\3\0\1\32\1\0\1\33"+
    "\3\0\1\34\3\0\1\35\2\0\1\32\1\34\11\0"+
    "\21\42\1\43\6\42\1\22\6\42\21\44\1\45\7\44"+
    "\1\22\5\44\4\0\1\46\6\0\1\47\3\0\1\50"+
    "\1\0\1\27\1\50\55\0\5\26\1\0\5\26\1\0"+
    "\10\26\1\0\1\26\3\0\1\26\13\0\1\51\31\0"+
    "\1\52\37\0\1\53\36\0\1\54\44\0\1\55\27\0"+
    "\1\56\43\0\1\57\34\0\1\60\40\0\1\61\44\0"+
    "\1\62\34\0\1\63\22\0\30\42\1\22\16\42\1\64"+
    "\17\42\1\22\6\42\31\44\1\22\15\44\1\65\20\44"+
    "\1\22\5\44\13\0\1\66\56\0\1\66\11\0\1\66"+
    "\4\0\1\66\37\0\1\67\26\0\1\70\37\0\1\71"+
    "\37\0\1\72\40\0\1\73\44\0\1\74\34\0\1\75"+
    "\35\0\1\76\30\0\1\77\11\0\1\100\31\0\1\101"+
    "\27\0\1\102\33\0\14\42\1\103\13\42\1\22\6\42"+
    "\14\44\1\104\14\44\1\22\5\44\32\0\1\105\7\0"+
    "\1\106\40\0\1\107\37\0\1\110\43\0\1\111\30\0"+
    "\1\112\11\0\1\113\31\0\1\114\27\0\1\115\45\0"+
    "\1\116\37\0\1\117\35\0\1\120\34\0\1\121\50\0"+
    "\1\122\14\0\3\42\1\123\24\42\1\22\6\42\3\44"+
    "\1\124\25\44\1\22\5\44\22\0\1\125\22\0\1\126"+
    "\37\0\1\127\14\0\1\127\24\0\1\130\37\0\1\131"+
    "\35\0\1\132\34\0\1\133\50\0\1\134\16\0\1\135"+
    "\50\0\1\136\42\0\1\137\21\0\1\140\46\0\1\141"+
    "\23\0\22\42\1\142\5\42\1\22\6\42\22\44\1\143"+
    "\6\44\1\22\5\44\13\0\1\144\32\0\1\145\14\0"+
    "\1\145\22\0\1\146\30\0\1\147\50\0\1\150\42\0"+
    "\1\151\21\0\1\152\46\0\1\153\43\0\1\154\21\0"+
    "\1\155\54\0\1\141\23\0\1\156\32\0\5\22\1\0"+
    "\5\22\1\0\10\22\1\0\1\22\3\0\1\22\3\0"+
    "\13\42\1\157\14\42\1\22\6\42\13\44\1\160\15\44"+
    "\1\22\5\44\11\0\1\161\14\0\1\144\7\0\1\144"+
    "\10\0\1\162\32\0\1\141\52\0\1\163\21\0\1\164"+
    "\54\0\1\153\23\0\1\165\35\0\1\122\43\0\1\122"+
    "\33\0\1\166\14\0\1\166\12\0\11\42\1\167\14\42"+
    "\1\157\1\42\1\22\5\42\1\157\11\44\1\170\14\44"+
    "\1\160\2\44\1\22\4\44\1\160\12\0\1\171\30\0"+
    "\1\153\37\0\1\134\43\0\1\134\33\0\1\172\14\0"+
    "\1\172\16\0\1\122\32\0\12\42\1\173\15\42\1\22"+
    "\6\42\12\44\1\174\16\44\1\22\5\44\10\0\1\175"+
    "\32\0\1\134\32\0\10\42\1\176\17\42\1\22\6\42"+
    "\10\44\1\177\20\44\1\22\5\44\5\0\1\200\31\0"+
    "\5\42\1\201\22\42\1\22\6\42\5\44\1\202\23\44"+
    "\1\22\5\44\13\0\1\203\23\0\13\42\1\204\14\42"+
    "\1\22\6\42\13\44\1\205\15\44\1\22\5\44\14\0"+
    "\1\206\22\0\14\42\1\207\13\42\1\22\6\42\14\44"+
    "\1\210\14\44\1\22\5\44\3\0\1\211\33\0\3\42"+
    "\1\212\24\42\1\22\6\42\3\44\1\213\25\44\1\22"+
    "\5\44\12\0\1\214\24\0\12\42\1\215\15\42\1\22"+
    "\6\42\12\44\1\216\16\44\1\22\5\44\13\0\1\217"+
    "\23\0\13\42\1\220\14\42\1\22\6\42\13\44\1\221"+
    "\15\44\1\22\5\44\2\22\5\0\1\22\5\0\1\22"+
    "\10\0\1\22\1\0\3\22\1\0\3\22\2\222\5\42"+
    "\1\222\5\42\1\222\10\42\1\222\1\42\1\22\2\222"+
    "\1\42\3\222\2\223\5\44\1\223\5\44\1\223\10\44"+
    "\1\223\1\44\1\223\1\22\1\223\1\44\3\223";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4278];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\16\1\4\11\1\1\56\0\1\11\33\0\1\1"+
    "\11\0\1\1\46\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/** Variable used to store violation location and variable involved. **/
	String location = "MAIN PROGRAM";
	/** Variable used to store file value and function values associated. **/
	
	public F90INSTOperator() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90INSTOperator(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	 
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 8: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 9: break;
          case 3: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 10: break;
          case 4: 
            { yybegin(YYINITIAL);
            }
          case 11: break;
          case 5: 
            { location = location + " " + yytext(); 
							 yybegin(COMMENT);
            }
          case 12: break;
          case 6: 
            { setError(location,"The symbolic notation (==, /=, <=, <, >=, >) must be used instead of (.EQ., .NE., .LT., .LE., .GT., .GE.). Error in " + yytext(), yyline+1);
            }
          case 13: break;
          case 7: 
            { location = yytext(); 
							 yybegin(NAMING);
            }
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
