/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.REF.Variable rule.	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90REFVariable.lex</tt>
 */
public class F90REFVariable extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int CALLING = 10;
  public static final int CALLING_PARAM = 12;
  public static final int FUNCTION_PARAM = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\43\1\44\1\45\1\44\22\0\1\23\1\1\6\0"+
    "\1\41\1\42\6\0\12\27\7\0\1\20\1\16\1\5\1\14\1\13"+
    "\1\2\1\17\1\30\1\25\1\24\1\34\1\22\1\21\1\4\1\10"+
    "\1\11\1\36\1\12\1\26\1\6\1\3\1\37\1\40\1\31\1\35"+
    "\1\24\4\0\1\27\1\0\1\20\1\16\1\5\1\14\1\13\1\2"+
    "\1\17\1\30\1\25\1\24\1\34\1\22\1\21\1\4\1\10\1\11"+
    "\1\36\1\12\1\26\1\6\1\3\1\37\1\40\1\31\1\35\1\24"+
    "\12\0\1\44\252\0\2\7\115\0\1\15\u1ea8\0\1\44\1\44\u0100\0"+
    "\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\5\1\1\3\1\4\1\5\1\6"+
    "\5\7\1\1\5\7\1\1\11\7\2\5\1\10\2\5"+
    "\5\0\2\7\1\0\12\7\2\0\13\7\1\0\1\5"+
    "\3\7\3\0\3\7\1\0\4\7\1\5\10\7\1\0"+
    "\1\11\1\0\1\12\5\0\13\7\4\0\4\7\1\0"+
    "\1\7\1\0\5\7\1\0\4\7\1\5\1\0\2\7"+
    "\1\0\2\7\1\0\4\7\3\0\3\7\1\0\14\7"+
    "\1\0\1\7\1\0\1\7\6\0\7\7\1\13\2\7"+
    "\6\0\3\7\1\0\1\7\1\0\6\7\1\0\1\2"+
    "\1\7\1\0\2\7\2\0\1\7\2\5\1\7\1\0"+
    "\1\7\1\0\3\7\3\0\2\7\1\0\3\7\1\0"+
    "\11\7\6\0\1\7\1\0\2\7\1\0\4\7\6\0"+
    "\2\7\1\0\1\7\1\0\5\7\1\0\1\7\3\0"+
    "\1\7\1\0\1\7\1\0\3\7\2\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\5\0\1\14\1\7"+
    "\2\0\1\7\2\0\4\7\4\0\2\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7"+
    "\2\0\1\7\1\0\2\7\1\14\1\0\7\7\4\0"+
    "\1\7\1\0\2\7\2\0\2\7\1\0\1\7\2\0"+
    "\3\7\1\0\1\7\2\0\3\7\1\0\1\7\2\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0130"+
    "\0\u0130\0\u0130\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2"+
    "\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402"+
    "\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532"+
    "\0\u02f8\0\u03dc\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616"+
    "\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746"+
    "\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876"+
    "\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6"+
    "\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6"+
    "\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06"+
    "\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u04c0\0\u0cc4\0\u0cea\0\u0d10"+
    "\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u057e\0\u0130\0\u05a4"+
    "\0\u0130\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8"+
    "\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008"+
    "\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268"+
    "\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398"+
    "\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2\0\u14c8"+
    "\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2\0\u15f8"+
    "\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc\0\u1702\0\u1728"+
    "\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c\0\u1832\0\u1858"+
    "\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988"+
    "\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\u04c0\0\u1a92"+
    "\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\u1b9c\0\u1bc2"+
    "\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2"+
    "\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a\0\u04c0\0\u1db0\0\u1dd6\0\u1dfc"+
    "\0\u1e22\0\u1e48\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c"+
    "\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c"+
    "\0\u2082\0\u20a8\0\u20ce\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c"+
    "\0\u21b2\0\u21d8\0\u21fe\0\u2224\0\u224a\0\u2270\0\u2296\0\u22bc"+
    "\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a\0\u23a0\0\u23c6\0\u23ec"+
    "\0\u2412\0\u2438\0\u245e\0\u2484\0\u24aa\0\u24d0\0\u24f6\0\u251c"+
    "\0\u2542\0\u2568\0\u258e\0\u25b4\0\u25da\0\u2600\0\u2626\0\u264c"+
    "\0\u2672\0\u2698\0\u26be\0\u26e4\0\u270a\0\u2730\0\u2756\0\u277c"+
    "\0\u27a2\0\u27c8\0\u27ee\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac"+
    "\0\u28d2\0\u28f8\0\u291e\0\u2944\0\u296a\0\u2990\0\u29b6\0\u29dc"+
    "\0\u2a02\0\u2a28\0\u2a4e\0\u2a74\0\u2a9a\0\u2ac0\0\u2ae6\0\u2b0c"+
    "\0\u2b32\0\u2b58\0\u2b7e\0\u2ba4\0\u2bca\0\u2bf0\0\u2c16\0\u2c3c"+
    "\0\u2c62\0\u0130\0\u2c88\0\u2cae\0\u2cd4\0\u2cfa\0\u2d20\0\u2d46"+
    "\0\u2d6c\0\u2d92\0\u2db8\0\u2dde\0\u2e04\0\u2e2a\0\u2e50\0\u2e76"+
    "\0\u2e9c\0\u2ec2\0\u2ee8\0\u2f0e\0\u2f34\0\u2f5a\0\u2f80\0\u2fa6"+
    "\0\u2fcc\0\u2ff2\0\u3018\0\u303e\0\u3064\0\u308a\0\u30b0\0\u30d6"+
    "\0\u30fc\0\u3122\0\u3148\0\u316e\0\u3194\0\u31ba\0\u04c0\0\u31e0"+
    "\0\u3206\0\u322c\0\u3252\0\u3278\0\u329e\0\u32c4\0\u32ea\0\u3310"+
    "\0\u3336\0\u335c\0\u3382\0\u33a8\0\u33ce\0\u33f4\0\u341a\0\u3440"+
    "\0\u3466\0\u348c\0\u34b2\0\u34d8\0\u34fe\0\u3524\0\u354a\0\u3570"+
    "\0\u3596\0\u35bc\0\u35e2\0\u3608\0\u362e\0\u3654\0\u367a\0\u36a0"+
    "\0\u36c6\0\u36ec\0\u3712\0\u3738\0\u375e\0\u3784\0\u37aa\0\u37d0"+
    "\0\u37f6\0\u381c\0\u3842\0\u3868\0\u388e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\4\11\1\14\1\11\1\15\3\11"+
    "\1\16\3\11\1\17\3\11\1\14\1\16\14\11\1\20"+
    "\2\21\1\22\1\12\41\22\1\20\2\21\1\22\1\12"+
    "\5\23\1\22\5\23\1\22\5\23\1\22\3\23\1\22"+
    "\2\23\2\22\5\23\2\22\1\20\2\21\1\11\1\12"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\11\1\45\1\46\1\47\1\11\2\45\2\11"+
    "\4\45\1\50\2\11\1\22\2\21\1\22\1\12\1\24"+
    "\1\25\1\26\1\27\1\30\1\51\1\32\1\33\1\34"+
    "\1\35\1\36\1\52\1\40\1\41\1\42\1\43\1\44"+
    "\1\22\1\45\1\46\1\47\1\22\2\45\2\22\4\45"+
    "\1\50\2\22\1\20\2\21\1\22\1\12\5\53\1\22"+
    "\5\53\1\22\5\53\1\22\3\53\1\22\2\53\2\22"+
    "\5\53\2\22\1\20\2\21\1\22\1\12\37\22\1\54"+
    "\1\22\1\20\2\21\1\22\1\12\37\22\1\55\1\22"+
    "\1\20\2\21\51\0\1\56\46\0\1\57\53\0\1\60"+
    "\36\0\1\61\52\0\1\62\37\0\5\23\1\0\5\23"+
    "\1\0\5\23\1\0\6\23\2\0\5\23\7\0\1\45"+
    "\1\63\3\45\1\0\1\64\4\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\5\45\1\0\5\45\1\65"+
    "\5\45\1\0\2\45\1\66\3\45\2\0\5\45\7\0"+
    "\1\45\1\67\3\45\1\0\5\45\1\0\2\45\1\70"+
    "\2\45\1\0\6\45\2\0\5\45\7\0\5\45\1\0"+
    "\1\71\4\45\1\0\2\45\1\72\1\45\1\73\1\0"+
    "\4\45\1\74\1\45\2\0\1\45\1\75\3\45\7\0"+
    "\5\45\1\0\5\45\1\0\2\45\1\76\2\45\1\0"+
    "\4\45\1\77\1\45\2\0\5\45\7\0\1\22\1\0"+
    "\1\100\14\0\1\101\26\0\2\45\1\102\2\45\1\0"+
    "\1\45\1\103\3\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\1\45\1\104\3\45\1\0\1\105\1\45"+
    "\1\106\2\45\1\0\2\45\1\107\2\45\1\0\6\45"+
    "\2\0\5\45\7\0\5\45\1\0\3\45\1\110\1\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\7\0\2\45"+
    "\1\111\2\45\1\0\5\45\1\0\4\45\1\112\1\0"+
    "\5\45\1\113\2\0\2\45\1\114\2\45\7\0\5\45"+
    "\1\115\1\116\2\45\1\117\1\45\1\0\2\45\1\120"+
    "\2\45\1\0\1\45\1\121\4\45\2\0\5\45\10\0"+
    "\1\61\2\0\1\122\4\0\1\123\4\0\1\124\27\0"+
    "\5\45\1\0\5\45\1\0\2\45\1\125\1\45\1\126"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\1\127"+
    "\4\45\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\5\45\1\130\4\45\1\131\1\0\2\45"+
    "\1\132\3\45\2\0\5\45\7\0\5\45\1\0\1\133"+
    "\4\45\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\1\134\4\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\7\0\5\45\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\1\135\1\45\1\136"+
    "\2\45\1\0\5\45\1\0\3\45\1\137\1\45\1\0"+
    "\6\45\2\0\5\45\7\0\1\45\1\140\2\45\1\141"+
    "\1\0\3\45\1\142\1\45\1\0\2\45\1\143\2\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\2\45"+
    "\1\144\2\45\1\0\5\45\1\0\4\45\1\145\1\45"+
    "\2\0\5\45\7\0\5\53\1\0\5\53\1\0\5\53"+
    "\1\0\6\53\2\0\5\53\5\0\42\146\1\147\3\146"+
    "\42\150\1\151\3\150\4\0\1\152\47\0\1\153\47\0"+
    "\1\154\53\0\1\155\43\0\1\156\33\0\2\45\1\157"+
    "\2\45\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\5\45\1\0\2\45\1\160\2\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\20\0\1\22\34\0"+
    "\5\45\1\0\3\45\1\135\1\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\5\45\1\0\5\45\1\0"+
    "\4\45\1\161\1\0\6\45\2\0\5\45\7\0\5\45"+
    "\1\0\5\45\1\0\3\45\1\162\1\45\1\0\6\45"+
    "\2\0\5\45\7\0\2\45\1\163\2\45\1\0\5\45"+
    "\1\0\3\45\1\164\1\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\5\45\1\65\4\45\1\165\1\0"+
    "\2\45\1\66\3\45\2\0\5\45\7\0\5\45\1\0"+
    "\1\25\4\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\5\45\1\0\2\45\1\166\2\45"+
    "\1\0\6\45\2\0\5\45\7\0\3\45\1\167\1\45"+
    "\1\0\5\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\2\45\1\170\2\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\3\45"+
    "\1\171\1\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\12\0\1\172\1\173\27\0\1\174\20\0\1\175\36\0"+
    "\5\45\1\0\5\45\1\0\4\45\1\176\1\0\6\45"+
    "\2\0\5\45\7\0\4\45\1\177\1\0\3\45\1\200"+
    "\1\45\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\5\45\1\0\1\201\4\45\1\0\6\45"+
    "\2\0\5\45\7\0\5\45\1\202\5\45\1\0\5\45"+
    "\1\0\1\45\1\203\4\45\2\0\5\45\7\0\5\45"+
    "\1\204\1\205\4\45\1\0\5\45\1\0\1\45\1\206"+
    "\4\45\2\0\5\45\7\0\1\45\1\25\3\45\1\0"+
    "\2\45\1\207\2\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\3\45\1\210\1\211\1\0\5\45\1\212"+
    "\2\45\1\213\2\45\1\0\2\45\1\214\3\45\2\0"+
    "\4\45\1\215\7\0\4\45\1\216\1\0\4\45\1\217"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\7\0\5\45"+
    "\1\0\5\45\1\220\5\45\1\0\2\45\1\221\3\45"+
    "\2\0\5\45\7\0\4\45\1\222\1\223\5\45\1\0"+
    "\5\45\1\0\1\45\1\224\4\45\2\0\5\45\7\0"+
    "\1\45\1\225\3\45\1\0\5\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\26\0\1\226\26\0\1\45\1\227"+
    "\3\45\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\5\45\1\0\5\45\1\0\2\45\1\230"+
    "\2\45\1\0\6\45\2\0\5\45\7\0\4\45\1\231"+
    "\1\0\5\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\5\45\1\0\3\45\1\232\1\45"+
    "\1\0\6\45\2\0\5\45\15\0\1\233\57\0\1\234"+
    "\13\0\1\235\46\0\1\65\10\0\3\45\1\236\1\45"+
    "\1\0\5\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\1\237\4\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\4\45\1\240\1\0\5\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\22\0\1\241"+
    "\10\0\1\241\21\0\5\45\1\0\5\45\1\0\4\45"+
    "\1\242\1\0\6\45\2\0\5\45\7\0\5\45\1\0"+
    "\5\45\1\241\5\45\1\0\2\45\1\243\3\45\2\0"+
    "\5\45\7\0\5\45\1\0\4\45\1\244\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\5\45"+
    "\1\0\1\45\1\245\3\45\1\0\6\45\2\0\5\45"+
    "\7\0\3\45\1\246\1\247\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\2\45\1\250\2\45\7\0\5\45"+
    "\1\0\1\45\1\251\3\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\7\0\5\45\1\0\5\45\1\0\1\252"+
    "\4\45\1\0\6\45\2\0\5\45\7\0\5\45\1\0"+
    "\1\253\4\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\5\45\1\0\4\45\1\254\1\0"+
    "\6\45\2\0\2\45\1\255\2\45\7\0\5\45\1\0"+
    "\5\45\1\0\5\45\1\0\6\45\2\0\3\45\1\66"+
    "\1\45\7\0\5\45\1\256\5\45\1\0\5\45\1\0"+
    "\1\45\1\257\4\45\2\0\5\45\7\0\5\45\1\260"+
    "\3\45\1\261\1\45\1\0\5\45\1\0\1\45\1\167"+
    "\4\45\2\0\5\45\12\0\1\262\53\0\1\263\37\0"+
    "\1\264\11\0\1\265\40\0\1\266\36\0\1\267\44\0"+
    "\3\45\1\270\1\45\1\0\5\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\5\45\1\0\5\45\1\0"+
    "\3\45\1\271\1\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\5\45\1\0\4\45\1\272\1\0\6\45"+
    "\2\0\5\45\7\0\5\45\1\0\3\45\1\273\1\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\7\0\4\45"+
    "\1\274\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\5\45\1\0\1\45\1\275\3\45\1\0"+
    "\3\45\1\276\1\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\5\45\1\0\4\45\1\277\1\0\6\45"+
    "\2\0\5\45\7\0\5\45\1\0\2\45\1\300\2\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\7\0\5\45"+
    "\1\0\5\45\1\0\4\45\1\66\1\0\6\45\2\0"+
    "\5\45\7\0\5\45\1\0\5\45\1\0\1\45\1\301"+
    "\3\45\1\0\6\45\2\0\5\45\7\0\2\45\1\135"+
    "\2\45\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\27\0\1\302\35\0\1\303\1\304\35\0\1\305"+
    "\64\0\1\306\25\0\5\45\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\1\45\1\135\3\45\7\0\5\45"+
    "\1\307\5\45\1\0\5\45\1\0\1\45\1\310\4\45"+
    "\2\0\5\45\7\0\2\45\1\135\2\45\1\0\2\45"+
    "\1\311\2\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\5\45\1\0\4\45\1\312\1\0"+
    "\6\45\2\0\5\45\11\0\1\313\43\0\2\45\1\314"+
    "\2\45\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\11\0\1\223\32\0\1\315\10\0\3\45\1\316"+
    "\1\45\1\0\5\45\1\0\1\45\1\317\3\45\1\0"+
    "\6\45\2\0\5\45\7\0\2\45\1\224\2\45\1\0"+
    "\5\45\1\0\5\45\1\0\6\45\2\0\3\45\1\320"+
    "\1\45\7\0\5\45\1\0\5\45\1\0\2\45\1\321"+
    "\2\45\1\0\6\45\2\0\5\45\7\0\1\45\1\322"+
    "\3\45\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\1\45\1\323\3\45\1\0\5\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\10\0\1\324\44\0"+
    "\5\45\1\0\4\45\1\135\1\0\4\45\1\325\1\0"+
    "\6\45\2\0\5\45\7\0\1\45\1\326\3\45\1\0"+
    "\5\45\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\327\2\45\1\144\2\45\1\0\5\45\1\0"+
    "\1\45\1\330\4\45\2\0\5\45\7\0\5\45\1\0"+
    "\2\45\1\176\2\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\1\331\4\45\1\332\5\45\1\0\5\45"+
    "\1\333\1\45\1\334\4\45\1\333\1\0\5\45\4\0"+
    "\1\333\13\0\1\335\34\0\5\45\1\0\3\45\1\336"+
    "\1\45\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\3\45\1\337\1\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\13\0\1\22\41\0\4\45\1\135"+
    "\1\0\5\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\340\5\45\1\0\5\45\1\0\1\45"+
    "\1\341\4\45\2\0\5\45\20\0\1\342\34\0\5\45"+
    "\1\0\5\45\1\0\1\343\4\45\1\0\6\45\2\0"+
    "\5\45\7\0\5\45\1\0\5\45\1\0\4\45\1\344"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\5\45"+
    "\1\0\2\45\1\135\2\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\3\45\1\345\1\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\16\0\1\22\47\0\1\346"+
    "\35\0\1\347\44\0\5\45\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\1\0\1\350\1\351\4\45\7\0\3\45"+
    "\1\352\1\45\1\0\5\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\7\0\5\45\1\0\1\135\4\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\14\0\1\353\15\0"+
    "\1\353\22\0\5\45\1\0\1\354\4\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\353\5\45"+
    "\1\0\5\45\1\0\1\45\1\355\4\45\2\0\5\45"+
    "\7\0\1\45\1\356\3\45\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\357\5\45"+
    "\1\0\5\45\1\0\1\45\1\360\4\45\2\0\5\45"+
    "\7\0\5\45\1\0\5\45\1\0\4\45\1\361\1\0"+
    "\6\45\2\0\5\45\7\0\5\45\1\0\2\45\1\362"+
    "\1\363\1\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\1\45\1\364\3\45\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\5\45"+
    "\1\0\4\45\1\365\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\2\45\1\366\2\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\5\45\1\0\1\45\1\135"+
    "\3\45\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\3\45\1\367\1\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\1\45\1\370\3\45\1\0"+
    "\5\45\1\0\5\45\1\0\6\45\2\0\5\45\13\0"+
    "\1\65\41\0\4\45\1\66\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\27\0\1\65\25\0\5\45"+
    "\1\0\2\45\1\66\2\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\13\0\1\371\51\0\1\372\46\0\1\373"+
    "\44\0\1\374\43\0\1\375\57\0\1\376\25\0\4\45"+
    "\1\377\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\5\45\1\0\5\45\1\0\2\45\1\224"+
    "\2\45\1\0\6\45\2\0\5\45\7\0\5\45\1\u0100"+
    "\5\45\1\0\5\45\1\0\1\45\1\u0101\4\45\2\0"+
    "\5\45\7\0\5\45\1\0\5\45\1\0\4\45\1\u0102"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\u0103\5\45"+
    "\1\0\2\45\1\u0104\2\45\1\0\1\45\1\u0105\4\45"+
    "\2\0\5\45\7\0\5\45\1\0\5\45\1\0\4\45"+
    "\1\u0106\1\0\6\45\2\0\5\45\7\0\5\45\1\0"+
    "\1\171\4\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\5\45\1\0\2\45\1\u0107\2\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\3\45"+
    "\1\224\1\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\10\0\1\u0108\51\0\1\u0109\15\0\1\u0109\24\0\1\223"+
    "\5\0\1\372\4\0\1\u010a\35\0\1\u010b\15\0\1\u010b"+
    "\27\0\1\u010c\15\0\1\u010c\30\0\1\u010d\37\0\5\45"+
    "\1\0\1\u010e\4\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\5\45\1\0\5\45\1\0\2\45\1\u010f"+
    "\2\45\1\0\6\45\2\0\5\45\7\0\5\45\1\u0110"+
    "\5\45\1\0\5\45\1\0\1\45\1\u0111\4\45\2\0"+
    "\5\45\13\0\1\u0112\41\0\4\45\1\u0113\1\0\5\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\25\0\1\256"+
    "\27\0\5\45\1\0\3\45\1\u0114\1\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\2\45"+
    "\1\u0115\2\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\5\45\1\0\2\45\1\257\2\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\5\45"+
    "\1\0\3\45\1\u0116\1\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\2\45\1\u0117\2\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\2\45"+
    "\1\171\2\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\27\0\1\223\25\0\5\45\1\0\5\45\1\0\4\45"+
    "\1\224\1\0\6\45\2\0\5\45\11\0\1\u0118\43\0"+
    "\2\45\1\u0119\2\45\1\0\5\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\5\45\1\260\5\45\1\0"+
    "\5\45\1\0\1\45\1\167\4\45\2\0\5\45\7\0"+
    "\1\22\45\0\1\u011a\4\0\1\332\13\0\1\333\1\0"+
    "\1\332\4\0\1\333\12\0\1\333\2\0\1\135\4\45"+
    "\1\0\5\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\14\0\1\332\13\0\1\u011b\1\0\1\332\4\0\1\u011b"+
    "\5\0\1\u011c\4\0\1\u011b\2\0\5\45\1\332\5\45"+
    "\1\0\5\45\1\u011b\1\45\1\334\4\45\1\u011b\1\0"+
    "\4\45\1\u011d\4\0\1\u011b\2\0\5\45\1\0\2\45"+
    "\1\u010e\2\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\44\0\1\u011e\10\0\5\45\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\3\45\1\u011f\1\45\11\0\1\u0120"+
    "\43\0\5\45\1\0\5\45\1\0\4\45\1\u0121\1\0"+
    "\6\45\2\0\5\45\7\0\5\45\1\0\5\45\1\0"+
    "\4\45\1\u0122\1\0\6\45\2\0\5\45\7\0\2\45"+
    "\1\u0123\2\45\1\0\5\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\12\0\1\223\53\0\1\u0124\47\0\1\u0125"+
    "\10\0\1\u0125\21\0\5\45\1\0\5\45\1\u0125\5\45"+
    "\1\0\2\45\1\u0126\3\45\2\0\5\45\7\0\5\45"+
    "\1\0\5\45\1\0\5\45\1\0\6\45\1\0\1\u0127"+
    "\1\u0128\4\45\24\0\1\u0129\30\0\3\45\1\u012a\1\45"+
    "\1\0\5\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\5\45\1\0\1\45\1\171\3\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\5\45"+
    "\1\0\4\45\1\u012b\1\0\6\45\2\0\5\45\12\0"+
    "\1\u012c\42\0\3\45\1\u012d\1\45\1\0\5\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\7\0\1\45\1\u012e"+
    "\3\45\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\5\45\1\u0109\5\45\1\0\5\45\1\0"+
    "\1\45\1\u012f\4\45\2\0\5\45\7\0\2\45\1\224"+
    "\2\45\1\0\2\45\1\u0130\2\45\1\0\1\45\1\u0131"+
    "\3\45\1\0\6\45\2\0\5\45\7\0\5\45\1\u010b"+
    "\5\45\1\0\5\45\1\0\1\45\1\261\4\45\2\0"+
    "\5\45\7\0\5\45\1\u010c\5\45\1\0\5\45\1\0"+
    "\1\45\1\u0132\4\45\2\0\5\45\7\0\5\45\1\0"+
    "\1\u0133\4\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\3\45\1\224\1\45\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\3\45"+
    "\1\u0134\1\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\14\0\1\u0135\15\0\1\u0135\22\0\1\u0136\57\0\1\u0137"+
    "\51\0\1\u0138\30\0\1\u0139\55\0\1\u013a\34\0\5\45"+
    "\1\u0135\5\45\1\0\5\45\1\0\1\45\1\u013b\4\45"+
    "\2\0\5\45\7\0\1\u013c\45\0\1\176\4\45\1\0"+
    "\5\45\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\u013d\5\45\1\0\5\45\1\0\1\45\1\u013e"+
    "\4\45\2\0\5\45\11\0\1\u013f\43\0\5\45\1\u0140"+
    "\5\45\1\0\5\45\1\0\1\45\1\u0141\4\45\2\0"+
    "\5\45\7\0\2\45\1\u0142\2\45\1\0\5\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\7\0\5\45\1\0"+
    "\3\45\1\u0143\1\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\3\45\1\u0144\1\45\1\0\5\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\21\0\1\65\35\0"+
    "\1\u0145\54\0\1\u0146\44\0\1\65\40\0\1\u0147\44\0"+
    "\1\u0148\43\0\2\45\1\u0149\2\45\1\0\5\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\7\0\4\45\1\u014a"+
    "\1\0\5\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\12\0\1\22\42\0\3\45\1\135\1\45\1\0\5\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\20\0\1\u014b"+
    "\34\0\5\45\1\0\3\45\1\u014c\1\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\4\45"+
    "\1\u014d\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\5\45\1\0\2\45\1\u014e\2\45\1\0"+
    "\6\45\2\0\5\45\7\0\5\45\1\0\3\45\1\314"+
    "\1\45\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\5\45\1\u014f\5\45\1\0\2\45\1\u0150"+
    "\3\45\2\0\5\45\21\0\1\22\33\0\5\45\1\0"+
    "\4\45\1\135\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\14\0\1\260\15\0\1\260\27\0\1\332\13\0\1\u011b"+
    "\1\0\1\332\4\0\1\u011b\12\0\1\u011b\30\0\1\u0151"+
    "\17\0\5\45\1\0\5\45\1\0\5\45\1\0\4\45"+
    "\1\u0152\1\45\2\0\5\45\25\0\1\u0153\27\0\5\45"+
    "\1\0\5\45\1\0\2\45\1\u0154\2\45\1\0\6\45"+
    "\2\0\5\45\22\0\1\u0155\10\0\1\u0155\21\0\5\45"+
    "\1\0\3\45\1\u0156\1\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\7\0\5\45\1\0\1\u0157\4\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\7\0\5\45\1\0"+
    "\5\45\1\u0155\5\45\1\0\2\45\1\u0158\3\45\2\0"+
    "\5\45\11\0\1\u0159\52\0\1\u015a\36\0\5\45\1\0"+
    "\1\45\1\u015b\3\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\21\0\1\u015c\6\0\1\u0127\6\0\1\u0127\12\0"+
    "\1\u0127\2\0\5\45\1\0\4\45\1\u015d\1\0\5\45"+
    "\1\u0127\6\45\1\u0127\1\0\5\45\4\0\1\u0127\4\0"+
    "\1\22\43\0\5\45\1\0\5\45\1\0\2\45\1\u015e"+
    "\2\45\1\0\6\45\2\0\5\45\7\0\5\45\1\0"+
    "\3\45\1\u015f\1\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\25\0\1\u0160\27\0\5\45\1\0\5\45\1\0"+
    "\2\45\1\u0161\2\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\4\45\1\66\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\7\0\2\45\1\u0162\2\45\1\0\5\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\7\0\1\u0163"+
    "\4\45\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\5\45\1\0\3\45\1\u0164\1\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\7\0\3\45\1\u0165"+
    "\1\45\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\7\0\1\45\1\u0166\3\45\1\0\5\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\7\0\2\45\1\u0167"+
    "\2\45\1\0\5\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\15\0\1\u0168\55\0\1\u0169\30\0\1\u016a\63\0"+
    "\1\u013a\32\0\1\u016b\41\0\5\45\1\0\1\u016c\4\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\42\0\1\22"+
    "\25\0\1\223\10\0\1\223\21\0\5\45\1\0\5\45"+
    "\1\223\5\45\1\0\2\45\1\224\3\45\2\0\5\45"+
    "\10\0\1\65\46\0\1\u016d\43\0\2\45\1\u016e\2\45"+
    "\1\0\5\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\7\0\1\45\1\66\3\45\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\7\0\5\45\1\0\5\45"+
    "\1\0\5\45\1\0\5\45\1\u016f\2\0\5\45\7\0"+
    "\4\45\1\u0131\1\0\5\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\22\0\1\u0170\10\0\1\u0170\31\0\1\12"+
    "\42\0\1\223\15\0\1\223\40\0\1\u0171\27\0\5\45"+
    "\1\0\5\45\1\0\2\45\1\u0172\2\45\1\0\6\45"+
    "\2\0\5\45\7\0\5\45\1\0\1\u014c\4\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\17\0\1\22\35\0"+
    "\5\45\1\0\2\45\1\135\2\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\1\45\1\u0173\3\45\1\0"+
    "\5\45\1\0\5\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\5\45\1\0\3\45\1\u015f\1\45\1\0"+
    "\6\45\2\0\5\45\14\0\1\124\15\0\1\124\22\0"+
    "\5\45\1\124\5\45\1\0\5\45\1\0\1\45\1\143"+
    "\4\45\2\0\5\45\20\0\1\u010b\34\0\5\45\1\0"+
    "\3\45\1\261\1\45\1\0\5\45\1\0\6\45\2\0"+
    "\5\45\27\0\1\347\25\0\5\45\1\0\5\45\1\0"+
    "\4\45\1\370\1\0\6\45\2\0\5\45\14\0\1\u0174"+
    "\15\0\1\u0174\22\0\5\45\1\0\1\45\1\u0175\3\45"+
    "\1\0\5\45\1\u0176\6\45\1\u0176\1\0\5\45\4\0"+
    "\1\u0176\2\0\3\45\1\320\1\45\1\0\5\45\1\0"+
    "\5\45\1\0\6\45\2\0\5\45\7\0\5\45\1\u0174"+
    "\5\45\1\0\5\45\1\0\1\45\1\276\4\45\2\0"+
    "\5\45\12\0\1\65\60\0\1\u0159\27\0\5\45\1\0"+
    "\5\45\1\0\2\45\1\u0167\2\45\1\0\6\45\2\0"+
    "\5\45\25\0\1\u0177\27\0\5\45\1\0\5\45\1\0"+
    "\2\45\1\120\2\45\1\0\6\45\2\0\5\45\7\0"+
    "\4\45\1\u0178\1\0\5\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\27\0\1\12\25\0\5\45\1\0\5\45"+
    "\1\0\4\45\1\325\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\5\45\1\u0170\5\45\1\0\2\45\1\312"+
    "\3\45\2\0\5\45\7\0\5\45\1\0\5\45\1\0"+
    "\2\45\1\u0179\2\45\1\0\6\45\2\0\5\45\7\0"+
    "\5\45\1\0\2\45\1\325\2\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\5\45\1\223\5\45\1\0"+
    "\5\45\1\0\1\45\1\224\4\45\2\0\5\45\7\0"+
    "\4\45\1\u017a\1\0\5\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\7\0\3\45\1\66\1\45\1\0\5\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\11\0\1\u013a"+
    "\46\0\1\376\52\0\1\376\42\0\1\u017b\15\0\1\u017b"+
    "\22\0\2\45\1\u015f\2\45\1\0\5\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\22\0\1\22\10\0\1\22"+
    "\21\0\5\45\1\0\5\45\1\22\5\45\1\0\2\45"+
    "\1\135\3\45\2\0\5\45\7\0\5\45\1\0\5\45"+
    "\1\0\5\45\1\0\6\45\1\12\1\0\5\45\14\0"+
    "\1\u0110\15\0\1\u0110\42\0\1\22\25\0\5\45\1\0"+
    "\5\45\1\0\4\45\1\135\1\0\6\45\2\0\5\45"+
    "\7\0\5\45\1\0\2\45\1\u012b\2\45\1\0\5\45"+
    "\1\0\6\45\2\0\5\45\15\0\1\u0129\37\0\5\45"+
    "\1\0\2\45\1\u017c\2\45\1\0\5\45\1\0\6\45"+
    "\2\0\5\45\16\0\1\u017d\11\0\1\u0176\6\0\1\u0176"+
    "\12\0\1\u0176\6\0\1\u017e\41\0\5\45\1\0\3\45"+
    "\1\135\1\45\1\0\2\45\1\u017f\2\45\1\0\6\45"+
    "\2\0\5\45\7\0\3\45\1\u012b\1\45\1\0\5\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\7\0\5\45"+
    "\1\u017b\5\45\1\0\5\45\1\0\1\45\1\u0180\4\45"+
    "\2\0\5\45\11\0\1\376\43\0\5\45\1\0\3\45"+
    "\1\u0181\1\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\17\0\1\u0182\53\0\1\22\27\0\5\45\1\0\5\45"+
    "\1\0\1\167\4\45\1\0\6\45\2\0\5\45\7\0"+
    "\2\45\1\u012b\2\45\1\0\5\45\1\0\5\45\1\0"+
    "\6\45\2\0\5\45\7\0\3\45\1\u0183\1\45\1\0"+
    "\5\45\1\0\5\45\1\0\6\45\2\0\5\45\20\0"+
    "\1\u0184\34\0\5\45\1\u0185\5\45\1\0\5\45\1\0"+
    "\1\45\1\u0186\4\45\2\0\5\45\12\0\1\u0187\55\0"+
    "\1\u0188\10\0\1\u0188\21\0\5\45\1\0\5\45\1\u0188"+
    "\5\45\1\0\2\45\1\u0189\3\45\2\0\5\45\14\0"+
    "\1\u0185\15\0\1\u0185\27\0\1\u018a\15\0\1\u018a\22\0"+
    "\5\45\1\u018a\5\45\1\0\5\45\1\0\1\45\1\u018b"+
    "\4\45\2\0\5\45\15\0\1\u018c\37\0\5\45\1\0"+
    "\1\u018d\4\45\1\0\5\45\1\0\6\45\2\0\5\45"+
    "\11\0\1\12\43\0\2\45\1\325\2\45\1\0\5\45"+
    "\1\0\5\45\1\0\6\45\2\0\5\45\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14516];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\11\5\1\3\11\33\1\5\0\2\1\1\0"+
    "\12\1\2\0\13\1\1\0\4\1\3\0\3\1\1\0"+
    "\15\1\1\0\1\11\1\0\1\11\5\0\13\1\4\0"+
    "\4\1\1\0\1\1\1\0\5\1\1\0\5\1\1\0"+
    "\2\1\1\0\2\1\1\0\4\1\3\0\3\1\1\0"+
    "\14\1\1\0\1\1\1\0\1\1\6\0\12\1\6\0"+
    "\3\1\1\0\1\1\1\0\6\1\1\0\2\1\1\0"+
    "\2\1\2\0\4\1\1\0\1\1\1\0\3\1\3\0"+
    "\2\1\1\0\3\1\1\0\11\1\6\0\1\1\1\0"+
    "\2\1\1\0\4\1\6\0\2\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\1\3\0\1\1\1\0\1\1\1\0"+
    "\3\1\2\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\10\1\5\0\1\11\1\1\2\0\1\1\2\0\4\1"+
    "\4\0\2\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\2\0\1\1\1\0\3\1"+
    "\1\0\7\1\4\0\1\1\1\0\2\1\2\0\2\1"+
    "\1\0\1\1\2\0\3\1\1\0\1\1\2\0\3\1"+
    "\1\0\1\1\2\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM"; 
	 List<Violation> list = new LinkedList<Violation>();
	String functionName;
	Map<String, List<String>> funcCalls = new HashMap<String, List<String>>();
	Map<String, List<String>> funcDecls = new HashMap<String, List<String>>();
	
	public F90REFVariable() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	
	
	private void insertParams (String word) {
		String[] params = word.substring(1, word.length()-1).replaceAll("[\\t\\n\\r\\&]+","").split("\\,");
		List<String> list = new LinkedList<String>();
		for (int i = 0; i < params.length; i++) {
			list.add(params[i].trim());
		}
		funcCalls.put(functionName, list);
	}
	
	private void insertParamsFunction (String word) {
		String[] params = word.substring(1, word.length()-1).replaceAll("[\\t\\n\\r\\&]+","").split("\\,");
		List<String> list = new LinkedList<String>();
		for (int i = 0; i < params.length; i++) {
			list.add(params[i].trim());
		}
		funcDecls.put(functionName, list);
	}
	
	private void checkVar(String variable) throws JFlexException {
		if(location.split(" ").length > 1) {
			String loc = location.split(" ")[1];
			List<String> listD = funcDecls.get(loc);
			List<String> listC = funcCalls.get(loc);
			if(listD != null && listC != null) {
				if (!listD.contains(variable) && listC.contains(variable)) {
					setError(location,"The variable "+variable+" is used with different names inside the subprogram.", yyline+1);
				}
			}
		}
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90REFVariable(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   
 return getViolations(); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 13: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 14: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 15: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 16: break;
          case 5: 
            { 
            }
          case 17: break;
          case 6: 
            { location = location + " " + yytext();
								 functionName = yytext();	
								 yybegin(FUNCTION_PARAM);
            }
          case 18: break;
          case 7: 
            { checkVar(yytext());
            }
          case 19: break;
          case 8: 
            { functionName = yytext(); yybegin(CALLING_PARAM);
            }
          case 20: break;
          case 9: 
            { insertParams(yytext());
            }
          case 21: break;
          case 10: 
            { insertParamsFunction(yytext());
            }
          case 22: break;
          case 11: 
            { yybegin(CALLING);
            }
          case 23: break;
          case 12: 
            { location = yytext(); yybegin(NAMING);
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
