/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for Tr.ModifCondSortie rule. */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMDATALoopCondition.lex</tt>
 */
public class COMDATALoopCondition extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int ENTER_DO = 10;
  public static final int ENTER_WHILE = 12;
  public static final int VAR = 14;
  public static final int PAR = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\35\1\36\1\36\1\36\22\0\1\32\1\1\1\31\2\0"+
    "\1\27\1\0\1\30\1\37\1\40\6\0\12\26\3\0\1\41\3\0"+
    "\1\20\1\16\1\5\1\14\1\13\1\2\1\17\1\34\1\24\2\23"+
    "\1\22\1\21\1\4\1\10\1\11\1\23\1\12\1\25\1\6\1\3"+
    "\1\23\1\33\3\23\4\0\1\26\1\0\1\20\1\16\1\5\1\14"+
    "\1\13\1\2\1\17\1\34\1\24\2\23\1\22\1\21\1\4\1\10"+
    "\1\11\1\23\1\12\1\25\1\6\1\3\1\23\1\33\3\23\12\0"+
    "\1\36\252\0\2\7\115\0\1\15\u1ea8\0\1\36\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\6\1\1\3\1\4\1\5\1\6"+
    "\1\7\11\10\2\1\4\5\2\11\1\12\1\13\1\14"+
    "\1\15\1\5\1\16\1\17\1\20\3\0\1\21\3\0"+
    "\1\10\1\0\3\10\1\21\3\10\3\0\1\11\6\0"+
    "\1\6\10\10\1\11\1\0\1\11\1\14\6\0\5\10"+
    "\1\0\4\10\1\0\1\11\6\0\1\10\1\0\3\10"+
    "\1\22\2\0\4\10\2\23\5\0\1\24\1\10\1\0"+
    "\3\10\1\22\2\0\1\10\1\24\2\10\4\0\1\10"+
    "\1\0\4\10\1\0\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0132\0\u0132\0\u0132\0\u0220\0\u0132\0\u0242\0\u0264"+
    "\0\u0286\0\u02a8\0\u02ca\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374"+
    "\0\u0396\0\u0176\0\u01dc\0\u0374\0\u0396\0\u03b8\0\u03da\0\u0132"+
    "\0\u0132\0\u03fc\0\u0132\0\u041e\0\u0440\0\u0132\0\u0132\0\u0462"+
    "\0\u0484\0\u04a6\0\u0132\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550"+
    "\0\u0572\0\u0594\0\u05b6\0\u0264\0\u05d8\0\u05fa\0\u061c\0\u0374"+
    "\0\u0396\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a"+
    "\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\u081a"+
    "\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a"+
    "\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a"+
    "\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a"+
    "\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a"+
    "\0\u0c7c\0\u0c9e\0\u0cc0\0\u0264\0\u0ce2\0\u0d04\0\u0d26\0\u0d48"+
    "\0\u0d6a\0\u0d8c\0\u0132\0\u03b8\0\u0dae\0\u0dd0\0\u0df2\0\u0e14"+
    "\0\u0e36\0\u0132\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0132"+
    "\0\u0f02\0\u0f24\0\u0f46\0\u0264\0\u0f68\0\u0f8a\0\u0fac\0\u0fce"+
    "\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\u109a\0\u10bc\0\u10de"+
    "\0\u1100\0\u1122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\4\12\1\15\1\12\1\16\2\12"+
    "\1\17\1\20\3\12\1\21\2\12\1\15\1\20\7\12"+
    "\1\22\1\23\3\12\1\24\1\13\33\24\1\22\1\23"+
    "\4\24\1\13\5\25\1\24\5\25\1\24\10\25\5\24"+
    "\2\25\1\26\1\23\3\24\1\12\1\13\1\27\2\30"+
    "\1\31\1\30\1\15\1\30\1\32\1\30\1\33\1\34"+
    "\1\20\3\30\1\35\2\30\1\36\1\37\2\12\1\40"+
    "\1\41\1\12\2\30\1\24\1\23\3\12\1\24\1\13"+
    "\1\27\2\30\1\31\1\30\1\42\1\30\1\32\1\30"+
    "\1\33\1\34\1\43\3\30\1\35\2\30\1\36\1\37"+
    "\2\24\1\44\1\45\1\24\2\30\1\22\1\23\4\24"+
    "\1\13\5\46\1\24\5\46\1\24\10\46\5\24\1\47"+
    "\1\46\1\50\1\23\1\51\3\24\1\13\5\52\1\24"+
    "\5\52\1\24\10\52\2\24\1\44\1\45\1\24\2\52"+
    "\1\53\1\23\3\24\1\12\1\13\26\12\1\40\1\41"+
    "\1\54\2\12\1\22\1\23\2\12\1\55\1\24\1\13"+
    "\35\24\1\56\1\57\1\24\45\0\1\60\42\0\1\61"+
    "\47\0\1\62\37\0\1\63\34\0\1\64\46\0\1\65"+
    "\33\0\5\25\1\0\5\25\1\0\11\25\1\66\3\0"+
    "\2\25\7\0\1\30\1\67\3\30\1\0\5\30\1\0"+
    "\11\30\1\70\3\0\2\30\7\0\5\30\1\0\5\30"+
    "\1\0\11\30\1\70\3\0\2\30\7\0\5\30\1\0"+
    "\1\71\4\30\1\0\11\30\1\70\3\0\2\30\7\0"+
    "\5\30\1\0\2\30\1\72\2\30\1\0\11\30\1\70"+
    "\3\0\2\30\7\0\2\30\1\73\2\30\1\0\5\30"+
    "\1\0\11\30\1\70\3\0\2\30\7\0\5\30\1\0"+
    "\1\74\4\30\1\0\11\30\1\70\3\0\2\30\7\0"+
    "\5\30\1\0\1\75\4\30\1\0\11\30\1\70\3\0"+
    "\2\30\7\0\2\30\1\76\2\30\1\0\5\30\1\0"+
    "\11\30\1\70\3\0\2\30\7\0\1\30\1\77\3\30"+
    "\1\0\5\30\1\0\11\30\1\70\3\0\2\30\5\0"+
    "\30\100\1\24\11\100\31\101\1\24\10\101\2\0\5\46"+
    "\1\0\5\46\1\0\11\46\1\102\3\0\2\46\7\0"+
    "\5\46\1\0\5\46\1\0\11\46\1\102\3\0\1\46"+
    "\1\103\7\0\5\52\1\0\5\52\1\0\11\52\1\104"+
    "\3\0\2\52\37\0\1\54\50\0\1\24\4\0\1\105"+
    "\43\0\1\106\43\0\1\107\47\0\1\110\37\0\1\111"+
    "\27\0\5\112\1\0\5\112\1\0\10\112\5\0\2\112"+
    "\7\0\2\30\1\113\2\30\1\0\5\30\1\0\11\30"+
    "\1\70\3\0\2\30\7\0\5\114\1\0\5\114\1\0"+
    "\10\114\5\0\2\114\7\0\2\30\1\115\2\30\1\0"+
    "\5\30\1\0\11\30\1\70\3\0\2\30\7\0\5\30"+
    "\1\0\1\116\4\30\1\0\11\30\1\70\3\0\2\30"+
    "\7\0\5\30\1\0\4\30\1\117\1\0\11\30\1\70"+
    "\3\0\2\30\7\0\5\30\1\0\4\30\1\120\1\0"+
    "\11\30\1\70\3\0\2\30\7\0\4\30\1\121\1\0"+
    "\5\30\1\0\11\30\1\70\3\0\2\30\7\0\5\30"+
    "\1\0\5\30\1\0\1\122\10\30\1\70\3\0\2\30"+
    "\7\0\5\123\1\0\5\123\1\0\10\123\5\0\2\123"+
    "\7\0\5\46\1\124\5\46\1\0\6\46\1\125\2\46"+
    "\1\102\3\0\2\46\7\0\5\126\1\0\5\126\1\0"+
    "\10\126\5\0\2\126\12\0\1\127\47\0\1\130\33\0"+
    "\1\131\11\0\1\132\34\0\1\133\32\0\1\134\40\0"+
    "\5\112\1\0\5\112\1\0\11\112\4\0\2\112\7\0"+
    "\3\30\1\135\1\30\1\0\5\30\1\0\11\30\1\70"+
    "\3\0\2\30\7\0\5\114\1\0\5\114\1\0\11\114"+
    "\4\0\2\114\7\0\4\30\1\136\1\0\5\30\1\0"+
    "\11\30\1\70\3\0\2\30\7\0\3\30\1\137\1\30"+
    "\1\0\5\30\1\0\1\30\1\140\7\30\1\70\3\0"+
    "\2\30\7\0\5\30\1\0\4\30\1\141\1\0\11\30"+
    "\1\70\2\0\1\142\1\143\1\30\7\0\1\30\1\144"+
    "\3\30\1\0\5\30\1\0\11\30\1\70\3\0\2\30"+
    "\7\0\5\30\1\0\3\30\1\145\1\30\1\0\11\30"+
    "\1\70\3\0\2\30\7\0\5\30\1\0\2\30\1\146"+
    "\2\30\1\0\11\30\1\70\3\0\2\30\7\0\5\123"+
    "\1\0\5\123\1\0\11\123\4\0\2\123\27\0\1\147"+
    "\21\0\5\46\1\0\5\46\1\0\4\46\1\150\4\46"+
    "\1\102\3\0\2\46\7\0\5\126\1\0\5\126\1\0"+
    "\11\126\4\0\2\126\13\0\1\151\45\0\1\152\42\0"+
    "\1\153\40\0\1\154\37\0\1\155\53\0\1\156\21\0"+
    "\4\30\1\157\1\0\5\30\1\0\11\30\1\70\3\0"+
    "\2\30\7\0\5\30\1\160\5\30\1\0\6\30\1\161"+
    "\2\30\1\70\3\0\2\30\7\0\5\30\1\0\3\30"+
    "\1\162\1\30\1\0\11\30\1\70\3\0\2\30\7\0"+
    "\5\30\1\0\2\30\1\163\2\30\1\0\11\30\1\70"+
    "\3\0\2\30\7\0\5\30\1\0\1\164\4\30\1\0"+
    "\11\30\1\70\3\0\2\30\21\0\1\165\15\0\1\142"+
    "\1\166\10\0\5\30\1\0\5\30\1\0\11\30\1\70"+
    "\3\0\1\30\1\167\7\0\5\30\1\0\5\30\1\0"+
    "\4\30\1\170\4\30\1\70\3\0\2\30\7\0\5\30"+
    "\1\0\2\30\1\171\2\30\1\0\11\30\1\70\3\0"+
    "\2\30\7\0\5\30\1\0\1\172\4\30\1\0\11\30"+
    "\1\70\3\0\2\30\20\0\1\173\30\0\5\46\1\0"+
    "\3\46\1\174\1\46\1\0\11\46\1\102\3\0\2\46"+
    "\14\0\1\175\14\0\1\175\17\0\1\176\53\0\1\177"+
    "\45\0\1\200\24\0\1\201\51\0\1\202\30\0\5\30"+
    "\1\175\5\30\1\0\6\30\1\203\2\30\1\70\3\0"+
    "\2\30\11\0\1\204\37\0\2\30\1\205\2\30\1\0"+
    "\5\30\1\0\11\30\1\70\3\0\2\30\7\0\5\30"+
    "\1\0\4\30\1\206\1\0\11\30\1\70\3\0\2\30"+
    "\7\0\5\30\1\0\5\30\1\0\2\30\1\207\6\30"+
    "\1\70\3\0\2\30\15\0\1\210\65\0\1\211\7\0"+
    "\5\30\1\212\5\30\1\0\6\30\1\213\2\30\1\70"+
    "\3\0\2\30\7\0\5\30\1\0\3\30\1\214\1\30"+
    "\1\0\11\30\1\70\3\0\2\30\7\0\1\215\4\30"+
    "\1\0\5\30\1\0\11\30\1\70\3\0\2\30\7\0"+
    "\1\30\1\216\3\30\1\0\5\30\1\0\11\30\1\70"+
    "\3\0\2\30\15\0\1\217\51\0\1\220\24\0\1\221"+
    "\57\0\1\202\26\0\1\222\35\0\5\30\1\0\1\223"+
    "\4\30\1\0\11\30\1\70\3\0\2\30\10\0\1\224"+
    "\40\0\1\30\1\225\3\30\1\0\5\30\1\0\11\30"+
    "\1\70\3\0\2\30\7\0\1\30\1\226\3\30\1\0"+
    "\5\30\1\0\11\30\1\70\3\0\2\30\7\0\5\30"+
    "\1\0\5\30\1\0\3\30\1\214\5\30\1\70\3\0"+
    "\2\30\14\0\1\212\14\0\1\212\37\0\1\224\21\0"+
    "\5\30\1\0\5\30\1\0\4\30\1\225\4\30\1\70"+
    "\3\0\2\30\7\0\5\30\1\0\5\30\1\0\2\30"+
    "\1\227\6\30\1\70\3\0\2\30\7\0\4\30\1\230"+
    "\1\0\5\30\1\0\11\30\1\70\3\0\2\30\11\0"+
    "\1\202\42\0\1\156\46\0\1\156\36\0\1\231\14\0"+
    "\1\231\17\0\2\30\1\214\2\30\1\0\5\30\1\0"+
    "\11\30\1\70\3\0\2\30\20\0\1\210\30\0\5\30"+
    "\1\0\3\30\1\164\1\30\1\0\11\30\1\70\3\0"+
    "\2\30\7\0\5\30\1\0\2\30\1\170\2\30\1\0"+
    "\11\30\1\70\3\0\2\30\7\0\3\30\1\170\1\30"+
    "\1\0\5\30\1\0\11\30\1\70\3\0\2\30\7\0"+
    "\5\30\1\231\5\30\1\0\6\30\1\232\2\30\1\70"+
    "\3\0\2\30\11\0\1\156\37\0\2\30\1\170\2\30"+
    "\1\0\5\30\1\0\11\30\1\70\3\0\2\30\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\11\6\1\3\11\1\1\1\11\21\1\2\11"+
    "\1\1\1\11\2\1\2\11\3\0\1\11\3\0\1\1"+
    "\1\0\7\1\3\0\1\1\6\0\12\1\1\0\2\1"+
    "\6\0\5\1\1\0\4\1\1\0\1\1\6\0\1\1"+
    "\1\0\4\1\2\0\4\1\1\11\1\1\5\0\1\11"+
    "\1\1\1\0\3\1\1\11\2\0\4\1\4\0\1\1"+
    "\1\0\4\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	
	List<String> identifiers = new LinkedList<String>();
	List<String> conditionsDo = new LinkedList<String>();
	List<String> conditionsWhile = new LinkedList<String>();
	List<Integer> numDo = new LinkedList<Integer>();
	List<Integer> numWhile = new LinkedList<Integer>();
	 
	String condition = "";
	int par = 0;
	int valueLoop = 0;
	boolean doVar = true;
	String descr = "";
	
	public COMDATALoopCondition() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	/** If the last identifier is:
	    - DO -> check conditionsDo list
	    - WHILE -> check conditionsWhile list
	**/
	private void closeCondition() {
		int idLength = identifiers.size() - 1;
		if (identifiers.get(idLength).equals("DO")) 
			closeDoLoop();
		else if (identifiers.get(idLength).equals("WHILE"))
			closeWhileLoop();
		identifiers.remove(idLength);
	}
	
	/** Delete the identifiers and variables in do loop **/
	private void closeDoLoop() {
		if(!numDo.isEmpty()){
			int condLength = numDo.get(numDo.size()-1);
			for (int i = 0; i < condLength; i++) {
				if(!conditionsDo.isEmpty()) {
					conditionsDo.remove(conditionsDo.size()-1);
				}
			}
			numDo.remove(numDo.size()-1);
		}
	}
	
	/** Delete the identifiers and variables in do while loop **/
	private void closeWhileLoop() {
		if(!numWhile.isEmpty()) {
			int condLength = numWhile.get(numWhile.size()-1);
			for (int i = 0; i < condLength; i++) {
				if(!conditionsWhile.isEmpty()) {
					conditionsWhile.remove(conditionsWhile.size()-1);
				}
			}
			numWhile.remove(numWhile.size()-1);
		}
	}
	
	/** If the last variable is in the list of DO variables -> error **/
	private void checkDo() {
		if(conditionsDo.contains(descr)) {
			try {
				this.setError(location,"The variable " + descr + " is modified inside the loop.", yyline+1);
			} catch (JFlexException e) {
				e.printStackTrace();
			}
		}
	}
	
	/** If the variables of do while is the to be modified -> error
	    else -> delete variable from list **/
	private void checkDoWhile() {
		if(!numWhile.isEmpty()) {
			int val = numWhile.get(numWhile.size()-1);
			if(val != 1) {
				numWhile.set(numWhile.size()-1, val-1);
				conditionsWhile.remove(descr);
			}
			else {
				try {
					this.setError(location,"The variable " + descr + " is modified inside the loop.", yyline+1);
				} catch (JFlexException e) {
					e.printStackTrace();
				}
			}
		}
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMDATALoopCondition(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 21: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 22: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 23: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 24: break;
          case 5: 
            { 
            }
          case 25: break;
          case 6: 
            { location = location + " " + yytext();
								 conditionsDo.clear(); conditionsWhile.clear(); identifiers.clear();
								 yybegin(COMMENT);
            }
          case 26: break;
          case 7: 
            { conditionsDo.clear(); conditionsWhile.clear(); identifiers.clear();
								 yybegin(NEW_LINE);
            }
          case 27: break;
          case 8: 
            { condition = yytext();
								 if (!conditionsDo.isEmpty()) {
								 	if (conditionsDo.contains(condition)) {
								 		descr = yytext();
								 		yybegin(VAR);
								 	}
								 }
								 if (!conditionsWhile.isEmpty()) {
								 	if (conditionsWhile.contains(condition)) {
								 		descr = yytext();
								 		yybegin(VAR);
								 	}
								 }
            }
          case 28: break;
          case 9: 
            { conditionsDo.add(yytext()); valueLoop++;
            }
          case 29: break;
          case 10: 
            { numDo.add(valueLoop); valueLoop=0; yybegin(NEW_LINE);
            }
          case 30: break;
          case 11: 
            { par=1; yybegin(PAR);
            }
          case 31: break;
          case 12: 
            { conditionsWhile.add(yytext()); valueLoop++;
            }
          case 32: break;
          case 13: 
            { numWhile.add(valueLoop); valueLoop=0; yybegin(NEW_LINE);
            }
          case 33: break;
          case 14: 
            { if(!identifiers.isEmpty()) {
								 	if(identifiers.get(identifiers.size()-1).equals("DO")) checkDo();
								 	if(identifiers.get(identifiers.size()-1).equals("WHILE")) checkDoWhile();
								 }
								 yybegin(LINE);
            }
          case 34: break;
          case 15: 
            { par++;
            }
          case 35: break;
          case 16: 
            { par--; if(par==0) yybegin(ENTER_DO);
            }
          case 36: break;
          case 17: 
            { identifiers.add("DO");
								 yybegin(ENTER_DO);
            }
          case 37: break;
          case 18: 
            { if (!identifiers.isEmpty()) closeCondition();
								 yybegin(COMMENT);
            }
          case 38: break;
          case 19: 
            { identifiers.set(identifiers.size()-1,"WHILE"); yybegin(ENTER_WHILE);
            }
          case 39: break;
          case 20: 
            { location = yytext(); yybegin(NAMING);
            }
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
