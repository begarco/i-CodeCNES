/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.NAME.Homonime rule. 	*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/*                                                                              */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMNAMEHomonymy.lex</tt>
 */
public class COMNAMEHomonymy extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int PARAMS = 6;
  public static final int NEW_LINE = 8;
  public static final int LINE = 10;
  public static final int DECLARATION = 12;
  public static final int AVOID_DECL = 14;
  public static final int AVOID = 16;
  public static final int TYPE_DEC = 18;
  public static final int DECL_PARAMS = 20;
  public static final int NOTHING = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\42\1\44\1\43\1\43\22\0\1\24\1\1\1\40"+
    "\3\0\1\45\1\37\1\30\1\31\1\3\1\0\1\47\3\0\12\36"+
    "\1\46\6\0\1\21\1\17\1\2\1\15\1\14\1\4\1\20\1\26"+
    "\1\34\2\33\1\23\1\22\1\6\1\11\1\12\1\33\1\13\1\35"+
    "\1\7\1\5\1\25\1\33\1\27\1\32\1\33\4\0\1\36\1\0"+
    "\1\21\1\17\1\2\1\15\1\14\1\4\1\20\1\26\1\34\2\33"+
    "\1\23\1\22\1\6\1\11\1\12\1\33\1\13\1\35\1\7\1\5"+
    "\1\25\1\33\1\27\1\32\1\33\12\0\1\44\252\0\2\10\115\0"+
    "\1\16\u1ea8\0\1\44\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\10\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\3\5\1\1"+
    "\10\5\2\1\21\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\5\1\22\1\23\1\24\12\5\1\25\1\26\12\0"+
    "\4\5\1\0\10\5\2\0\14\14\1\0\1\27\13\0"+
    "\4\5\1\0\11\5\15\14\15\0\3\5\1\30\1\0"+
    "\3\5\1\31\2\5\1\0\3\5\1\0\2\5\1\0"+
    "\4\5\1\0\3\5\3\14\1\30\3\14\1\31\16\14"+
    "\15\0\3\5\1\0\6\5\1\0\3\5\1\0\2\5"+
    "\7\0\4\5\1\0\3\5\25\14\13\0\1\32\3\5"+
    "\1\0\6\5\1\0\4\5\1\0\2\5\10\0\3\5"+
    "\1\32\1\0\2\5\22\14\1\32\2\14\7\0\2\5"+
    "\1\31\5\5\1\0\5\5\1\0\1\5\1\0\1\5"+
    "\11\0\2\5\1\0\1\5\21\14\1\33\4\0\5\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\11\0\2\5\1\0\1\5\16\14\3\0\1\31\3\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\34"+
    "\10\0\2\5\1\0\1\31\10\14\1\34\2\14\10\0"+
    "\1\5\1\0\2\5\1\0\1\5\7\0\1\34\1\5"+
    "\1\0\5\14\4\0\1\5\1\0\1\5\4\0\1\5"+
    "\1\0\3\14\3\0\1\5\1\0\1\5\3\0\2\14"+
    "\26\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[576];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u01e0\0\u0208\0\u0230"+
    "\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u0370\0\u01e0\0\u0398\0\u01e0\0\u01e0"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8"+
    "\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u01e0"+
    "\0\u0618\0\u0640\0\u0668\0\u0690\0\u0460\0\u06b8\0\u06e0\0\u0708"+
    "\0\u0730\0\u02f8\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u05c8\0\u05f0"+
    "\0\u07f8\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u0820\0\u01e0\0\u0848"+
    "\0\u01e0\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8"+
    "\0\u0320\0\u0348\0\u0870\0\u01e0\0\u01e0\0\u0898\0\u08c0\0\u08e8"+
    "\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28"+
    "\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68"+
    "\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u05c8\0\u05f0\0\u0c30\0\u0c58"+
    "\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98"+
    "\0\u0dc0\0\u0de8\0\u0e10\0\u01e0\0\u0e38\0\u0e60\0\u0e88\0\u0eb0"+
    "\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0"+
    "\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130"+
    "\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270"+
    "\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0"+
    "\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0"+
    "\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630"+
    "\0\u1658\0\u1680\0\u0410\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748"+
    "\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860\0\u1888"+
    "\0\u18b0\0\u18d8\0\u1900\0\u1928\0\u1950\0\u1978\0\u19a0\0\u19c8"+
    "\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u0668\0\u1ab8\0\u1ae0"+
    "\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20"+
    "\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d60"+
    "\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\u1e28\0\u1e50\0\u1e78\0\u1ea0"+
    "\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0"+
    "\0\u2008\0\u2030\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8\0\u2120"+
    "\0\u2148\0\u2170\0\u2198\0\u21c0\0\u21e8\0\u2210\0\u2238\0\u2260"+
    "\0\u2288\0\u22b0\0\u22d8\0\u2300\0\u2328\0\u2350\0\u2378\0\u23a0"+
    "\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u2468\0\u2490\0\u24b8\0\u24e0"+
    "\0\u2508\0\u2530\0\u2558\0\u2580\0\u25a8\0\u25d0\0\u25f8\0\u2620"+
    "\0\u2648\0\u2670\0\u2698\0\u26c0\0\u26e8\0\u2710\0\u2738\0\u2760"+
    "\0\u2788\0\u27b0\0\u27d8\0\u2800\0\u2828\0\u2850\0\u2878\0\u28a0"+
    "\0\u28c8\0\u28f0\0\u0230\0\u2918\0\u2940\0\u01e0\0\u2968\0\u2990"+
    "\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58\0\u2a80\0\u2aa8\0\u2ad0"+
    "\0\u2af8\0\u2b20\0\u2b48\0\u2b70\0\u2b98\0\u2bc0\0\u2be8\0\u2c10"+
    "\0\u2c38\0\u2c60\0\u2c88\0\u2cb0\0\u2cd8\0\u2d00\0\u2d28\0\u2d50"+
    "\0\u2d78\0\u2da0\0\u2dc8\0\u0410\0\u2df0\0\u2e18\0\u2e40\0\u2e68"+
    "\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08\0\u2f30\0\u2f58\0\u2f80\0\u2fa8"+
    "\0\u2fd0\0\u2ff8\0\u3020\0\u3048\0\u3070\0\u3098\0\u30c0\0\u30e8"+
    "\0\u3110\0\u0668\0\u3138\0\u3160\0\u3188\0\u31b0\0\u31d8\0\u3200"+
    "\0\u3228\0\u3250\0\u3278\0\u32a0\0\u32c8\0\u1568\0\u32f0\0\u3318"+
    "\0\u3340\0\u3368\0\u3390\0\u33b8\0\u33e0\0\u3408\0\u3430\0\u3458"+
    "\0\u3480\0\u34a8\0\u34d0\0\u34f8\0\u3520\0\u3548\0\u3570\0\u3598"+
    "\0\u35c0\0\u35e8\0\u3610\0\u3638\0\u3660\0\u3688\0\u36b0\0\u36d8"+
    "\0\u3700\0\u3728\0\u3750\0\u3778\0\u37a0\0\u37c8\0\u37f0\0\u3818"+
    "\0\u3840\0\u3868\0\u3890\0\u38b8\0\u38e0\0\u3908\0\u3930\0\u3958"+
    "\0\u3980\0\u39a8\0\u39d0\0\u01e0\0\u39f8\0\u3a20\0\u3a48\0\u3a70"+
    "\0\u3a98\0\u3ac0\0\u3ae8\0\u3b10\0\u3b38\0\u3b60\0\u3b88\0\u3bb0"+
    "\0\u3bd8\0\u3c00\0\u3c28\0\u3c50\0\u3c78\0\u3ca0\0\u3cc8\0\u3cf0"+
    "\0\u3d18\0\u3d40\0\u3d68\0\u3d90\0\u3db8\0\u3de0\0\u3e08\0\u3e30"+
    "\0\u3e58\0\u3e80\0\u3ea8\0\u3ed0\0\u3ef8\0\u3f20\0\u3f48\0\u3f70"+
    "\0\u3f98\0\u3fc0\0\u3fe8\0\u4010\0\u4038\0\u4060\0\u4088\0\u40b0"+
    "\0\u40d8\0\u4100\0\u4128\0\u4150\0\u4178\0\u41a0\0\u41c8\0\u41f0"+
    "\0\u4218\0\u4240\0\u4268\0\u4290\0\u42b8\0\u42e0\0\u4308\0\u4330"+
    "\0\u4358\0\u4380\0\u0410\0\u43a8\0\u43d0\0\u43f8\0\u4420\0\u4448"+
    "\0\u4470\0\u4498\0\u44c0\0\u44e8\0\u4510\0\u4538\0\u4560\0\u4588"+
    "\0\u45b0\0\u45d8\0\u4600\0\u4628\0\u4650\0\u4678\0\u46a0\0\u0668"+
    "\0\u46c8\0\u46f0\0\u4718\0\u4740\0\u4768\0\u4790\0\u47b8\0\u47e0"+
    "\0\u4808\0\u4830\0\u4858\0\u4880\0\u48a8\0\u48d0\0\u48f8\0\u4920"+
    "\0\u4948\0\u4970\0\u4998\0\u49c0\0\u49e8\0\u4a10\0\u4a38\0\u01e0"+
    "\0\u4a60\0\u4a88\0\u4ab0\0\u4ad8\0\u4b00\0\u4b28\0\u4b50\0\u4b78"+
    "\0\u02f8\0\u4ba0\0\u4bc8\0\u4bf0\0\u4c18\0\u4c40\0\u4c68\0\u4c90"+
    "\0\u4cb8\0\u4ce0\0\u4d08\0\u4d30\0\u4d58\0\u4d80\0\u4da8\0\u4dd0"+
    "\0\u4df8\0\u4e20\0\u4e48\0\u4e70\0\u4e98\0\u4ec0\0\u4ee8\0\u4f10"+
    "\0\u4f38\0\u4f60\0\u4f88\0\u4fb0\0\u4fd8\0\u5000\0\u5028\0\u5050"+
    "\0\u5078\0\u50a0\0\u50c8\0\u50f0\0\u5118\0\u5140\0\u5168\0\u5190"+
    "\0\u51b8\0\u51e0\0\u5208\0\u5230\0\u5258\0\u5280\0\u52a8\0\u52d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[576];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\16\1\20\3\15\1\21\1\15"+
    "\1\22\1\23\1\15\1\24\1\25\3\15\1\26\1\27"+
    "\10\15\1\21\1\25\4\15\1\30\2\31\3\15\1\32"+
    "\1\16\40\32\1\33\2\31\4\32\1\16\1\34\1\32"+
    "\4\34\1\32\5\34\1\32\5\34\1\32\3\34\2\32"+
    "\4\34\4\32\1\30\2\31\3\32\1\35\1\16\1\36"+
    "\1\35\4\36\1\35\5\36\1\35\5\36\1\32\3\36"+
    "\2\35\4\36\3\35\1\32\1\37\1\32\1\31\1\40"+
    "\2\35\1\15\1\16\1\41\1\16\1\42\2\43\1\44"+
    "\1\45\1\43\1\46\1\47\1\50\1\51\1\25\3\43"+
    "\1\52\1\53\1\15\3\43\2\15\2\43\1\54\1\55"+
    "\1\15\1\56\1\57\1\15\1\32\2\31\3\15\1\60"+
    "\1\16\1\61\1\60\1\62\2\63\1\64\1\65\1\63"+
    "\1\66\1\67\1\70\1\71\1\72\3\63\1\73\1\74"+
    "\1\32\3\63\2\60\2\63\1\75\1\76\1\60\1\77"+
    "\1\100\1\32\1\30\1\32\1\31\3\60\1\35\1\16"+
    "\1\101\1\35\4\101\1\35\5\101\1\35\5\101\1\32"+
    "\3\101\1\102\1\103\4\101\3\35\1\32\1\104\1\32"+
    "\1\31\1\40\3\35\1\16\22\35\1\32\3\35\1\102"+
    "\1\103\7\35\1\32\1\104\1\32\1\31\1\40\1\35"+
    "\1\105\1\32\1\16\12\32\1\106\25\32\1\107\2\31"+
    "\4\32\1\16\1\110\1\32\4\110\1\32\5\110\1\32"+
    "\5\110\1\32\3\110\1\111\1\32\4\110\4\32\1\30"+
    "\2\31\4\32\1\16\1\112\1\32\1\113\3\32\1\114"+
    "\1\32\1\115\1\116\1\32\1\117\1\120\3\32\1\121"+
    "\1\122\10\32\1\114\1\120\4\32\1\30\2\31\1\32"+
    "\1\123\1\32\1\124\1\16\22\124\1\32\14\124\1\32"+
    "\1\104\1\32\1\31\1\125\2\124\61\0\1\126\14\0"+
    "\1\127\26\0\1\130\50\0\1\131\54\0\1\132\50\0"+
    "\1\133\44\0\1\134\43\0\1\135\53\0\1\136\47\0"+
    "\1\137\40\0\1\34\1\0\4\34\1\0\5\34\1\0"+
    "\5\34\1\0\3\34\2\0\5\34\13\0\1\36\1\0"+
    "\4\36\1\0\5\36\1\0\5\36\1\0\3\36\2\0"+
    "\5\36\13\0\1\43\1\0\4\43\1\0\1\140\4\43"+
    "\1\0\5\43\1\0\1\43\1\141\1\43\2\0\5\43"+
    "\13\0\1\43\1\0\1\43\1\142\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\4\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\143\4\43\17\0"+
    "\1\144\43\0\1\43\1\0\4\43\1\0\2\43\1\145"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\43\1\0\4\43\1\0\3\43\1\146\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\13\0\1\43\1\0"+
    "\2\43\1\147\1\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\4\43\1\0"+
    "\1\150\4\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\1\151\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\13\0\1\43\1\0"+
    "\4\43\1\0\1\152\4\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\2\43\1\153\1\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\1\43\1\154\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\11\0\37\155"+
    "\1\32\10\155\40\156\1\32\7\156\2\0\1\63\1\0"+
    "\4\63\1\0\1\157\4\63\1\0\5\63\1\0\1\63"+
    "\1\160\1\63\2\0\5\63\13\0\1\63\1\0\1\63"+
    "\1\161\2\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\5\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\4\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\1\162\4\63\13\0\1\63\1\0\4\63\1\0"+
    "\2\63\1\163\2\63\1\0\5\63\1\0\3\63\2\0"+
    "\5\63\13\0\1\63\1\0\4\63\1\0\3\63\1\164"+
    "\1\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\2\63\1\165\1\63\1\0\5\63\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\1\166\4\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\1\167"+
    "\4\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\0\1\170\4\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\2\63"+
    "\1\171\1\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\1\63\1\172\2\63"+
    "\1\0\5\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\101\1\0\4\101\1\0\5\101\1\0\5\101"+
    "\1\0\3\101\2\0\5\101\17\0\1\173\43\0\1\110"+
    "\1\0\4\110\1\0\5\110\1\0\5\110\1\0\3\110"+
    "\2\0\5\110\57\0\1\174\23\0\1\175\46\0\1\176"+
    "\34\0\1\177\50\0\1\200\51\0\1\201\40\0\1\202"+
    "\16\0\1\203\33\0\1\204\61\0\1\205\45\0\1\206"+
    "\52\0\1\207\31\0\1\43\1\0\4\43\1\0\5\43"+
    "\1\0\3\43\1\210\1\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\5\43\1\0\2\43"+
    "\1\211\2\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\2\43\1\212\1\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\1\43\1\213\3\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\20\0\1\214\42\0\1\43\1\0\4\43"+
    "\1\0\1\215\4\43\1\0\5\43\1\0\3\43\2\0"+
    "\5\43\13\0\1\216\1\0\4\43\1\0\5\43\1\0"+
    "\2\43\1\217\2\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\43\1\0\4\43\1\0\4\43\1\220\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\1\43"+
    "\1\221\2\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\4\43\1\0\4\43"+
    "\1\222\1\0\5\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\43\1\0\4\43\1\0\5\43\1\0\1\43\1\223"+
    "\3\43\1\0\3\43\2\0\5\43\13\0\1\43\1\0"+
    "\3\43\1\224\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\4\43\1\0\5\43"+
    "\1\0\1\225\4\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\63\1\0\4\63\1\0\5\63\1\0\3\63\1\226"+
    "\1\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\2\63\1\227\2\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\2\63\1\230"+
    "\1\63\1\0\5\63\1\0\5\63\1\0\3\63\2\0"+
    "\5\63\13\0\1\63\1\0\4\63\1\0\1\63\1\231"+
    "\3\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\0\1\232\4\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\233\1\0\4\63"+
    "\1\0\5\63\1\0\2\63\1\234\2\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\4\63"+
    "\1\235\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\1\63\1\236\2\63\1\0\5\63\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\4\63\1\237\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\5\63"+
    "\1\0\1\63\1\240\3\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\3\63\1\241\1\0\5\63\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\1\242\4\63\1\0\3\63"+
    "\2\0\5\63\26\0\1\243\44\0\1\244\50\0\1\245"+
    "\36\0\1\246\61\0\1\247\35\0\1\250\15\0\1\251"+
    "\34\0\1\252\65\0\1\253\43\0\1\254\43\0\1\255"+
    "\41\0\1\256\52\0\1\257\23\0\1\257\15\0\1\43"+
    "\1\0\4\43\1\0\1\43\1\260\3\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\2\43\1\261\2\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\262\1\0\4\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\3\43\1\263\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\25\0\1\264\35\0\1\265"+
    "\1\0\4\43\1\0\5\43\1\0\1\43\1\266\3\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\1\43"+
    "\1\267\2\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\4\43\1\0\5\43"+
    "\1\0\4\43\1\270\1\0\3\43\2\0\5\43\13\0"+
    "\1\271\1\0\1\272\3\43\1\273\1\43\1\274\1\275"+
    "\1\43\1\276\1\277\3\43\1\300\1\301\1\302\3\43"+
    "\2\0\2\43\1\303\1\304\1\43\13\0\1\43\1\0"+
    "\4\43\1\0\5\43\1\0\1\305\4\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\1\43\1\306\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\307\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\2\43\1\310\2\43\13\0\1\43"+
    "\1\0\4\43\1\0\3\43\1\311\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\2\43\1\312\2\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\63\1\0\4\63\1\0\1\63"+
    "\1\313\3\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\4\63\1\0\2\63\1\314\2\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\315"+
    "\1\0\4\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\3\63"+
    "\1\316\1\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\317\1\0\4\63\1\0\5\63\1\0\1\63"+
    "\1\320\3\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\1\63\1\321\2\63\1\0\5\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\5\63\1\0\4\63\1\322\1\0\3\63\2\0"+
    "\5\63\13\0\1\323\1\0\1\324\3\63\1\273\1\63"+
    "\1\325\1\326\1\63\1\327\1\277\3\63\1\330\1\331"+
    "\1\302\3\63\2\0\2\63\1\332\1\333\1\63\13\0"+
    "\1\63\1\0\4\63\1\0\5\63\1\0\1\334\4\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\1\63"+
    "\1\335\2\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\307\5\63"+
    "\1\0\5\63\1\0\3\63\2\0\2\63\1\336\2\63"+
    "\13\0\1\63\1\0\4\63\1\0\3\63\1\337\1\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\4\63\1\0\2\63\1\340\2\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\20\0\1\341\14\0\1\243"+
    "\46\0\1\342\45\0\1\343\35\0\1\344\60\0\1\345"+
    "\43\0\1\346\46\0\1\347\47\0\1\350\60\0\1\351"+
    "\46\0\1\352\35\0\1\353\61\0\1\354\26\0\1\355"+
    "\47\0\1\43\1\0\4\43\1\0\5\43\1\0\4\43"+
    "\1\356\1\0\3\43\2\0\5\43\13\0\1\43\1\0"+
    "\4\43\1\0\5\43\1\0\2\43\1\357\2\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\3\43\1\360"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\31\0\1\361\31\0\1\43\1\0\4\43\1\0\3\43"+
    "\1\362\1\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\2\43\1\363\2\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\2\43\1\364\2\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\351\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\1\365\4\43\1\0"+
    "\5\43\1\0\1\43\1\366\1\43\2\0\5\43\13\0"+
    "\1\43\1\0\1\43\1\367\2\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\17\0\1\370\43\0"+
    "\1\43\1\0\4\43\1\0\2\43\1\371\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\13\0\1\43\1\0"+
    "\4\43\1\0\3\43\1\372\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\4\43\1\0"+
    "\1\373\4\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\16\0\1\374\44\0\1\43\1\0\4\43\1\0\1\375"+
    "\4\43\1\0\5\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\43\1\0\4\43\1\0\1\376\4\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\377\1\0\1\u0100"+
    "\3\0\1\273\1\0\1\u0101\1\u0102\1\0\1\u0103\1\277"+
    "\3\0\1\u0104\1\u0105\1\302\7\0\1\273\1\277\14\0"+
    "\1\43\1\0\2\43\1\u0106\1\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\13\0\1\43\1\0"+
    "\1\43\1\u0107\2\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\4\43\1\0"+
    "\5\43\1\0\4\43\1\u0108\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\5\43\1\0\4\43"+
    "\1\u0109\1\0\3\43\2\0\5\43\13\0\1\u010a\47\0"+
    "\1\u010b\1\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\4\43\1\0"+
    "\5\43\1\0\1\43\1\u010c\3\43\1\0\3\43\2\0"+
    "\5\43\13\0\1\43\1\0\4\43\1\0\1\u010d\4\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\63"+
    "\1\0\4\63\1\0\5\63\1\0\4\63\1\u010e\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\4\63\1\0"+
    "\5\63\1\0\2\63\1\u010f\2\63\1\0\3\63\2\0"+
    "\5\63\13\0\1\63\1\0\3\63\1\u0110\1\0\5\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\4\63\1\0\3\63\1\u0111\1\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\2\63\1\u0112\2\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\2\63"+
    "\1\u0113\2\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\4\63\1\0\5\63\1\0\5\63"+
    "\1\351\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\1\u0114\4\63\1\0\5\63\1\0\1\63\1\u0115"+
    "\1\63\2\0\5\63\13\0\1\63\1\0\1\63\1\u0116"+
    "\2\63\1\0\5\63\1\0\5\63\1\0\3\63\2\0"+
    "\5\63\13\0\1\63\1\0\4\63\1\0\2\63\1\u0117"+
    "\2\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\0\3\63\1\u0118\1\63\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\1\u0119\4\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\1\u011a"+
    "\4\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\0\1\u011b\4\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\2\63"+
    "\1\u011c\1\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\1\63\1\u011d\2\63"+
    "\1\0\5\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\4\63\1\0\5\63\1\0\4\63"+
    "\1\u011e\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\4\63\1\u011f\1\0\3\63"+
    "\2\0\5\63\13\0\1\u0120\1\0\4\63\1\0\5\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\4\63\1\0\5\63\1\0\1\63\1\u0121\3\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\1\u0122\4\63\1\0\5\63\1\0\3\63\2\0"+
    "\5\63\43\0\1\u0123\31\0\1\u0124\35\0\1\u0125\55\0"+
    "\1\u0126\23\0\1\u0126\27\0\1\u0127\50\0\1\u0128\53\0"+
    "\1\u0129\44\0\1\u012a\16\0\1\u012a\16\0\1\u012b\17\0"+
    "\1\351\37\0\1\u012c\40\0\1\u012d\56\0\1\u012e\54\0"+
    "\1\203\30\0\1\43\1\0\4\43\1\0\3\43\1\u012f"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\u0130\1\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\4\43\1\u0126"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\2\43\1\u0131"+
    "\2\43\25\0\1\u0132\35\0\1\43\1\0\4\43\1\0"+
    "\4\43\1\u0133\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\5\43\1\0\2\43"+
    "\1\u0134\2\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\5\43\1\u012a\5\43\1\0\3\43"+
    "\2\0\3\43\1\u0135\1\43\13\0\1\43\1\0\4\43"+
    "\1\0\5\43\1\0\3\43\1\u0136\1\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\4\43\1\0\5\43"+
    "\1\0\2\43\1\u0137\2\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\2\43\1\u0138\1\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\20\0\1\u0139"+
    "\42\0\1\43\1\0\4\43\1\0\1\u013a\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\13\0\1\u013b\1\0"+
    "\4\43\1\0\5\43\1\0\2\43\1\u013c\2\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\1\43\1\u013d"+
    "\2\43\1\0\5\43\1\0\5\43\1\0\3\43\2\0"+
    "\5\43\30\0\1\u013e\32\0\1\43\1\0\4\43\1\0"+
    "\4\43\1\u013f\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\5\43\1\0\1\43"+
    "\1\u0140\3\43\1\0\3\43\2\0\5\43\22\0\1\u0141"+
    "\14\0\1\u0142\26\0\1\u0143\55\0\1\u0144\50\0\1\u0145"+
    "\44\0\1\u0146\47\0\1\u0147\47\0\1\u0148\40\0\1\43"+
    "\1\0\3\43\1\u0149\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\4\43\1\0"+
    "\5\43\1\0\1\u014a\4\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\3\43\1\u014b\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\3\43\1\u014c\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\32\0\1\u014d\30\0\1\43"+
    "\1\0\4\43\1\0\5\43\1\0\2\43\1\217\2\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\3\43\1\u014e\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\1\43\1\u014f\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\63\1\0\4\63\1\0\3\63\1\u0150\1\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\u0151"+
    "\1\0\4\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\u0126\5\63"+
    "\1\0\5\63\1\0\3\63\2\0\2\63\1\u0152\2\63"+
    "\13\0\1\63\1\0\4\63\1\0\4\63\1\u0153\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\2\63\1\u0154\2\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\4\63\1\0"+
    "\5\63\1\u012a\5\63\1\0\3\63\2\0\3\63\1\u0155"+
    "\1\63\13\0\1\63\1\0\4\63\1\0\5\63\1\0"+
    "\3\63\1\u0156\1\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\0\5\63\1\0\2\63\1\u0157"+
    "\2\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\2\63\1\u0158\1\63\1\0\5\63\1\0\5\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\4\63\1\0"+
    "\1\u0159\4\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\u015a\1\0\4\63\1\0\5\63\1\0\2\63"+
    "\1\u015b\2\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\1\63\1\u015c\2\63\1\0\5\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\4\63\1\u015d\1\0\5\63\1\0\3\63\2\0"+
    "\5\63\13\0\1\63\1\0\4\63\1\0\5\63\1\0"+
    "\1\63\1\u015e\3\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\3\63\1\u015f\1\0\5\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\5\63\1\0\1\u0160\4\63\1\0\3\63\2\0"+
    "\5\63\13\0\1\63\1\0\4\63\1\0\3\63\1\u0161"+
    "\1\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\0\3\63\1\u0162\1\63\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\2\63\1\234\2\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\4\63\1\0"+
    "\3\63\1\u0163\1\63\1\0\5\63\1\0\3\63\2\0"+
    "\5\63\13\0\1\63\1\0\1\63\1\u0164\2\63\1\0"+
    "\5\63\1\0\5\63\1\0\3\63\2\0\5\63\23\0"+
    "\1\u0165\64\0\1\253\27\0\1\u0166\51\0\1\u0167\51\0"+
    "\1\253\41\0\1\u0168\64\0\1\u012e\35\0\1\u0169\23\0"+
    "\1\u0169\37\0\1\u016a\32\0\1\u016b\42\0\1\43\1\0"+
    "\4\43\1\0\5\43\1\0\5\43\1\0\2\43\1\270"+
    "\2\0\5\43\13\0\1\43\1\0\3\43\1\u016c\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\43\1\0\4\43\1\0\1\u016d\4\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\24\0\1\u016e\36\0\1\43"+
    "\1\0\1\43\1\u016f\2\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\5\43\1\0\3\43\1\u014c\1\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\4\43\1\u0169\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\2\43\1\u0170\2\43"+
    "\13\0\1\43\1\0\4\43\1\0\1\43\1\u0171\3\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\2\43\1\u0172\2\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\u0173\1\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\25\0\1\u0174\35\0\1\u0175\1\0\4\43\1\0\5\43"+
    "\1\0\1\43\1\u0176\3\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\1\43\1\u0177\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\5\43\1\0\4\43\1\u0178\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\4\43\1\0"+
    "\5\43\1\0\1\u0179\4\43\1\0\3\43\2\0\5\43"+
    "\24\0\1\u017a\36\0\1\43\1\0\1\43\1\u017b\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\u017c\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\2\43\1\u017d\2\43\33\0\1\u017e"+
    "\46\0\1\u017f\34\0\1\u0180\52\0\1\u0181\40\0\1\u0182"+
    "\16\0\1\u0183\33\0\1\u0184\57\0\1\u0185\52\0\1\u0186"+
    "\31\0\1\43\1\0\4\43\1\0\3\43\1\u0187\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\2\43\1\u0188\2\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\u0189\3\43\2\0\5\43"+
    "\34\0\1\u016e\26\0\1\43\1\0\4\43\1\0\2\43"+
    "\1\270\2\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\3\43\1\u018a\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\13\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\5\63\1\0\2\63\1\322"+
    "\2\0\5\63\13\0\1\63\1\0\3\63\1\u018b\1\0"+
    "\5\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\0\1\u018c\4\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\1\63"+
    "\1\u018d\2\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\5\63"+
    "\1\0\3\63\1\u0162\1\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\4\63\1\u0169\5\63\1\0\5\63"+
    "\1\0\3\63\2\0\2\63\1\u018e\2\63\13\0\1\63"+
    "\1\0\4\63\1\0\1\63\1\u018f\3\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\2\63\1\u0190\2\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\u0191\1\0\4\63\1\0\5\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\u0192"+
    "\1\0\4\63\1\0\5\63\1\0\1\63\1\u0193\3\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\1\63"+
    "\1\u0194\2\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\5\63"+
    "\1\0\4\63\1\u0195\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\0\5\63\1\0\1\u0196\4\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\1\63"+
    "\1\u0197\2\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\u017c\5\63"+
    "\1\0\5\63\1\0\3\63\2\0\2\63\1\u0198\2\63"+
    "\13\0\1\63\1\0\4\63\1\0\3\63\1\u0199\1\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\4\63\1\0\2\63\1\u019a\2\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\5\63\1\0\5\63\1\u0189\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\4\63\1\0\2\63\1\322\2\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\3\63\1\u019b\1\0\5\63\1\0\5\63\1\0"+
    "\3\63\2\0\5\63\25\0\1\u019c\47\0\1\u019d\41\0"+
    "\1\u012e\54\0\1\354\61\0\1\u019e\34\0\1\u019f\11\0"+
    "\1\u016a\33\0\1\u01a0\23\0\1\u01a0\15\0\1\43\1\0"+
    "\4\43\1\0\3\43\1\u01a1\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\2\43\1\u014c"+
    "\1\43\1\0\5\43\1\0\5\43\1\0\3\43\2\0"+
    "\5\43\13\0\1\43\1\0\4\43\1\0\2\43\1\u0109"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\43\1\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\1\u01a2\2\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\5\43\1\0\4\43\1\u01a3\1\0\3\43\2\0"+
    "\5\43\13\0\1\43\1\0\4\43\1\0\5\43\1\0"+
    "\2\43\1\u01a4\2\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\43\1\0\3\43\1\u01a5\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\31\0\1\u01a6\31\0\1\43"+
    "\1\0\4\43\1\0\3\43\1\u01a7\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\2\43\1\u01a8\2\43\1\0\5\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\4\43\1\0\2\43"+
    "\1\u01a9\2\43\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\5\43\1\0\5\43"+
    "\1\u01aa\3\43\2\0\5\43\13\0\1\43\1\0\4\43"+
    "\1\0\5\43\1\0\4\43\1\u01ab\1\0\3\43\2\0"+
    "\5\43\22\0\1\u01ac\40\0\1\43\1\0\4\43\1\0"+
    "\5\43\1\0\4\43\1\u01ad\1\0\3\43\2\0\5\43"+
    "\13\0\1\u01ae\47\0\1\u01af\1\0\4\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\23\0\1\u01b0"+
    "\50\0\1\u01b1\36\0\1\u01b2\47\0\1\u01b3\15\0\1\u01b4"+
    "\34\0\1\u01b5\65\0\1\u01b6\43\0\1\u01b7\35\0\1\u01b8"+
    "\52\0\1\u017c\23\0\1\u017c\15\0\1\43\1\0\4\43"+
    "\1\0\5\43\1\0\1\43\1\u01b9\3\43\1\0\3\43"+
    "\2\0\5\43\13\0\1\43\1\0\4\43\1\0\1\u01ba"+
    "\4\43\1\0\5\43\1\0\3\43\2\0\5\43\23\0"+
    "\1\u01bb\11\0\1\u0189\25\0\1\43\1\0\4\43\1\u01a0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\2\43\1\u01bc"+
    "\2\43\13\0\1\63\1\0\4\63\1\0\3\63\1\u01bd"+
    "\1\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\2\63\1\u0162\1\63\1\0\5\63\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\2\63\1\u011f\2\63\1\0\5\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\4\63\1\0"+
    "\5\63\1\0\5\63\1\0\1\u01be\2\63\2\0\5\63"+
    "\13\0\1\63\1\0\4\63\1\0\5\63\1\0\4\63"+
    "\1\u01bf\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\2\63\1\u01c0\2\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\3\63\1\u01c1"+
    "\1\0\5\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\4\63\1\0\3\63\1\u01c2\1\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\4\63\1\0\2\63\1\u01c3\2\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\2\63\1\u01c4\2\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\5\63"+
    "\1\0\5\63\1\u01aa\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\4\63\1\0\5\63\1\0\4\63\1\u01c5\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\4\63\1\0"+
    "\5\63\1\0\4\63\1\u01c6\1\0\3\63\2\0\5\63"+
    "\13\0\1\u01c7\1\0\4\63\1\0\5\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\0\5\63\1\0\1\63\1\u01c8\3\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\1\u01c9"+
    "\4\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\u01a0\5\63\1\0\5\63\1\0"+
    "\3\63\2\0\2\63\1\u01ca\2\63\24\0\1\u01cb\50\0"+
    "\1\u01cc\46\0\1\u01cd\42\0\1\354\43\0\1\43\1\0"+
    "\4\43\1\0\2\43\1\u01ce\2\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\4\43\1\0"+
    "\3\43\1\u01cf\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\5\43\13\0\1\43\1\0\4\43\1\0\3\43\1\u01d0"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\u01d1\1\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\13\0\1\43\1\0\4\43\1\u01d2"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\2\43\1\u01d3"+
    "\2\43\25\0\1\u01d4\35\0\1\43\1\0\4\43\1\0"+
    "\4\43\1\u01d5\1\0\5\43\1\0\3\43\2\0\5\43"+
    "\13\0\1\43\1\0\4\43\1\0\5\43\1\0\2\43"+
    "\1\u01d6\2\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\5\43\1\u01d7\5\43\1\0\3\43"+
    "\2\0\3\43\1\u01d8\1\43\15\0\1\u0100\17\0\1\u01aa"+
    "\25\0\1\43\1\0\4\43\1\0\3\43\1\u01d9\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\16\0\1\u01da"+
    "\44\0\1\43\1\0\4\43\1\0\3\43\1\u01db\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\32\0\1\u0183"+
    "\30\0\1\43\1\0\4\43\1\0\5\43\1\0\2\43"+
    "\1\u013c\2\43\1\0\3\43\2\0\5\43\34\0\1\u01dc"+
    "\45\0\1\u01dd\35\0\1\u01de\54\0\1\u01df\46\0\1\u01e0"+
    "\47\0\1\u01e1\60\0\1\u01aa\46\0\1\u01e2\47\0\1\u01e3"+
    "\26\0\1\43\1\0\4\43\1\0\3\43\1\u01e4\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\1\43\1\u01e5\2\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\24\0\1\u01e6\36\0\1\43"+
    "\1\0\2\43\1\u0109\1\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\5\43\13\0\1\63\1\0\4\63"+
    "\1\0\2\63\1\u01e7\2\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\3\63"+
    "\1\u01e8\1\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\4\63\1\0\3\63\1\u01e9\1\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\u01ea"+
    "\1\0\4\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\u01d2\5\63"+
    "\1\0\5\63\1\0\3\63\2\0\2\63\1\u01eb\2\63"+
    "\13\0\1\63\1\0\4\63\1\0\4\63\1\u01ec\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\2\63\1\u01ed\2\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\4\63\1\0"+
    "\5\63\1\u01d7\5\63\1\0\3\63\2\0\3\63\1\u01ee"+
    "\1\63\13\0\1\63\1\0\4\63\1\0\3\63\1\u01ef"+
    "\1\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\4\63\1\0\3\63\1\u01f0\1\63\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\2\63\1\u015b\2\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\4\63\1\0"+
    "\3\63\1\u01f1\1\63\1\0\5\63\1\0\3\63\2\0"+
    "\5\63\13\0\1\63\1\0\1\63\1\u01f2\2\63\1\0"+
    "\5\63\1\0\5\63\1\0\3\63\2\0\5\63\13\0"+
    "\1\63\1\0\2\63\1\u011f\1\63\1\0\5\63\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\14\0\1\u01f3\20\0"+
    "\1\u01f4\14\0\1\u01f5\1\0\1\u01f5\30\0\1\u01f6\37\0"+
    "\1\u01f7\35\0\1\43\1\u01f8\4\43\1\0\5\43\1\0"+
    "\5\43\1\u01f9\3\43\2\0\5\43\2\0\1\u01fa\1\0"+
    "\1\u01fa\6\0\1\43\1\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\u01f6\3\43\2\0\5\43\13\0\1\43\1\0"+
    "\4\43\1\0\5\43\1\0\5\43\1\0\2\43\1\u0178"+
    "\2\0\5\43\13\0\1\43\1\0\3\43\1\u01fb\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\5\43\22\0"+
    "\1\u01fc\40\0\1\43\1\0\4\43\1\0\1\u01fd\4\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\24\0\1\u01b6"+
    "\36\0\1\43\1\0\1\43\1\u01fe\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\4\43\1\0\5\43\1\0\3\43\1\u01db\1\43"+
    "\1\0\3\43\2\0\5\43\21\0\1\u01ff\23\0\1\u01ff"+
    "\15\0\1\43\1\0\4\43\1\u01ff\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\2\43\1\u0200\2\43\13\0\1\43"+
    "\1\0\4\43\1\0\5\43\1\0\5\43\1\u0201\3\43"+
    "\2\0\5\43\20\0\1\u0202\54\0\1\u0203\35\0\1\u0204"+
    "\55\0\1\u01d2\23\0\1\u01d2\30\0\1\u0205\53\0\1\u0206"+
    "\44\0\1\u01d7\16\0\1\u01d7\26\0\1\u0207\47\0\1\u0208"+
    "\35\0\1\43\1\0\4\43\1\0\2\43\1\u0178\2\43"+
    "\1\0\5\43\1\0\3\43\2\0\5\43\13\0\1\43"+
    "\1\0\3\43\1\u0209\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\25\0\1\u020a\35\0\1\63\1\u01f8"+
    "\4\63\1\0\5\63\1\0\5\63\1\u01f9\3\63\2\0"+
    "\5\63\2\0\1\u01fa\1\0\1\u01fa\6\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\5\63\1\u01f6\3\63\2\0"+
    "\5\63\13\0\1\63\1\0\4\63\1\0\5\63\1\0"+
    "\5\63\1\0\2\63\1\u0195\2\0\5\63\13\0\1\63"+
    "\1\0\3\63\1\u020b\1\0\5\63\1\0\5\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\4\63\1\0"+
    "\1\u020c\4\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\1\63\1\u020d\2\63\1\0\5\63"+
    "\1\0\5\63\1\0\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\4\63\1\0\5\63\1\0\3\63\1\u01f0\1\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\4\63"+
    "\1\u01ff\5\63\1\0\5\63\1\0\3\63\2\0\2\63"+
    "\1\u020e\2\63\13\0\1\63\1\0\4\63\1\0\5\63"+
    "\1\0\5\63\1\u0201\3\63\2\0\5\63\13\0\1\63"+
    "\1\0\4\63\1\0\2\63\1\u0195\2\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\3\63"+
    "\1\u020f\1\0\5\63\1\0\5\63\1\0\3\63\2\0"+
    "\5\63\35\0\1\u01f3\3\0\1\u0210\10\0\1\u01f3\1\0"+
    "\1\u01f3\7\0\1\u01f3\1\u012b\17\0\1\u01f4\14\0\1\u01f5"+
    "\1\0\1\u01f5\7\0\1\u01f3\20\0\1\u01f5\14\0\1\u01f5"+
    "\1\0\1\u01f5\22\0\1\u0211\16\0\1\u0211\14\0\1\u0212"+
    "\71\0\1\u01f8\3\0\1\u0213\10\0\1\u01f8\1\0\1\u01f8"+
    "\7\0\1\u01f8\1\u012b\17\0\1\u01f9\14\0\1\u01fa\1\0"+
    "\1\u01fa\7\0\1\u01f8\20\0\1\u01fa\14\0\1\u01fa\1\0"+
    "\1\u01fa\6\0\1\43\1\0\4\43\1\0\3\43\1\u0214"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\5\43\17\0"+
    "\1\u0208\43\0\1\43\1\0\2\43\1\u01db\1\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\5\43\13\0"+
    "\1\43\1\0\4\43\1\0\2\43\1\u01ad\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\36\0\1\u0215\24\0"+
    "\1\43\1\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\1\u0216\2\43\2\0\5\43\23\0\1\u0217\11\0\1\u0201"+
    "\33\0\1\u0218\23\0\1\u0218\42\0\1\u01b6\27\0\1\u0219"+
    "\45\0\1\u021a\64\0\1\u0208\51\0\1\u0201\25\0\1\43"+
    "\1\0\4\43\1\u0218\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\2\43\1\u021b\2\43\13\0\1\u021c\47\0\1\63"+
    "\1\0\4\63\1\0\3\63\1\u021d\1\63\1\0\5\63"+
    "\1\0\3\63\2\0\5\63\13\0\1\63\1\0\2\63"+
    "\1\u01f0\1\63\1\0\5\63\1\0\5\63\1\0\3\63"+
    "\2\0\5\63\13\0\1\63\1\0\4\63\1\0\2\63"+
    "\1\u01c6\2\63\1\0\5\63\1\0\3\63\2\0\5\63"+
    "\13\0\1\63\1\0\4\63\1\0\5\63\1\0\5\63"+
    "\1\0\1\u021e\2\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\u0218\5\63\1\0\5\63\1\0\3\63\2\0"+
    "\2\63\1\u021f\2\63\13\0\1\u0220\1\0\4\u0220\1\0"+
    "\5\u0220\1\0\5\u0220\1\u0210\3\u0220\2\0\4\u0220\3\0"+
    "\1\u0210\1\0\1\u0210\14\0\1\u0221\23\0\1\u0221\15\0"+
    "\1\u0222\1\0\4\u0222\1\0\5\u0222\1\0\5\u0222\1\u0213"+
    "\3\u0222\2\0\4\u0222\3\0\1\u0213\1\0\1\u0213\6\0"+
    "\1\43\1\0\4\43\1\0\2\43\1\u0223\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\25\0\1\u0224\35\0"+
    "\1\43\1\0\4\43\1\0\3\43\1\u0225\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\5\43\24\0\1\u0226\42\0"+
    "\1\u01e3\55\0\1\u0227\46\0\1\u01e3\36\0\1\43\1\0"+
    "\2\43\1\u01ad\1\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\5\43\21\0\1\u0228\23\0\1\u0228\15\0"+
    "\1\63\1\0\4\63\1\0\2\63\1\u0229\2\63\1\0"+
    "\5\63\1\0\3\63\2\0\5\63\13\0\1\63\1\0"+
    "\4\63\1\0\3\63\1\u022a\1\63\1\0\5\63\1\0"+
    "\3\63\2\0\5\63\13\0\1\63\1\0\2\63\1\u01c6"+
    "\1\63\1\0\5\63\1\0\5\63\1\0\3\63\2\0"+
    "\5\63\13\0\1\u0220\1\0\4\u0220\1\0\5\u0220\1\0"+
    "\5\u0220\1\u022b\3\u0220\1\0\1\253\5\u0220\2\0\1\u022b"+
    "\1\0\1\u022b\22\0\1\u022c\16\0\1\u022c\14\0\1\u0222"+
    "\1\0\4\u0222\1\0\5\u0222\1\0\5\u0222\1\u022d\3\u0222"+
    "\1\0\1\u016e\5\u0222\2\0\1\u022d\1\0\1\u022d\6\0"+
    "\1\43\1\u022e\4\43\1\0\5\43\1\0\5\43\1\u022f"+
    "\3\43\2\0\5\43\2\0\1\u0230\1\0\1\u0230\30\0"+
    "\1\u0231\25\0\1\43\1\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\u0231\3\43\2\0\5\43\25\0\1\u0232\46\0"+
    "\1\u0233\52\0\1\u0234\16\0\1\u0234\14\0\1\63\1\u022e"+
    "\4\63\1\0\5\63\1\0\5\63\1\u022f\3\63\2\0"+
    "\5\63\2\0\1\u0230\1\0\1\u0230\6\0\1\63\1\0"+
    "\4\63\1\0\5\63\1\0\5\63\1\u0231\3\63\2\0"+
    "\5\63\35\0\1\u022b\4\0\1\253\7\0\1\u022b\1\0"+
    "\1\u022b\14\0\1\u0235\23\0\1\u0235\37\0\1\u022d\4\0"+
    "\1\u016e\7\0\1\u022d\1\0\1\u022d\30\0\1\u022e\3\0"+
    "\1\u0236\10\0\1\u022e\1\0\1\u022e\7\0\1\u022e\1\u0100"+
    "\17\0\1\u022f\14\0\1\u0230\1\0\1\u0230\7\0\1\u022e"+
    "\20\0\1\u0230\14\0\1\u0230\1\0\1\u0230\22\0\1\277"+
    "\16\0\1\277\14\0\1\u0237\50\0\1\u022e\20\0\1\u022f"+
    "\14\0\1\u0230\1\0\1\u0230\14\0\1\u0238\23\0\1\u0238"+
    "\24\0\1\u0239\40\0\1\u023a\1\0\4\u023a\1\0\5\u023a"+
    "\1\0\5\u023a\1\u0236\3\u023a\2\0\4\u023a\3\0\1\u0236"+
    "\1\0\1\u0236\14\0\1\u023b\23\0\1\u023b\24\0\1\u023c"+
    "\44\0\1\253\43\0\1\u023a\1\0\4\u023a\1\0\5\u023a"+
    "\1\0\5\u023a\1\u023d\3\u023a\1\0\1\u01b6\5\u023a\2\0"+
    "\1\u023d\1\0\1\u023d\22\0\1\u023e\16\0\1\u023e\20\0"+
    "\1\u016e\65\0\1\u023d\4\0\1\u01b6\7\0\1\u023d\1\0"+
    "\1\u023d\14\0\1\u023f\23\0\1\u023f\24\0\1\u0240\44\0"+
    "\1\u01b6\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\11\11\1\4\11\1\1\1\11\1\1\2\11"+
    "\17\1\1\11\21\1\4\11\1\1\1\11\1\1\1\11"+
    "\12\1\2\11\12\0\4\1\1\0\10\1\2\0\14\1"+
    "\1\0\1\11\13\0\4\1\1\0\26\1\15\0\4\1"+
    "\1\0\6\1\1\0\3\1\1\0\2\1\1\0\4\1"+
    "\1\0\31\1\15\0\3\1\1\0\6\1\1\0\3\1"+
    "\1\0\2\1\7\0\4\1\1\0\30\1\13\0\1\11"+
    "\3\1\1\0\6\1\1\0\4\1\1\0\2\1\10\0"+
    "\4\1\1\0\27\1\7\0\10\1\1\0\5\1\1\0"+
    "\1\1\1\0\1\1\11\0\2\1\1\0\22\1\1\11"+
    "\4\0\5\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\11\0\2\1\1\0\17\1\3\0\4\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\10\0\2\1\1\0\14\1\10\0\1\1\1\0\2\1"+
    "\1\0\1\1\7\0\1\11\1\1\1\0\5\1\4\0"+
    "\1\1\1\0\1\1\4\0\1\1\1\0\3\1\3\0"+
    "\1\1\1\0\1\1\3\0\2\1\26\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[576];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	Map<String, List<String>> hierarchy = new HashMap<String, List<String>>();
	Map<String, List<String>> variables = new HashMap<String, List<String>>();
	List<String> locOrder = new LinkedList<String>();
	List<String> parameters = new LinkedList<String>();
	int par = 0;
	boolean end = true, endStruct = true;
	
	public COMNAMEHomonymy(){
		locOrder.add(location);
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	
	
	private void chechHomonymy(String var) throws JFlexException {
		String loc = location;
		boolean found = false;
		while (loc!=null && !found) {
			List<String> list = variables.get(loc);
			if(list != null) {
				if(list.contains(var) && !parameters.contains(var)) {
					setError(location,"Variable names should be unique. The variable " + var + " is already defined in this file.", yyline+1);
					found = true;
				}
			}
			if(!found) loc = findParent(loc);
		}
	}
	
	private String findParent(String currentLoc) {
		Iterator<Entry<String, List<String>>> it = hierarchy.entrySet().iterator();
		while (it.hasNext()) {
			Entry<String, List<String>> pairs = it.next();
			List<String> list = pairs.getValue();
			if(list.contains(currentLoc)) return pairs.getKey();
		}
		return null;
	}


	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMNAMEHomonymy(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     
	
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 29: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 30: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 31: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 32: break;
          case 5: 
            { 
            }
          case 33: break;
          case 6: 
            { if(endStruct) yybegin(NEW_LINE);
								 else yybegin(AVOID);
            }
          case 34: break;
          case 7: 
            { String text = yytext().toLowerCase().trim();
								 if(!location.toLowerCase().trim().equals("module") || !text.equals("procedure")) {
								 	location = location + " " + text; 
								 	locOrder.add(location); String oldLoc = locOrder.get(locOrder.size()-2);
								 	List<String> list = hierarchy.get(oldLoc);
								 	if(list==null) list = new LinkedList<String>();
								 	list.add(location);
								 	hierarchy.put(oldLoc, list);
								 }
								 parameters.clear();
								 yybegin(PARAMS);
            }
          case 35: break;
          case 8: 
            { end=true;
            }
          case 36: break;
          case 9: 
            { parameters.add(yytext());
            }
          case 37: break;
          case 10: 
            { if(end)yybegin(NEW_LINE);
            }
          case 38: break;
          case 11: 
            { end=false;
            }
          case 39: break;
          case 12: 
            { yybegin(NOTHING);
            }
          case 40: break;
          case 13: 
            { end=true; chechHomonymy(yytext());
								 List<String> list = variables.get(location);
								 if(list==null) list = new LinkedList<String>();
								 list.add(yytext());
								 variables.put(location, list);
								 yybegin(AVOID_DECL);
            }
          case 41: break;
          case 14: 
            { par++; end=true;
            }
          case 42: break;
          case 15: 
            { par--; end=true;
            }
          case 43: break;
          case 16: 
            { if(end) yybegin(NEW_LINE);
            }
          case 44: break;
          case 17: 
            { end=true; if(par==0) yybegin(DECLARATION);
            }
          case 45: break;
          case 18: 
            { if(endStruct) yybegin(NEW_LINE);
            }
          case 46: break;
          case 19: 
            { chechHomonymy(yytext());
								 List<String> list = variables.get(location);
								 if(list==null) list = new LinkedList<String>();
								 list.add(yytext());
								 variables.put(location, list);
								 endStruct = false;
								 yybegin(AVOID);
            }
          case 47: break;
          case 20: 
            { yybegin(DECL_PARAMS);
            }
          case 48: break;
          case 21: 
            { end = true;
            }
          case 49: break;
          case 22: 
            { end = false;
            }
          case 50: break;
          case 23: 
            { yybegin(DECLARATION);
            }
          case 51: break;
          case 24: 
            { yybegin(TYPE_DEC);
            }
          case 52: break;
          case 25: 
            { par=0; yybegin(DECL_PARAMS);
            }
          case 53: break;
          case 26: 
            { location = yytext(); yybegin(NAMING);
            }
          case 54: break;
          case 27: 
            { endStruct = true;
            }
          case 55: break;
          case 28: 
            { locOrder.remove(locOrder.size()-1);
            }
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
