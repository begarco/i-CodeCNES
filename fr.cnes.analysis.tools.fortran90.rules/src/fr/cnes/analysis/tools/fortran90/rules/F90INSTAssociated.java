/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.INST.Associated rule.*/
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90INSTAssociated.lex</tt>
 */
public class F90INSTAssociated extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int POINTER_DEC = 6;
  public static final int NULL_STATE = 8;
  public static final int ASS_STATE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\41\1\43\1\44\1\42\22\0\1\26\1\1\1\34"+
    "\2\0\1\30\1\0\1\33\1\31\1\32\6\0\12\23\1\35\2\0"+
    "\1\36\1\37\2\0\1\20\1\16\1\5\1\14\1\13\1\2\1\17"+
    "\1\27\1\24\2\27\1\22\1\21\1\4\1\10\1\11\1\27\1\12"+
    "\1\25\1\6\1\3\3\27\1\40\1\27\4\0\1\23\1\0\1\20"+
    "\1\16\1\5\1\14\1\13\1\2\1\17\1\27\1\24\2\27\1\22"+
    "\1\21\1\4\1\10\1\11\1\27\1\12\1\25\1\6\1\3\3\27"+
    "\1\40\1\27\12\0\1\43\252\0\2\7\115\0\1\15\u1ea8\0\1\43"+
    "\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\15\1\1\3\1\1\1\2\1\4"+
    "\1\3\1\5\2\6\1\1\1\7\1\1\35\0\1\6"+
    "\1\10\14\0\1\11\20\0\1\6\2\0\1\12\32\0"+
    "\1\1\62\0\1\13\21\0\1\1\2\0\2\14\7\0"+
    "\1\1\2\0\1\1\7\0\1\13\22\0\1\15\5\0"+
    "\2\16\24\0\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\336\0\u02e4\0\u02e4"+
    "\0\u02e4\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2"+
    "\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea"+
    "\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612"+
    "\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a"+
    "\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u02e4\0\u083d"+
    "\0\u0862\0\u03c2\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940"+
    "\0\u0965\0\u098a\0\u09af\0\u02e4\0\u09d4\0\u09f9\0\u0a1e\0\u0a43"+
    "\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b"+
    "\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u02e4"+
    "\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96"+
    "\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe"+
    "\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6"+
    "\0\u100b\0\u1030\0\u032e\0\u1055\0\u107a\0\u109f\0\u10c4\0\u10e9"+
    "\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211"+
    "\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339"+
    "\0\u135e\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461"+
    "\0\u1486\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u1564\0\u1589"+
    "\0\u15ae\0\u15d3\0\u15f8\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1"+
    "\0\u16d6\0\u16fb\0\u1720\0\u1745\0\u176a\0\u178f\0\u17b4\0\u17d9"+
    "\0\u17fe\0\u1823\0\u1848\0\u186d\0\u1892\0\u18b7\0\u18dc\0\u1901"+
    "\0\u1926\0\u194b\0\u1970\0\u1995\0\u19ba\0\u19df\0\u1a04\0\u178f"+
    "\0\u1a29\0\u1a4e\0\u02e4\0\u0456\0\u1a73\0\u1a98\0\u1abd\0\u1ae2"+
    "\0\u1b07\0\u1b2c\0\u1b51\0\u0456\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5"+
    "\0\u1c0a\0\u1c2f\0\u1c54\0\u1c79\0\u1c9e\0\u1cc3\0\u1bc0\0\u1ce8"+
    "\0\u1d0d\0\u1d32\0\u1d57\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb\0\u1e10"+
    "\0\u1e35\0\u1e5a\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee\0\u1f13\0\u1f38"+
    "\0\u1f5d\0\u02e4\0\u1f82\0\u1fa7\0\u1fcc\0\u1ff1\0\u2016\0\u02e4"+
    "\0\u0456\0\u203b\0\u2060\0\u2085\0\u20aa\0\u20cf\0\u20f4\0\u2119"+
    "\0\u213e\0\u2163\0\u2188\0\u21ad\0\u21d2\0\u21f7\0\u221c\0\u2241"+
    "\0\u2266\0\u228b\0\u22b0\0\u22d5\0\u22fa\0\u0784\0\u07ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\2\12\1\14\1\12"+
    "\1\15\3\12\1\16\2\12\1\17\1\20\1\12\1\21"+
    "\1\22\1\23\1\7\1\12\3\7\1\24\1\25\3\7"+
    "\1\12\1\7\3\26\1\27\1\30\37\27\2\31\2\32"+
    "\1\27\1\30\5\33\1\27\5\33\1\27\5\33\1\27"+
    "\2\33\1\27\1\33\10\27\1\33\2\31\2\32\1\27"+
    "\1\30\2\34\1\35\2\34\1\27\5\34\1\27\5\34"+
    "\1\27\2\34\1\27\1\34\6\27\1\36\1\27\1\34"+
    "\1\31\3\32\1\27\1\30\5\37\1\27\5\37\1\27"+
    "\5\37\1\27\2\37\1\27\1\37\10\27\1\37\1\31"+
    "\3\32\1\27\1\30\27\27\1\40\7\27\1\31\3\32"+
    "\21\0\1\41\25\0\1\42\1\43\3\44\1\45\1\44"+
    "\1\46\3\44\1\47\3\44\1\50\2\44\1\51\1\52"+
    "\1\53\1\44\6\0\1\54\1\0\1\44\3\0\1\53"+
    "\2\0\1\42\4\44\1\45\1\44\1\46\3\44\1\47"+
    "\3\44\1\50\2\44\1\51\1\52\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\2\0\1\42\1\55"+
    "\3\44\1\45\1\44\1\46\3\44\1\47\3\44\1\50"+
    "\2\44\1\51\1\52\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\4\0\1\56\14\0\1\41\25\0"+
    "\1\42\4\44\1\45\1\57\1\46\1\60\2\44\1\47"+
    "\3\44\1\50\2\44\1\51\1\52\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\3\0\1\61\15\0"+
    "\1\41\25\0\1\42\4\44\1\45\1\44\1\46\3\44"+
    "\1\62\3\44\1\50\2\44\1\51\1\63\1\53\1\44"+
    "\6\0\1\54\1\0\1\44\3\0\1\53\2\0\1\42"+
    "\4\44\1\45\1\64\1\46\3\44\1\47\3\44\1\50"+
    "\2\44\1\51\1\52\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\2\0\1\65\4\0\1\45\1\0"+
    "\1\66\3\0\1\47\3\0\1\67\2\0\1\45\1\47"+
    "\21\0\1\42\1\44\1\70\2\44\1\45\1\44\1\46"+
    "\3\44\1\47\3\44\1\50\2\44\1\51\1\52\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\1\42\1\71\3\44\1\45\1\44\1\46\3\44\1\47"+
    "\3\44\1\50\2\44\1\51\1\52\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\21\72\1\73\11\72"+
    "\1\27\11\72\21\74\1\75\12\74\1\27\10\74\47\0"+
    "\5\33\1\0\5\33\1\0\10\33\1\0\1\33\10\0"+
    "\1\33\6\0\5\34\1\0\5\34\1\0\10\34\1\0"+
    "\1\34\10\0\1\34\6\0\1\34\1\76\3\34\1\0"+
    "\5\34\1\0\10\34\1\0\1\34\10\0\1\34\43\0"+
    "\1\77\7\0\5\37\1\0\5\37\1\0\10\37\1\0"+
    "\1\37\1\100\7\0\1\37\6\0\5\101\1\0\5\101"+
    "\1\0\5\101\1\0\2\101\1\102\1\101\10\0\1\101"+
    "\3\0\1\102\10\0\1\103\36\0\1\44\1\104\3\44"+
    "\1\0\5\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\2\0\2\44\1\105\2\44"+
    "\1\0\5\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\2\0\5\44\1\0\5\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\4\0\1\106\42\0\5\44\1\0\2\44"+
    "\1\107\2\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\3\0\1\110\43\0\5\44"+
    "\1\0\1\111\4\44\1\0\10\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\2\0\2\44\1\112"+
    "\2\44\1\0\5\44\1\0\10\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\2\0\1\44\1\113"+
    "\3\44\1\0\5\44\1\0\10\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\26\0\1\53\7\0"+
    "\1\54\5\0\1\53\37\0\1\114\7\0\5\44\1\0"+
    "\5\44\1\0\4\44\1\115\3\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\6\0\1\116\40\0"+
    "\5\44\1\117\5\44\1\0\6\44\1\120\1\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\5\44\1\0\1\121\4\44\1\0\10\44\1\53\1\44"+
    "\6\0\1\54\1\0\1\44\3\0\1\53\16\0\1\122"+
    "\31\0\1\110\11\0\1\123\7\0\1\123\21\0\1\44"+
    "\1\113\3\44\1\0\5\44\1\123\7\44\1\124\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\5\44\1\0\4\44\1\125\1\0\10\44\1\53\1\44"+
    "\6\0\1\54\1\0\1\44\3\0\1\53\3\0\1\126"+
    "\53\0\1\127\42\0\1\130\36\0\4\44\1\131\1\0"+
    "\5\44\1\0\10\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\2\0\5\44\1\0\5\44\1\0"+
    "\1\132\7\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\33\72\1\27\21\72\1\133\22\72\1\27"+
    "\11\72\34\74\1\27\20\74\1\134\23\74\1\27\10\74"+
    "\2\0\5\34\1\0\5\34\1\0\4\34\1\135\3\34"+
    "\1\0\1\34\10\0\1\34\6\0\5\37\1\0\5\37"+
    "\1\0\5\37\1\0\2\37\1\0\1\37\10\0\1\37"+
    "\6\0\5\101\1\0\5\101\1\0\10\101\1\136\1\101"+
    "\1\137\1\0\1\140\5\0\1\101\3\0\1\136\14\0"+
    "\1\141\32\0\2\44\1\142\2\44\1\0\5\44\1\0"+
    "\10\44\1\53\1\44\6\0\1\54\1\0\1\44\3\0"+
    "\1\53\2\0\3\44\1\143\1\44\1\0\5\44\1\0"+
    "\10\44\1\53\1\44\6\0\1\54\1\0\1\44\3\0"+
    "\1\53\6\0\1\144\40\0\5\44\1\0\1\145\4\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\16\0\1\146\30\0\5\44\1\0\4\44"+
    "\1\147\1\0\10\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\2\0\4\44\1\150\1\0\5\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\2\0\5\44\1\0\5\44\1\0\1\151"+
    "\7\44\1\53\1\44\6\0\1\54\1\0\1\44\3\0"+
    "\1\53\2\0\5\44\1\0\5\44\1\0\4\44\1\152"+
    "\3\44\1\53\1\44\6\0\1\54\1\0\1\44\3\0"+
    "\1\53\13\0\1\153\35\0\1\154\42\0\2\44\1\155"+
    "\2\44\1\0\5\44\1\0\10\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\2\0\3\44\1\156"+
    "\1\44\1\0\5\44\1\0\1\44\1\157\6\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\12\0"+
    "\1\160\42\0\1\161\36\0\5\44\1\0\1\162\4\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\2\0\1\44\1\163\3\44\1\0\5\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\4\0\1\164\50\0\1\165\50\0\1\166"+
    "\32\0\5\44\1\0\3\44\1\167\1\44\1\0\10\44"+
    "\1\53\1\44\6\0\1\54\1\0\1\44\3\0\1\53"+
    "\2\0\5\44\1\0\2\44\1\170\2\44\1\0\10\44"+
    "\1\53\1\44\6\0\1\54\1\0\1\44\3\0\1\53"+
    "\14\72\1\171\16\72\1\27\11\72\14\74\1\172\17\74"+
    "\1\27\10\74\2\0\5\34\1\0\5\34\1\0\4\34"+
    "\1\173\3\34\1\0\1\34\10\0\1\34\32\0\1\136"+
    "\3\0\1\140\11\0\1\136\2\0\5\101\1\0\5\101"+
    "\1\0\5\101\1\0\2\101\1\0\1\101\10\0\1\101"+
    "\7\0\1\174\43\0\3\44\1\175\1\44\1\0\5\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\2\0\4\44\1\176\1\0\5\44\1\0"+
    "\10\44\1\53\1\44\6\0\1\54\1\0\1\44\3\0"+
    "\1\53\13\0\1\177\33\0\3\44\1\200\1\44\1\0"+
    "\5\44\1\0\1\44\1\201\6\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\12\0\1\202\34\0"+
    "\1\44\1\203\3\44\1\0\5\44\1\0\10\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\5\44\1\0\3\44\1\204\1\44\1\0\10\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\5\44\1\0\2\44\1\205\2\44\1\0\10\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\5\44\1\206\5\44\1\0\6\44\1\207\1\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\12\0"+
    "\1\210\40\0\1\211\40\0\4\44\1\212\1\0\5\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\2\0\5\44\1\0\3\44\1\213\1\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\2\0\5\44\1\0\2\44\1\214\2\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\10\0\1\215\41\0\1\216\41\0\3\44"+
    "\1\217\1\44\1\0\5\44\1\0\10\44\1\53\1\44"+
    "\6\0\1\54\1\0\1\44\3\0\1\53\2\0\5\44"+
    "\1\0\5\44\1\0\4\44\1\220\3\44\1\53\1\44"+
    "\6\0\1\54\1\0\1\44\3\0\1\53\5\0\1\221"+
    "\44\0\1\222\11\0\1\223\30\0\1\224\43\0\5\44"+
    "\1\0\2\44\1\225\2\44\1\0\10\44\1\53\1\44"+
    "\6\0\1\54\1\0\1\44\3\0\1\53\2\0\5\44"+
    "\1\0\1\226\4\44\1\0\10\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\3\72\1\227\27\72"+
    "\1\27\11\72\3\74\1\230\30\74\1\27\10\74\22\0"+
    "\1\231\24\0\4\44\1\232\1\0\5\44\1\0\10\44"+
    "\1\53\1\44\6\0\1\54\1\0\1\44\3\0\1\53"+
    "\2\0\5\44\1\233\5\44\1\0\6\44\1\234\1\44"+
    "\1\53\1\44\6\0\1\54\1\0\1\44\3\0\1\53"+
    "\12\0\1\235\34\0\5\44\1\0\3\44\1\236\1\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\2\0\5\44\1\0\2\44\1\237\2\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\10\0\1\240\36\0\5\44\1\0\5\44"+
    "\1\0\4\44\1\241\3\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\2\0\5\44\1\0\2\44"+
    "\1\242\2\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\2\0\5\44\1\0\1\243"+
    "\4\44\1\0\10\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\2\0\1\244\44\0\1\245\4\44"+
    "\1\0\5\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\2\0\1\246\55\0\1\247"+
    "\33\0\5\44\1\0\3\44\1\250\1\44\1\0\10\44"+
    "\1\53\1\44\6\0\1\54\1\0\1\44\3\0\1\53"+
    "\2\0\5\44\1\0\4\44\1\251\1\0\10\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\5\44\1\0\5\44\1\0\2\44\1\252\5\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\3\0"+
    "\1\253\50\0\1\254\14\0\1\254\22\0\5\44\1\254"+
    "\5\44\1\0\6\44\1\255\1\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\2\0\5\44\1\0"+
    "\3\44\1\256\1\44\1\0\10\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\6\0\1\257\51\0"+
    "\1\260\43\0\1\261\54\0\1\262\24\0\1\263\4\44"+
    "\1\0\5\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\2\0\1\44\1\264\3\44"+
    "\1\0\5\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\22\72\1\265\10\72\1\27"+
    "\11\72\22\74\1\266\11\74\1\27\10\74\13\0\1\267"+
    "\33\0\5\44\1\270\5\44\1\0\6\44\1\271\1\44"+
    "\1\53\1\44\6\0\1\54\1\0\1\44\3\0\1\53"+
    "\10\0\1\272\36\0\5\44\1\0\1\273\4\44\1\0"+
    "\10\44\1\53\1\44\6\0\1\54\1\0\1\44\3\0"+
    "\1\53\2\0\1\274\44\0\5\44\1\0\4\44\1\275"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\2\0\5\44\1\0\5\44\1\0\2\44"+
    "\1\276\5\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\3\0\1\277\43\0\5\44\1\0\3\44"+
    "\1\300\1\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\2\0\1\301\4\44\1\0"+
    "\5\44\1\0\10\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\2\0\1\44\1\302\3\44\1\0"+
    "\5\44\1\0\10\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\40\0\1\303\6\0\5\44\1\0"+
    "\5\44\1\0\10\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\304\3\0\1\53\20\0\1\305\36\0\1\306\34\0"+
    "\5\44\1\0\2\44\1\307\2\44\1\0\10\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\1\44\1\310\3\44\1\0\5\44\1\0\10\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\5\44\1\0\5\44\1\0\3\44\1\256\4\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\6\0"+
    "\1\311\56\0\1\312\26\0\5\44\1\0\5\44\1\0"+
    "\2\44\1\313\5\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\2\0\5\314\1\0\5\314\1\0"+
    "\10\314\1\53\1\314\6\0\1\54\1\0\1\314\3\0"+
    "\1\53\7\0\1\270\14\0\1\270\34\0\1\315\50\0"+
    "\1\316\37\0\1\317\33\0\5\44\1\0\5\44\1\0"+
    "\2\44\1\320\5\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\2\0\4\44\1\321\1\0\5\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\13\72\1\322\17\72\1\27\11\72\13\74"+
    "\1\323\20\74\1\27\10\74\11\0\1\324\14\0\1\267"+
    "\15\0\1\267\10\0\1\325\36\0\5\44\1\0\1\326"+
    "\4\44\1\0\10\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\4\0\1\327\42\0\2\44\1\256"+
    "\2\44\1\0\5\44\1\0\10\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\20\0\1\330\26\0"+
    "\1\44\1\331\3\44\1\0\5\44\1\0\10\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\2\0"+
    "\5\44\1\0\5\44\1\0\3\44\1\300\4\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\6\0"+
    "\1\332\40\0\5\44\1\0\5\44\1\0\2\44\1\333"+
    "\5\44\1\53\1\44\6\0\1\54\1\0\1\44\3\0"+
    "\1\53\2\0\4\44\1\334\1\0\5\44\1\0\10\44"+
    "\1\53\1\44\6\0\1\54\1\0\1\44\3\0\1\53"+
    "\5\0\1\335\65\0\1\306\6\0\1\336\6\0\1\306"+
    "\2\0\5\44\1\0\5\44\1\0\10\44\1\337\1\44"+
    "\5\0\1\336\1\54\1\0\1\44\3\0\1\337\2\0"+
    "\5\44\1\0\2\44\1\220\2\44\1\0\10\44\1\53"+
    "\1\44\6\0\1\54\1\0\1\44\3\0\1\53\7\0"+
    "\1\340\14\0\1\340\26\0\1\341\40\0\4\44\1\342"+
    "\1\0\5\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\3\0\1\343\62\0\1\317"+
    "\25\0\5\27\1\0\5\27\1\0\10\27\1\0\1\27"+
    "\10\0\1\27\6\0\3\44\1\220\1\44\1\0\5\44"+
    "\1\0\10\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\2\0\5\44\1\340\5\44\1\0\6\44"+
    "\1\344\1\44\1\53\1\44\6\0\1\54\1\0\1\44"+
    "\3\0\1\53\11\72\1\345\14\72\1\322\4\72\1\27"+
    "\10\72\1\322\11\74\1\346\14\74\1\323\5\74\1\27"+
    "\7\74\1\323\12\0\1\347\36\0\1\317\42\0\2\44"+
    "\1\300\2\44\1\0\5\44\1\0\10\44\1\53\1\44"+
    "\6\0\1\54\1\0\1\44\3\0\1\53\5\0\1\262"+
    "\41\0\5\44\1\0\2\44\1\241\2\44\1\0\10\44"+
    "\1\53\1\44\6\0\1\54\1\0\1\44\3\0\1\53"+
    "\7\0\1\350\14\0\1\350\22\0\3\44\1\241\1\44"+
    "\1\0\5\44\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\2\0\5\44\1\350\5\44"+
    "\1\0\6\44\1\351\1\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\13\0\1\327\66\0\1\352"+
    "\35\0\1\337\6\0\1\336\1\54\5\0\1\337\4\0"+
    "\1\335\53\0\1\353\33\0\5\44\1\0\3\44\1\354"+
    "\1\44\1\0\10\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\12\0\1\262\34\0\2\44\1\220"+
    "\2\44\1\0\5\44\1\0\10\44\1\53\1\44\6\0"+
    "\1\54\1\0\1\44\3\0\1\53\12\72\1\355\20\72"+
    "\1\27\11\72\12\74\1\356\21\74\1\27\10\74\10\0"+
    "\1\357\40\0\1\262\42\0\2\44\1\241\2\44\1\0"+
    "\5\44\1\0\10\44\1\53\1\44\6\0\1\54\1\0"+
    "\1\44\3\0\1\53\14\0\1\360\32\0\5\44\1\0"+
    "\4\44\1\361\1\0\10\44\1\53\1\44\6\0\1\54"+
    "\1\0\1\44\3\0\1\53\10\72\1\362\22\72\1\27"+
    "\11\72\10\74\1\363\23\74\1\27\10\74\5\0\1\364"+
    "\37\0\5\72\1\365\25\72\1\27\11\72\5\74\1\366"+
    "\26\74\1\27\10\74\13\0\1\367\31\0\13\72\1\370"+
    "\17\72\1\27\11\72\13\74\1\371\20\74\1\27\10\74"+
    "\14\0\1\372\30\0\14\72\1\373\16\72\1\27\11\72"+
    "\14\74\1\374\17\74\1\27\10\74\3\0\1\375\41\0"+
    "\3\72\1\376\27\72\1\27\11\72\3\74\1\377\30\74"+
    "\1\27\10\74\12\0\1\u0100\32\0\12\72\1\u0101\20\72"+
    "\1\27\11\72\12\74\1\u0102\21\74\1\27\10\74\13\0"+
    "\1\u0103\31\0\13\72\1\u0104\17\72\1\27\11\72\13\74"+
    "\1\u0105\20\74\1\27\10\74\2\27\5\0\1\27\5\0"+
    "\1\27\10\0\1\27\1\0\10\27\1\0\4\27\2\u0106"+
    "\5\72\1\u0106\5\72\1\u0106\10\72\1\u0106\1\72\3\u0106"+
    "\1\27\4\u0106\1\72\4\u0106\2\u0107\5\74\1\u0107\5\74"+
    "\1\u0107\10\74\1\u0107\1\74\4\u0107\1\27\3\u0107\1\74"+
    "\4\u0107";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8991];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\20\1\4\11\6\1\35\0\1\1\1\11\14\0"+
    "\1\11\20\0\1\1\2\0\1\11\32\0\1\1\62\0"+
    "\1\1\21\0\1\1\2\0\1\11\1\1\7\0\1\1"+
    "\2\0\1\1\7\0\1\1\22\0\1\11\5\0\1\11"+
    "\1\1\24\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/** Variable used to store violation location and variable involved. **/
	String location = "MAIN PROGRAM";
	/** Variable used to store file value and function values associated. **/
	/** List of pointer name and associated boolean, which is true when pointer is assigned to a target. **/
	Map<String, Boolean> pointers = new HashMap<String, Boolean>();
	/** String to contain pointer's name. **/
	String pointerVar = "";
	
	public F90INSTAssociated() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90INSTAssociated(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	 
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 15: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 16: break;
          case 3: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 17: break;
          case 4: 
            { yybegin(YYINITIAL);
            }
          case 18: break;
          case 5: 
            { location = location + " " + yytext(); 
							 yybegin(COMMENT);
            }
          case 19: break;
          case 6: 
            { pointerVar = yytext();
							 pointers.put(yytext(), false);
            }
          case 20: break;
          case 7: 
            { pointers.put(yytext(), true);
            }
          case 21: break;
          case 8: 
            { pointers.put(pointerVar, true);
            }
          case 22: break;
          case 9: 
            { pointers.put(yytext().replace(" ","").split("=")[0],true);
            }
          case 23: break;
          case 10: 
            { String var = yytext().replaceAll("\\(", "").replaceAll("\\)", "").trim();
							 Boolean value = pointers.get(var);
							 if(value!=null && !value) {
								setError(location,"The pointer "+yytext()+" is not set to null before the use of the instruction ASSOCIATED.", yyline+1); 
							 }
            }
          case 24: break;
          case 11: 
            { location = yytext(); 
							 yybegin(NAMING);
            }
          case 25: break;
          case 12: 
            { yybegin(NULL_STATE);
            }
          case 26: break;
          case 13: 
            { yybegin(POINTER_DEC);
            }
          case 27: break;
          case 14: 
            { yybegin(ASS_STATE);
            }
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
