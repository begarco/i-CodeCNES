/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.DATA.NotUsed rule. 		*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMDATANotUsed.lex</tt>
 */
public class COMDATANotUsed extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int DECL_PARAMS = 10;
  public static final int DECLARATION = 12;
  public static final int DECL_VAR = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\62\1\63\1\63\1\63\22\0\1\50\1\1\1\57\4\0"+
    "\1\56\1\53\1\65\2\0\1\61\3\0\12\55\1\64\2\0\1\60"+
    "\3\0\1\35\1\31\1\5\1\23\1\22\1\2\1\34\1\44\1\7"+
    "\2\54\1\42\1\36\1\4\1\10\1\20\1\54\1\21\1\30\1\6"+
    "\1\3\2\54\1\46\1\51\1\54\4\0\1\55\1\0\1\40\1\33"+
    "\1\14\1\27\1\26\1\11\1\37\1\45\1\16\2\54\1\43\1\41"+
    "\1\13\1\17\1\24\1\54\1\25\1\32\1\15\1\12\2\54\1\47"+
    "\1\52\1\54\12\0\1\63\u1fa2\0\1\63\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\10\1\1\3\1\4\1\5\1\6"+
    "\25\7\2\1\10\7\3\5\1\10\1\11\1\5\1\12"+
    "\1\13\10\0\27\7\2\0\10\7\1\14\10\0\37\7"+
    "\12\0\3\7\1\15\10\7\1\15\24\7\12\0\13\7"+
    "\1\0\23\7\10\0\1\16\21\7\1\16\11\7\1\17"+
    "\6\0\4\7\1\0\1\7\1\0\10\7\2\0\1\2"+
    "\2\0\4\7\16\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u01b0\0\u01b0\0\u01b0\0\u0396\0\u03cc\0\u0402"+
    "\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762"+
    "\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u083a\0\u0870\0\u0a56"+
    "\0\u0a8c\0\u01b0\0\u0ac2\0\u01b0\0\u01b0\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u083a\0\u0870\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u01b0\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52"+
    "\0\u1d88\0\u1dbe\0\u1df4\0\u0402\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c"+
    "\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec"+
    "\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c"+
    "\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c"+
    "\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc"+
    "\0\u2e32\0\u2e68\0\u01b0\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76"+
    "\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126"+
    "\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u0402\0\u3234\0\u326a\0\u32a0"+
    "\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u0402\0\u341a"+
    "\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca"+
    "\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a"+
    "\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u0402\0\u38f4"+
    "\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4"+
    "\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54"+
    "\0\u3c8a\0\u3cc0\0\u3cf6\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\6\11\1\14\6\11\1\15\3\11"+
    "\1\16\3\11\1\17\1\11\1\20\3\11\1\21\2\11"+
    "\1\22\20\11\1\23\1\24\2\11\1\25\1\12\60\25"+
    "\1\23\1\24\3\25\1\12\46\26\1\25\2\26\1\25"+
    "\1\26\5\25\1\23\1\24\2\25\1\11\1\12\1\27"+
    "\2\30\1\31\1\32\1\33\1\30\1\34\2\30\1\35"+
    "\1\36\1\37\1\30\1\40\1\41\1\30\1\42\1\43"+
    "\1\44\1\30\1\45\1\46\1\30\1\47\3\30\1\50"+
    "\2\30\1\51\1\52\1\53\4\30\1\11\2\30\1\11"+
    "\1\30\1\11\1\54\1\55\2\11\1\25\1\24\2\11"+
    "\1\25\1\12\1\56\2\30\1\31\1\32\1\33\1\30"+
    "\1\57\2\30\1\35\1\36\1\37\1\30\1\60\1\41"+
    "\1\30\1\42\1\61\1\44\1\30\1\45\1\62\1\30"+
    "\1\63\3\30\1\64\2\30\1\65\1\52\1\53\4\30"+
    "\1\25\2\30\1\25\1\30\1\25\1\66\1\67\2\25"+
    "\1\23\1\24\3\25\1\12\46\30\1\25\2\30\1\25"+
    "\1\30\5\25\1\23\1\24\1\70\2\25\1\12\46\71"+
    "\1\25\2\71\1\72\1\71\1\25\1\66\1\67\1\73"+
    "\1\25\1\23\1\24\3\25\1\12\46\30\1\25\2\30"+
    "\1\74\1\30\5\25\1\23\1\24\1\25\1\75\71\0"+
    "\1\76\74\0\1\77\74\0\1\100\71\0\1\101\43\0"+
    "\1\102\74\0\1\103\63\0\1\104\74\0\1\105\50\0"+
    "\46\26\1\0\2\26\1\0\2\26\12\0\1\30\1\106"+
    "\44\30\1\0\2\30\1\0\2\30\12\0\46\30\1\0"+
    "\2\30\1\0\2\30\12\0\6\30\1\107\33\30\1\110"+
    "\3\30\1\0\2\30\1\0\2\30\12\0\46\30\1\0"+
    "\1\111\1\30\1\0\2\30\12\0\2\30\1\112\31\30"+
    "\1\113\11\30\1\0\2\30\1\0\2\30\12\0\10\30"+
    "\1\114\35\30\1\0\2\30\1\0\2\30\12\0\15\30"+
    "\1\115\25\30\1\116\2\30\1\0\2\30\1\0\2\30"+
    "\12\0\46\30\1\0\1\30\1\117\1\0\2\30\12\0"+
    "\11\30\1\120\34\30\1\0\2\30\1\0\2\30\12\0"+
    "\17\30\1\121\26\30\1\0\2\30\1\0\2\30\12\0"+
    "\20\30\1\122\25\30\1\0\2\30\1\0\2\30\12\0"+
    "\6\30\1\123\37\30\1\0\2\30\1\0\2\30\12\0"+
    "\23\30\1\124\22\30\1\0\2\30\1\0\2\30\12\0"+
    "\24\30\1\125\21\30\1\0\2\30\1\0\2\30\12\0"+
    "\15\30\1\126\30\30\1\0\2\30\1\0\2\30\12\0"+
    "\1\30\1\127\44\30\1\0\2\30\1\0\2\30\12\0"+
    "\10\30\1\130\35\30\1\0\2\30\1\0\2\30\12\0"+
    "\6\30\1\131\37\30\1\0\2\30\1\0\2\30\12\0"+
    "\15\30\1\132\30\30\1\0\2\30\1\0\2\30\12\0"+
    "\6\30\1\133\37\30\1\0\2\30\1\0\2\30\12\0"+
    "\15\30\1\134\30\30\1\0\2\30\1\0\2\30\10\0"+
    "\56\135\1\25\7\135\57\136\1\25\6\136\2\0\1\30"+
    "\1\137\44\30\1\0\2\30\1\0\2\30\12\0\10\30"+
    "\1\140\35\30\1\0\2\30\1\0\2\30\12\0\17\30"+
    "\1\141\26\30\1\0\2\30\1\0\2\30\12\0\23\30"+
    "\1\142\22\30\1\0\2\30\1\0\2\30\12\0\1\30"+
    "\1\143\44\30\1\0\2\30\1\0\2\30\12\0\10\30"+
    "\1\144\35\30\1\0\2\30\1\0\2\30\12\0\6\30"+
    "\1\145\37\30\1\0\2\30\1\0\2\30\12\0\15\30"+
    "\1\146\30\30\1\0\2\30\1\0\2\30\74\0\1\147"+
    "\3\0\46\71\1\0\2\71\1\0\2\71\10\0\56\73"+
    "\2\0\1\73\2\0\3\73\4\0\1\150\74\0\1\151"+
    "\62\0\1\152\74\0\1\153\77\0\1\154\67\0\1\155"+
    "\55\0\1\156\71\0\1\157\40\0\2\30\1\160\43\30"+
    "\1\0\2\30\1\0\2\30\12\0\34\30\1\161\11\30"+
    "\1\0\2\30\1\0\2\30\12\0\33\30\1\162\12\30"+
    "\1\0\2\30\1\0\2\30\12\0\16\30\1\163\27\30"+
    "\1\0\2\30\1\0\2\30\12\0\4\30\1\164\41\30"+
    "\1\0\2\30\1\0\2\30\12\0\16\30\1\165\27\30"+
    "\1\0\2\30\1\0\2\30\12\0\11\30\1\166\34\30"+
    "\1\0\2\30\1\0\2\30\12\0\37\30\1\167\6\30"+
    "\1\0\2\30\1\0\2\30\12\0\36\30\1\170\7\30"+
    "\1\0\2\30\1\0\2\30\12\0\22\30\1\171\23\30"+
    "\1\0\2\30\1\0\2\30\12\0\13\30\1\172\32\30"+
    "\1\0\2\30\1\0\2\30\12\0\6\30\1\173\37\30"+
    "\1\0\2\30\1\0\2\30\12\0\33\30\1\174\12\30"+
    "\1\0\2\30\1\0\2\30\12\0\1\30\1\175\44\30"+
    "\1\0\2\30\1\0\2\30\12\0\15\30\1\176\30\30"+
    "\1\0\2\30\1\0\2\30\12\0\36\30\1\177\7\30"+
    "\1\0\2\30\1\0\2\30\12\0\10\30\1\200\35\30"+
    "\1\0\2\30\1\0\2\30\12\0\27\30\1\201\16\30"+
    "\1\0\2\30\1\0\2\30\12\0\31\30\1\202\14\30"+
    "\1\0\2\30\1\0\2\30\12\0\21\30\1\203\24\30"+
    "\1\0\2\30\1\0\2\30\12\0\25\30\1\204\20\30"+
    "\1\0\2\30\1\0\2\30\12\0\32\30\1\205\13\30"+
    "\1\0\2\30\1\0\2\30\12\0\35\30\1\206\10\30"+
    "\1\0\2\30\1\0\2\30\12\0\2\30\1\207\43\30"+
    "\1\0\2\30\1\0\2\30\12\0\11\30\1\210\34\30"+
    "\1\0\2\30\1\0\2\30\12\0\6\30\1\211\37\30"+
    "\1\0\2\30\1\0\2\30\12\0\15\30\1\212\30\30"+
    "\1\0\2\30\1\0\2\30\12\0\27\30\1\213\16\30"+
    "\1\0\2\30\1\0\2\30\12\0\31\30\1\214\14\30"+
    "\1\0\2\30\1\0\2\30\12\0\21\30\1\215\24\30"+
    "\1\0\2\30\1\0\2\30\12\0\25\30\1\216\20\30"+
    "\1\0\2\30\1\0\2\30\15\0\1\217\74\0\1\220"+
    "\56\0\1\221\26\0\1\222\45\0\1\223\22\0\1\224"+
    "\47\0\1\225\71\0\1\226\43\0\1\227\74\0\1\230"+
    "\55\0\3\30\1\231\42\30\1\0\2\30\1\0\2\30"+
    "\12\0\16\30\1\232\27\30\1\0\2\30\1\0\2\30"+
    "\12\0\17\30\1\233\26\30\1\0\2\30\1\0\2\30"+
    "\12\0\20\30\1\234\25\30\1\0\2\30\1\0\2\30"+
    "\12\0\20\30\1\235\25\30\1\0\2\30\1\0\2\30"+
    "\12\0\40\30\1\236\5\30\1\0\2\30\1\0\2\30"+
    "\12\0\12\30\1\237\33\30\1\0\2\30\1\0\2\30"+
    "\12\0\22\30\1\240\23\30\1\0\2\30\1\0\2\30"+
    "\12\0\23\30\1\241\22\30\1\0\2\30\1\0\2\30"+
    "\12\0\24\30\1\234\21\30\1\0\2\30\1\0\2\30"+
    "\12\0\24\30\1\242\21\30\1\0\2\30\1\0\2\30"+
    "\12\0\3\30\1\243\26\30\1\244\13\30\1\0\2\30"+
    "\1\0\2\30\12\0\40\30\1\245\5\30\1\0\2\30"+
    "\1\0\2\30\12\0\27\30\1\246\16\30\1\0\2\30"+
    "\1\0\2\30\12\0\12\30\1\247\22\30\1\250\10\30"+
    "\1\0\2\30\1\0\2\30\12\0\41\30\1\234\4\30"+
    "\1\0\2\30\1\0\2\30\12\0\31\30\1\251\14\30"+
    "\1\0\2\30\1\0\2\30\12\0\17\30\1\252\26\30"+
    "\1\0\2\30\1\0\2\30\12\0\23\30\1\253\22\30"+
    "\1\0\2\30\1\0\2\30\12\0\1\30\1\254\44\30"+
    "\1\0\2\30\1\0\2\30\12\0\10\30\1\255\35\30"+
    "\1\0\2\30\1\0\2\30\12\0\5\30\1\256\40\30"+
    "\1\0\2\30\1\0\2\30\12\0\14\30\1\257\31\30"+
    "\1\0\2\30\1\0\2\30\12\0\3\30\1\260\42\30"+
    "\1\0\2\30\1\0\2\30\12\0\12\30\1\261\33\30"+
    "\1\0\2\30\1\0\2\30\12\0\3\30\1\262\26\30"+
    "\1\263\13\30\1\0\2\30\1\0\2\30\12\0\12\30"+
    "\1\264\22\30\1\265\10\30\1\0\2\30\1\0\2\30"+
    "\12\0\17\30\1\266\26\30\1\0\2\30\1\0\2\30"+
    "\12\0\23\30\1\267\22\30\1\0\2\30\1\0\2\30"+
    "\12\0\1\30\1\270\44\30\1\0\2\30\1\0\2\30"+
    "\12\0\10\30\1\271\35\30\1\0\2\30\1\0\2\30"+
    "\16\0\1\272\74\0\1\273\72\0\1\274\64\0\1\275"+
    "\72\0\1\276\64\0\1\277\50\0\1\300\74\0\1\301"+
    "\110\0\1\302\66\0\1\303\24\0\4\30\1\304\41\30"+
    "\1\0\2\30\1\0\2\30\12\0\40\30\1\305\5\30"+
    "\1\0\2\30\1\0\2\30\12\0\33\30\1\306\12\30"+
    "\1\0\2\30\1\0\2\30\12\0\32\30\1\307\13\30"+
    "\1\0\2\30\1\0\2\30\12\0\5\30\1\310\40\30"+
    "\1\0\2\30\1\0\2\30\12\0\13\30\1\311\32\30"+
    "\1\0\2\30\1\0\2\30\12\0\41\30\1\312\4\30"+
    "\1\0\2\30\1\0\2\30\12\0\36\30\1\313\7\30"+
    "\1\0\2\30\1\0\2\30\12\0\35\30\1\314\10\30"+
    "\1\0\2\30\1\0\2\30\12\0\20\30\1\315\25\30"+
    "\1\0\2\30\1\0\2\30\12\0\17\30\1\316\26\30"+
    "\1\0\2\30\1\0\2\30\12\0\46\30\1\317\2\30"+
    "\1\25\2\30\12\0\40\30\1\320\5\30\1\0\2\30"+
    "\1\0\2\30\12\0\24\30\1\321\21\30\1\0\2\30"+
    "\1\0\2\30\12\0\23\30\1\322\22\30\1\0\2\30"+
    "\1\0\2\30\12\0\41\30\1\323\4\30\1\0\2\30"+
    "\1\0\2\30\12\0\6\30\1\324\37\30\1\0\2\30"+
    "\1\0\2\30\12\0\15\30\1\325\30\30\1\0\2\30"+
    "\1\0\2\30\12\0\40\30\1\326\5\30\1\0\2\30"+
    "\1\0\2\30\12\0\41\30\1\327\4\30\1\0\2\30"+
    "\1\0\2\30\12\0\3\30\1\330\42\30\1\0\2\30"+
    "\1\0\2\30\12\0\12\30\1\125\33\30\1\0\2\30"+
    "\1\0\2\30\12\0\4\30\1\331\41\30\1\0\2\30"+
    "\1\0\2\30\12\0\13\30\1\332\32\30\1\0\2\30"+
    "\1\0\2\30\12\0\20\30\1\333\25\30\1\0\2\30"+
    "\1\0\2\30\12\0\17\30\1\334\26\30\1\0\2\30"+
    "\1\0\2\30\12\0\24\30\1\335\21\30\1\0\2\30"+
    "\1\0\2\30\12\0\23\30\1\336\22\30\1\0\2\30"+
    "\1\0\2\30\12\0\6\30\1\337\37\30\1\0\2\30"+
    "\1\0\2\30\12\0\15\30\1\340\30\30\1\0\2\30"+
    "\1\0\2\30\12\0\40\30\1\341\5\30\1\0\2\30"+
    "\1\0\2\30\12\0\41\30\1\342\4\30\1\0\2\30"+
    "\1\0\2\30\17\0\1\343\74\0\1\344\72\0\1\345"+
    "\77\0\1\346\57\0\1\347\76\0\1\350\30\0\1\351"+
    "\74\0\1\352\75\0\1\353\71\0\1\353\41\0\5\30"+
    "\1\354\40\30\1\0\2\30\1\0\2\30\12\0\20\30"+
    "\1\355\25\30\1\0\2\30\1\0\2\30\12\0\3\30"+
    "\1\356\42\30\1\0\2\30\1\0\2\30\12\0\20\30"+
    "\1\357\25\30\1\0\2\30\1\0\2\30\12\0\3\30"+
    "\1\360\42\30\1\0\2\30\1\0\2\30\12\0\14\30"+
    "\1\361\31\30\1\0\2\30\1\0\2\30\12\0\24\30"+
    "\1\362\21\30\1\0\2\30\1\0\2\30\12\0\12\30"+
    "\1\363\33\30\1\0\2\30\1\0\2\30\12\0\24\30"+
    "\1\364\21\30\1\0\2\30\1\0\2\30\12\0\21\30"+
    "\1\365\24\30\1\0\2\30\1\0\2\30\12\0\33\30"+
    "\1\366\12\30\1\0\2\30\1\0\2\30\60\0\1\317"+
    "\2\0\1\25\14\0\20\30\1\367\25\30\1\0\2\30"+
    "\1\0\2\30\12\0\25\30\1\370\20\30\1\0\2\30"+
    "\1\0\2\30\12\0\36\30\1\371\7\30\1\0\2\30"+
    "\1\0\2\30\12\0\24\30\1\372\21\30\1\0\2\30"+
    "\1\0\2\30\12\0\1\30\1\373\44\30\1\0\2\30"+
    "\1\0\2\30\12\0\10\30\1\374\35\30\1\0\2\30"+
    "\1\0\2\30\12\0\20\30\1\375\25\30\1\0\2\30"+
    "\1\0\2\30\12\0\24\30\1\375\21\30\1\0\2\30"+
    "\1\0\2\30\12\0\33\30\1\376\12\30\1\0\2\30"+
    "\1\0\2\30\12\0\5\30\1\377\40\30\1\0\2\30"+
    "\1\0\2\30\12\0\14\30\1\u0100\31\30\1\0\2\30"+
    "\1\0\2\30\12\0\21\30\1\u0101\24\30\1\0\2\30"+
    "\1\0\2\30\12\0\33\30\1\u0102\12\30\1\0\2\30"+
    "\1\0\2\30\12\0\25\30\1\u0103\20\30\1\0\2\30"+
    "\1\0\2\30\12\0\36\30\1\u0104\7\30\1\0\2\30"+
    "\1\0\2\30\12\0\1\30\1\u0105\44\30\1\0\2\30"+
    "\1\0\2\30\12\0\10\30\1\u0106\35\30\1\0\2\30"+
    "\1\0\2\30\12\0\20\30\1\u0107\25\30\1\0\2\30"+
    "\1\0\2\30\12\0\24\30\1\u0107\21\30\1\0\2\30"+
    "\1\0\2\30\20\0\1\u0108\74\0\1\u0109\51\0\1\u010a"+
    "\120\0\1\353\41\0\1\u010b\114\0\1\353\32\0\1\u010c"+
    "\74\0\1\u010d\52\0\6\30\1\u010e\37\30\1\0\2\30"+
    "\1\0\2\30\12\0\44\30\1\234\1\30\1\0\2\30"+
    "\1\0\2\30\12\0\4\30\1\307\41\30\1\0\2\30"+
    "\1\0\2\30\12\0\17\30\1\234\26\30\1\0\2\30"+
    "\1\0\2\30\12\0\5\30\1\u010f\40\30\1\0\2\30"+
    "\1\0\2\30\12\0\15\30\1\u0110\30\30\1\0\2\30"+
    "\1\0\2\30\12\0\45\30\1\234\1\0\2\30\1\0"+
    "\2\30\12\0\13\30\1\314\32\30\1\0\2\30\1\0"+
    "\2\30\12\0\23\30\1\234\22\30\1\0\2\30\1\0"+
    "\2\30\12\0\1\30\1\u0111\44\30\1\0\2\30\1\0"+
    "\2\30\12\0\34\30\1\375\11\30\1\0\2\30\1\0"+
    "\2\30\12\0\46\30\1\u0112\2\30\1\0\2\30\12\0"+
    "\10\30\1\u0113\35\30\1\0\2\30\1\0\2\30\12\0"+
    "\37\30\1\375\6\30\1\0\2\30\1\0\2\30\12\0"+
    "\46\30\1\u0114\2\30\1\0\2\30\12\0\4\30\1\u0115"+
    "\41\30\1\0\2\30\1\0\2\30\12\0\13\30\1\u0116"+
    "\32\30\1\0\2\30\1\0\2\30\12\0\40\30\1\234"+
    "\5\30\1\0\2\30\1\0\2\30\12\0\6\30\1\u0117"+
    "\37\30\1\0\2\30\1\0\2\30\12\0\15\30\1\u0118"+
    "\30\30\1\0\2\30\1\0\2\30\12\0\1\30\1\u0119"+
    "\44\30\1\0\2\30\1\0\2\30\12\0\34\30\1\u0107"+
    "\11\30\1\0\2\30\1\0\2\30\12\0\10\30\1\u011a"+
    "\35\30\1\0\2\30\1\0\2\30\12\0\37\30\1\u0107"+
    "\6\30\1\0\2\30\1\0\2\30\12\0\4\30\1\u011b"+
    "\41\30\1\0\2\30\1\0\2\30\12\0\13\30\1\u011c"+
    "\32\30\1\0\2\30\1\0\2\30\14\0\1\353\74\0"+
    "\1\353\73\0\1\302\71\0\1\303\47\0\1\u011d\74\0"+
    "\1\u011e\51\0\2\30\1\375\43\30\1\0\2\30\1\0"+
    "\2\30\12\0\4\30\1\u011f\41\30\1\0\2\30\1\0"+
    "\2\30\12\0\11\30\1\375\34\30\1\0\2\30\1\0"+
    "\2\30\12\0\17\30\1\326\26\30\1\0\2\30\1\0"+
    "\2\30\30\0\1\u0120\27\0\1\u0112\17\0\23\30\1\327"+
    "\22\30\1\0\2\30\1\0\2\30\34\0\1\u0121\23\0"+
    "\1\u0114\17\0\5\30\1\u0122\40\30\1\0\2\30\1\0"+
    "\2\30\12\0\14\30\1\u0123\31\30\1\0\2\30\1\0"+
    "\2\30\12\0\2\30\1\u0107\43\30\1\0\2\30\1\0"+
    "\2\30\12\0\11\30\1\u0107\34\30\1\0\2\30\1\0"+
    "\2\30\12\0\17\30\1\341\26\30\1\0\2\30\1\0"+
    "\2\30\12\0\23\30\1\342\22\30\1\0\2\30\1\0"+
    "\2\30\12\0\5\30\1\u0124\40\30\1\0\2\30\1\0"+
    "\2\30\12\0\14\30\1\u0125\31\30\1\0\2\30\1\0"+
    "\2\30\14\0\1\302\74\0\1\303\73\0\1\u0126\71\0"+
    "\1\u0127\42\0\2\30\1\326\43\30\1\0\2\30\1\0"+
    "\2\30\12\0\11\30\1\327\34\30\1\0\2\30\1\0"+
    "\2\30\12\0\2\30\1\341\43\30\1\0\2\30\1\0"+
    "\2\30\12\0\11\30\1\342\34\30\1\0\2\30\1\0"+
    "\2\30\32\0\1\u0128\71\0\1\u0129\44\0\1\u012a\74\0"+
    "\1\u012b\60\0\1\u012c\74\0\1\u012d\77\0\1\u012e\67\0"+
    "\1\u012f\42\0\1\u0130\74\0\1\u0131\57\0\1\u0132\74\0"+
    "\1\u0133\52\0\1\u0134\74\0\1\u0134\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\11\10\1\3\11\44\1\1\11\1\1\2\11"+
    "\10\0\27\1\2\0\10\1\1\11\10\0\37\1\12\0"+
    "\41\1\12\0\13\1\1\0\23\1\10\0\1\11\34\1"+
    "\6\0\4\1\1\0\1\1\1\0\10\1\2\0\1\1"+
    "\2\0\4\1\16\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	List<String> variables = new LinkedList<String>();
	List<String> locations = new LinkedList<String>();
	List<Integer> errors   = new LinkedList<Integer>();
	int par = 0;
	
	public COMDATANotUsed(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	
	
	private void checkVar(String word) {
		int index = variables.lastIndexOf(word.toLowerCase());
		if (index != -1) {
			errors.remove(index);
			locations.remove(index);
			variables.remove(index);
		} 
	}
	
	private void printError() throws JFlexException {
		for (int i = 0; i < locations.size(); i++) {
			setError(locations.get(i),"The variable " + variables.get(i) + " is declared and not used.", errors.get(i));
		}
	}

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMDATANotUsed(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	printError();
	
    
	
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 16: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 17: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 18: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 19: break;
          case 5: 
            { 
            }
          case 20: break;
          case 6: 
            { location = location + " " + yytext(); yybegin(COMMENT);
            }
          case 21: break;
          case 7: 
            { checkVar(yytext());
            }
          case 22: break;
          case 8: 
            { variables.add(yytext().toLowerCase());
								 locations.add(location);
								 errors.add(yyline+1);
            }
          case 23: break;
          case 9: 
            { par=1; yybegin(DECL_VAR);
            }
          case 24: break;
          case 10: 
            { par++;
            }
          case 25: break;
          case 11: 
            { par--; if(par==0) yybegin(DECLARATION);
            }
          case 26: break;
          case 12: 
            { yybegin(DECLARATION);
            }
          case 27: break;
          case 13: 
            { yybegin(DECL_PARAMS);
            }
          case 28: break;
          case 14: 
            { location = yytext(); yybegin(NAMING);
            }
          case 29: break;
          case 15: 
            { location=yytext(); yybegin(NAMING);
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
