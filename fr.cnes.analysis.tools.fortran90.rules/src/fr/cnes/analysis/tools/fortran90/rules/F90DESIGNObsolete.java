/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.ARCH.Obsolete rule	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90DESIGNObsolete.lex</tt>
 */
public class F90DESIGNObsolete extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int HOLL = 10;
  public static final int ASSIGN = 12;
  public static final int GOTO = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\36\1\40\1\41\1\26\1\41\22\0\1\36\1\1\1\31"+
    "\4\0\1\30\1\32\1\42\1\37\5\0\1\34\11\33\7\0\1\20"+
    "\1\16\1\5\1\14\1\13\1\2\1\17\1\35\1\24\2\27\1\22"+
    "\1\21\1\4\1\10\1\11\1\27\1\12\1\25\1\6\1\3\5\27"+
    "\4\0\1\23\1\0\1\20\1\16\1\5\1\14\1\13\1\2\1\17"+
    "\1\35\1\24\2\27\1\22\1\21\1\4\1\10\1\11\1\27\1\12"+
    "\1\25\1\6\1\3\5\27\12\0\1\41\252\0\2\7\115\0\1\15"+
    "\u1ea8\0\1\41\1\41\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\10\1\1\3\2\1\1\4\1\5"+
    "\1\2\1\3\1\4\1\6\1\1\1\2\11\1\1\5"+
    "\2\1\2\7\1\3\1\5\1\2\11\5\1\3\2\5"+
    "\1\7\1\4\1\5\1\2\7\5\1\3\3\5\1\4"+
    "\1\10\2\5\15\0\1\1\27\0\2\7\41\0\1\10"+
    "\2\0\1\5\75\0\1\11\103\0\1\12\121\0\1\13"+
    "\5\0\1\14\6\0\1\15\1\16\3\0\1\14\3\0"+
    "\1\14\1\17\16\0\1\16\3\0\1\14\4\0\1\14"+
    "\17\0\1\1\6\0\1\20\7\0\1\20\2\0\1\20"+
    "\1\0\1\21\10\0\1\5\4\0\1\21\3\0\1\21"+
    "\17\0\1\22\1\23\2\0\1\22\1\23\1\22\1\23"+
    "\1\24\6\0\1\22\1\24\1\0\1\22\1\24\20\0"+
    "\1\25\56\0\2\1\4\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea"+
    "\0\u020d\0\u0230\0\u0118\0\u0253\0\u0276\0\u0118\0\u0299\0\u0299"+
    "\0\u0299\0\u0299\0\u02bc\0\u02df\0\u02df\0\u0302\0\u0325\0\u0348"+
    "\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u02df\0\u043d"+
    "\0\u0460\0\u0483\0\u04a6\0\u02df\0\u04c9\0\u04c9\0\u04ec\0\u050f"+
    "\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u04c9"+
    "\0\u0627\0\u064a\0\u066d\0\u04c9\0\u0690\0\u0690\0\u06b3\0\u06d6"+
    "\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u0690\0\u07a8\0\u07cb"+
    "\0\u07ee\0\u0690\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0"+
    "\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8"+
    "\0\u09fb\0\u0a1e\0\u0299\0\u0a41\0\u0a64\0\u0a87\0\u0aaa\0\u0acd"+
    "\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5"+
    "\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd"+
    "\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\u0e15"+
    "\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d"+
    "\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045"+
    "\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d"+
    "\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252\0\u1275"+
    "\0\u1298\0\u12bb\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d"+
    "\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5"+
    "\0\u14c8\0\u14eb\0\u150e\0\u1531\0\u1554\0\u1577\0\u159a\0\u15bd"+
    "\0\u15e0\0\u1603\0\u1626\0\u1649\0\u166c\0\u168f\0\u16b2\0\u16d5"+
    "\0\u16f8\0\u171b\0\u173e\0\u1761\0\u1784\0\u17a7\0\u17ca\0\u17ed"+
    "\0\u1810\0\u1833\0\u1856\0\u1879\0\u189c\0\u18bf\0\u18e2\0\u1905"+
    "\0\u1928\0\u194b\0\u196e\0\u1991\0\u19b4\0\u19d7\0\u19fa\0\u1a1d"+
    "\0\u1a40\0\u1a63\0\u1a86\0\u1aa9\0\u1acc\0\u1aef\0\u120c\0\u1b12"+
    "\0\u1b35\0\u1b58\0\u1b7b\0\u1b9e\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a"+
    "\0\u1c4d\0\u1c70\0\u1c93\0\u1cb6\0\u1cd9\0\u1cfc\0\u1d1f\0\u1d42"+
    "\0\u1d65\0\u1d88\0\u1dab\0\u1dce\0\u1df1\0\u1e14\0\u1e37\0\u1e5a"+
    "\0\u1e7d\0\u1ea0\0\u1ec3\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72"+
    "\0\u1f95\0\u1fb8\0\u1fdb\0\u1ffe\0\u2021\0\u2044\0\u2067\0\u208a"+
    "\0\u20ad\0\u20d0\0\u20f3\0\u2116\0\u2139\0\u215c\0\u217f\0\u21a2"+
    "\0\u21c5\0\u21e8\0\u220b\0\u222e\0\u2251\0\u2274\0\u2297\0\u22ba"+
    "\0\u22dd\0\u2300\0\u2323\0\u2346\0\u2369\0\u238c\0\u23af\0\u23d2"+
    "\0\u23f5\0\u2418\0\u243b\0\u245e\0\u2481\0\u24a4\0\u24c7\0\u24ea"+
    "\0\u250d\0\u2530\0\u2553\0\u2576\0\u2599\0\u25bc\0\u25df\0\u2602"+
    "\0\u2625\0\u2648\0\u266b\0\u268e\0\u26b1\0\u26d4\0\u26f7\0\u271a"+
    "\0\u273d\0\u2760\0\u2783\0\u27a6\0\u27c9\0\u27ec\0\u280f\0\u2832"+
    "\0\u2855\0\u2878\0\u289b\0\u28be\0\u28e1\0\u2904\0\u2927\0\u294a"+
    "\0\u296d\0\u2990\0\u29b3\0\u29d6\0\u29f9\0\u2a1c\0\u2a3f\0\u2a62"+
    "\0\u2a85\0\u2aa8\0\u2acb\0\u2aee\0\u2b11\0\u2b34\0\u2b57\0\u2b7a"+
    "\0\u2b9d\0\u2bc0\0\u2be3\0\u2c06\0\u2c29\0\u2c4c\0\u2c6f\0\u2c92"+
    "\0\u2cb5\0\u2cd8\0\u2cfb\0\u2d1e\0\u2d41\0\u2d64\0\u2d87\0\u2daa"+
    "\0\u2dcd\0\u2df0\0\u2e13\0\u2e36\0\u2e59\0\u2e7c\0\u2e9f\0\u2ec2"+
    "\0\u2ee5\0\u2f08\0\u2f2b\0\u2f4e\0\u2f71\0\u2f94\0\u2fb7\0\u2fda"+
    "\0\u2ffd\0\u3020\0\u0299\0\u3043\0\u3066\0\u3089\0\u30ac\0\u30cf"+
    "\0\u30f2\0\u0299\0\u2f71\0\u3115\0\u3138\0\u315b\0\u09fb\0\u317e"+
    "\0\u31a1\0\u31c4\0\u0a41\0\u0299\0\u31e7\0\u320a\0\u322d\0\u3250"+
    "\0\u3273\0\u3296\0\u32b9\0\u32dc\0\u32ff\0\u3322\0\u3345\0\u3368"+
    "\0\u338b\0\u33ae\0\u33d1\0\u33f4\0\u3417\0\u343a\0\u0f96\0\u345d"+
    "\0\u3480\0\u34a3\0\u34c6\0\u1068\0\u34e9\0\u350c\0\u352f\0\u3552"+
    "\0\u3575\0\u3598\0\u33d1\0\u35bb\0\u35de\0\u3601\0\u3624\0\u3647"+
    "\0\u366a\0\u368d\0\u36b0\0\u2f71\0\u36d3\0\u36f6\0\u3719\0\u373c"+
    "\0\u375f\0\u3782\0\u0299\0\u37a5\0\u37c8\0\u37eb\0\u380e\0\u3831"+
    "\0\u3854\0\u3877\0\u09fb\0\u389a\0\u38bd\0\u0a41\0\u38e0\0\u0299"+
    "\0\u3903\0\u3926\0\u3949\0\u396c\0\u398f\0\u39b2\0\u39d5\0\u39f8"+
    "\0\u33d1\0\u3a1b\0\u3a3e\0\u3a61\0\u3a84\0\u0f96\0\u3aa7\0\u3aca"+
    "\0\u3aed\0\u1068\0\u3b10\0\u3b33\0\u3b56\0\u3b79\0\u3b9c\0\u3bbf"+
    "\0\u3be2\0\u3c05\0\u3c28\0\u3c4b\0\u3c6e\0\u3c91\0\u3cb4\0\u3cd7"+
    "\0\u3cfa\0\u0299\0\u3d1d\0\u3d40\0\u3d63\0\u09fb\0\u3d86\0\u0a41"+
    "\0\u3da9\0\u3dcc\0\u3def\0\u3e12\0\u3e35\0\u3e58\0\u3e7b\0\u3e9e"+
    "\0\u0f96\0\u3ec1\0\u3ee4\0\u1068\0\u3f07\0\u3f2a\0\u3f4d\0\u3f70"+
    "\0\u3f93\0\u3fb6\0\u3fd9\0\u3ffc\0\u401f\0\u4042\0\u4065\0\u4088"+
    "\0\u40ab\0\u40ce\0\u40f1\0\u4114\0\u4137\0\u0299\0\u415a\0\u417d"+
    "\0\u41a0\0\u41c3\0\u41e6\0\u4209\0\u422c\0\u424f\0\u4272\0\u4295"+
    "\0\u42b8\0\u42db\0\u42fe\0\u4321\0\u4344\0\u4367\0\u438a\0\u43ad"+
    "\0\u43d0\0\u43f3\0\u4416\0\u4439\0\u445c\0\u447f\0\u44a2\0\u44c5"+
    "\0\u44e8\0\u450b\0\u452e\0\u4551\0\u4574\0\u4597\0\u45ba\0\u45dd"+
    "\0\u4600\0\u4623\0\u4646\0\u4669\0\u468c\0\u46af\0\u46d2\0\u46f5"+
    "\0\u4718\0\u473b\0\u475e\0\u4781\0\u09fb\0\u0a41\0\u0f96\0\u1068"+
    "\0\u1252\0\u1b12";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\4\14\1\15\1\14\1\16\3\14"+
    "\1\17\3\14\1\20\2\14\1\21\1\22\1\23\1\14"+
    "\1\24\1\25\1\11\3\14\2\11\1\26\1\23\1\11"+
    "\1\27\1\30\24\27\1\31\11\27\1\32\1\31\2\27"+
    "\1\30\5\33\1\27\5\33\1\27\5\33\1\27\2\33"+
    "\1\31\1\33\5\27\1\33\2\27\1\32\1\31\1\27"+
    "\1\34\1\35\1\36\2\14\1\37\1\14\1\40\1\14"+
    "\1\41\3\14\1\42\2\14\1\43\1\44\2\14\1\45"+
    "\1\46\1\47\1\14\1\50\1\51\1\34\1\52\1\53"+
    "\1\14\1\47\1\34\1\47\1\54\1\34\1\55\1\56"+
    "\1\57\4\60\1\61\1\60\1\62\3\60\1\63\2\60"+
    "\1\64\1\65\2\60\1\66\1\67\1\70\1\60\1\71"+
    "\1\72\1\55\2\73\1\60\2\55\1\74\1\70\1\55"+
    "\1\75\1\76\1\77\4\60\1\100\1\60\1\101\3\60"+
    "\1\102\3\60\1\103\2\60\1\104\1\105\1\106\1\60"+
    "\1\107\1\110\1\75\1\111\2\60\2\75\1\112\1\106"+
    "\2\75\1\76\1\77\4\60\1\100\1\60\1\101\3\60"+
    "\1\102\3\60\1\103\2\60\1\104\1\105\1\106\1\60"+
    "\1\107\1\110\1\75\2\113\1\60\2\75\1\112\1\106"+
    "\2\75\1\76\1\77\4\60\1\100\1\60\1\101\3\60"+
    "\1\102\3\60\1\103\2\60\1\104\1\105\1\106\1\60"+
    "\1\107\1\110\1\114\2\115\1\60\2\75\1\112\1\106"+
    "\1\75\21\0\1\116\23\0\1\117\1\120\3\0\1\121"+
    "\1\0\1\122\3\0\1\123\3\0\1\124\2\0\1\121"+
    "\1\123\17\0\1\117\4\0\1\121\1\0\1\122\3\0"+
    "\1\123\3\0\1\124\2\0\1\121\1\123\21\0\1\125"+
    "\14\0\1\116\23\0\1\117\4\0\1\121\1\0\1\122"+
    "\1\126\2\0\1\123\3\0\1\124\2\0\1\121\1\123"+
    "\20\0\1\127\15\0\1\116\23\0\1\117\4\0\1\121"+
    "\1\130\1\122\3\0\1\123\3\0\1\124\2\0\1\121"+
    "\1\123\17\0\1\117\1\0\1\125\2\0\1\121\1\0"+
    "\1\122\3\0\1\123\3\0\1\124\2\0\1\121\1\123"+
    "\17\0\1\117\1\127\3\0\1\121\1\0\1\122\3\0"+
    "\1\123\3\0\1\124\2\0\1\121\1\123\15\0\21\131"+
    "\1\132\6\131\1\133\12\131\21\134\1\135\7\134\1\133"+
    "\11\134\45\0\5\33\1\0\5\33\1\0\10\33\1\0"+
    "\1\33\3\0\3\33\7\0\1\136\6\0\1\137\1\140"+
    "\4\0\1\141\1\0\1\116\23\0\1\117\1\142\3\0"+
    "\1\121\1\0\1\122\3\0\1\123\3\0\1\124\2\0"+
    "\1\121\1\123\17\0\1\117\4\0\1\121\1\0\1\122"+
    "\3\0\1\123\3\0\1\124\2\0\1\121\1\123\7\0"+
    "\1\143\7\0\1\136\1\0\1\144\4\0\1\137\1\140"+
    "\4\0\1\141\1\0\1\116\23\0\1\117\4\0\1\121"+
    "\1\0\1\122\1\145\2\0\1\123\3\0\1\124\2\0"+
    "\1\121\1\123\17\0\1\136\1\146\5\0\1\137\1\140"+
    "\4\0\1\141\1\0\1\116\23\0\1\117\4\0\1\121"+
    "\1\0\1\122\3\0\1\147\3\0\1\124\2\0\1\121"+
    "\1\147\17\0\1\117\4\0\1\121\1\150\1\122\3\0"+
    "\1\123\3\0\1\124\2\0\1\121\1\123\17\0\1\117"+
    "\1\0\1\144\2\0\1\121\1\0\1\122\3\0\1\123"+
    "\3\0\1\124\2\0\1\121\1\123\17\0\1\117\1\146"+
    "\3\0\1\121\1\0\1\122\3\0\1\123\3\0\1\124"+
    "\2\0\1\121\1\123\15\0\2\131\1\151\6\131\1\152"+
    "\1\153\4\131\1\154\1\131\1\132\6\131\1\133\12\131"+
    "\2\134\1\155\6\134\1\156\1\157\4\134\1\160\1\134"+
    "\1\135\7\134\1\133\11\134\2\0\1\117\4\0\1\121"+
    "\1\0\1\122\1\0\1\161\1\0\1\123\3\0\1\124"+
    "\2\0\1\121\1\123\1\162\4\0\2\163\1\0\1\162"+
    "\6\0\1\117\4\0\1\121\1\0\1\122\3\0\1\123"+
    "\3\0\1\124\2\0\1\121\1\123\5\0\2\164\10\0"+
    "\1\136\6\0\1\165\1\166\4\0\1\141\1\0\1\167"+
    "\23\0\1\170\1\171\3\0\1\172\1\0\1\173\3\0"+
    "\1\174\3\0\1\175\2\0\1\172\1\174\17\0\1\170"+
    "\4\0\1\172\1\0\1\173\3\0\1\174\3\0\1\175"+
    "\2\0\1\172\1\174\17\0\1\136\1\0\1\176\4\0"+
    "\1\165\1\166\4\0\1\141\1\0\1\167\23\0\1\170"+
    "\4\0\1\172\1\0\1\173\1\177\2\0\1\174\3\0"+
    "\1\175\2\0\1\172\1\174\17\0\1\136\1\200\5\0"+
    "\1\165\1\166\4\0\1\141\1\0\1\167\23\0\1\170"+
    "\4\0\1\172\1\0\1\173\3\0\1\201\3\0\1\175"+
    "\2\0\1\172\1\201\17\0\1\170\4\0\1\172\1\202"+
    "\1\173\3\0\1\174\3\0\1\175\2\0\1\172\1\174"+
    "\17\0\1\170\1\0\1\176\2\0\1\172\1\0\1\173"+
    "\3\0\1\174\3\0\1\175\2\0\1\172\1\174\17\0"+
    "\1\170\1\200\3\0\1\172\1\0\1\173\3\0\1\174"+
    "\3\0\1\175\2\0\1\172\1\174\15\0\2\203\1\204"+
    "\6\203\1\205\1\206\4\203\1\207\1\203\1\210\6\203"+
    "\1\27\12\203\2\211\1\212\6\211\1\213\1\214\4\211"+
    "\1\215\1\211\1\216\7\211\1\27\11\211\2\0\1\170"+
    "\4\0\1\172\1\0\1\173\3\0\1\174\3\0\1\175"+
    "\2\0\1\172\1\174\5\0\2\164\27\0\1\167\23\0"+
    "\1\170\1\217\3\0\1\172\1\0\1\173\3\0\1\174"+
    "\3\0\1\175\2\0\1\172\1\174\21\0\1\220\14\0"+
    "\1\167\23\0\1\170\4\0\1\172\1\0\1\173\1\221"+
    "\2\0\1\174\3\0\1\175\2\0\1\172\1\174\20\0"+
    "\1\222\15\0\1\167\23\0\1\170\4\0\1\172\1\223"+
    "\1\173\3\0\1\174\3\0\1\175\2\0\1\172\1\174"+
    "\17\0\1\170\1\0\1\220\2\0\1\172\1\0\1\173"+
    "\3\0\1\174\3\0\1\175\2\0\1\172\1\174\17\0"+
    "\1\170\1\222\3\0\1\172\1\0\1\173\3\0\1\174"+
    "\3\0\1\175\2\0\1\172\1\174\15\0\21\203\1\210"+
    "\6\203\1\27\12\203\21\211\1\216\7\211\1\27\11\211"+
    "\2\0\1\170\4\0\1\172\1\0\1\173\3\0\1\174"+
    "\3\0\1\175\2\0\1\172\1\174\5\0\2\224\1\225"+
    "\7\0\1\170\4\0\1\172\1\0\1\173\3\0\1\174"+
    "\3\0\1\175\2\0\1\172\1\174\5\0\2\226\6\0"+
    "\21\227\1\230\20\227\3\0\1\170\4\0\1\172\1\0"+
    "\1\173\3\0\1\174\3\0\1\175\2\0\1\172\1\174"+
    "\5\0\2\231\16\0\1\232\35\0\1\233\43\0\1\234"+
    "\42\0\1\235\50\0\1\236\33\0\1\237\47\0\1\240"+
    "\40\0\1\241\44\0\1\242\50\0\1\243\40\0\1\244"+
    "\26\0\30\131\1\133\22\131\1\245\17\131\1\133\12\131"+
    "\31\134\1\133\21\134\1\246\20\134\1\133\11\134\10\0"+
    "\1\247\52\0\1\250\35\0\1\251\37\0\1\252\36\0"+
    "\1\253\56\0\1\254\30\0\1\255\44\0\1\256\50\0"+
    "\1\257\27\0\1\237\11\0\1\260\7\0\1\260\31\0"+
    "\1\261\26\0\10\131\1\262\17\131\1\133\32\131\1\263"+
    "\7\131\1\133\25\131\1\264\14\131\1\133\22\131\1\265"+
    "\17\131\1\133\12\131\10\134\1\266\20\134\1\133\31\134"+
    "\1\267\10\134\1\133\24\134\1\270\15\134\1\133\21\134"+
    "\1\271\20\134\1\133\11\134\4\0\1\272\51\0\1\161"+
    "\12\0\1\162\7\0\1\162\17\0\1\161\12\0\1\162"+
    "\4\0\2\163\1\0\1\162\37\0\2\164\26\0\1\273"+
    "\35\0\1\274\37\0\1\275\35\0\1\276\43\0\1\277"+
    "\42\0\1\300\50\0\1\301\33\0\1\302\47\0\1\303"+
    "\40\0\1\304\44\0\1\305\50\0\1\306\27\0\1\302"+
    "\11\0\1\260\7\0\1\260\31\0\1\307\26\0\30\203"+
    "\1\27\22\203\1\310\17\203\1\27\32\203\1\311\7\203"+
    "\1\27\25\203\1\312\14\203\1\27\22\203\1\313\17\203"+
    "\1\27\22\203\1\314\17\203\1\27\12\203\31\211\1\27"+
    "\21\211\1\315\20\211\1\27\31\211\1\316\10\211\1\27"+
    "\24\211\1\317\15\211\1\27\21\211\1\320\20\211\1\27"+
    "\21\211\1\321\20\211\1\27\11\211\4\0\1\322\44\0"+
    "\1\323\44\0\1\324\50\0\1\325\40\0\1\326\61\0"+
    "\2\224\1\225\7\0\5\327\1\0\5\327\1\0\10\327"+
    "\1\0\1\327\5\0\2\327\37\0\2\226\6\0\42\227"+
    "\1\330\10\227\1\331\31\227\1\330\33\0\2\231\22\0"+
    "\1\332\32\0\1\333\43\0\1\334\43\0\1\335\44\0"+
    "\1\336\50\0\1\337\40\0\1\340\41\0\1\341\34\0"+
    "\1\342\11\0\1\343\35\0\1\344\33\0\1\345\37\0"+
    "\14\131\1\346\13\131\1\133\12\131\14\134\1\347\14\134"+
    "\1\133\11\134\12\0\1\350\33\0\1\351\45\0\1\352"+
    "\42\0\1\353\17\0\1\252\7\0\1\252\11\0\1\354"+
    "\47\0\1\355\43\0\1\356\34\0\1\357\11\0\1\360"+
    "\35\0\1\361\37\0\1\362\14\0\1\362\21\0\1\363"+
    "\37\0\12\131\1\364\15\131\1\133\15\131\1\365\24\131"+
    "\1\133\20\131\1\366\21\131\1\133\20\131\1\367\17\131"+
    "\1\265\1\131\1\133\5\131\1\265\4\131\12\134\1\370"+
    "\16\134\1\133\14\134\1\371\25\134\1\133\17\134\1\372"+
    "\22\134\1\133\17\134\1\373\17\134\1\271\2\134\1\133"+
    "\4\134\1\271\4\134\14\0\1\374\31\0\1\375\45\0"+
    "\1\376\50\0\1\377\32\0\1\u0100\43\0\1\u0101\43\0"+
    "\1\u0102\44\0\1\u0103\50\0\1\u0104\40\0\1\u0105\41\0"+
    "\1\u0106\34\0\1\u0107\11\0\1\u0108\35\0\1\u0109\33\0"+
    "\1\u010a\37\0\12\203\1\u010b\15\203\1\27\15\203\1\u010c"+
    "\24\203\1\27\20\203\1\u010d\21\203\1\27\20\203\1\u010e"+
    "\17\203\1\313\1\203\1\27\5\203\1\313\20\203\1\u010f"+
    "\13\203\1\27\12\203\12\211\1\u0110\16\211\1\27\14\211"+
    "\1\u0111\25\211\1\27\17\211\1\u0112\22\211\1\27\17\211"+
    "\1\u0113\17\211\1\320\2\211\1\27\4\211\1\320\20\211"+
    "\1\u0114\14\211\1\27\11\211\5\0\1\u0115\50\0\1\u0116"+
    "\34\0\1\u0117\11\0\1\u0118\35\0\1\u0119\33\0\1\u011a"+
    "\41\0\5\u011b\1\0\5\u011b\1\0\5\u011b\1\0\2\u011b"+
    "\1\330\1\u011b\5\0\1\u011b\1\330\4\0\14\227\1\u011c"+
    "\25\227\1\330\3\0\1\u011d\44\0\1\u011e\43\0\1\u011f"+
    "\47\0\1\u0120\34\0\1\u0121\11\0\1\u0122\35\0\1\u0123"+
    "\33\0\1\u0124\51\0\1\u0125\43\0\1\u0126\41\0\1\u0127"+
    "\40\0\1\u0128\54\0\1\u0129\20\0\3\131\1\u012a\24\131"+
    "\1\133\12\131\3\134\1\u012b\25\134\1\133\11\134\21\0"+
    "\1\u012c\36\0\1\u012d\7\0\1\u012d\20\0\1\u012e\47\0"+
    "\1\u012f\40\0\1\u0130\54\0\1\u0131\34\0\1\u0132\43\0"+
    "\1\u0133\41\0\1\u0134\40\0\1\u0135\51\0\1\u0136\45\0"+
    "\1\u0137\20\0\21\131\1\u0138\6\131\1\133\27\131\1\u0139"+
    "\7\131\1\u0139\2\131\1\133\15\131\1\u013a\24\131\1\133"+
    "\22\131\1\u013b\17\131\1\133\12\131\21\134\1\u013c\7\134"+
    "\1\133\26\134\1\u013d\7\134\1\u013d\3\134\1\133\14\134"+
    "\1\u013e\25\134\1\133\21\134\1\u013f\20\134\1\133\11\134"+
    "\7\0\1\u0140\14\0\1\u0140\1\0\1\374\7\0\1\374"+
    "\21\0\1\u0141\7\0\1\u0141\20\0\1\u0142\42\0\1\u0143"+
    "\44\0\1\u0144\43\0\1\u0145\47\0\1\u0146\34\0\1\u0147"+
    "\11\0\1\u0148\35\0\1\u0149\33\0\1\u014a\51\0\1\u014b"+
    "\43\0\1\u014c\41\0\1\u014d\40\0\1\u014e\54\0\1\u014f"+
    "\20\0\21\203\1\u0150\6\203\1\27\27\203\1\u0151\7\203"+
    "\1\u0151\2\203\1\27\15\203\1\u0152\24\203\1\27\22\203"+
    "\1\u0153\17\203\1\27\15\203\1\u0154\24\203\1\27\12\203"+
    "\21\211\1\u0155\7\211\1\27\26\211\1\u0156\7\211\1\u0156"+
    "\3\211\1\27\14\211\1\u0157\25\211\1\27\21\211\1\u0158"+
    "\20\211\1\27\14\211\1\u0159\25\211\1\27\11\211\6\0"+
    "\1\u015a\46\0\1\u015b\43\0\1\u015c\41\0\1\u015d\40\0"+
    "\1\u015e\54\0\1\u015f\22\0\5\u011b\1\0\5\u011b\1\0"+
    "\10\u011b\1\0\1\u011b\3\0\3\u011b\5\0\3\227\1\u0160"+
    "\36\227\1\330\22\0\1\u0161\26\0\1\u0162\43\0\1\u0163"+
    "\14\0\1\u0163\30\0\1\u0164\43\0\1\u0165\41\0\1\u0166"+
    "\40\0\1\u0167\54\0\1\u0168\22\0\1\u0169\54\0\1\u016a"+
    "\46\0\1\u016b\25\0\1\u016c\52\0\1\u016d\27\0\22\131"+
    "\1\u016e\5\131\1\133\12\131\22\134\1\u016f\6\134\1\133"+
    "\11\134\20\0\1\u0170\35\0\1\u0171\41\0\1\u0172\30\0"+
    "\2\u0173\5\0\1\u0173\5\0\1\u0173\10\0\1\u0173\1\0"+
    "\3\u0173\3\0\5\u0173\7\0\1\u0174\14\0\1\u0174\23\0"+
    "\1\u0175\37\0\1\u0176\54\0\1\u0177\46\0\1\u0178\25\0"+
    "\1\u0179\43\0\1\u017a\51\0\1\u017b\27\0\20\131\1\u017c"+
    "\7\131\1\133\25\131\1\u017d\14\131\1\133\24\131\1\u017e"+
    "\15\131\1\133\12\131\2\u017f\5\131\1\u017f\5\131\1\u017f"+
    "\10\131\1\u017f\1\131\1\133\2\u017f\3\131\5\u017f\20\134"+
    "\1\u0180\10\134\1\133\24\134\1\u0181\15\134\1\133\23\134"+
    "\1\u0182\16\134\1\133\11\134\2\u0183\5\134\1\u0183\5\134"+
    "\1\u0183\10\134\1\u0183\1\134\1\u0183\1\133\1\u0183\3\134"+
    "\5\u0183\2\0\1\u0184\53\0\1\u0185\41\0\1\u0186\52\0"+
    "\1\u0187\26\0\1\u0188\43\0\1\u0189\14\0\1\u0189\30\0"+
    "\1\u018a\43\0\1\u018b\41\0\1\u018c\40\0\1\u018d\54\0"+
    "\1\u018e\22\0\1\u018f\54\0\1\u0190\46\0\1\u0191\25\0"+
    "\1\u0192\52\0\1\u0193\27\0\20\203\1\u0194\7\203\1\27"+
    "\25\203\1\u0195\14\203\1\27\24\203\1\u0196\15\203\1\27"+
    "\12\203\2\u0197\5\203\1\u0197\5\203\1\u0197\10\203\1\u0197"+
    "\1\203\1\27\2\u0197\3\203\5\u0197\22\203\1\u0198\5\203"+
    "\1\27\12\203\20\211\1\u0199\10\211\1\27\24\211\1\u019a"+
    "\15\211\1\27\23\211\1\u019b\16\211\1\27\11\211\2\u019c"+
    "\5\211\1\u019c\5\211\1\u019c\10\211\1\u019c\1\211\1\u019c"+
    "\1\27\1\u019c\3\211\5\u019c\22\211\1\u019d\6\211\1\27"+
    "\11\211\7\0\1\u019e\14\0\1\u019e\20\0\1\u019f\54\0"+
    "\1\u01a0\46\0\1\u01a1\25\0\1\u01a2\52\0\1\u01a3\27\0"+
    "\22\227\1\u01a4\17\227\1\330\13\0\1\u01a5\36\0\1\u01a6"+
    "\14\0\1\u01a6\26\0\1\u01a7\34\0\1\u01a8\54\0\1\u01a9"+
    "\46\0\1\u01aa\25\0\1\u01ab\52\0\1\u01ac\47\0\1\u01ad"+
    "\25\0\1\u01ae\60\0\1\u016d\27\0\1\u01af\36\0\5\133"+
    "\1\0\5\133\1\0\10\133\1\0\1\133\3\0\3\133"+
    "\5\0\13\131\1\u01b0\14\131\1\133\12\131\13\134\1\u01b1"+
    "\15\134\1\133\11\134\6\0\1\u01b2\34\0\2\u01b3\5\0"+
    "\1\u01b3\5\0\1\u01b3\10\0\1\u01b3\1\0\3\u01b3\3\0"+
    "\5\u01b3\4\0\1\u01b4\46\0\1\u01b5\40\0\1\u01b6\54\0"+
    "\1\u01b7\25\0\1\u01b8\60\0\1\u017b\27\0\1\u01b9\34\0"+
    "\6\131\1\u01ba\21\131\1\133\12\131\2\u01bb\5\131\1\u01bb"+
    "\5\131\1\u01bb\10\131\1\u01bb\1\131\1\133\2\u01bb\3\131"+
    "\5\u01bb\4\131\1\u01bc\23\131\1\133\12\131\6\134\1\u01bd"+
    "\22\134\1\133\11\134\2\u01be\5\134\1\u01be\5\134\1\u01be"+
    "\10\134\1\u01be\1\134\1\u01be\1\133\1\u01be\3\134\5\u01be"+
    "\4\134\1\u01bf\24\134\1\133\11\134\2\u01c0\5\0\1\u01c0"+
    "\5\0\1\u01c0\10\0\1\u01c0\1\0\3\u01c0\3\0\5\u01c0"+
    "\4\0\1\u01c1\51\0\1\u01c2\36\0\1\u01c3\14\0\1\u01c3"+
    "\26\0\1\u01c4\34\0\1\u01c5\54\0\1\u01c6\46\0\1\u01c7"+
    "\25\0\1\u01c8\52\0\1\u01c9\47\0\1\u01ca\25\0\1\u01cb"+
    "\60\0\1\u0193\27\0\1\u01cc\36\0\5\27\1\0\5\27"+
    "\1\0\10\27\1\0\1\27\3\0\3\27\5\0\6\203"+
    "\1\u01cd\21\203\1\27\12\203\2\u01ce\5\203\1\u01ce\5\203"+
    "\1\u01ce\10\203\1\u01ce\1\203\1\27\2\u01ce\3\203\5\u01ce"+
    "\4\203\1\u01cf\23\203\1\27\25\203\1\u01d0\14\203\1\27"+
    "\12\203\6\211\1\u01d1\22\211\1\27\11\211\2\u01d2\5\211"+
    "\1\u01d2\5\211\1\u01d2\10\211\1\u01d2\1\211\1\u01d2\1\27"+
    "\1\u01d2\3\211\5\u01d2\4\211\1\u01d3\24\211\1\27\24\211"+
    "\1\u01d4\15\211\1\27\11\211\10\0\1\u01d5\52\0\1\u01d6"+
    "\25\0\1\u01d7\60\0\1\u01a3\27\0\1\u01d8\34\0\13\227"+
    "\1\u01d9\26\227\1\330\11\0\1\u01da\14\0\1\u01a5\7\0"+
    "\1\u01a5\14\0\1\u01db\36\0\1\u016d\56\0\1\u01dc\25\0"+
    "\1\u01dd\60\0\1\u01ac\27\0\1\u01de\41\0\1\u0129\47\0"+
    "\1\u0129\37\0\1\u01df\14\0\1\u01df\16\0\11\131\1\u01e0"+
    "\14\131\1\u01b0\1\131\1\133\5\131\1\u01b0\4\131\11\134"+
    "\1\u01e1\14\134\1\u01b1\2\134\1\133\4\134\1\u01b1\4\134"+
    "\26\0\1\u01b2\3\0\1\u01e2\3\0\1\u01b2\32\0\1\u01b4"+
    "\4\0\1\u01e3\2\0\1\u01b4\10\0\1\u017b\51\0\1\u01e4"+
    "\34\0\1\u0137\47\0\1\u0137\37\0\1\u01e5\14\0\1\u01e5"+
    "\16\0\26\131\1\u01ba\1\131\1\133\1\131\1\u01e6\3\131"+
    "\1\u01ba\32\131\1\u01bc\1\131\1\133\2\131\1\u01e7\2\131"+
    "\1\u01bc\4\131\26\134\1\u01bd\2\134\1\133\1\u01e8\3\134"+
    "\1\u01bd\32\134\1\u01bf\2\134\1\133\1\134\1\u01e9\2\134"+
    "\1\u01bf\4\134\26\0\1\u01c1\4\0\1\u01ea\2\0\1\u01c1"+
    "\15\0\1\u01eb\14\0\1\u01c2\7\0\1\u01c2\14\0\1\u01ec"+
    "\36\0\1\u0193\56\0\1\u01ed\25\0\1\u01ee\60\0\1\u01c9"+
    "\27\0\1\u01ef\41\0\1\u014f\47\0\1\u014f\37\0\1\u01f0"+
    "\14\0\1\u01f0\16\0\26\203\1\u01cd\1\203\1\27\1\203"+
    "\1\u01f1\3\203\1\u01cd\32\203\1\u01cf\1\203\1\27\2\203"+
    "\1\u01f2\2\203\1\u01cf\15\203\1\u01f3\14\203\1\u01d0\1\203"+
    "\1\27\5\203\1\u01d0\4\203\26\211\1\u01d1\2\211\1\27"+
    "\1\u01f4\3\211\1\u01d1\32\211\1\u01d3\2\211\1\27\1\211"+
    "\1\u01f5\2\211\1\u01d3\15\211\1\u01f6\14\211\1\u01d4\2\211"+
    "\1\27\4\211\1\u01d4\4\211\4\0\1\u01a3\43\0\1\u015f"+
    "\47\0\1\u015f\37\0\1\u01f7\14\0\1\u01f7\16\0\11\227"+
    "\1\u01f8\14\227\1\u01d9\7\227\1\u01d9\3\227\1\330\12\0"+
    "\1\u01f9\34\0\1\u01ac\43\0\1\u0168\47\0\1\u0168\37\0"+
    "\1\u01fa\14\0\1\u01fa\22\0\1\u0129\36\0\12\131\1\u01fb"+
    "\15\131\1\133\12\131\12\134\1\u01fc\16\134\1\133\11\134"+
    "\33\0\2\u01e3\20\0\1\u01fd\34\0\1\u0137\36\0\30\131"+
    "\1\133\2\131\2\u01e7\6\131\31\134\1\133\1\134\2\u01e9"+
    "\6\134\33\0\2\u01ea\20\0\1\u01fe\34\0\1\u01c9\43\0"+
    "\1\u018e\47\0\1\u018e\37\0\1\u01ff\14\0\1\u01ff\22\0"+
    "\1\u014f\36\0\30\203\1\27\2\203\2\u01f2\20\203\1\u0200"+
    "\15\203\1\27\12\203\31\211\1\27\1\211\2\u01f5\20\211"+
    "\1\u0201\16\211\1\27\11\211\4\0\1\u015f\36\0\12\227"+
    "\1\u0202\27\227\1\330\10\0\1\u0203\36\0\1\u0168\36\0"+
    "\10\131\1\u0204\17\131\1\133\12\131\10\134\1\u0205\20\134"+
    "\1\133\11\134\26\0\1\u01fd\7\0\1\u01fd\1\u0206\13\0"+
    "\1\u0207\36\0\1\u018e\36\0\10\203\1\u0208\17\203\1\27"+
    "\12\203\10\211\1\u0209\20\211\1\27\11\211\10\227\1\u020a"+
    "\31\227\1\330\5\0\1\u020b\35\0\5\131\1\u020c\22\131"+
    "\1\133\12\131\5\134\1\u020d\23\134\1\133\11\134\5\0"+
    "\1\u020e\35\0\5\203\1\u020f\22\203\1\27\12\203\5\211"+
    "\1\u0210\23\211\1\27\11\211\5\227\1\u0211\34\227\1\330"+
    "\13\0\1\u0212\27\0\13\131\1\u0213\14\131\1\133\12\131"+
    "\13\134\1\u0214\15\134\1\133\11\134\13\0\1\u0215\27\0"+
    "\13\203\1\u0216\14\203\1\27\12\203\13\211\1\u0217\15\211"+
    "\1\27\11\211\13\227\1\u0218\26\227\1\330\14\0\1\u0219"+
    "\26\0\14\131\1\u021a\13\131\1\133\12\131\14\134\1\u021b"+
    "\14\134\1\133\11\134\14\0\1\u021c\26\0\14\203\1\u021d"+
    "\13\203\1\27\12\203\14\211\1\u021e\14\211\1\27\11\211"+
    "\14\227\1\u021f\25\227\1\330\3\0\1\u0220\37\0\3\131"+
    "\1\u0221\24\131\1\133\12\131\3\134\1\u0222\25\134\1\133"+
    "\11\134\3\0\1\u0223\37\0\3\203\1\u0224\24\203\1\27"+
    "\12\203\3\211\1\u0225\25\211\1\27\11\211\3\227\1\u0226"+
    "\36\227\1\330\12\0\1\u0227\30\0\12\131\1\u0228\15\131"+
    "\1\133\12\131\12\134\1\u0229\16\134\1\133\11\134\12\0"+
    "\1\u022a\30\0\12\203\1\u022b\15\203\1\27\12\203\12\211"+
    "\1\u022c\16\211\1\27\11\211\12\227\1\u022d\27\227\1\330"+
    "\13\0\1\u022e\27\0\13\131\1\u022f\14\131\1\133\12\131"+
    "\13\134\1\u0230\15\134\1\133\11\134\13\0\1\u0231\27\0"+
    "\13\203\1\u0232\14\203\1\27\12\203\13\211\1\u0233\15\211"+
    "\1\27\11\211\13\227\1\u0234\26\227\1\330\2\133\5\0"+
    "\1\133\5\0\1\133\10\0\1\133\1\0\3\133\3\0"+
    "\5\133\2\u0235\5\131\1\u0235\5\131\1\u0235\10\131\1\u0235"+
    "\1\131\1\133\2\u0235\3\131\5\u0235\2\u0236\5\134\1\u0236"+
    "\5\134\1\u0236\10\134\1\u0236\1\134\1\u0236\1\133\1\u0236"+
    "\3\134\5\u0236\2\27\5\0\1\27\5\0\1\27\10\0"+
    "\1\27\1\0\3\27\3\0\5\27\2\u0237\5\203\1\u0237"+
    "\5\203\1\u0237\10\203\1\u0237\1\203\1\27\2\u0237\3\203"+
    "\5\u0237\2\u0238\5\211\1\u0238\5\211\1\u0238\10\211\1\u0238"+
    "\1\211\1\u0238\1\27\1\u0238\3\211\5\u0238\2\u0239\5\227"+
    "\1\u0239\5\227\1\u0239\10\227\1\u0239\1\227\3\u0239\3\227"+
    "\4\u0239\1\u023a";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\16\1\4\11\63\1\15\0\1\11\27\0\2\1"+
    "\41\0\1\1\2\0\1\1\75\0\1\1\103\0\1\1"+
    "\121\0\1\1\5\0\1\11\6\0\1\11\1\1\3\0"+
    "\1\1\3\0\1\1\1\11\16\0\1\1\3\0\1\1"+
    "\4\0\1\1\17\0\1\1\6\0\1\11\7\0\1\1"+
    "\2\0\1\1\1\0\1\11\10\0\1\1\4\0\1\1"+
    "\3\0\1\1\17\0\1\11\1\1\2\0\5\1\6\0"+
    "\2\1\1\0\2\1\20\0\1\11\56\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM"; 
	/** Rule used to assert that arithmetical if is not used. **/
	AbstractRule rule1 = new F90DESIGNObsoleteArithmeticalIf();
	/** Rule used to assert that do loop ending branch is done on a continue or an end do. **/
	AbstractRule rule2 = new F90DESIGNObsoleteDoEnding();
	/** Rule used to assert that do loop only use integer variables. **/
	AbstractRule rule3 = new F90DESIGNObsoleteDoReal();
	/** Rule used to assert that two do loops do not share the same label. **/
	AbstractRule rule4 = new F90DESIGNObsoleteDoShared();
	
	List<String> formatsNum = new LinkedList<String>();
	
	public F90DESIGNObsolete() {
    }
	
	@Override
    public void setInputFile(final IPath file) throws FileNotFoundException {
        super.setInputFile(file);
		
		/** Initializing first rule. **/
        this.rule1.setContribution(this.getContribution());
        this.rule1.setInputFile(file);
		
		/** Initializing second rule. **/
        this.rule2.setContribution(this.getContribution());
        this.rule2.setInputFile(file);
		
		/** Initializing third rule. **/
        this.rule3.setContribution(this.getContribution());
        this.rule3.setInputFile(file);
		
		/** Initializing fourth rule. **/
        this.rule4.setContribution(this.getContribution());
        this.rule4.setInputFile(file);
		
        this.zzReader = new FileReader(file.toOSString());
    }
	
	/**
	 * Method used to sort violations on increasing order considering their lines.
	 **/
	private void sortResults() {
        Collections.sort(getViolations(), new Comparator<Violation>() {
            @Override
            public int compare(final Violation o1, final Violation o2) {
                return o1.getLine().compareTo(o2.getLine());
            }
        });
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90DESIGNObsolete(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	/** We had results of 4 other rules. **/
	getViolations().addAll(rule1.run());
	getViolations().addAll(rule2.run());
	getViolations().addAll(rule3.run());
	getViolations().addAll(rule4.run());
	
	/** The results are sorted on lines' increasing order. **/
	sortResults();
	return getViolations(); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 22: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 23: break;
          case 3: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 24: break;
          case 4: 
            { yybegin(NEW_LINE);
            }
          case 25: break;
          case 5: 
            { 
            }
          case 26: break;
          case 6: 
            { location = location + " " + yytext(); 
							 yybegin(COMMENT);
            }
          case 27: break;
          case 7: 
            { formatsNum.add(yytext()); yybegin(LINE);
            }
          case 28: break;
          case 8: 
            { if (formatsNum.contains(yytext()))
							 	setError(location,"The instruction ASSIGN contains the label for the FORMAT instruction.", yyline+1); yybegin(LINE);
            }
          case 29: break;
          case 9: 
            { setError(location,"The instruction HOLLERITH is not allowed inside FORMAT. Error in " + yytext() + " used.", yyline+1); yybegin(LINE);
            }
          case 30: break;
          case 10: 
            { setError(location,"The instruction calculed GOTO is not allowed.", yyline+1); yybegin(LINE);
            }
          case 31: break;
          case 11: 
            { location = yytext(); yybegin(NAMING);
            }
          case 32: break;
          case 12: 
            { yybegin(GOTO);
            }
          case 33: break;
          case 13: 
            { yybegin(ASSIGN);
            }
          case 34: break;
          case 14: 
            { location = yytext(); 
							 yybegin(NAMING);
            }
          case 35: break;
          case 15: 
            { setError(location,"There is a branch on an END IF statement. It is not allowed", yyline+1); 
							 yybegin(LINE);
            }
          case 36: break;
          case 16: 
            { setError(location,"The instruction PAUSE is not allowed.", yyline+1); 
							 yybegin(LINE);
            }
          case 37: break;
          case 17: 
            { setError(location,"The instruction PAUSE is not allowed.", yyline+1);
            }
          case 38: break;
          case 18: 
            { yybegin(HOLL);
            }
          case 39: break;
          case 19: 
            { setError(location,"The alternate return statement is not allowed. ", yyline+1); 
							 yybegin(LINE);
            }
          case 40: break;
          case 20: 
            { setError(location,"There is a branch on an END IF statement. It is not allowed.", yyline+1);
            }
          case 41: break;
          case 21: 
            { setError(location,"The use of CHARACTER* is not allowed.", yyline+1); 
							 yybegin(LINE);
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
