/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.INST.Pointer rule.	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90INSTPointer.lex</tt>
 */
public class F90INSTPointer extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int AVOID = 6;
  public static final int NEW_LINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  1,  1,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\37\1\40\1\41\1\37\22\0\1\26\1\1\1\31"+
    "\4\0\1\30\1\32\1\35\2\0\1\34\3\0\12\23\1\33\6\0"+
    "\1\20\1\16\1\5\1\14\1\13\1\2\1\17\1\27\1\24\2\27"+
    "\1\22\1\21\1\4\1\10\1\11\1\27\1\12\1\25\1\6\1\3"+
    "\3\27\1\36\1\27\4\0\1\23\1\0\1\20\1\16\1\5\1\14"+
    "\1\13\1\2\1\17\1\27\1\24\2\27\1\22\1\21\1\4\1\10"+
    "\1\11\1\27\1\12\1\25\1\6\1\3\3\27\1\36\1\27\12\0"+
    "\1\40\252\0\2\7\115\0\1\15\u1ea8\0\1\40\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\16\1\1\3\1\4\1\1\1\2"+
    "\1\5\1\4\1\6\1\7\1\2\3\1\1\7\2\1"+
    "\1\7\1\1\1\7\3\1\3\7\1\3\1\4\1\0"+
    "\3\1\2\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\3\0\2\1\6\0\2\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\1\1\3\0"+
    "\2\1\2\0\1\7\3\0\2\1\2\0\2\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\3\0\2\1\3\0"+
    "\1\10\1\0\2\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\3\0\2\1\3\0\2\1\2\0"+
    "\1\1\1\11\2\0\3\1\1\0\1\1\1\0\1\1"+
    "\3\0\2\1\3\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\0\2\1\1\0\1\1\3\0\2\1\3\0\2\1"+
    "\2\0\1\1\2\0\3\1\1\0\1\1\1\0\1\1"+
    "\4\0\2\1\3\0\2\1\1\0\2\1\1\0\3\1"+
    "\1\0\2\1\1\0\1\1\4\0\2\1\3\0\1\1"+
    "\1\0\1\1\2\0\1\1\2\0\3\1\1\0\1\1"+
    "\1\0\1\12\4\0\2\1\3\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\2\1\1\0\1\12"+
    "\4\0\2\1\5\0\1\1\2\0\1\1\1\0\2\13"+
    "\1\1\1\0\1\1\3\0\3\1\4\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\7\2\1\1\0\1\1"+
    "\1\0\1\7\2\0\1\7\2\1\4\0\1\12\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\4\0\1\1\1\12"+
    "\1\0\1\1\1\0\2\1\3\0\1\1\4\0\1\10"+
    "\4\0\1\1\54\0\2\1\2\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[407];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\210\0\252\0\314"+
    "\0\356\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\210\0\210\0\u0286\0\u0286"+
    "\0\u0286\0\u0286\0\u02a8\0\u02ca\0\u02ca\0\u02ec\0\u030e\0\u0330"+
    "\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e\0\u0440"+
    "\0\u02ca\0\u0462\0\u0484\0\u04a6\0\u02ca\0\u02ca\0\u04c8\0\u04ea"+
    "\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa"+
    "\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a"+
    "\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\u081a"+
    "\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a"+
    "\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a"+
    "\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0286\0\u0b06\0\u0b28"+
    "\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38"+
    "\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u0d48"+
    "\0\u0d6a\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0286"+
    "\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24\0\u0f46"+
    "\0\u0f68\0\u0f8a\0\u0fac\0\u0fce\0\u0ff0\0\u1012\0\u1034\0\u1056"+
    "\0\u1078\0\u109a\0\u10bc\0\u10de\0\u1100\0\u1122\0\u1144\0\u1166"+
    "\0\u1188\0\u11aa\0\u052e\0\u11cc\0\u11ee\0\u1210\0\u1232\0\u1254"+
    "\0\u1276\0\u1298\0\u12ba\0\u12dc\0\u12fe\0\u1320\0\u1342\0\u1364"+
    "\0\u1386\0\u13a8\0\u13ca\0\u13ec\0\u140e\0\u1430\0\u1452\0\u1474"+
    "\0\u1496\0\u14b8\0\u14da\0\u14fc\0\u151e\0\u1540\0\u1562\0\u1584"+
    "\0\u15a6\0\u15c8\0\u15ea\0\u160c\0\u162e\0\u1650\0\u1672\0\u1694"+
    "\0\u16b6\0\u16d8\0\u16fa\0\u171c\0\u173e\0\u1760\0\u1782\0\u17a4"+
    "\0\u17c6\0\u17e8\0\u180a\0\u182c\0\u184e\0\u1870\0\u1892\0\u18b4"+
    "\0\u18d6\0\u18f8\0\u191a\0\u193c\0\u195e\0\u1980\0\u19a2\0\u19c4"+
    "\0\u19e6\0\u1a08\0\u1a2a\0\u1a4c\0\u1a6e\0\u1a90\0\u1ab2\0\u1ad4"+
    "\0\u1af6\0\u1b18\0\u1b3a\0\u1b5c\0\u1b7e\0\u1ba0\0\u1bc2\0\u1be4"+
    "\0\u1c06\0\u1c28\0\u1c4a\0\u1c6c\0\u1c8e\0\u1cb0\0\u1cd2\0\u1cf4"+
    "\0\u1d16\0\u1d38\0\u1d5a\0\u1d7c\0\u1d9e\0\u1dc0\0\u1de2\0\u1e04"+
    "\0\u1e26\0\u1e48\0\u1e6a\0\u1e8c\0\u1eae\0\u052e\0\u1ed0\0\u1ef2"+
    "\0\u1f14\0\u1f36\0\u1f58\0\u1f7a\0\u1f9c\0\u1fbe\0\u1fe0\0\u2002"+
    "\0\u2024\0\u2046\0\u2068\0\u208a\0\u20ac\0\u20ce\0\u20f0\0\u2112"+
    "\0\u2134\0\u2156\0\u2178\0\u219a\0\u21bc\0\u21de\0\u2200\0\u2222"+
    "\0\u2244\0\u2266\0\u2288\0\u22aa\0\u22cc\0\u22ee\0\u2310\0\u2332"+
    "\0\u2354\0\u2376\0\u2398\0\u23ba\0\u23dc\0\u23fe\0\u0286\0\u052e"+
    "\0\u2420\0\u2442\0\u2464\0\u2486\0\u24a8\0\u24ca\0\u24ec\0\u250e"+
    "\0\u2530\0\u2552\0\u2574\0\u2596\0\u25b8\0\u25da\0\u25fc\0\u261e"+
    "\0\u2640\0\u2662\0\u2684\0\u26a6\0\u21de\0\u26c8\0\u26ea\0\u270c"+
    "\0\u272e\0\u2750\0\u052e\0\u2772\0\u2794\0\u27b6\0\u27d8\0\u27fa"+
    "\0\u281c\0\u283e\0\u2860\0\u2882\0\u24ec\0\u28a4\0\u28c6\0\u28e8"+
    "\0\u290a\0\u292c\0\u294e\0\u2970\0\u2992\0\u29b4\0\u29d6\0\u29f8"+
    "\0\u2a1a\0\u2a3c\0\u2a5e\0\u27b6\0\u2a80\0\u2aa2\0\u2ac4\0\u2ae6"+
    "\0\u2b08\0\u2b2a\0\u2b4c\0\u2b6e\0\u2b90\0\u2bb2\0\u2bd4\0\u2bf6"+
    "\0\u2c18\0\u052e\0\u2c3a\0\u2c5c\0\u2c7e\0\u2ca0\0\u2cc2\0\u2ce4"+
    "\0\u2d06\0\u2d28\0\u2d4a\0\u2d6c\0\u2d8e\0\u2db0\0\u2dd2\0\u2df4"+
    "\0\u2e16\0\u2e38\0\u2e5a\0\u2e7c\0\u2e9e\0\u2ec0\0\u2ee2\0\u2f04"+
    "\0\u2f26\0\u2f48\0\u2f6a\0\u2f8c\0\u2fae\0\u2fd0\0\u2ff2\0\u3014"+
    "\0\u3036\0\u3058\0\u307a\0\u309c\0\u30be\0\u30e0\0\u3102\0\u3124"+
    "\0\u3146\0\u3168\0\u318a\0\u31ac\0\u31ce\0\u31f0\0\u3212\0\u3234"+
    "\0\u3256\0\u3278\0\u329a\0\u0770\0\u07b4\0\u0ac2\0\u0b06";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[407];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\3\10\1\11\1\12\1\10\1\13"+
    "\2\10\1\14\1\15\3\10\1\16\1\10\1\17\1\20"+
    "\1\21\1\5\1\10\1\22\1\23\1\24\3\5\1\10"+
    "\1\25\2\26\1\27\1\30\35\27\1\31\2\32\1\27"+
    "\1\30\5\33\1\27\5\33\1\27\5\33\1\27\2\33"+
    "\1\27\1\33\6\27\1\33\1\31\2\32\1\34\1\35"+
    "\1\36\3\37\1\40\1\41\1\37\1\42\2\37\1\43"+
    "\1\44\3\37\1\45\1\37\1\46\1\47\1\50\1\51"+
    "\1\37\1\52\1\53\1\54\3\34\1\37\1\55\1\56"+
    "\1\51\21\0\1\57\22\0\1\60\1\61\3\62\1\63"+
    "\5\62\1\64\7\62\1\65\1\0\1\62\6\0\1\62"+
    "\5\0\1\60\4\62\1\63\5\62\1\64\7\62\1\65"+
    "\1\0\1\62\6\0\1\62\5\0\1\60\4\62\1\63"+
    "\5\62\1\64\7\62\1\65\1\0\1\62\6\0\1\66"+
    "\7\0\1\67\14\0\1\57\22\0\1\60\4\62\1\63"+
    "\1\70\1\62\1\71\2\62\1\64\7\62\1\65\1\0"+
    "\1\62\6\0\1\62\5\0\1\60\4\62\1\72\5\62"+
    "\1\64\6\62\1\73\1\65\1\0\1\62\6\0\1\62"+
    "\6\0\1\74\15\0\1\57\22\0\1\60\4\62\1\63"+
    "\1\75\4\62\1\64\7\62\1\65\1\0\1\62\6\0"+
    "\1\62\5\0\1\76\4\0\1\63\1\0\1\77\3\0"+
    "\1\64\3\0\1\100\2\0\1\63\1\64\16\0\1\60"+
    "\1\62\1\101\2\62\1\63\5\62\1\64\7\62\1\65"+
    "\1\0\1\62\6\0\1\62\5\0\1\60\1\102\3\62"+
    "\1\63\5\62\1\64\7\62\1\65\1\0\1\62\6\0"+
    "\1\62\3\0\21\103\1\104\6\103\1\27\11\103\21\105"+
    "\1\106\7\105\1\27\10\105\21\0\1\57\11\0\1\107"+
    "\52\0\5\33\1\0\5\33\1\0\10\33\1\0\1\33"+
    "\6\0\1\33\24\0\1\110\22\0\1\111\1\112\3\62"+
    "\1\113\1\62\1\114\3\62\1\115\3\62\1\116\2\62"+
    "\1\117\1\120\1\0\1\62\6\0\1\62\5\0\1\111"+
    "\4\62\1\113\1\62\1\114\3\62\1\115\3\62\1\116"+
    "\2\62\1\117\1\120\1\0\1\62\6\0\1\62\5\0"+
    "\1\111\4\62\1\113\1\62\1\114\3\62\1\115\3\62"+
    "\1\116\2\62\1\117\1\120\1\0\1\62\6\0\1\66"+
    "\7\0\1\121\14\0\1\110\22\0\1\111\4\62\1\113"+
    "\1\70\1\114\1\122\2\62\1\115\3\62\1\116\2\62"+
    "\1\117\1\120\1\0\1\62\6\0\1\62\5\0\1\111"+
    "\4\62\1\123\1\62\1\114\3\62\1\115\3\62\1\116"+
    "\2\62\1\124\1\120\1\0\1\62\6\0\1\62\6\0"+
    "\1\125\15\0\1\110\22\0\1\111\4\62\1\113\1\126"+
    "\1\114\3\62\1\115\3\62\1\116\2\62\1\117\1\120"+
    "\1\0\1\62\6\0\1\62\5\0\1\127\4\0\1\113"+
    "\1\0\1\130\3\0\1\115\3\0\1\131\2\0\1\113"+
    "\1\115\16\0\1\111\1\62\1\132\2\62\1\113\1\62"+
    "\1\114\3\62\1\115\3\62\1\116\2\62\1\117\1\120"+
    "\1\0\1\62\6\0\1\62\5\0\1\111\1\133\3\62"+
    "\1\113\1\62\1\114\3\62\1\115\3\62\1\116\2\62"+
    "\1\117\1\120\1\0\1\62\6\0\1\62\3\0\21\134"+
    "\1\135\6\134\1\136\11\134\21\137\1\140\7\137\1\136"+
    "\10\137\21\0\1\110\11\0\1\107\16\0\1\141\33\0"+
    "\1\62\1\142\3\62\1\0\5\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\5\0\2\62\1\143\2\62\1\0"+
    "\5\62\1\0\10\62\1\0\1\62\6\0\1\62\5\0"+
    "\5\62\1\0\5\62\1\0\10\62\1\0\1\62\6\0"+
    "\1\62\7\0\1\144\40\0\1\145\40\0\1\62\1\146"+
    "\3\62\1\0\5\62\1\0\10\62\1\0\1\62\6\0"+
    "\1\62\5\0\5\62\1\0\1\62\1\147\3\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\11\0\1\150\35\0"+
    "\5\62\1\151\5\62\1\0\6\62\1\152\1\62\1\0"+
    "\1\62\6\0\1\62\5\0\5\62\1\0\1\153\4\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\7\0\1\144"+
    "\14\0\1\154\22\0\5\62\1\0\5\62\1\0\3\62"+
    "\1\155\4\62\1\0\1\62\6\0\1\62\21\0\1\156"+
    "\25\0\5\62\1\0\4\62\1\157\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\6\0\1\160\50\0\1\161\37\0"+
    "\1\162\33\0\4\62\1\163\1\0\5\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\5\0\5\62\1\0\5\62"+
    "\1\0\1\164\7\62\1\0\1\62\6\0\1\62\3\0"+
    "\30\103\1\27\21\103\1\165\17\103\1\27\11\103\31\105"+
    "\1\27\20\105\1\166\20\105\1\27\10\105\34\0\1\167"+
    "\1\170\14\0\1\171\33\0\1\62\1\172\3\62\1\0"+
    "\5\62\1\0\10\62\1\0\1\62\6\0\1\62\5\0"+
    "\2\62\1\173\2\62\1\0\5\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\7\0\1\174\37\0\5\62\1\0"+
    "\2\62\1\175\2\62\1\0\10\62\1\0\1\62\6\0"+
    "\1\62\6\0\1\176\40\0\5\62\1\0\1\177\4\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\5\0\2\62"+
    "\1\200\2\62\1\0\5\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\5\0\1\62\1\201\3\62\1\0\5\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\11\0\1\202"+
    "\35\0\5\62\1\0\1\203\4\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\7\0\1\174\14\0\1\154\22\0"+
    "\2\62\1\200\2\62\1\0\5\62\1\0\3\62\1\155"+
    "\4\62\1\0\1\62\6\0\1\62\21\0\1\204\25\0"+
    "\5\62\1\0\4\62\1\205\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\6\0\1\206\50\0\1\207\37\0\1\210"+
    "\33\0\4\62\1\211\1\0\5\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\5\0\5\62\1\0\5\62\1\0"+
    "\1\212\7\62\1\0\1\62\6\0\1\62\3\0\30\134"+
    "\1\136\21\134\1\213\17\134\1\136\11\134\31\137\1\136"+
    "\20\137\1\214\20\137\1\136\10\137\14\0\1\215\27\0"+
    "\2\62\1\216\2\62\1\0\5\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\5\0\3\62\1\217\1\62\1\0"+
    "\5\62\1\0\10\62\1\0\1\62\6\0\1\62\11\0"+
    "\1\220\51\0\1\221\25\0\5\62\1\0\5\62\1\0"+
    "\1\222\7\62\1\0\1\62\6\0\1\62\5\0\5\62"+
    "\1\0\3\62\1\223\1\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\16\0\1\224\32\0\1\225\37\0\2\62"+
    "\1\226\2\62\1\0\5\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\5\0\3\62\1\227\1\62\1\0\5\62"+
    "\1\0\1\62\1\230\6\62\1\0\1\62\6\0\1\62"+
    "\16\0\1\231\30\0\5\62\1\0\3\62\1\232\1\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\15\0\1\233"+
    "\31\0\1\62\1\234\3\62\1\0\5\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\7\0\1\235\45\0\1\236"+
    "\45\0\1\237\27\0\5\62\1\0\3\62\1\240\1\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\5\0\5\62"+
    "\1\0\2\62\1\241\2\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\3\0\14\103\1\242\13\103\1\27\11\103"+
    "\14\105\1\243\14\105\1\27\10\105\33\0\1\107\22\0"+
    "\1\244\27\0\2\62\1\245\2\62\1\0\5\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\5\0\3\62\1\246"+
    "\1\62\1\0\5\62\1\0\10\62\1\0\1\62\6\0"+
    "\1\62\11\0\1\247\35\0\5\62\1\0\1\250\4\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\21\0\1\251"+
    "\25\0\5\62\1\0\4\62\1\252\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\5\0\4\62\1\253\1\0\5\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\5\0\5\62"+
    "\1\0\5\62\1\0\1\254\7\62\1\0\1\62\6\0"+
    "\1\62\16\0\1\255\30\0\3\62\1\256\1\62\1\0"+
    "\5\62\1\0\1\62\1\257\6\62\1\0\1\62\6\0"+
    "\1\62\15\0\1\260\31\0\1\62\1\261\3\62\1\0"+
    "\5\62\1\0\10\62\1\0\1\62\6\0\1\62\7\0"+
    "\1\262\45\0\1\263\45\0\1\264\27\0\5\62\1\0"+
    "\3\62\1\265\1\62\1\0\10\62\1\0\1\62\6\0"+
    "\1\62\5\0\5\62\1\0\2\62\1\266\2\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\3\0\14\134\1\267"+
    "\13\134\1\136\11\134\14\137\1\270\14\137\1\136\10\137"+
    "\3\0\1\271\40\0\3\62\1\272\1\62\1\0\5\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\5\0\4\62"+
    "\1\273\1\0\5\62\1\0\10\62\1\0\1\62\6\0"+
    "\1\62\16\0\1\274\40\0\1\275\31\0\5\62\1\0"+
    "\2\62\1\276\2\62\1\0\10\62\1\0\1\62\6\0"+
    "\1\62\15\0\1\277\35\0\1\300\35\0\4\62\1\301"+
    "\1\0\5\62\1\0\10\62\1\0\1\62\6\0\1\62"+
    "\5\0\5\62\1\0\3\62\1\302\1\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\5\0\5\62\1\0\2\62"+
    "\1\303\2\62\1\0\10\62\1\0\1\62\6\0\1\62"+
    "\7\0\1\304\37\0\2\62\1\305\2\62\1\0\5\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\13\0\1\306"+
    "\33\0\5\62\1\0\5\62\1\0\4\62\1\307\3\62"+
    "\1\0\1\62\6\0\1\62\10\0\1\310\41\0\1\311"+
    "\11\0\1\312\25\0\1\313\40\0\5\62\1\0\2\62"+
    "\1\314\2\62\1\0\10\62\1\0\1\62\6\0\1\62"+
    "\5\0\5\62\1\0\1\315\4\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\3\0\3\103\1\316\24\103\1\27"+
    "\11\103\3\105\1\317\25\105\1\27\10\105\3\0\1\320"+
    "\40\0\3\62\1\321\1\62\1\0\5\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\5\0\4\62\1\322\1\0"+
    "\5\62\1\0\10\62\1\0\1\62\6\0\1\62\16\0"+
    "\1\323\30\0\3\62\1\324\1\62\1\0\5\62\1\0"+
    "\1\62\1\325\6\62\1\0\1\62\6\0\1\62\15\0"+
    "\1\326\31\0\1\62\1\327\3\62\1\0\5\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\5\0\5\62\1\0"+
    "\3\62\1\330\1\62\1\0\10\62\1\0\1\62\6\0"+
    "\1\62\5\0\5\62\1\0\2\62\1\331\2\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\15\0\1\332\31\0"+
    "\5\62\1\0\3\62\1\333\1\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\5\0\5\62\1\0\2\62\1\334"+
    "\2\62\1\0\10\62\1\0\1\62\6\0\1\62\13\0"+
    "\1\335\33\0\5\62\1\0\5\62\1\0\4\62\1\336"+
    "\3\62\1\0\1\62\6\0\1\62\10\0\1\337\41\0"+
    "\1\340\11\0\1\341\25\0\1\342\40\0\5\62\1\0"+
    "\2\62\1\343\2\62\1\0\10\62\1\0\1\62\6\0"+
    "\1\62\5\0\5\62\1\0\1\344\4\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\3\0\3\134\1\345\24\134"+
    "\1\136\11\134\3\137\1\346\25\137\1\136\10\137\22\0"+
    "\1\347\21\0\4\62\1\350\1\0\5\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\5\0\5\62\1\351\5\62"+
    "\1\0\6\62\1\352\1\62\1\0\1\62\6\0\1\62"+
    "\15\0\1\353\37\0\1\354\33\0\5\62\1\0\1\355"+
    "\4\62\1\0\10\62\1\0\1\62\6\0\1\62\5\0"+
    "\1\356\52\0\1\357\30\0\5\62\1\0\3\62\1\360"+
    "\1\62\1\0\10\62\1\0\1\62\6\0\1\62\5\0"+
    "\5\62\1\0\4\62\1\361\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\5\0\5\62\1\0\5\62\1\0\2\62"+
    "\1\362\5\62\1\0\1\62\6\0\1\62\20\0\1\363"+
    "\7\0\1\363\16\0\5\62\1\0\5\62\1\363\7\62"+
    "\1\364\1\0\1\62\6\0\1\62\6\0\1\365\40\0"+
    "\5\62\1\0\3\62\1\366\1\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\11\0\1\367\46\0\1\370\40\0"+
    "\1\371\51\0\1\372\21\0\1\373\4\62\1\0\5\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\5\0\1\62"+
    "\1\374\3\62\1\0\5\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\3\0\22\103\1\375\5\103\1\27\11\103"+
    "\22\105\1\376\6\105\1\27\10\105\22\0\1\377\21\0"+
    "\4\62\1\u0100\1\0\5\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\5\0\5\62\1\u0101\5\62\1\0\6\62"+
    "\1\u0102\1\62\1\0\1\62\6\0\1\62\15\0\1\u0103"+
    "\31\0\5\62\1\0\3\62\1\u0104\1\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\5\0\5\62\1\0\2\62"+
    "\1\u0105\2\62\1\0\10\62\1\0\1\62\6\0\1\62"+
    "\13\0\1\u0106\33\0\5\62\1\0\5\62\1\0\4\62"+
    "\1\u0107\3\62\1\0\1\62\6\0\1\62\5\0\5\62"+
    "\1\0\2\62\1\u0108\2\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\5\0\5\62\1\0\1\u0109\4\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\5\0\1\u010a\41\0"+
    "\5\62\1\0\4\62\1\u010b\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\5\0\5\62\1\0\5\62\1\0\2\62"+
    "\1\u010c\5\62\1\0\1\62\6\0\1\62\6\0\1\u010d"+
    "\40\0\5\62\1\0\3\62\1\u010e\1\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\11\0\1\u010f\46\0\1\u0110"+
    "\40\0\1\u0111\51\0\1\u0112\21\0\1\u0113\4\62\1\0"+
    "\5\62\1\0\10\62\1\0\1\62\6\0\1\62\5\0"+
    "\1\62\1\u0114\3\62\1\0\5\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\3\0\22\134\1\u0115\5\134\1\136"+
    "\11\134\22\137\1\u0116\6\137\1\136\10\137\13\0\1\u0117"+
    "\30\0\5\62\1\u0118\5\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\13\0\1\u0119\33\0\5\62\1\0\1\u011a"+
    "\4\62\1\0\10\62\1\0\1\62\6\0\1\62\5\0"+
    "\1\u011b\42\0\1\u011c\40\0\1\62\1\u011d\3\62\1\0"+
    "\5\62\1\0\10\62\1\0\1\62\6\0\1\62\23\0"+
    "\1\u011e\33\0\1\u011f\31\0\5\62\1\0\2\62\1\u0120"+
    "\2\62\1\0\10\62\1\0\1\62\6\0\1\62\5\0"+
    "\1\62\1\u0121\3\62\1\0\5\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\5\0\5\62\1\0\5\62\1\0"+
    "\3\62\1\366\4\62\1\0\1\62\6\0\1\62\12\0"+
    "\1\u0122\14\0\1\u0122\17\0\5\62\1\u0122\5\62\1\0"+
    "\6\62\1\u0123\1\62\1\0\1\62\6\0\1\62\11\0"+
    "\1\u0124\42\0\1\u0118\14\0\1\u0118\31\0\1\u0125\45\0"+
    "\1\u0126\34\0\1\u0127\30\0\5\62\1\0\5\62\1\0"+
    "\2\62\1\u0128\5\62\1\0\1\62\6\0\1\62\5\0"+
    "\4\62\1\u0129\1\0\5\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\3\0\13\103\1\u012a\14\103\1\27\11\103"+
    "\13\105\1\u012b\15\105\1\27\10\105\13\0\1\u012c\30\0"+
    "\5\62\1\u012d\5\62\1\0\6\62\1\u012e\1\62\1\0"+
    "\1\62\6\0\1\62\13\0\1\u012f\33\0\5\62\1\0"+
    "\1\u0130\4\62\1\0\10\62\1\0\1\62\6\0\1\62"+
    "\5\0\1\u0131\41\0\5\62\1\0\4\62\1\u0132\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\5\0\5\62\1\0"+
    "\5\62\1\0\2\62\1\u0133\5\62\1\0\1\62\6\0"+
    "\1\62\6\0\1\u0134\40\0\5\62\1\0\3\62\1\u0135"+
    "\1\62\1\0\10\62\1\0\1\62\6\0\1\62\5\0"+
    "\1\u0136\4\62\1\0\5\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\5\0\1\62\1\u0137\3\62\1\0\5\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\23\0\1\u0138"+
    "\23\0\1\62\1\u0139\3\62\1\0\5\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\5\0\5\62\1\0\5\62"+
    "\1\0\3\62\1\u010e\4\62\1\0\1\62\6\0\1\62"+
    "\11\0\1\u013a\35\0\5\u013b\1\0\5\u013b\1\0\10\u013b"+
    "\1\0\1\u013b\6\0\1\u013b\12\0\1\u012d\14\0\1\u012d"+
    "\31\0\1\u013c\45\0\1\u013d\34\0\1\u013e\30\0\5\62"+
    "\1\0\5\62\1\0\2\62\1\u013f\5\62\1\0\1\62"+
    "\6\0\1\62\5\0\4\62\1\u0140\1\0\5\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\3\0\13\134\1\u0141"+
    "\14\134\1\136\11\134\13\137\1\u0142\15\137\1\136\10\137"+
    "\11\0\1\u0143\14\0\1\u0117\12\0\1\u0117\10\0\1\u0144"+
    "\35\0\1\u0145\37\0\2\62\1\366\2\62\1\0\5\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\23\0\1\u0146"+
    "\27\0\1\u0147\35\0\4\62\1\u0148\1\0\5\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\10\0\1\u0149\36\0"+
    "\5\62\1\0\2\62\1\307\2\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\13\0\1\u014a\33\0\5\62\1\0"+
    "\1\u014b\4\62\1\0\10\62\1\0\1\62\6\0\1\62"+
    "\12\0\1\u014c\14\0\1\u014c\20\0\1\u014d\57\0\1\u0127"+
    "\22\0\5\27\1\0\5\27\1\0\10\27\1\0\1\27"+
    "\6\0\1\27\5\0\3\62\1\307\1\62\1\0\5\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\5\0\5\62"+
    "\1\u014c\5\62\1\0\6\62\1\u014e\1\62\1\0\1\62"+
    "\6\0\1\62\3\0\11\103\1\u014f\14\103\1\u012a\1\103"+
    "\1\27\10\103\1\u012a\11\105\1\u0150\14\105\1\u012b\2\105"+
    "\1\27\7\105\1\u012b\11\0\1\u0151\14\0\1\u012c\12\0"+
    "\1\u012c\10\0\1\u0152\33\0\5\62\1\0\1\u0153\4\62"+
    "\1\0\10\62\1\0\1\62\6\0\1\62\7\0\1\u0154"+
    "\37\0\2\62\1\u010e\2\62\1\0\5\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\23\0\1\u0155\23\0\1\62"+
    "\1\u0156\3\62\1\0\5\62\1\0\10\62\1\0\1\62"+
    "\6\0\1\62\5\0\5\62\1\0\5\62\1\0\3\62"+
    "\1\u0135\4\62\1\0\1\62\6\0\1\62\11\0\1\u0157"+
    "\35\0\5\62\1\0\5\62\1\0\2\62\1\u0158\5\62"+
    "\1\0\1\62\6\0\1\62\5\0\4\62\1\u0159\1\0"+
    "\5\62\1\0\10\62\1\0\1\62\6\0\1\62\10\0"+
    "\1\u015a\36\0\5\62\1\0\2\62\1\336\2\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\12\0\1\u015b\14\0"+
    "\1\u015b\20\0\1\u015c\57\0\1\u013e\22\0\5\136\1\0"+
    "\5\136\1\0\10\136\1\0\1\136\6\0\1\136\5\0"+
    "\3\62\1\336\1\62\1\0\5\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\5\0\5\62\1\u015b\5\62\1\0"+
    "\6\62\1\u015d\1\62\1\0\1\62\6\0\1\62\3\0"+
    "\11\134\1\u015e\14\134\1\u0141\1\134\1\136\10\134\1\u0141"+
    "\11\137\1\u015f\14\137\1\u0142\2\137\1\136\7\137\1\u0142"+
    "\12\0\1\u0160\33\0\1\u0127\42\0\1\372\43\0\1\u0161"+
    "\14\0\1\u0161\17\0\5\62\1\u0161\5\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\16\0\1\u0145\32\0\1\170"+
    "\37\0\2\62\1\u0162\2\62\1\0\5\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\7\0\1\u0149\47\0\1\372"+
    "\31\0\2\62\1\307\2\62\1\0\5\62\1\0\10\62"+
    "\1\0\1\62\6\0\1\62\3\0\12\103\1\u0163\15\103"+
    "\1\27\11\103\12\105\1\u0164\16\105\1\27\10\105\12\0"+
    "\1\u0165\33\0\1\u013e\37\0\2\62\1\u0135\2\62\1\0"+
    "\5\62\1\0\10\62\1\0\1\62\6\0\1\62\10\0"+
    "\1\u0112\36\0\5\62\1\0\2\62\1\u0107\2\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\12\0\1\u0166\14\0"+
    "\1\u0166\17\0\3\62\1\u0107\1\62\1\0\5\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\5\0\5\62\1\u0166"+
    "\5\62\1\0\6\62\1\u0167\1\62\1\0\1\62\6\0"+
    "\1\62\16\0\1\u0154\32\0\1\u015a\47\0\1\u0112\31\0"+
    "\2\62\1\336\2\62\1\0\5\62\1\0\10\62\1\0"+
    "\1\62\6\0\1\62\3\0\12\134\1\u0168\15\134\1\136"+
    "\11\134\12\137\1\u0169\16\137\1\136\10\137\10\0\1\u016a"+
    "\35\0\1\372\35\0\10\103\1\u016b\17\103\1\27\11\103"+
    "\10\105\1\u016c\20\105\1\27\10\105\10\0\1\u016d\35\0"+
    "\1\u0112\37\0\2\62\1\u0107\2\62\1\0\5\62\1\0"+
    "\10\62\1\0\1\62\6\0\1\62\3\0\10\134\1\u016e"+
    "\17\134\1\136\11\134\10\137\1\u016f\20\137\1\136\10\137"+
    "\5\0\1\u0170\34\0\5\103\1\u0171\22\103\1\27\11\103"+
    "\5\105\1\u0172\23\105\1\27\10\105\5\0\1\u0173\34\0"+
    "\5\134\1\u0174\22\134\1\136\11\134\5\137\1\u0175\23\137"+
    "\1\136\10\137\13\0\1\u0176\26\0\13\103\1\u0177\14\103"+
    "\1\27\11\103\13\105\1\u0178\15\105\1\27\10\105\13\0"+
    "\1\u0179\26\0\13\134\1\u017a\14\134\1\136\11\134\13\137"+
    "\1\u017b\15\137\1\136\10\137\14\0\1\u017c\25\0\14\103"+
    "\1\u017d\13\103\1\27\11\103\14\105\1\u017e\14\105\1\27"+
    "\10\105\14\0\1\u017f\25\0\14\134\1\u0180\13\134\1\136"+
    "\11\134\14\137\1\u0181\14\137\1\136\10\137\3\0\1\u0182"+
    "\36\0\3\103\1\u0183\24\103\1\27\11\103\3\105\1\u0184"+
    "\25\105\1\27\10\105\3\0\1\u0185\36\0\3\134\1\u0186"+
    "\24\134\1\136\11\134\3\137\1\u0187\25\137\1\136\10\137"+
    "\12\0\1\u0188\27\0\12\103\1\u0189\15\103\1\27\11\103"+
    "\12\105\1\u018a\16\105\1\27\10\105\12\0\1\u018b\27\0"+
    "\12\134\1\u018c\15\134\1\136\11\134\12\137\1\u018d\16\137"+
    "\1\136\10\137\13\0\1\u018e\26\0\13\103\1\u018f\14\103"+
    "\1\27\11\103\13\105\1\u0190\15\105\1\27\10\105\13\0"+
    "\1\u0191\26\0\13\134\1\u0192\14\134\1\136\11\134\13\137"+
    "\1\u0193\15\137\1\136\10\137\2\27\5\0\1\27\5\0"+
    "\1\27\10\0\1\27\1\0\6\27\1\0\3\27\2\u0194"+
    "\5\103\1\u0194\5\103\1\u0194\10\103\1\u0194\1\103\1\27"+
    "\5\u0194\1\103\3\u0194\2\u0195\5\105\1\u0195\5\105\1\u0195"+
    "\10\105\1\u0195\1\105\1\u0195\1\27\4\u0195\1\105\3\u0195"+
    "\2\136\5\0\1\136\5\0\1\136\10\0\1\136\1\0"+
    "\6\136\1\0\3\136\2\u0196\5\134\1\u0196\5\134\1\u0196"+
    "\10\134\1\u0196\1\134\1\136\5\u0196\1\134\3\u0196\2\u0197"+
    "\5\137\1\u0197\5\137\1\u0197\10\137\1\u0197\1\137\1\u0197"+
    "\1\136\4\u0197\1\137\3\u0197";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12988];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\22\1\4\11\24\1\1\0\3\1\2\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\3\0\2\1"+
    "\6\0\2\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\3\0\2\1\2\0\1\11"+
    "\3\0\2\1\2\0\2\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\3\0\2\1\3\0\1\11\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\3\0\2\1\3\0\2\1\2\0\2\1\2\0\3\1"+
    "\1\0\1\1\1\0\1\1\3\0\2\1\3\0\2\1"+
    "\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1"+
    "\3\0\2\1\3\0\2\1\2\0\1\1\2\0\3\1"+
    "\1\0\1\1\1\0\1\1\4\0\2\1\3\0\2\1"+
    "\1\0\2\1\1\0\3\1\1\0\2\1\1\0\1\1"+
    "\4\0\2\1\3\0\1\1\1\0\1\1\2\0\1\1"+
    "\2\0\3\1\1\0\1\1\1\0\1\1\4\0\2\1"+
    "\3\0\1\1\1\0\1\1\1\0\2\1\1\0\3\1"+
    "\1\0\2\1\1\0\1\1\4\0\2\1\5\0\1\1"+
    "\2\0\1\1\1\0\1\11\2\1\1\0\1\1\3\0"+
    "\3\1\4\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\0\3\1\4\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\4\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\1\1\4\0"+
    "\1\1\4\0\1\1\54\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[407];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/** Variable used to store violation location and variable involved. **/
	String location = "MAIN PROGRAM";
	boolean dimension = false, type = false, pointer = false;

	
	public F90INSTPointer() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90INSTPointer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	 
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 12: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 13: break;
          case 3: 
            { if(pointer && !dimension && !type) setError(location,"This use of POINTER is not allowed.", yyline+1);
							 pointer= false; dimension=false; type=false;
            }
          case 14: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 15: break;
          case 5: 
            { yybegin(NEW_LINE);
            }
          case 16: break;
          case 6: 
            { location = location + " " + yytext(); 
							 yybegin(AVOID);
            }
          case 17: break;
          case 7: 
            { yybegin(YYINITIAL);
            }
          case 18: break;
          case 8: 
            { dimension=true;
            }
          case 19: break;
          case 9: 
            { type=true;
            }
          case 20: break;
          case 10: 
            { location = yytext(); 
							 yybegin(NAMING);
            }
          case 21: break;
          case 11: 
            { pointer=true;
            }
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
