/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F90.TYPE.Real rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F90TYPEReal.lex</tt>
 */
public class F90TYPEReal extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int DECL = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\2\1\35\1\36\1\2\22\0\1\27\1\1\1\32"+
    "\4\0\1\31\1\34\7\0\12\24\1\37\2\0\1\40\3\0\1\21"+
    "\1\17\1\6\1\15\1\14\1\3\1\20\1\30\1\25\2\30\1\23"+
    "\1\22\1\5\1\11\1\12\1\30\1\13\1\26\1\7\1\4\2\30"+
    "\1\33\2\30\4\0\1\24\1\0\1\21\1\17\1\6\1\15\1\14"+
    "\1\3\1\20\1\30\1\25\2\30\1\23\1\22\1\5\1\11\1\12"+
    "\1\30\1\13\1\26\1\7\1\4\2\30\1\33\2\30\12\0\1\35"+
    "\252\0\2\10\115\0\1\16\u1ea8\0\1\35\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\15\1\1\3\1\1\1\2\1\4"+
    "\1\3\1\5\1\2\1\6\1\7\1\1\1\10\22\0"+
    "\1\1\1\11\33\0\1\12\45\0\1\13\11\0\1\1"+
    "\56\0\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\204\0\245\0\306"+
    "\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce"+
    "\0\u01ef\0\u0210\0\u0231\0\204\0\u0252\0\u0252\0\u0252\0\u0252"+
    "\0\u0273\0\u0294\0\u0252\0\u02b5\0\u02d6\0\u0252\0\u02f7\0\u0318"+
    "\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd\0\u03de\0\u03ff\0\u0420"+
    "\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u0507\0\u0528"+
    "\0\u0294\0\u0252\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee"+
    "\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u06f6"+
    "\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc\0\u07dd\0\u07fe"+
    "\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3\0\u08c4\0\u08e5\0\u0906"+
    "\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\u0a0e"+
    "\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0ab3\0\u0ad4\0\u0af5\0\u08c4"+
    "\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd"+
    "\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05"+
    "\0\u0d26\0\u0d47\0\u0d68\0\u0d89\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d"+
    "\0\u0e2e\0\u0e4f\0\u0e70\0\u0e91\0\u0eb2\0\u0d89\0\u0ed3\0\u0ef4"+
    "\0\u0f15\0\u0f36\0\u0f57\0\u0f78\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc"+
    "\0\u101d\0\u103e\0\u105f\0\u1080\0\u10a1\0\u10c2\0\u10e3\0\u1104"+
    "\0\u1125\0\u1146\0\u1167\0\u1188\0\u11a9\0\u11ca\0\u11eb\0\u120c"+
    "\0\u122d\0\u124e\0\u126f\0\u1290\0\u12b1\0\u12d2\0\u12f3\0\u1314"+
    "\0\u1335\0\u1356\0\u1377\0\u1398\0\u13b9\0\u13da\0\u13fb\0\u141c"+
    "\0\u143d\0\u145e\0\u147f\0\u14a0\0\u04c5\0\u0507";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\2\10\1\11\1\10\1\12"+
    "\1\10\1\13\1\14\1\10\1\15\1\16\3\10\1\17"+
    "\2\10\1\20\1\21\1\5\1\10\1\22\1\23\1\10"+
    "\1\5\2\24\2\5\1\25\1\26\1\27\32\25\2\30"+
    "\3\25\1\26\1\27\5\31\1\25\5\31\1\25\5\31"+
    "\1\25\2\31\1\25\1\31\2\25\1\31\1\25\2\30"+
    "\3\25\1\32\1\33\5\34\1\25\5\34\1\25\5\34"+
    "\1\25\2\34\1\25\1\34\2\25\1\34\1\25\2\30"+
    "\1\35\1\36\22\0\1\37\21\0\1\40\1\41\3\0"+
    "\1\42\1\0\1\43\3\0\1\44\3\0\1\45\2\0"+
    "\1\42\1\44\15\0\1\40\4\0\1\42\1\0\1\43"+
    "\3\0\1\44\3\0\1\45\2\0\1\42\1\44\15\0"+
    "\1\40\4\0\1\42\1\46\1\43\3\0\1\44\3\0"+
    "\1\45\2\0\1\42\1\44\17\0\1\47\14\0\1\37"+
    "\21\0\1\40\4\0\1\42\1\0\1\43\1\50\2\0"+
    "\1\44\3\0\1\45\2\0\1\42\1\44\15\0\1\40"+
    "\4\0\1\42\1\0\1\43\1\0\1\51\1\0\1\44"+
    "\3\0\1\45\2\0\1\42\1\44\15\0\1\40\4\0"+
    "\1\42\1\52\1\43\3\0\1\44\3\0\1\45\2\0"+
    "\1\42\1\44\16\0\1\53\15\0\1\37\21\0\1\40"+
    "\4\0\1\42\1\54\1\43\3\0\1\44\3\0\1\45"+
    "\2\0\1\42\1\44\15\0\1\40\1\0\1\47\2\0"+
    "\1\42\1\0\1\43\3\0\1\44\3\0\1\45\2\0"+
    "\1\42\1\44\15\0\1\40\1\53\3\0\1\42\1\0"+
    "\1\43\3\0\1\44\3\0\1\45\2\0\1\42\1\44"+
    "\12\0\22\55\1\56\6\55\1\25\7\55\22\57\1\60"+
    "\7\57\1\25\6\57\44\0\5\31\1\0\5\31\1\0"+
    "\10\31\1\0\1\31\2\0\1\31\5\0\2\61\1\0"+
    "\36\61\3\0\5\34\1\0\5\34\1\0\10\34\1\0"+
    "\1\34\2\0\1\34\44\0\1\62\12\0\1\63\33\0"+
    "\1\64\41\0\1\65\40\0\1\66\46\0\1\67\31\0"+
    "\1\70\45\0\1\71\51\0\1\72\25\0\1\73\42\0"+
    "\1\74\50\0\1\75\23\0\1\76\53\0\1\77\36\0"+
    "\1\100\23\0\31\55\1\25\20\55\1\101\17\55\1\25"+
    "\7\55\32\57\1\25\17\57\1\102\20\57\1\25\6\57"+
    "\15\0\1\103\30\0\1\104\41\0\1\105\41\0\1\106"+
    "\42\0\1\107\46\0\1\110\36\0\1\111\35\0\1\112"+
    "\42\0\1\113\32\0\1\114\11\0\1\115\43\0\1\116"+
    "\34\0\1\117\34\0\1\120\31\0\1\121\34\0\15\55"+
    "\1\122\13\55\1\25\7\55\15\57\1\123\14\57\1\25"+
    "\6\57\4\0\1\124\42\0\1\125\41\0\1\126\45\0"+
    "\1\127\32\0\1\130\11\0\1\131\33\0\1\132\31\0"+
    "\1\133\57\0\1\134\30\0\1\135\41\0\1\136\37\0"+
    "\1\137\54\0\1\140\4\0\1\25\1\0\1\140\25\0"+
    "\1\141\26\0\1\142\52\0\1\143\15\0\4\55\1\144"+
    "\24\55\1\25\7\55\4\57\1\145\25\57\1\25\6\57"+
    "\23\0\1\146\24\0\1\147\41\0\1\150\14\0\1\150"+
    "\26\0\1\151\41\0\1\152\37\0\1\153\36\0\1\154"+
    "\52\0\1\155\31\0\1\156\27\0\1\157\52\0\1\160"+
    "\44\0\1\161\33\0\1\162\30\0\1\163\50\0\1\164"+
    "\24\0\23\55\1\165\5\55\1\25\7\55\23\57\1\166"+
    "\6\57\1\25\6\57\14\0\1\167\34\0\1\170\14\0"+
    "\1\170\24\0\1\171\32\0\1\172\52\0\1\173\44\0"+
    "\1\174\23\0\1\175\50\0\1\176\57\0\1\116\26\0"+
    "\1\177\23\0\1\200\56\0\1\164\30\0\1\201\14\0"+
    "\1\162\6\0\1\162\11\0\1\202\34\0\5\25\1\0"+
    "\5\25\1\0\10\25\1\0\1\25\2\0\1\25\5\0"+
    "\14\55\1\203\14\55\1\25\7\55\14\57\1\204\15\57"+
    "\1\25\6\57\12\0\1\205\14\0\1\167\6\0\1\167"+
    "\13\0\1\206\34\0\1\164\54\0\1\207\23\0\1\210"+
    "\56\0\1\176\25\0\1\211\37\0\1\143\45\0\1\143"+
    "\40\0\1\212\35\0\1\213\14\0\1\213\13\0\12\55"+
    "\1\214\14\55\1\203\1\55\1\25\4\55\1\203\2\55"+
    "\12\57\1\215\14\57\1\204\2\57\1\25\3\57\1\204"+
    "\2\57\13\0\1\216\32\0\1\176\41\0\1\155\45\0"+
    "\1\155\35\0\1\217\14\0\1\217\27\0\1\220\31\0"+
    "\1\143\33\0\13\55\1\221\15\55\1\25\7\55\13\57"+
    "\1\222\16\57\1\25\6\57\11\0\1\223\34\0\1\155"+
    "\41\0\1\224\32\0\11\55\1\225\17\55\1\25\7\55"+
    "\11\57\1\226\20\57\1\25\6\57\6\0\1\227\42\0"+
    "\1\230\14\0\1\230\13\0\6\55\1\231\22\55\1\25"+
    "\7\55\6\57\1\232\23\57\1\25\6\57\14\0\1\233"+
    "\42\0\1\234\7\0\1\234\12\0\14\55\1\235\14\55"+
    "\1\25\7\55\14\57\1\236\15\57\1\25\6\57\15\0"+
    "\1\237\33\0\1\240\14\0\1\240\13\0\15\55\1\241"+
    "\13\55\1\25\7\55\15\57\1\242\14\57\1\25\6\57"+
    "\4\0\1\243\45\0\1\244\27\0\4\55\1\245\24\55"+
    "\1\25\7\55\4\57\1\246\25\57\1\25\6\57\13\0"+
    "\1\247\32\0\1\116\33\0\13\55\1\250\15\55\1\25"+
    "\7\55\13\57\1\251\16\57\1\25\6\57\14\0\1\252"+
    "\24\0\14\55\1\253\14\55\1\25\7\55\14\57\1\254"+
    "\15\57\1\25\6\57\3\25\5\0\1\25\5\0\1\25"+
    "\10\0\1\25\1\0\2\25\1\0\5\25\3\255\5\55"+
    "\1\255\5\55\1\255\10\55\1\255\1\55\1\25\1\255"+
    "\1\55\5\255\3\256\5\57\1\256\5\57\1\256\10\57"+
    "\1\256\1\57\1\256\1\25\1\57\5\256";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5313];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\20\1\4\11\2\1\1\11\2\1\1\11\22\0"+
    "\1\1\1\11\33\0\1\1\45\0\1\1\11\0\1\1"+
    "\56\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/** Variable used to store violation location and variable involved. **/
	String location = "MAIN PROGRAM";
	/** Boolean to determine if it is a real error **/
	boolean error = false;
	/** Boolean to determine if the variable name needs to be saved **/
	boolean saveVar = true;
	/** String to store the name of the variable who throws the error **/
	String variable = "";
	
	public F90TYPEReal() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F90TYPEReal(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	 
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 12: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 13: break;
          case 3: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 14: break;
          case 4: 
            { yybegin(YYINITIAL);
            }
          case 15: break;
          case 5: 
            { location = location + " " + yytext(); 
							 yybegin(COMMENT);
            }
          case 16: break;
          case 6: 
            { if (error) {
								this.setError(location,"It misses the declaration SELECTED_REAL_KIND in the initialisation of " + variable, yyline + 1);
							 }
							 error = false;
							 variable = "";
							 saveVar = true;
							 yybegin(YYINITIAL);
            }
          case 17: break;
          case 7: 
            { if(error && saveVar) {
								if(variable == "") variable = yytext();
								else variable = variable + ", " + yytext();
							 }
            }
          case 18: break;
          case 8: 
            { saveVar = false;
            }
          case 19: break;
          case 9: 
            { error = true;
            }
          case 20: break;
          case 10: 
            { yybegin(DECL);
            }
          case 21: break;
          case 11: 
            { location = yytext(); 
							 yybegin(NAMING);
            }
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
