/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.INST.Indent rule.	    */
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Logger;


import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMPRESIndent.lex</tt>
 */
public class COMPRESIndent extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int AVOID = 10;
  public static final int IF_STATE = 12;
  public static final int TYPE_STATE = 14;
  public static final int DO_STATE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\4\1\51\1\52\1\34\22\0\1\25\1\1\1\45"+
    "\1\53\1\50\1\0\1\35\1\44\1\31\1\32\1\3\1\50\2\0"+
    "\1\50\1\0\12\46\3\0\1\36\3\0\1\22\1\20\1\2\1\16"+
    "\1\15\1\5\1\21\1\26\1\41\2\40\1\24\1\23\1\7\1\12"+
    "\1\13\1\40\1\14\1\42\1\10\1\6\1\37\1\33\1\27\1\30"+
    "\1\40\4\0\1\43\1\0\1\22\1\20\1\2\1\16\1\15\1\5"+
    "\1\21\1\26\1\41\2\40\1\24\1\23\1\7\1\12\1\13\1\40"+
    "\1\14\1\42\1\10\1\6\1\37\1\33\1\27\1\30\1\40\12\0"+
    "\1\51\252\0\2\11\115\0\1\17\u1ea8\0\1\51\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\11\1\1\5\1\2"+
    "\1\6\1\7\1\10\1\11\1\12\2\13\1\14\3\2"+
    "\1\12\4\2\1\12\2\2\1\15\3\2\2\12\1\16"+
    "\1\17\1\20\1\2\1\21\2\2\1\20\4\2\1\20"+
    "\3\2\1\22\2\2\2\20\1\23\1\24\1\2\1\25"+
    "\17\2\1\26\1\2\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\13\0\4\2\2\0\5\2\2\0\7\2"+
    "\1\0\1\36\1\0\4\2\2\0\5\2\2\0\7\2"+
    "\2\0\4\2\2\0\5\2\2\0\7\2\21\0\5\2"+
    "\1\37\2\0\4\2\1\0\2\2\2\0\2\2\1\0"+
    "\13\2\1\40\2\0\4\2\1\0\2\2\2\0\2\2"+
    "\1\0\12\2\1\41\1\0\4\2\1\0\2\2\2\0"+
    "\2\2\1\0\5\2\16\0\4\2\1\42\2\0\3\2"+
    "\1\42\1\2\1\43\2\2\1\0\3\2\1\0\2\2"+
    "\1\0\3\2\2\44\1\2\2\0\1\2\1\0\1\2"+
    "\1\0\11\2\1\45\2\0\3\2\1\45\1\2\1\46"+
    "\2\2\1\0\3\2\1\0\2\2\1\0\3\2\2\47"+
    "\1\2\2\0\1\2\1\0\1\2\1\0\11\2\1\0"+
    "\5\2\1\50\2\2\1\0\3\2\1\0\2\2\1\0"+
    "\3\2\2\51\1\2\2\0\1\2\1\0\1\2\1\0"+
    "\4\2\1\52\17\0\4\2\1\0\2\37\2\0\3\2"+
    "\1\0\4\2\1\53\1\0\2\2\1\53\2\0\2\2"+
    "\13\0\1\2\1\53\3\2\2\0\2\2\2\0\1\2"+
    "\1\0\5\2\1\0\4\2\1\0\2\40\2\0\3\2"+
    "\1\0\4\2\1\54\1\0\2\2\1\54\2\0\2\2"+
    "\13\0\1\2\1\54\3\2\2\0\2\2\2\0\1\2"+
    "\1\0\10\2\1\0\2\41\1\0\3\2\1\0\4\2"+
    "\1\55\1\0\2\2\1\55\2\0\2\2\13\0\1\2"+
    "\1\55\3\2\2\0\2\2\2\0\1\2\1\0\4\2"+
    "\13\0\1\56\1\0\3\2\1\0\1\2\1\42\2\0"+
    "\1\42\2\0\2\2\1\0\5\2\1\0\4\2\2\0"+
    "\2\2\6\0\1\53\3\0\1\53\1\0\5\2\2\44"+
    "\1\2\1\0\1\57\1\0\3\2\1\0\3\2\1\0"+
    "\1\2\1\45\2\0\1\45\2\0\2\2\1\0\5\2"+
    "\1\0\4\2\2\0\2\2\6\0\1\54\3\0\1\54"+
    "\1\0\5\2\2\47\1\2\1\0\1\60\1\0\5\2"+
    "\1\0\1\2\5\0\2\2\1\0\5\2\1\0\4\2"+
    "\2\0\2\2\6\0\1\55\3\0\1\55\1\0\5\2"+
    "\2\51\1\2\1\0\1\61\1\0\2\2\6\0\1\2"+
    "\1\0\1\2\2\0\1\2\1\0\4\2\1\53\1\0"+
    "\5\2\2\0\1\2\1\0\1\2\13\0\2\53\1\0"+
    "\4\2\2\0\2\2\1\0\1\2\1\0\1\2\2\0"+
    "\1\2\1\0\4\2\1\54\1\0\5\2\2\0\1\2"+
    "\1\0\1\2\13\0\2\54\1\0\4\2\2\0\2\2"+
    "\1\0\1\2\1\0\1\2\1\0\4\2\1\55\1\0"+
    "\5\2\2\0\1\2\1\0\1\2\13\0\2\55\1\0"+
    "\4\2\2\0\1\2\3\0\2\62\1\57\1\0\1\63"+
    "\1\0\4\2\4\0\4\2\2\0\1\2\1\0\1\2"+
    "\3\0\1\53\6\0\1\53\3\2\2\0\1\2\2\64"+
    "\1\60\1\0\1\65\1\0\4\2\4\0\4\2\2\0"+
    "\1\2\1\0\1\2\3\0\1\54\6\0\1\54\3\2"+
    "\2\0\1\2\1\61\2\0\4\2\4\0\4\2\2\0"+
    "\1\2\1\0\1\2\3\0\1\55\6\0\1\55\3\2"+
    "\2\0\1\2\4\0\3\2\1\0\1\2\2\0\2\2"+
    "\1\0\2\2\1\0\1\43\10\0\1\53\2\2\4\0"+
    "\3\2\1\0\1\2\2\0\2\2\1\0\2\2\1\0"+
    "\1\46\10\0\1\54\2\2\4\0\3\2\1\0\1\2"+
    "\2\0\2\2\1\0\2\2\1\0\1\50\10\0\1\55"+
    "\2\2\7\0\2\2\1\0\1\2\10\0\1\2\4\0"+
    "\2\2\1\0\1\2\10\0\1\2\4\0\2\2\1\0"+
    "\1\2\10\0\1\2\5\0\1\2\3\0\1\2\3\0"+
    "\1\2\3\0\1\2\3\0\1\2\3\0\1\2\3\0"+
    "\1\2\3\0\1\2\3\0\1\2\46\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u018c\0\u018c\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u018c"+
    "\0\u018c\0\u018c\0\u018c\0\u039c\0\u018c\0\u018c\0\u03c8\0\u018c"+
    "\0\u018c\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u018c\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u0688\0\u06b4\0\u018c\0\u018c\0\u06e0\0\u018c\0\u070c"+
    "\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c"+
    "\0\u0898\0\u08c4\0\u018c\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0"+
    "\0\u018c\0\u09cc\0\u018c\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8"+
    "\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08"+
    "\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u018c\0\u018c\0\u018c\0\u018c"+
    "\0\u0ce4\0\u018c\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c"+
    "\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac"+
    "\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c"+
    "\0\u1238\0\u1264\0\u065c\0\u018c\0\u0688\0\u1290\0\u12bc\0\u12e8"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\u15d4\0\u0948\0\u0974\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0"+
    "\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810"+
    "\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u0c34"+
    "\0\u0c60\0\u1970\0\u0c8c\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c"+
    "\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac"+
    "\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u018c\0\u1cb4\0\u1ce0"+
    "\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40"+
    "\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0"+
    "\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u018c"+
    "\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234"+
    "\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u2368\0\u2394"+
    "\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4"+
    "\0\u018c\0\u2520\0\u254c\0\u2578\0\u25a4\0\u25d0\0\u25fc\0\u2628"+
    "\0\u2654\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788"+
    "\0\u27b4\0\u27e0\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8"+
    "\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48"+
    "\0\u2a74\0\u2aa0\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8"+
    "\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u018c\0\u2cb0\0\u2cdc"+
    "\0\u2d08\0\u2d34\0\u2d60\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c"+
    "\0\u2e68\0\u2e94\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c"+
    "\0\u2fc8\0\u2ff4\0\u3020\0\u304c\0\u3078\0\u30a4\0\u30d0\0\u30fc"+
    "\0\u3128\0\u3154\0\u3180\0\u31ac\0\u31d8\0\u3204\0\u3230\0\u325c"+
    "\0\u3288\0\u32b4\0\u32e0\0\u330c\0\u3338\0\u018c\0\u3364\0\u3390"+
    "\0\u33bc\0\u33e8\0\u3414\0\u3440\0\u346c\0\u3498\0\u34c4\0\u34f0"+
    "\0\u351c\0\u3548\0\u3574\0\u35a0\0\u35cc\0\u35f8\0\u3624\0\u3650"+
    "\0\u367c\0\u36a8\0\u36d4\0\u3700\0\u372c\0\u3758\0\u3784\0\u37b0"+
    "\0\u37dc\0\u3808\0\u3834\0\u3860\0\u388c\0\u38b8\0\u38e4\0\u3910"+
    "\0\u393c\0\u3968\0\u3994\0\u018c\0\u39c0\0\u39ec\0\u3a18\0\u3a44"+
    "\0\u3a70\0\u3a9c\0\u3ac8\0\u3af4\0\u3b20\0\u3b4c\0\u3b78\0\u3ba4"+
    "\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac\0\u3cd8\0\u3d04"+
    "\0\u3d30\0\u3d5c\0\u3d88\0\u3db4\0\u3de0\0\u3e0c\0\u018c\0\u3e38"+
    "\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14\0\u3f40\0\u3f6c\0\u3f98"+
    "\0\u3fc4\0\u3ff0\0\u401c\0\u4048\0\u4074\0\u40a0\0\u40cc\0\u40f8"+
    "\0\u4124\0\u4150\0\u417c\0\u41a8\0\u41d4\0\u4200\0\u422c\0\u4258"+
    "\0\u4284\0\u42b0\0\u41a8\0\u42dc\0\u4308\0\u4334\0\u4360\0\u018c"+
    "\0\u438c\0\u43b8\0\u43e4\0\u4410\0\u443c\0\u4468\0\u4494\0\u44c0"+
    "\0\u44ec\0\u4518\0\u4544\0\u4570\0\u459c\0\u45c8\0\u45f4\0\u4620"+
    "\0\u464c\0\u4678\0\u46a4\0\u46d0\0\u0420\0\u46fc\0\u4728\0\u4754"+
    "\0\u4780\0\u2eec\0\u47ac\0\u47d8\0\u4804\0\u4830\0\u485c\0\u4888"+
    "\0\u48b4\0\u48e0\0\u490c\0\u4938\0\u4964\0\u4990\0\u49bc\0\u49e8"+
    "\0\u4a14\0\u4a40\0\u4a6c\0\u4a98\0\u4ac4\0\u4af0\0\u4b1c\0\u4b48"+
    "\0\u4b74\0\u4ba0\0\u4a98\0\u4bcc\0\u4bf8\0\u4c24\0\u4c50\0\u018c"+
    "\0\u4c7c\0\u4ca8\0\u4cd4\0\u4d00\0\u4d2c\0\u4d58\0\u4d84\0\u4db0"+
    "\0\u4ddc\0\u4e08\0\u4e34\0\u4e60\0\u4e8c\0\u4eb8\0\u4ee4\0\u4f10"+
    "\0\u4f3c\0\u4f68\0\u4f94\0\u4fc0\0\u0420\0\u4fec\0\u5018\0\u5044"+
    "\0\u5070\0\u35a0\0\u509c\0\u50c8\0\u50f4\0\u5120\0\u514c\0\u5178"+
    "\0\u51a4\0\u51d0\0\u51fc\0\u5228\0\u5254\0\u5280\0\u52ac\0\u52d8"+
    "\0\u5304\0\u5330\0\u535c\0\u5388\0\u53b4\0\u53e0\0\u540c\0\u5330"+
    "\0\u5438\0\u5464\0\u5490\0\u54bc\0\u018c\0\u54e8\0\u5514\0\u5540"+
    "\0\u556c\0\u5598\0\u55c4\0\u55f0\0\u561c\0\u5648\0\u5674\0\u56a0"+
    "\0\u56cc\0\u56f8\0\u5724\0\u5750\0\u577c\0\u57a8\0\u57d4\0\u5800"+
    "\0\u582c\0\u0420\0\u5858\0\u5884\0\u58b0\0\u58dc\0\u3bfc\0\u5908"+
    "\0\u5934\0\u5960\0\u598c\0\u59b8\0\u59e4\0\u5a10\0\u5a3c\0\u5a68"+
    "\0\u5a94\0\u5ac0\0\u5aec\0\u5b18\0\u5b44\0\u0210\0\u5b70\0\u5b9c"+
    "\0\u5bc8\0\u5bf4\0\u5c20\0\u5c4c\0\u018c\0\u5c78\0\u5ca4\0\u5cd0"+
    "\0\u5cfc\0\u5d28\0\u5d54\0\u5d80\0\u5dac\0\u41d4\0\u5dd8\0\u5e04"+
    "\0\u5e30\0\u5e5c\0\u5e88\0\u5eb4\0\u5ee0\0\u5f0c\0\u5f38\0\u5f64"+
    "\0\u5f90\0\u5fbc\0\u5fe8\0\u6014\0\u6040\0\u606c\0\u6098\0\u60c4"+
    "\0\u60f0\0\u611c\0\u6148\0\u6174\0\u61a0\0\u61cc\0\u61f8\0\u6224"+
    "\0\u6250\0\u627c\0\u62a8\0\u62d4\0\u6300\0\u632c\0\u6358\0\u6384"+
    "\0\u63b0\0\u63dc\0\u6408\0\u018c\0\u0420\0\u6434\0\u6460\0\u0420"+
    "\0\u648c\0\u64b8\0\u64e4\0\u6510\0\u653c\0\u6568\0\u6594\0\u65c0"+
    "\0\u65ec\0\u6618\0\u6644\0\u6670\0\u4ac4\0\u669c\0\u66c8\0\u66f4"+
    "\0\u6720\0\u674c\0\u6778\0\u67a4\0\u67d0\0\u67fc\0\u6828\0\u6854"+
    "\0\u6880\0\u68ac\0\u68d8\0\u6904\0\u6930\0\u695c\0\u6988\0\u69b4"+
    "\0\u69e0\0\u6a0c\0\u6a38\0\u6a64\0\u6a90\0\u6abc\0\u6ae8\0\u6b14"+
    "\0\u6b40\0\u6b6c\0\u6b98\0\u6bc4\0\u6bf0\0\u6c1c\0\u6c48\0\u6c74"+
    "\0\u6ca0\0\u6ccc\0\u018c\0\u0420\0\u6cf8\0\u6d24\0\u0420\0\u6d50"+
    "\0\u6d7c\0\u6da8\0\u6dd4\0\u6e00\0\u6e2c\0\u6e58\0\u6e84\0\u6eb0"+
    "\0\u6edc\0\u535c\0\u6f08\0\u6f34\0\u6f60\0\u6f8c\0\u6fb8\0\u6fe4"+
    "\0\u7010\0\u703c\0\u7068\0\u7094\0\u70c0\0\u70ec\0\u7118\0\u7144"+
    "\0\u7170\0\u719c\0\u71c8\0\u71f4\0\u7220\0\u724c\0\u7278\0\u72a4"+
    "\0\u72d0\0\u72fc\0\u7328\0\u7354\0\u7380\0\u73ac\0\u73d8\0\u7404"+
    "\0\u7430\0\u745c\0\u7488\0\u74b4\0\u74e0\0\u750c\0\u018c\0\u0420"+
    "\0\u7538\0\u7564\0\u0420\0\u7590\0\u75bc\0\u75e8\0\u7614\0\u7640"+
    "\0\u766c\0\u7698\0\u76c4\0\u76f0\0\u771c\0\u7748\0\u7774\0\u77a0"+
    "\0\u77cc\0\u77f8\0\u7824\0\u7850\0\u787c\0\u78a8\0\u78d4\0\u7900"+
    "\0\u792c\0\u7958\0\u7984\0\u79b0\0\u79dc\0\u7a08\0\u7a34\0\u7a60"+
    "\0\u7a8c\0\u7ab8\0\u7ae4\0\u7b10\0\u7b3c\0\u7b68\0\u7b94\0\u7bc0"+
    "\0\u7bec\0\u7c18\0\u7c44\0\u7c70\0\u7c9c\0\u7cc8\0\u7cf4\0\u7d20"+
    "\0\u7d4c\0\u7d78\0\u7da4\0\u7dd0\0\u7dfc\0\u7e28\0\u7e54\0\u7e80"+
    "\0\u7eac\0\u7ed8\0\u7f04\0\u7f30\0\u7f5c\0\u7f88\0\u7fb4\0\u7fe0"+
    "\0\u800c\0\u8038\0\u8064\0\u8090\0\u80bc\0\u80e8\0\u8114\0\u8140"+
    "\0\u816c\0\u8198\0\u81c4\0\u81f0\0\u821c\0\u8248\0\u8274\0\u82a0"+
    "\0\u82cc\0\u82f8\0\u8324\0\u8350\0\u837c\0\u83a8\0\u83d4\0\u8400"+
    "\0\u842c\0\u8458\0\u8484\0\u84b0\0\u84dc\0\u8508\0\u8534\0\u8560"+
    "\0\u858c\0\u85b8\0\u85e4\0\u8610\0\u863c\0\u8668\0\u8694\0\u86c0"+
    "\0\u86ec\0\u8718\0\u8744\0\u8770\0\u879c\0\u87c8\0\u87f4\0\u8820"+
    "\0\u884c\0\u8878\0\u88a4\0\u88d0\0\u88fc\0\u8928\0\u8954\0\u8980"+
    "\0\u89ac\0\u89d8\0\u8a04\0\u8a30\0\u8a5c\0\u8a88\0\u8ab4\0\u8ae0"+
    "\0\u8b0c\0\u8b38\0\u8b64\0\u8b90\0\u8bbc\0\u8be8\0\u8c14\0\u8c40"+
    "\0\u8c6c\0\u8c98\0\u8cc4\0\u8cf0\0\u8d1c\0\u8d48\0\u8d74\0\u8da0"+
    "\0\u8dcc\0\u8df8\0\u8e24\0\u8e50\0\u018c\0\u0420\0\u018c\0\u8e7c"+
    "\0\u018c\0\u8ea8\0\u8ed4\0\u8f00\0\u8f2c\0\u8f58\0\u8f84\0\u8fb0"+
    "\0\u8fdc\0\u9008\0\u9034\0\u9060\0\u908c\0\u90b8\0\u90e4\0\u9110"+
    "\0\u913c\0\u9168\0\u9194\0\u91c0\0\u91ec\0\u9218\0\u9244\0\u9270"+
    "\0\u929c\0\u92c8\0\u92f4\0\u9320\0\u934c\0\u9378\0\u93a4\0\u93d0"+
    "\0\u93fc\0\u9428\0\u9454\0\u9480\0\u018c\0\u0420\0\u018c\0\u94ac"+
    "\0\u018c\0\u94d8\0\u9504\0\u9530\0\u955c\0\u9588\0\u95b4\0\u95e0"+
    "\0\u960c\0\u9638\0\u9664\0\u9690\0\u96bc\0\u96e8\0\u9714\0\u9740"+
    "\0\u976c\0\u9798\0\u97c4\0\u97f0\0\u981c\0\u9848\0\u9874\0\u98a0"+
    "\0\u98cc\0\u98f8\0\u9924\0\u9950\0\u997c\0\u99a8\0\u99d4\0\u9a00"+
    "\0\u9a2c\0\u9a58\0\u9a84\0\u9ab0\0\u018c\0\u9adc\0\u9b08\0\u9b34"+
    "\0\u9b60\0\u9b8c\0\u9bb8\0\u9be4\0\u9c10\0\u9c3c\0\u9c68\0\u9c94"+
    "\0\u9cc0\0\u9cec\0\u9d18\0\u9d44\0\u9d70\0\u9d9c\0\u9dc8\0\u9df4"+
    "\0\u9e20\0\u9e4c\0\u9e78\0\u9ea4\0\u9ed0\0\u9efc\0\u9f28\0\u9f54"+
    "\0\u9f80\0\u9fac\0\u9fd8\0\ua004\0\ua030\0\ua05c\0\ua088\0\ua0b4"+
    "\0\ua0e0\0\ua10c\0\ua138\0\ua164\0\ua190\0\ua1bc\0\ua1e8\0\ua214"+
    "\0\ua240\0\ua26c\0\ua298\0\ua2c4\0\ua2f0\0\ua31c\0\ua348\0\ua374"+
    "\0\ua3a0\0\ua3cc\0\u0420\0\ua3f8\0\ua424\0\ua450\0\ua47c\0\ua4a8"+
    "\0\ua4d4\0\ua500\0\ua52c\0\ua558\0\ua584\0\ua5b0\0\ua5dc\0\ua608"+
    "\0\ua634\0\ua660\0\ua68c\0\ua6b8\0\ua6e4\0\ua710\0\ua73c\0\ua768"+
    "\0\ua794\0\ua7c0\0\ua7ec\0\ua818\0\ua844\0\ua870\0\ua89c\0\u0420"+
    "\0\ua8c8\0\ua8f4\0\ua920\0\ua94c\0\ua978\0\ua9a4\0\ua9d0\0\ua9fc"+
    "\0\uaa28\0\uaa54\0\uaa80\0\uaaac\0\uaad8\0\uab04\0\uab30\0\uab5c"+
    "\0\uab88\0\uabb4\0\uabe0\0\uac0c\0\uac38\0\uac64\0\uac90\0\uacbc"+
    "\0\uace8\0\uad14\0\uad40\0\uad6c\0\u0420\0\uad98\0\uadc4\0\uadf0"+
    "\0\uae1c\0\uae48\0\uae74\0\uaea0\0\uaecc\0\uaef8\0\uaf24\0\uaf50"+
    "\0\uaf7c\0\uafa8\0\uafd4\0\ub000\0\ub02c\0\ub058\0\ub084\0\ub0b0"+
    "\0\ub0dc\0\ub108\0\ub134\0\ub160\0\ub18c\0\ub1b8\0\ub1e4\0\ub210"+
    "\0\ub23c\0\ub268\0\u7cf4\0\ub294\0\ub2c0\0\ub2ec\0\ub318\0\ub344"+
    "\0\ub370\0\ub39c\0\ub3c8\0\ub3f4\0\ub420\0\ub44c\0\ub478\0\ub4a4"+
    "\0\ub4d0\0\ub4fc\0\ub528\0\u84dc\0\ub554\0\ub580\0\ub5ac\0\ub5d8"+
    "\0\ub604\0\ub630\0\ub65c\0\ub688\0\ub6b4\0\ub6e0\0\ub70c\0\ub738"+
    "\0\ub764\0\ub790\0\ub7bc\0\ub7e8\0\u8c40\0\ub814\0\ub840\0\u0318"+
    "\0\ub86c\0\ub898\0\ub8c4\0\ub8f0\0\ub91c\0\ub948\0\ub974\0\ub9a0"+
    "\0\ub9cc\0\ub9f8\0\uba24\0\uba50\0\uba7c\0\ubaa8\0\ubad4\0\ubb00"+
    "\0\ubb2c\0\ubb58\0\ubb84\0\ubbb0\0\ubbdc\0\ubc08\0\ubc34\0\ubc60"+
    "\0\ubc8c\0\ubcb8\0\ubce4\0\ubd10\0\ubd3c\0\ubd68\0\ubd94\0\ubdc0"+
    "\0\ubdec\0\ube18\0\ube44\0\ube70\0\ube9c\0\ubec8\0\ubef4\0\ubf20"+
    "\0\ubf4c\0\ubf78\0\ubfa4\0\ubfd0\0\ubffc\0\uc028\0\uc054\0\uc080"+
    "\0\uc0ac\0\uc0d8\0\uc104\0\uc130\0\uc15c\0\uc188\0\uc1b4\0\uc1e0"+
    "\0\uc20c\0\uc238\0\uc264\0\uc290\0\uc2bc\0\uc2e8\0\uc314\0\uc340"+
    "\0\uc36c\0\uc398\0\uc3c4\0\uc3f0\0\uc41c\0\uc448\0\uc474\0\uc4a0"+
    "\0\uc4cc\0\uc4f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\12\1\20"+
    "\1\21\1\12\1\22\1\23\1\12\1\24\1\25\3\12"+
    "\1\26\1\27\7\12\1\30\4\12\1\21\1\25\6\12"+
    "\2\30\1\12\1\31\1\13\2\31\1\32\27\31\1\30"+
    "\14\31\2\30\1\31\1\33\1\13\1\34\1\33\1\35"+
    "\4\34\1\33\5\34\1\33\5\34\1\33\3\34\2\33"+
    "\1\34\3\33\4\34\6\33\1\30\2\33\1\36\1\13"+
    "\1\37\1\40\1\41\1\42\2\43\1\44\1\45\1\43"+
    "\1\46\1\47\1\50\1\51\1\52\3\43\1\53\1\54"+
    "\1\55\3\43\2\36\1\56\1\55\2\36\2\43\1\57"+
    "\1\60\1\36\1\61\1\62\1\63\1\55\1\36\1\30"+
    "\1\55\1\64\1\65\1\13\1\66\1\65\1\67\1\70"+
    "\2\43\1\71\1\72\1\43\1\73\1\74\1\75\1\76"+
    "\1\77\3\43\1\100\1\101\1\33\3\43\2\65\1\102"+
    "\1\33\1\103\1\65\2\43\1\104\1\105\1\65\1\106"+
    "\1\107\1\110\1\33\1\65\1\30\1\33\1\111\1\31"+
    "\1\13\1\112\1\31\1\113\1\114\2\43\1\115\1\116"+
    "\1\43\1\117\1\120\1\121\1\122\1\123\3\43\1\124"+
    "\1\125\1\31\3\43\2\31\1\126\1\30\2\31\2\43"+
    "\1\127\1\130\1\31\1\131\1\132\3\31\2\30\2\31"+
    "\1\13\2\31\1\133\3\31\1\134\20\31\1\135\1\136"+
    "\1\31\1\30\14\31\2\30\2\31\1\13\1\43\1\31"+
    "\1\137\4\43\1\31\5\43\1\31\5\43\1\31\3\43"+
    "\1\140\1\31\1\43\1\30\2\31\4\43\6\31\2\30"+
    "\2\31\1\13\1\141\1\31\1\142\4\141\1\31\5\141"+
    "\1\31\5\141\1\31\3\141\2\31\1\141\1\30\2\31"+
    "\4\141\3\31\1\143\2\31\2\30\1\31\54\0\4\13"+
    "\1\0\47\13\12\0\1\144\13\0\1\145\33\0\1\146"+
    "\75\0\1\147\32\0\1\150\60\0\1\151\54\0\1\152"+
    "\50\0\1\153\47\0\1\154\57\0\1\155\53\0\1\156"+
    "\43\0\1\34\2\0\4\34\1\0\5\34\1\0\5\34"+
    "\1\0\3\34\2\0\1\34\3\0\5\34\2\0\1\34"+
    "\7\0\1\43\2\0\4\43\1\0\1\157\4\43\1\0"+
    "\5\43\1\0\1\160\2\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\1\43\1\161\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\2\43\1\162\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\12\0\1\163\1\0"+
    "\1\164\46\0\1\43\2\0\4\43\1\0\2\43\1\165"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\3\43\1\166\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\2\43\1\167\1\43\1\0\5\43\1\0\4\43\1\170"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\1\171\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\13\0\1\172\6\0\1\173\40\0\1\43\2\0"+
    "\4\43\1\0\1\174\4\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\1\175\4\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\1\176\2\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\1\177\1\43\1\200\1\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\1\43\1\201"+
    "\2\43\1\0\3\43\1\202\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\5\0"+
    "\44\203\1\204\7\203\45\205\1\204\6\205\46\0\1\63"+
    "\7\0\1\43\2\0\4\43\1\0\1\206\4\43\1\0"+
    "\5\43\1\0\1\207\2\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\1\43\1\210\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\2\43\1\211\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\12\0\1\212\1\0"+
    "\1\213\46\0\1\43\2\0\4\43\1\0\2\43\1\214"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\3\43\1\215\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\2\43\1\216\1\43\1\0\5\43\1\0\4\43\1\217"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\1\220\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\13\0\1\221\6\0\1\222\40\0\1\43\2\0"+
    "\4\43\1\0\1\223\4\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\1\224\4\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\1\225\2\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\1\226\1\43\1\227\1\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\1\43\1\230"+
    "\2\43\1\0\3\43\1\231\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\5\0"+
    "\44\232\1\33\7\232\45\233\1\33\6\233\46\0\1\110"+
    "\7\0\1\43\2\0\4\43\1\0\1\234\4\43\1\0"+
    "\5\43\1\0\1\235\2\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\1\43\1\236\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\2\43\1\237\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\12\0\1\240\1\0"+
    "\1\241\46\0\1\43\2\0\4\43\1\0\2\43\1\242"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\3\43\1\243\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\2\43\1\244\1\43\1\0\5\43\1\0\4\43\1\245"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\1\246\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\13\0\1\247\6\0\1\250\40\0\1\43\2\0"+
    "\4\43\1\0\1\251\4\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\1\252\4\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\1\253\2\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\1\254\1\43\1\255\1\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\1\43\1\256"+
    "\2\43\1\0\3\43\1\257\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\5\0"+
    "\44\260\1\31\7\260\45\261\1\31\6\261\2\0\1\262"+
    "\2\0\4\262\1\0\5\262\1\0\5\262\1\263\3\262"+
    "\2\0\1\262\1\263\1\31\1\0\4\262\3\0\1\31"+
    "\1\263\1\31\1\0\1\263\27\0\1\264\27\0\1\141"+
    "\2\0\4\141\1\0\5\141\1\0\5\141\1\0\3\141"+
    "\2\0\1\141\3\0\5\141\2\0\1\141\53\0\1\143"+
    "\30\0\1\265\52\0\1\266\40\0\1\267\57\0\1\270"+
    "\50\0\1\271\55\0\1\272\43\0\1\273\17\0\1\274"+
    "\37\0\1\275\65\0\1\276\51\0\1\277\56\0\1\300"+
    "\34\0\1\43\2\0\2\43\1\301\1\43\1\0\5\43"+
    "\1\0\3\43\1\302\1\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\2\43\1\303\2\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\2\43\1\304\1\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\1\43\1\305\3\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\11\0\1\306\20\0\1\306\3\0\1\306"+
    "\2\0\1\306\21\0\1\307\5\0\1\310\45\0\1\43"+
    "\2\0\4\43\1\0\1\311\4\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\312\2\0\4\43\1\0\5\43\1\0\2\43\1\313"+
    "\2\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\4\43\1\314"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\315\5\43\1\0\3\43\2\0\1\43\3\0\3\43"+
    "\1\316\1\43\2\0\1\43\7\0\1\43\1\0\1\306"+
    "\1\43\1\317\2\43\1\0\5\43\1\0\5\43\1\306"+
    "\3\43\1\306\1\0\1\43\1\306\2\0\5\43\2\0"+
    "\1\43\25\0\1\320\57\0\1\321\31\0\1\43\2\0"+
    "\4\43\1\0\4\43\1\322\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\1\43\1\323\3\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\324\3\43\1\325\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\2\43"+
    "\1\326\2\43\2\0\1\43\7\0\1\43\1\0\1\306"+
    "\4\43\1\0\5\43\1\0\5\43\1\306\3\43\1\306"+
    "\1\0\1\43\1\306\2\0\5\43\2\0\1\43\7\0"+
    "\1\327\2\0\3\43\1\330\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\1\331"+
    "\4\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\4\43\1\332\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\2\43\1\333\1\43"+
    "\1\0\5\43\1\0\3\43\1\334\1\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\2\43\1\335\2\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\2\43\1\336\1\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\1\43"+
    "\1\337\3\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\11\0\1\340\20\0\1\340"+
    "\3\0\1\340\2\0\1\340\21\0\1\341\5\0\1\342"+
    "\45\0\1\43\2\0\4\43\1\0\1\343\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\344\2\0\4\43\1\0\5\43\1\0"+
    "\2\43\1\345\2\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\4\43\1\346\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\347\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\3\43\1\350\1\43\2\0\1\43\7\0\1\43"+
    "\1\0\1\340\1\43\1\351\2\43\1\0\5\43\1\0"+
    "\5\43\1\340\3\43\1\340\1\0\1\43\1\340\2\0"+
    "\5\43\2\0\1\43\25\0\1\352\57\0\1\353\31\0"+
    "\1\43\2\0\4\43\1\0\4\43\1\354\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\1\43"+
    "\1\355\3\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\356\3\43"+
    "\1\357\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\2\43\1\360\2\43\2\0\1\43\7\0\1\43"+
    "\1\0\1\340\4\43\1\0\5\43\1\0\5\43\1\340"+
    "\3\43\1\340\1\0\1\43\1\340\2\0\5\43\2\0"+
    "\1\43\7\0\1\361\2\0\3\43\1\362\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\0\1\363\4\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\4\43\1\364\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\3\43\1\365\1\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\2\43\1\366\2\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\2\43\1\367\1\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\1\43"+
    "\1\370\3\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\11\0\1\371\20\0\1\371"+
    "\3\0\1\371\2\0\1\371\27\0\1\372\45\0\1\43"+
    "\2\0\4\43\1\0\1\373\4\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\374\2\0\4\43\1\0\5\43\1\0\2\43\1\375"+
    "\2\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\4\43\1\376"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\377\5\43\1\0\3\43\2\0\1\43\3\0\3\43"+
    "\1\u0100\1\43\2\0\1\43\7\0\1\43\1\0\1\371"+
    "\1\43\1\u0101\2\43\1\0\5\43\1\0\5\43\1\371"+
    "\3\43\1\371\1\0\1\43\1\371\2\0\5\43\2\0"+
    "\1\43\25\0\1\u0102\57\0\1\u0103\31\0\1\43\2\0"+
    "\4\43\1\0\4\43\1\u0104\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\1\43\1\u0105\3\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\u0106\3\43\1\u0107\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\2\43"+
    "\1\u0108\2\43\2\0\1\43\7\0\1\43\1\0\1\371"+
    "\4\43\1\0\5\43\1\0\5\43\1\371\3\43\1\371"+
    "\1\0\1\43\1\371\2\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\3\43\1\u0109\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\1\u010a"+
    "\4\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\4\43\1\u010b\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\32\0\1\31\43\0\1\u010c\51\0\1\u010d"+
    "\54\0\1\u010e\41\0\1\u010f\66\0\1\u0110\53\0\1\u0111"+
    "\40\0\1\u0112\16\0\1\u0113\40\0\1\u0114\71\0\1\u0115"+
    "\47\0\1\u0116\47\0\1\u0117\45\0\1\u0118\56\0\1\u0119"+
    "\27\0\1\u0119\14\0\1\43\2\0\3\43\1\u011a\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\1\43\1\u011b\3\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\2\43\1\u011c\2\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\u011d\2\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u011e\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\31\0\1\u011f\44\0\1\u0120\40\0\1\u0121\2\0"+
    "\4\43\1\0\5\43\1\0\1\43\1\u0122\3\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\1\43\1\u0123\2\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\4\43\1\u0124\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\u0125\1\0\1\u0126\1\u0127\2\43"+
    "\1\u0128\1\u0129\1\43\1\u012a\1\u012b\1\43\1\u012c\1\u012d"+
    "\3\43\1\u012e\1\u012f\1\u0130\3\43\2\0\1\u0131\1\u0126"+
    "\2\0\2\43\1\u0132\1\u0133\1\43\2\0\1\43\22\0"+
    "\1\u0134\40\0\1\43\2\0\4\43\1\0\3\43\1\u0135"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\1\u0136\4\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\21\0\1\u0137\54\0\1\u0138"+
    "\40\0\1\43\2\0\1\43\1\u0139\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\u013a\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\2\43"+
    "\1\u013b\2\43\2\0\1\43\31\0\1\u013c\31\0\1\43"+
    "\2\0\4\43\1\0\2\43\1\u013d\2\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\4\43"+
    "\1\u013d\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\4\43\1\u013e\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\3\43"+
    "\1\u013f\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\2\43\1\u0140\2\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\3\43\1\u0141\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\3\43\1\u0142\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\1\43\1\u0143"+
    "\3\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\2\43\1\u0144\2\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\u0145\2\0"+
    "\4\43\1\0\5\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u0146\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\31\0"+
    "\1\u0147\44\0\1\u0148\40\0\1\u0149\2\0\4\43\1\0"+
    "\5\43\1\0\1\43\1\u014a\3\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\1\43\1\u014b\2\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\4\43\1\u014c"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\u014d\1\0\1\u014e\1\u014f\2\43\1\u0150\1\u0151"+
    "\1\43\1\u0152\1\u0153\1\43\1\u0154\1\u0155\3\43\1\u0156"+
    "\1\u0157\1\u0158\3\43\2\0\1\u0159\1\u014e\2\0\2\43"+
    "\1\u015a\1\u015b\1\43\2\0\1\43\22\0\1\u015c\40\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u015d\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\1\u015e\4\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\21\0\1\u015f\54\0\1\u0160\40\0\1\43"+
    "\2\0\1\43\1\u0161\2\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\u0162\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\2\43\1\u0163\2\43"+
    "\2\0\1\43\31\0\1\u0164\31\0\1\43\2\0\4\43"+
    "\1\0\2\43\1\u0165\2\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\4\43\1\u0165\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\4\43\1\u0166"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\3\43\1\u0167\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\2\43"+
    "\1\u0168\2\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u0169\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\1\43\1\u016a\3\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\2\43\1\u016b\2\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\u016c\2\0\4\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\3\43"+
    "\1\u016d\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\22\0\1\u016e\40\0\1\u016f"+
    "\2\0\4\43\1\0\5\43\1\0\1\43\1\u0170\3\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\1\43\1\u0171\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\0\4\43\1\u0172\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\u0173\1\0\1\u0174\1\u0175"+
    "\2\43\1\u0176\1\u0177\1\43\1\u0178\1\u0179\1\43\1\u017a"+
    "\1\u017b\3\43\1\u017c\1\u017d\1\u017e\3\43\2\0\1\u017f"+
    "\1\u0174\2\0\2\43\1\u0180\1\u0181\1\43\2\0\1\43"+
    "\22\0\1\u0182\40\0\1\43\2\0\4\43\1\0\3\43"+
    "\1\u0183\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\1\u0184\4\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\21\0\1\u0185\54\0"+
    "\1\u0186\40\0\1\43\2\0\1\43\1\u0187\2\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\u0188"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\2\43\1\u0189\2\43\2\0\1\43\31\0\1\u018a\31\0"+
    "\1\43\2\0\4\43\1\0\2\43\1\u018b\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\4\43\1\u018b\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\3\43"+
    "\1\u018c\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\2\43\1\u018d\2\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\3\43\1\u018e\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\14\0\1\u018f\70\0\1\u0190\51\0\1\u0191\41\0\1\u0192"+
    "\46\0\1\u0193\21\0\1\u0194\3\0\1\u0195\43\0\1\u0196"+
    "\47\0\1\u0197\52\0\1\u0198\53\0\1\u0199\42\0\1\u0193"+
    "\21\0\1\u0194\52\0\1\u019a\41\0\1\u019b\65\0\1\u019c"+
    "\31\0\1\u019d\53\0\1\43\2\0\4\43\1\u019e\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\2\43"+
    "\1\u019f\2\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\4\43\1\u01a0\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\2\43\1\u01a1\2\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\3\43\1\u01a2\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\1\u01a3\1\306\4\43\1\0\5\43\1\0"+
    "\5\43\1\u01a4\3\43\1\u01a5\1\0\1\43\1\306\2\0"+
    "\5\43\2\0\1\43\13\0\1\u01a6\66\0\1\u01a7\34\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u01a8\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\2\43\1\u01a9"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\2\43\1\u01aa\2\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\1\u01a3"+
    "\1\0\4\43\1\0\5\43\1\0\5\43\1\u01ab\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\1\u01ac\4\43\1\0\5\43\1\0"+
    "\1\u01ad\2\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\1\43\1\u01ae\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\0\5\43\1\0\2\43\1\u01af\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\12\0\1\u01b0\1\0\1\u01b1\46\0"+
    "\1\43\2\0\4\43\1\0\2\43\1\u01b2\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\3\43\1\u01b3"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\1\u01b4\4\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\13\0\1\u01b5\6\0\1\u01b6"+
    "\40\0\1\43\2\0\4\43\1\0\1\u01b7\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\1\u01b8\4\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\u01b9\1\0\1\u0126\1\u01ba\2\0"+
    "\1\u01bb\1\u0129\1\0\1\u01bc\1\u01bd\1\0\1\u01be\1\u012d"+
    "\3\0\1\u01bf\1\u01c0\1\u01c1\5\0\1\u01c2\1\u0126\1\u01c3"+
    "\3\0\1\u0129\1\u012d\13\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\0\1\u01c4\2\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\1\u01c5"+
    "\1\43\1\u01c6\1\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\1\43\1\u01c7\2\43\1\0\3\43\1\u01c8"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\16\0\1\u01c9\13\0\1\u01ca\13\0"+
    "\1\u01c9\14\0\1\43\2\0\4\43\1\u01c9\5\43\1\0"+
    "\5\43\1\u01ca\3\43\2\0\1\43\3\0\2\43\1\u01cb"+
    "\2\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\4\43\1\u01cc\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\17\0\1\u01cd\43\0\1\u01ce"+
    "\53\0\1\43\2\0\4\43\1\0\5\43\1\0\4\43"+
    "\1\u01cf\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u01d0\53\0\1\u01d1\2\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\22\0\1\163\40\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\177\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\1\43\1\u01d2\2\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\1\43\1\u01d3\3\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\1\u01d4\4\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\u01d5\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\u01d6\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\2\43\1\u01d7\2\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\4\43\1\u01d8\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\2\43\1\u01d9"+
    "\2\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\3\43\1\u01da\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\1\u01db\1\340\4\43\1\0"+
    "\5\43\1\0\5\43\1\u01dc\3\43\1\u01dd\1\0\1\43"+
    "\1\340\2\0\5\43\2\0\1\43\13\0\1\u01de\66\0"+
    "\1\u01df\34\0\1\43\2\0\4\43\1\0\3\43\1\u01e0"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\2\43\1\u01e1\2\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\2\43\1\u01e2\2\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\1\u01db\1\0\4\43\1\0\5\43\1\0\5\43"+
    "\1\u01e3\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\1\u01e4\4\43\1\0"+
    "\5\43\1\0\1\u01e5\2\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\1\43\1\u01e6\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\2\43\1\u01e7\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\12\0\1\u01e8\1\0"+
    "\1\u01e9\46\0\1\43\2\0\4\43\1\0\2\43\1\u01ea"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\3\43\1\u01eb\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\1\u01ec\4\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\13\0\1\u01ed"+
    "\6\0\1\u01ee\40\0\1\43\2\0\4\43\1\0\1\u01ef"+
    "\4\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\1\u01f0\4\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\u01f1\1\0\1\u014e"+
    "\1\u01f2\2\0\1\u01f3\1\u0151\1\0\1\u01f4\1\u01f5\1\0"+
    "\1\u01f6\1\u0155\3\0\1\u01f7\1\u01f8\1\u01f9\5\0\1\u01fa"+
    "\1\u014e\1\u01fb\3\0\1\u0151\1\u0155\13\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\5\43\1\0\1\u01fc\2\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\1\u01fd\1\43\1\u01fe\1\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\1\43\1\u01ff\2\43\1\0"+
    "\3\43\1\u0200\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\16\0\1\u0201\13\0"+
    "\1\u0202\13\0\1\u0201\14\0\1\43\2\0\4\43\1\u0201"+
    "\5\43\1\0\5\43\1\u0202\3\43\2\0\1\43\3\0"+
    "\2\43\1\u0203\2\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\4\43\1\u0204\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\17\0\1\u0205"+
    "\43\0\1\u0206\53\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\0\4\43\1\u0207\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\u0208\53\0\1\u0209\2\0"+
    "\4\43\1\0\5\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\22\0\1\212\40\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\226\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\1\43\1\u020a\2\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\1\43\1\u020b\3\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\1\u020c\4\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\u020d"+
    "\2\0\4\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\4\43\1\u020e\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\2\43\1\u020f"+
    "\2\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\3\43\1\u0210\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\1\u0211\1\371\4\43\1\0"+
    "\5\43\1\0\5\43\1\u0212\3\43\1\u0213\1\0\1\43"+
    "\1\371\2\0\5\43\2\0\1\43\26\0\1\u0214\34\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u0215\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\2\43\1\u0216"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\2\43\1\u0217\2\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\1\u0211"+
    "\1\0\4\43\1\0\5\43\1\0\5\43\1\u0218\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\1\u0219\4\43\1\0\5\43\1\0"+
    "\1\u021a\2\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\1\43\1\u021b\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\0\5\43\1\0\2\43\1\u021c\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\12\0\1\u021d\1\0\1\u021e\46\0"+
    "\1\43\2\0\4\43\1\0\2\43\1\u021f\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\3\43\1\u0220"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\1\u0221\4\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\13\0\1\u0222\6\0\1\u0223"+
    "\40\0\1\43\2\0\4\43\1\0\1\u0224\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\1\u0225\4\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\u0226\1\0\1\u0174\1\u0227\2\0"+
    "\1\u0228\1\u0177\1\0\1\u0229\1\u022a\1\0\1\u022b\1\u017b"+
    "\3\0\1\u022c\1\u022d\1\u022e\5\0\1\u022f\1\u0174\1\u0230"+
    "\3\0\1\u0177\1\u017b\13\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\0\1\u0231\2\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\1\u0232"+
    "\1\43\1\u0233\1\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\1\43\1\u0234\2\43\1\0\3\43\1\u0235"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\16\0\1\u0236\13\0\1\u0237\13\0"+
    "\1\u0236\14\0\1\43\2\0\4\43\1\u0236\5\43\1\0"+
    "\5\43\1\u0237\3\43\2\0\1\43\3\0\2\43\1\u0238"+
    "\2\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\4\43\1\u0239\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\17\0\1\u023a\43\0\1\u023b"+
    "\53\0\1\43\2\0\4\43\1\0\5\43\1\0\4\43"+
    "\1\u023c\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u023d\53\0\1\u023e\2\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\22\0\1\240\40\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\254\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\1\43\1\u023f"+
    "\3\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\1\u0240\4\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\u0241\2\0\4\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\22\0\1\u0242\40\0\1\u0243\62\0\1\u0244"+
    "\27\0\1\u0244\60\0\1\u0245\12\0\1\u0246\17\0\1\u0194"+
    "\26\0\32\u0195\1\u0115\21\u0195\15\0\1\u0247\54\0\1\u0248"+
    "\57\0\1\u0249\50\0\1\u024a\22\0\1\u024a\26\0\1\u024b"+
    "\44\0\1\u024c\62\0\1\u024d\60\0\1\274\40\0\1\u024e"+
    "\46\0\1\43\2\0\2\43\1\u024f\1\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\3\43"+
    "\1\u0250\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\u0251\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\u0252\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\2\43\1\u0253\2\43\2\0\1\43\53\0\1\u0254"+
    "\12\0\1\u0255\17\0\1\u01ab\26\0\32\u0256\1\u0257\21\u0256"+
    "\16\0\1\u0258\52\0\1\u0259\40\0\1\43\2\0\4\43"+
    "\1\0\4\43\1\u025a\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\2\43\1\u025b\2\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\u025c\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\3\43\1\u025d\1\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\3\43\1\u025e\1\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\2\43\1\u025f\2\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\2\43\1\u0260\1\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\1\43\1\u0261\3\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\15\0\1\u0262\45\0\1\43\2\0\4\43\1\0"+
    "\1\u0263\4\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\u0264\2\0\4\43"+
    "\1\0\5\43\1\0\2\43\1\u0265\2\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\1\43\1\u0266\2\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\25\0\1\u0267\57\0\1\u0268\31\0\1\43\2\0\4\43"+
    "\1\0\4\43\1\u0269\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\1\43\1\u026a\3\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\17\0"+
    "\1\u026b\13\0\1\u026c\33\0\1\u026d\75\0\1\u026e\37\0"+
    "\1\u026f\54\0\1\u0270\50\0\1\u0271\53\0\1\u0272\53\0"+
    "\1\u0273\43\0\1\u01b9\1\0\1\u0126\1\u01ba\2\0\1\u01bb"+
    "\1\u0129\1\0\1\u01bc\1\u01bd\1\0\1\u01be\1\u012d\3\0"+
    "\1\u01bf\1\u01c0\1\u01c1\5\0\1\u01c2\1\u0126\4\0\1\u0129"+
    "\1\u012d\37\0\1\u0274\62\0\1\u0275\20\0\1\43\2\0"+
    "\4\43\1\u0276\3\43\1\u0277\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\2\43\1\u0278\2\43\2\0"+
    "\1\43\7\0\1\43\2\0\3\43\1\u0279\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\0\1\u027a\4\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\4\43\1\u027b\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\12\0\1\u027c\50\0\1\43"+
    "\2\0\1\u027d\3\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u027e\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\13\0\1\u027f\55\0\1\163\45\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u0280\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\27\0"+
    "\1\u0281\33\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\2\43\1\313\2\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\4\43\1\u0282\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u0283\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\1\43\1\u0284\2\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\3\43\1\177\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\14\0\1\u0285\46\0\1\43\2\0\2\43\1\u0286"+
    "\1\43\1\0\5\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u0287\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\u0288\2\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\u0289\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\2\43\1\u028a\2\43\2\0"+
    "\1\43\53\0\1\u028b\12\0\1\u028c\17\0\1\u01e3\26\0"+
    "\32\u028d\1\u028e\21\u028d\16\0\1\u028f\52\0\1\u0290\40\0"+
    "\1\43\2\0\4\43\1\0\4\43\1\u0291\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\2\43"+
    "\1\u0292\2\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\u0293\5\43\1\0\3\43\2\0\1\43\3\0\3\43"+
    "\1\u0294\1\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\3\43\1\u0295\1\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\2\43\1\u0296\2\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\2\43\1\u0297\1\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\1\43"+
    "\1\u0298\3\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\15\0\1\u0299\45\0\1\43"+
    "\2\0\4\43\1\0\1\u029a\4\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\u029b\2\0\4\43\1\0\5\43\1\0\2\43\1\u029c"+
    "\2\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\1\43\1\u029d\2\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\25\0\1\u029e\57\0\1\u029f\31\0"+
    "\1\43\2\0\4\43\1\0\4\43\1\u02a0\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\1\43"+
    "\1\u02a1\3\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\17\0\1\u02a2\13\0\1\u02a3\33\0\1\u02a4"+
    "\75\0\1\u02a5\37\0\1\u02a6\54\0\1\u02a7\50\0\1\u02a8"+
    "\53\0\1\u02a9\53\0\1\u02aa\43\0\1\u01f1\1\0\1\u014e"+
    "\1\u01f2\2\0\1\u01f3\1\u0151\1\0\1\u01f4\1\u01f5\1\0"+
    "\1\u01f6\1\u0155\3\0\1\u01f7\1\u01f8\1\u01f9\5\0\1\u01fa"+
    "\1\u014e\4\0\1\u0151\1\u0155\37\0\1\u02ab\62\0\1\u02ac"+
    "\20\0\1\43\2\0\4\43\1\u02ad\3\43\1\u02ae\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\2\43"+
    "\1\u02af\2\43\2\0\1\43\7\0\1\43\2\0\3\43"+
    "\1\u02b0\1\0\5\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\1\u02b1\4\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\4\43\1\u02b2\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\12\0"+
    "\1\u02b3\50\0\1\43\2\0\1\u02b4\3\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\3\43"+
    "\1\u02b5\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\13\0\1\u02b6\55\0\1\212"+
    "\45\0\1\43\2\0\4\43\1\0\3\43\1\u02b7\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\27\0\1\u02b8\33\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\2\43\1\345\2\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\4\43\1\u02b9\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u02ba\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\1\43\1\u02bb\2\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\3\43\1\226"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u02bc\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\u02bd"+
    "\2\0\4\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\u02be\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\2\43\1\u02bf\2\43\2\0\1\43"+
    "\53\0\1\u02c0\12\0\1\u02c1\17\0\1\u0218\26\0\32\u02c2"+
    "\1\u02c3\21\u02c2\15\0\1\u02c4\40\0\1\43\2\0\4\43"+
    "\1\0\4\43\1\u02c5\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\2\43\1\u02c6\2\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\u02c7\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\3\43\1\u02c8\1\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\3\43\1\u02c9\1\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\2\43\1\u02ca\2\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\2\43\1\u02cb\1\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\1\43\1\u02cc\3\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\15\0\1\u02cd\45\0\1\43\2\0\4\43\1\0"+
    "\1\u02ce\4\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\u02cf\2\0\4\43"+
    "\1\0\5\43\1\0\2\43\1\u02d0\2\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\1\43\1\u02d1\2\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\25\0\1\u02d2\57\0\1\u02d3\31\0\1\43\2\0\4\43"+
    "\1\0\4\43\1\u02d4\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\1\43\1\u02d5\3\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\17\0"+
    "\1\u02d6\13\0\1\u02d7\33\0\1\u02d8\75\0\1\u02d9\37\0"+
    "\1\u02da\54\0\1\u02db\50\0\1\u02dc\53\0\1\u02dd\53\0"+
    "\1\u02de\43\0\1\u0226\1\0\1\u0174\1\u0227\2\0\1\u0228"+
    "\1\u0177\1\0\1\u0229\1\u022a\1\0\1\u022b\1\u017b\3\0"+
    "\1\u022c\1\u022d\1\u022e\5\0\1\u022f\1\u0174\4\0\1\u0177"+
    "\1\u017b\37\0\1\u02df\62\0\1\u02e0\20\0\1\43\2\0"+
    "\4\43\1\u02e1\3\43\1\u02e2\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\2\43\1\u02e3\2\43\2\0"+
    "\1\43\7\0\1\43\2\0\3\43\1\u02e4\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\0\1\u02e5\4\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\4\43\1\u02e6\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\12\0\1\u02e7\50\0\1\43"+
    "\2\0\1\u02e8\3\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u02e9\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\13\0\1\u02ea\55\0\1\240\45\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u02eb\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\27\0"+
    "\1\u02ec\33\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\2\43\1\375\2\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\3\43\1\u02ed\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\1\43\1\u02ee\2\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\3\43\1\254\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\34\0\1\u0115\34\0\1\u0196\55\0\1\u02ef\66\0\1\u0194"+
    "\20\0\1\u0245\21\0\1\u0115\45\0\1\u02f0\70\0\1\u024d"+
    "\41\0\1\u02f1\27\0\1\u02f1\37\0\1\u02f2\36\0\1\u02f3"+
    "\51\0\1\u02f4\47\0\1\43\2\0\1\43\1\u02f5\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\1\43\1\u0124\1\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\3\43\1\u01d3\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\17\0"+
    "\1\u02f6\43\0\1\43\2\0\4\43\1\0\1\u02f7\4\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\32\0\1\u01ab\20\0\1\u0254\13\0\1\u02f8"+
    "\50\0\1\u01a3\21\0\1\u01ab\43\0\1\u02f9\52\0\1\u0257"+
    "\41\0\1\43\2\0\1\43\1\u02fa\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\0\3\43\1\u0280\1\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\16\0\1\u02fb\27\0\1\u02fb"+
    "\14\0\1\43\2\0\4\43\1\u02fb\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\2\43\1\u02fc\2\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\1\43"+
    "\1\u02fd\3\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\2\43\1\u02fe\2\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\u02ff"+
    "\2\0\4\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\3\43\1\u0300\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\22\0\1\u0301\40\0\1\u0302\2\0\4\43\1\0\5\43"+
    "\1\0\1\43\1\u0303\3\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\1\43"+
    "\1\u0304\2\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\4\43\1\u0305\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\1\u0306\4\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\21\0\1\u0307\54\0\1\u0308\40\0\1\43\2\0\1\43"+
    "\1\u0309\2\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\u030a\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\2\43\1\u030b\2\43\2\0\1\43"+
    "\30\0\1\u030c\52\0\1\u030d\40\0\1\u030e\57\0\1\u030f"+
    "\52\0\1\u0310\43\0\1\u0311\17\0\1\u0312\37\0\1\u0313"+
    "\63\0\1\u0314\56\0\1\u0315\43\0\1\u0276\3\0\1\u0316"+
    "\23\0\1\u0276\12\0\15\u0317\1\u0318\36\u0317\24\0\1\u0319"+
    "\31\0\1\43\2\0\4\43\1\0\2\43\1\u031a\2\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\0\4\43\1\u031a\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\3\43\1\u031b\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\2\43\1\u031c\2\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u031d\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\u031e\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\15\0\1\u031f\67\0\1\u0257\31\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u0320\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\2\43\1\u0124\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\3\43\1\u0321\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\13\0\1\u0322\47\0\1\43\2\0\1\43"+
    "\1\u0323\2\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\5\43\1\0\1\43"+
    "\1\u014c\1\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\3\43\1\u020b\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\17\0\1\u0324\43\0\1\43\2\0\4\43\1\0"+
    "\1\u0325\4\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\32\0\1\u01e3\20\0\1\u028b"+
    "\13\0\1\u0326\50\0\1\u01db\21\0\1\u01e3\43\0\1\u0327"+
    "\52\0\1\u028e\41\0\1\43\2\0\1\43\1\u0328\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\3\43\1\u02b7\1\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\16\0\1\u0329"+
    "\27\0\1\u0329\14\0\1\43\2\0\4\43\1\u0329\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\2\43"+
    "\1\u032a\2\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\1\43\1\u032b\3\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\2\43\1\u032c\2\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\u032d\2\0\4\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\3\43\1\u032e\1\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\22\0\1\u032f\40\0\1\u0330\2\0\4\43"+
    "\1\0\5\43\1\0\1\43\1\u0331\3\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\1\43\1\u0332\2\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\4\43"+
    "\1\u0333\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\1\u0334\4\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\21\0\1\u0335\54\0\1\u0336\40\0\1\43"+
    "\2\0\1\43\1\u0337\2\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\u0338\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\2\43\1\u0339\2\43"+
    "\2\0\1\43\30\0\1\u033a\52\0\1\u033b\40\0\1\u033c"+
    "\57\0\1\u033d\52\0\1\u033e\43\0\1\u033f\17\0\1\u0340"+
    "\37\0\1\u0341\63\0\1\u0342\56\0\1\u0343\43\0\1\u02ad"+
    "\3\0\1\u0344\23\0\1\u02ad\12\0\15\u0345\1\u0346\36\u0345"+
    "\24\0\1\u0347\31\0\1\43\2\0\4\43\1\0\2\43"+
    "\1\u0348\2\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\4\43\1\u0348\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u0349\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\2\43\1\u034a\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\3\43\1\u034b"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\u034c\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\15\0\1\u034d\67\0\1\u028e\31\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u034e\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\2\43\1\u014c"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\3\43\1\u034f"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\1\43\1\u0172\1\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\3\43\1\u023f\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\17\0"+
    "\1\u0350\43\0\1\43\2\0\4\43\1\0\1\u0351\4\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\32\0\1\u0218\20\0\1\u02c0\13\0\1\u0352"+
    "\50\0\1\u0211\21\0\1\u0218\42\0\1\u02c3\41\0\1\43"+
    "\2\0\1\43\1\u0353\2\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\3\43"+
    "\1\u02eb\1\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\16\0\1\u0354\27\0\1\u0354\14\0\1\43"+
    "\2\0\4\43\1\u0354\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\2\43\1\u0355\2\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\1\43\1\u0356\3\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\2\43"+
    "\1\u0357\2\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\u0358\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u0359\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\22\0\1\u035a"+
    "\40\0\1\u035b\2\0\4\43\1\0\5\43\1\0\1\43"+
    "\1\u035c\3\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\1\43\1\u035d\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\4\43\1\u035e\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\1\u035f\4\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\21\0\1\u0360"+
    "\54\0\1\u0361\40\0\1\43\2\0\1\43\1\u0362\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\u0363\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\2\43\1\u0364\2\43\2\0\1\43\30\0\1\u0365"+
    "\52\0\1\u0366\40\0\1\u0367\57\0\1\u0368\52\0\1\u0369"+
    "\43\0\1\u036a\17\0\1\u036b\37\0\1\u036c\63\0\1\u036d"+
    "\56\0\1\u036e\43\0\1\u02e1\3\0\1\u036f\23\0\1\u02e1"+
    "\12\0\15\u0370\1\u0371\36\u0370\24\0\1\u0372\31\0\1\43"+
    "\2\0\4\43\1\0\2\43\1\u0373\2\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\4\43"+
    "\1\u0373\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\3\43\1\u0374"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\2\43\1\u0375\2\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u0376\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\5\43\1\u0377"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\15\0"+
    "\1\u0378\67\0\1\u02c3\31\0\1\43\2\0\4\43\1\0"+
    "\2\43\1\u0172\2\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\3\43\1\u0379\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\14\0\1\u024d"+
    "\60\0\1\u019c\76\0\1\u037a\27\0\1\u037b\11\0\1\u02f2"+
    "\37\0\1\u037c\27\0\1\u037c\27\0\1\u037d\40\0\1\43"+
    "\2\0\4\43\1\0\3\43\1\u037e\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\14\0\1\u037f\46\0\1\43\2\0\2\43\1\u0280\1\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\14\0\1\u0380\71\0\1\u0381"+
    "\30\0\1\43\2\0\4\43\1\0\2\43\1\u01cf\2\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\44\0\1\u0382\16\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\1\u0383\4\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\4\43\1\u0384\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\2\43\1\u0385\2\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\3\43\1\u0386\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\1\u0387\1\0\4\43\1\0\5\43"+
    "\1\0\5\43\1\u0388\3\43\1\u0389\1\0\1\43\3\0"+
    "\5\43\2\0\1\43\26\0\1\u038a\34\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u038b\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\2\43\1\u038c\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\2\43\1\u038d"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\1\u0387\1\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\u0388\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\4\43\1\u038e\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\17\0\1\u038f\43\0"+
    "\1\u0390\53\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\4\43\1\u0391\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\u0392\53\0\1\u0393\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\20\0\1\u0394\54\0\1\u0395"+
    "\41\0\1\u0396\66\0\1\u0397\40\0\1\u0398\16\0\1\u0399"+
    "\40\0\1\u039a\71\0\1\u039b\47\0\1\u039c\41\0\1\u039d"+
    "\56\0\1\u030a\27\0\1\u030a\26\0\1\u0319\37\0\63\u0317"+
    "\1\u039e\44\u0317\15\0\1\u01b0\40\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u01c5\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\1\43\1\u039f\3\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\1\u03a0\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u03a1\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\20\0\1\u03a2\11\0\1\u031e\37\0\1\u03a3\27\0"+
    "\1\u03a3\14\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\u0381\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\u03a3\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\2\43\1\u03a4"+
    "\2\43\2\0\1\43\22\0\1\u03a5\40\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u03a6\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\14\0"+
    "\1\u03a7\46\0\1\43\2\0\2\43\1\u02b7\1\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\14\0\1\u03a8\71\0\1\u03a9\30\0"+
    "\1\43\2\0\4\43\1\0\2\43\1\u0207\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\44\0\1\u03aa\16\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\1\u03ab\4\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\4\43\1\u03ac\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\2\43\1\u03ad\2\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\3\43\1\u03ae\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\1\u03af\1\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\u03b0\3\43\1\u03b1\1\0\1\43\3\0\5\43"+
    "\2\0\1\43\26\0\1\u03b2\34\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u03b3\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\2\43\1\u03b4\2\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\2\43\1\u03b5\2\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\1\u03af\1\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\u03b0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\4\43\1\u03b6\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\17\0\1\u03b7\43\0\1\u03b8"+
    "\53\0\1\43\2\0\4\43\1\0\5\43\1\0\4\43"+
    "\1\u03b9\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u03ba\53\0\1\u03bb\2\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\20\0\1\u03bc\54\0\1\u03bd\41\0"+
    "\1\u03be\66\0\1\u03bf\40\0\1\u03c0\16\0\1\u03c1\40\0"+
    "\1\u03c2\71\0\1\u03c3\47\0\1\u03c4\41\0\1\u03c5\56\0"+
    "\1\u0338\27\0\1\u0338\26\0\1\u0347\37\0\63\u0345\1\u03c6"+
    "\44\u0345\15\0\1\u01e8\40\0\1\43\2\0\4\43\1\0"+
    "\3\43\1\u01fd\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\1\43\1\u03c7\3\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\1\u03c8\4\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\u03c9\2\0\4\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\20\0\1\u03ca\11\0\1\u034c\37\0\1\u03cb\27\0\1\u03cb"+
    "\14\0\1\43\2\0\4\43\1\0\5\43\1\0\5\43"+
    "\1\u03a9\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\u03cb\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\2\43\1\u03cc\2\43"+
    "\2\0\1\43\14\0\1\u03cd\46\0\1\43\2\0\2\43"+
    "\1\u02eb\1\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\14\0\1\u03ce"+
    "\46\0\1\43\2\0\4\43\1\0\2\43\1\u023c\2\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\44\0\1\u03cf\16\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\1\u03d0\4\43\2\0\1\43\7\0\1\43\2\0"+
    "\4\43\1\0\5\43\1\0\4\43\1\u03d1\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\2\43\1\u03d2\2\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\3\43\1\u03d3\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\1\u03d4\1\0\4\43\1\0\5\43"+
    "\1\0\5\43\1\u03d5\3\43\1\u03d6\1\0\1\43\3\0"+
    "\5\43\2\0\1\43\26\0\1\u03d7\34\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u03d8\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\2\43\1\u03d9\2\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\2\43\1\u03da"+
    "\2\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\1\u03d4\1\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\u03d5\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\4\43\1\u03db\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\17\0\1\u03dc\43\0"+
    "\1\u03dd\53\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\4\43\1\u03de\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\u03df\53\0\1\u03e0\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\20\0\1\u03e1\54\0\1\u03e2"+
    "\41\0\1\u03e3\66\0\1\u03e4\40\0\1\u03e5\16\0\1\u03e6"+
    "\40\0\1\u03e7\71\0\1\u03e8\47\0\1\u03e9\41\0\1\u03ea"+
    "\56\0\1\u0363\27\0\1\u0363\26\0\1\u0372\37\0\63\u0370"+
    "\1\u03eb\44\u0370\15\0\1\u021d\40\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u0232\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\1\43\1\u03ec\3\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\1\u03ed\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u03ee\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\20\0\1\u03ef\11\0\1\u0377\37\0\1\u03f0\27\0"+
    "\1\u03f0\14\0\1\43\2\0\4\43\1\u03f0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\2\43\1\u03f1"+
    "\2\43\2\0\1\43\22\0\1\u03f2\52\0\1\u03f3\46\0"+
    "\1\u019c\46\0\1\u03f4\66\0\1\u03f5\40\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u03f6\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u03f7\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u03f8\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\u03f9\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\2\43\1\u03fa"+
    "\2\43\2\0\1\43\53\0\1\u03fb\12\0\1\u01ba\17\0"+
    "\1\u0388\26\0\32\u0389\1\u039b\21\u0389\15\0\1\u03fc\40\0"+
    "\1\43\2\0\4\43\1\0\4\43\1\u03fd\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\2\43"+
    "\1\u03fe\2\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\u03ff\5\43\1\0\3\43\2\0\1\43\3\0\3\43"+
    "\1\u0400\1\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u0401\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\13\0\1\u0402"+
    "\55\0\1\u01b0\45\0\1\43\2\0\4\43\1\0\3\43"+
    "\1\u0403\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\27\0\1\u0312\33\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\2\43\1\u0265\2\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\31\0\1\u0404\51\0\1\u0405\41\0\1\u0406\46\0\1\u0387"+
    "\21\0\1\u0388\3\0\1\u0389\37\0\1\u0407\52\0\1\u0408"+
    "\53\0\1\u0409\42\0\1\u0387\21\0\1\u0388\52\0\1\u040a"+
    "\53\0\1\u040b\27\0\16\u0317\1\u040c\35\u0317\2\0\1\43"+
    "\2\0\4\43\1\0\3\43\1\u040d\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\1\43\1\u040e\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\3\43\1\u01c5\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\21\0\1\u040f\46\0\1\u0410\46\0"+
    "\1\43\2\0\2\43\1\u01cf\1\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u0411\66\0\1\u0412\40\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u0413\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u0414\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u0415\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\u0416\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\2\43\1\u0417"+
    "\2\43\2\0\1\43\53\0\1\u0418\12\0\1\u01f2\17\0"+
    "\1\u03b0\26\0\32\u03b1\1\u03c3\21\u03b1\15\0\1\u0419\40\0"+
    "\1\43\2\0\4\43\1\0\4\43\1\u041a\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\2\43"+
    "\1\u041b\2\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\u041c\5\43\1\0\3\43\2\0\1\43\3\0\3\43"+
    "\1\u041d\1\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u041e\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\13\0\1\u041f"+
    "\55\0\1\u01e8\45\0\1\43\2\0\4\43\1\0\3\43"+
    "\1\u0420\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\27\0\1\u0340\33\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\2\43\1\u029c\2\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\31\0\1\u0421\51\0\1\u0422\41\0\1\u0423\46\0\1\u03af"+
    "\21\0\1\u03b0\3\0\1\u03b1\37\0\1\u0424\52\0\1\u0425"+
    "\53\0\1\u0426\42\0\1\u03af\21\0\1\u03b0\52\0\1\u0427"+
    "\53\0\1\u0428\27\0\16\u0345\1\u0429\35\u0345\2\0\1\43"+
    "\2\0\4\43\1\0\3\43\1\u042a\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\1\43\1\u042b\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\3\43\1\u01fd\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\21\0\1\u042c\46\0\1\u042d\46\0"+
    "\1\43\2\0\2\43\1\u0207\1\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u042e\66\0\1\u042f\40\0\1\43\2\0"+
    "\4\43\1\0\3\43\1\u0430\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u0431\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\u0432\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\u0433\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\2\43\1\u0434"+
    "\2\43\2\0\1\43\53\0\1\u0435\12\0\1\u0227\17\0"+
    "\1\u03d5\26\0\32\u03d6\1\u03e8\21\u03d6\15\0\1\u0436\40\0"+
    "\1\43\2\0\4\43\1\0\4\43\1\u0437\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\4\43\1\0\5\43\1\0\2\43"+
    "\1\u0438\2\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\5\43"+
    "\1\u0439\5\43\1\0\3\43\2\0\1\43\3\0\3\43"+
    "\1\u043a\1\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\3\43\1\u043b\1\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\13\0\1\u043c"+
    "\55\0\1\u021d\45\0\1\43\2\0\4\43\1\0\3\43"+
    "\1\u043d\1\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\27\0\1\u036b\33\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\2\43\1\u02d0\2\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\31\0\1\u043e\51\0\1\u043f\41\0\1\u0440\46\0\1\u03d4"+
    "\21\0\1\u03d5\3\0\1\u03d6\37\0\1\u0441\52\0\1\u0442"+
    "\53\0\1\u0443\42\0\1\u03d4\21\0\1\u03d5\52\0\1\u0444"+
    "\53\0\1\u0445\27\0\16\u0370\1\u0446\35\u0370\2\0\1\43"+
    "\2\0\4\43\1\0\3\43\1\u0447\1\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\1\43\1\u0448\2\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\3\43\1\u0232\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\21\0\1\u0449\46\0\1\u044a\46\0"+
    "\1\43\2\0\2\43\1\u023c\1\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\32\0\1\u044b\43\0\1\u044c\46\0\1\u044d\70\0"+
    "\1\u044e\30\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\u044e\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\0\1\43\1\u0305\1\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\3\43\1\u039f"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\17\0\1\u044f\43\0\1\43"+
    "\2\0\4\43\1\0\1\u0450\4\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\32\0"+
    "\1\u0388\20\0\1\u03fb\21\0\1\u039b\41\0\1\43\2\0"+
    "\1\43\1\u0451\2\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\3\43\1\u0403"+
    "\1\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\16\0\1\u0452\27\0\1\u0452\14\0\1\43\2\0"+
    "\4\43\1\u0452\5\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\2\43\1\u0453\2\43\2\0\1\43\7\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\5\43\1\u0454"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\15\0"+
    "\1\u0455\60\0\1\u0456\40\0\1\u0457\62\0\1\u03f9\27\0"+
    "\1\u03f9\30\0\1\u0458\57\0\1\u0459\50\0\1\u03ff\22\0"+
    "\1\u03ff\26\0\1\u045a\53\0\1\u0126\36\0\25\u0317\1\u040c"+
    "\10\u0317\1\u045b\15\u0317\2\0\1\43\2\0\4\43\1\0"+
    "\2\43\1\u0305\2\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\3\43\1\u045c\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\22\0\1\u045d"+
    "\53\0\1\u037f\46\0\1\u045e\70\0\1\u045f\30\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\5\43\1\u045f\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\7\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\5\43\1\0\1\43"+
    "\1\u0333\1\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\7\0\1\43\2\0\3\43\1\u03c7\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\17\0\1\u0460\43\0\1\43\2\0\4\43\1\0"+
    "\1\u0461\4\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\32\0\1\u03b0\20\0\1\u0418"+
    "\21\0\1\u03c3\41\0\1\43\2\0\1\43\1\u0462\2\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\3\43\1\u0420\1\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\16\0\1\u0463"+
    "\27\0\1\u0463\14\0\1\43\2\0\4\43\1\u0463\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\2\43"+
    "\1\u0464\2\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\5\43\1\0\5\43\1\u0465\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\15\0\1\u0466\60\0\1\u0467"+
    "\40\0\1\u0468\62\0\1\u0416\27\0\1\u0416\30\0\1\u0469"+
    "\57\0\1\u046a\50\0\1\u041c\22\0\1\u041c\26\0\1\u046b"+
    "\53\0\1\u014e\36\0\25\u0345\1\u0429\10\u0345\1\u046c\15\u0345"+
    "\2\0\1\43\2\0\4\43\1\0\2\43\1\u0333\2\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\3\43\1\u046d\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\22\0\1\u046e\53\0\1\u03a7\46\0"+
    "\1\u046f\70\0\1\u0470\30\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\u0470\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\5\43\1\0\5\43\1\0\1\43\1\u035e\1\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\7\0\1\43\2\0"+
    "\3\43\1\u03ec\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\17\0\1\u0471"+
    "\43\0\1\43\2\0\4\43\1\0\1\u0472\4\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\32\0\1\u03d5\20\0\1\u0435\21\0\1\u03e8\41\0"+
    "\1\43\2\0\1\43\1\u0473\2\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\3\43\1\u043d\1\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\16\0\1\u0474\27\0\1\u0474\14\0"+
    "\1\43\2\0\4\43\1\u0474\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\2\43\1\u0475\2\43\2\0"+
    "\1\43\7\0\1\43\2\0\4\43\1\0\5\43\1\0"+
    "\5\43\1\u0476\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\15\0\1\u0477\60\0\1\u0478\40\0\1\u0479\62\0"+
    "\1\u0433\27\0\1\u0433\30\0\1\u047a\57\0\1\u047b\50\0"+
    "\1\u0439\22\0\1\u0439\26\0\1\u047c\53\0\1\u0174\36\0"+
    "\25\u0370\1\u0446\10\u0370\1\u047d\15\u0370\2\0\1\43\2\0"+
    "\4\43\1\0\2\43\1\u035e\2\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\7\0"+
    "\1\43\2\0\3\43\1\u047e\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\5\43\2\0\1\43"+
    "\22\0\1\u047f\53\0\1\u03cd\55\0\1\u0480\5\0\1\u044b"+
    "\14\0\1\u0480\13\0\1\u0481\62\0\1\u0252\27\0\1\u0252"+
    "\31\0\1\u0482\5\0\1\u044e\14\0\1\u0482\20\0\1\u0126"+
    "\46\0\1\43\2\0\2\43\1\u0403\1\43\1\0\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\5\43"+
    "\2\0\1\43\7\0\1\43\2\0\4\43\1\0\2\43"+
    "\1\u0391\2\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\44\0\1\u0483\16\0\1\43"+
    "\2\0\4\43\1\0\5\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\1\u0484\4\43\2\0\1\43\20\0"+
    "\1\u0485\11\0\1\u0454\37\0\1\u0486\27\0\1\u0486\41\0"+
    "\1\u039b\34\0\1\u038a\51\0\1\u0487\70\0\1\u0126\55\0"+
    "\1\u0454\30\0\1\43\2\0\4\43\1\u0486\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\2\43\1\u0488"+
    "\2\43\2\0\1\43\7\0\1\u0489\62\0\1\u0289\27\0"+
    "\1\u0289\31\0\1\u048a\5\0\1\u045f\14\0\1\u048a\20\0"+
    "\1\u014e\46\0\1\43\2\0\2\43\1\u0420\1\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\7\0\1\43\2\0\4\43\1\0"+
    "\2\43\1\u03b9\2\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\44\0\1\u048b\16\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\5\43\1\0"+
    "\3\43\2\0\1\43\3\0\1\u048c\4\43\2\0\1\43"+
    "\20\0\1\u048d\11\0\1\u0465\37\0\1\u048e\27\0\1\u048e"+
    "\41\0\1\u03c3\34\0\1\u03b2\51\0\1\u048f\70\0\1\u014e"+
    "\55\0\1\u0465\30\0\1\43\2\0\4\43\1\u048e\5\43"+
    "\1\0\5\43\1\0\3\43\2\0\1\43\3\0\2\43"+
    "\1\u0490\2\43\2\0\1\43\7\0\1\u0491\62\0\1\u02be"+
    "\27\0\1\u02be\31\0\1\u0492\5\0\1\u0470\14\0\1\u0492"+
    "\20\0\1\u0174\46\0\1\43\2\0\2\43\1\u043d\1\43"+
    "\1\0\5\43\1\0\5\43\1\0\3\43\2\0\1\43"+
    "\3\0\5\43\2\0\1\43\7\0\1\43\2\0\4\43"+
    "\1\0\2\43\1\u03de\2\43\1\0\5\43\1\0\3\43"+
    "\2\0\1\43\3\0\5\43\2\0\1\43\44\0\1\u0493"+
    "\16\0\1\43\2\0\4\43\1\0\5\43\1\0\5\43"+
    "\1\0\3\43\2\0\1\43\3\0\1\u0494\4\43\2\0"+
    "\1\43\20\0\1\u0495\11\0\1\u0476\37\0\1\u0496\27\0"+
    "\1\u0496\41\0\1\u03e8\34\0\1\u03d7\51\0\1\u0497\70\0"+
    "\1\u0174\55\0\1\u0476\30\0\1\43\2\0\4\43\1\u0496"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\2\43\1\u0498\2\43\2\0\1\43\7\0\1\u0499\62\0"+
    "\1\u049a\27\0\1\u049a\20\0\1\172\62\0\1\u049b\40\0"+
    "\1\43\2\0\4\43\1\0\3\43\1\u049c\1\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\21\0\1\u049d\46\0\1\u040b\60\0\1\u040b\41\0"+
    "\1\43\2\0\2\43\1\u0391\1\43\1\0\5\43\1\0"+
    "\5\43\1\0\3\43\2\0\1\43\3\0\5\43\2\0"+
    "\1\43\16\0\1\u049e\27\0\1\u049e\20\0\1\221\62\0"+
    "\1\u049f\40\0\1\43\2\0\4\43\1\0\3\43\1\u04a0"+
    "\1\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\21\0\1\u04a1\46\0\1\u0428\60\0"+
    "\1\u0428\41\0\1\43\2\0\2\43\1\u03b9\1\43\1\0"+
    "\5\43\1\0\5\43\1\0\3\43\2\0\1\43\3\0"+
    "\5\43\2\0\1\43\16\0\1\u04a2\27\0\1\u04a2\20\0"+
    "\1\247\62\0\1\u04a3\40\0\1\43\2\0\4\43\1\0"+
    "\3\43\1\u04a4\1\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\21\0\1\u04a5\46\0"+
    "\1\u0445\60\0\1\u0445\41\0\1\43\2\0\2\43\1\u03de"+
    "\1\43\1\0\5\43\1\0\5\43\1\0\3\43\2\0"+
    "\1\43\3\0\5\43\2\0\1\43\16\0\1\u04a6\27\0"+
    "\1\u04a6\31\0\1\u04a7\22\0\1\u04a7\36\0\1\u04a8\30\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\5\43\1\u04a8"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\22\0"+
    "\1\u04a9\55\0\1\u04aa\22\0\1\u04aa\36\0\1\u04ab\30\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\5\43\1\u04ab"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\22\0"+
    "\1\u04ac\55\0\1\u04ad\22\0\1\u04ad\36\0\1\u04ae\30\0"+
    "\1\43\2\0\4\43\1\0\5\43\1\0\5\43\1\u04ae"+
    "\3\43\2\0\1\43\3\0\5\43\2\0\1\43\22\0"+
    "\1\u04af\55\0\1\u04b0\22\0\1\u04b0\22\0\1\u04b1\27\0"+
    "\1\u04b1\31\0\1\u04b2\5\0\1\u04a8\14\0\1\u04b2\13\0"+
    "\1\u04b3\62\0\1\u04b4\27\0\1\u04b4\31\0\1\u04b5\5\0"+
    "\1\u04ab\14\0\1\u04b5\13\0\1\u04b6\62\0\1\u04b7\27\0"+
    "\1\u04b7\31\0\1\u04b8\5\0\1\u04ae\14\0\1\u04b8\13\0"+
    "\1\u04b9\62\0\1\u04ba\27\0\1\u04ba\24\0\1\u04bb\47\0"+
    "\1\u01b5\56\0\1\u04bc\27\0\1\u04bc\24\0\1\u04bd\47\0"+
    "\1\u01ed\56\0\1\u04be\27\0\1\u04be\24\0\1\u04bf\47\0"+
    "\1\u0222\56\0\1\u04c0\27\0\1\u04c0\24\0\1\u04c1\50\0"+
    "\1\u0115\63\0\1\u04c2\22\0\1\u04c2\20\0\1\u0257\63\0"+
    "\1\u04c3\22\0\1\u04c3\20\0\1\u028e\63\0\1\u04c4\22\0"+
    "\1\u04c4\20\0\1\u02c3\55\0\1\u04c5\27\0\1\u04c5\23\0"+
    "\1\u04c6\27\0\1\u04c6\23\0\1\u04c7\27\0\1\u04c7\24\0"+
    "\1\u04c8\53\0\1\u04c9\53\0\1\u04ca\50\0\1\u039b\53\0"+
    "\1\u03c3\53\0\1\u03e8\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[50468];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\2\1\2\11\11\1\4\11\1\1\2\11"+
    "\1\1\2\11\13\1\1\11\6\1\2\11\1\1\1\11"+
    "\13\1\1\11\5\1\1\11\1\1\1\11\21\1\4\11"+
    "\1\1\1\11\1\1\13\0\4\1\2\0\5\1\2\0"+
    "\7\1\1\0\1\11\1\0\4\1\2\0\5\1\2\0"+
    "\7\1\2\0\4\1\2\0\5\1\2\0\7\1\21\0"+
    "\5\1\1\11\2\0\4\1\1\0\2\1\2\0\2\1"+
    "\1\0\13\1\1\11\2\0\4\1\1\0\2\1\2\0"+
    "\2\1\1\0\12\1\1\11\1\0\4\1\1\0\2\1"+
    "\2\0\2\1\1\0\5\1\16\0\5\1\2\0\5\1"+
    "\1\11\2\1\1\0\3\1\1\0\2\1\1\0\6\1"+
    "\2\0\1\1\1\0\1\1\1\0\12\1\2\0\5\1"+
    "\1\11\2\1\1\0\3\1\1\0\2\1\1\0\6\1"+
    "\2\0\1\1\1\0\1\1\1\0\11\1\1\0\5\1"+
    "\1\11\2\1\1\0\3\1\1\0\2\1\1\0\6\1"+
    "\2\0\1\1\1\0\1\1\1\0\4\1\1\11\17\0"+
    "\4\1\1\0\2\1\2\0\3\1\1\0\4\1\1\11"+
    "\1\0\3\1\2\0\2\1\13\0\5\1\2\0\2\1"+
    "\2\0\1\1\1\0\5\1\1\0\4\1\1\0\2\1"+
    "\2\0\3\1\1\0\4\1\1\11\1\0\3\1\2\0"+
    "\2\1\13\0\5\1\2\0\2\1\2\0\1\1\1\0"+
    "\10\1\1\0\2\1\1\0\3\1\1\0\4\1\1\11"+
    "\1\0\3\1\2\0\2\1\13\0\5\1\2\0\2\1"+
    "\2\0\1\1\1\0\4\1\13\0\1\11\1\0\3\1"+
    "\1\0\2\1\2\0\1\1\2\0\2\1\1\0\5\1"+
    "\1\0\4\1\2\0\2\1\6\0\1\1\3\0\1\1"+
    "\1\0\5\1\1\11\2\1\1\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\0\2\1\2\0\1\1\2\0\2\1"+
    "\1\0\5\1\1\0\4\1\2\0\2\1\6\0\1\1"+
    "\3\0\1\1\1\0\5\1\1\11\2\1\1\0\1\1"+
    "\1\0\5\1\1\0\1\1\5\0\2\1\1\0\5\1"+
    "\1\0\4\1\2\0\2\1\6\0\1\1\3\0\1\1"+
    "\1\0\5\1\1\11\2\1\1\0\1\1\1\0\2\1"+
    "\6\0\1\1\1\0\1\1\2\0\1\1\1\0\5\1"+
    "\1\0\5\1\2\0\1\1\1\0\1\1\13\0\2\1"+
    "\1\0\4\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\0\5\1\1\0\5\1\2\0\1\1"+
    "\1\0\1\1\13\0\2\1\1\0\4\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\5\1\1\0\5\1"+
    "\2\0\1\1\1\0\1\1\13\0\2\1\1\0\4\1"+
    "\2\0\1\1\3\0\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\4\1\4\0\4\1\2\0\1\1\1\0\1\1"+
    "\3\0\1\1\6\0\4\1\2\0\1\1\1\11\1\1"+
    "\1\11\1\0\1\11\1\0\4\1\4\0\4\1\2\0"+
    "\1\1\1\0\1\1\3\0\1\1\6\0\4\1\2\0"+
    "\1\1\1\11\2\0\4\1\4\0\4\1\2\0\1\1"+
    "\1\0\1\1\3\0\1\1\6\0\4\1\2\0\1\1"+
    "\4\0\3\1\1\0\1\1\2\0\2\1\1\0\2\1"+
    "\1\0\1\1\10\0\3\1\4\0\3\1\1\0\1\1"+
    "\2\0\2\1\1\0\2\1\1\0\1\1\10\0\3\1"+
    "\4\0\3\1\1\0\1\1\2\0\2\1\1\0\2\1"+
    "\1\0\1\1\10\0\3\1\7\0\2\1\1\0\1\1"+
    "\10\0\1\1\4\0\2\1\1\0\1\1\10\0\1\1"+
    "\4\0\2\1\1\0\1\1\10\0\1\1\5\0\1\1"+
    "\3\0\1\1\3\0\1\1\3\0\1\1\3\0\1\1"+
    "\3\0\1\1\3\0\1\1\3\0\1\1\3\0\1\1"+
    "\46\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMPRESIndent.class.getName());
	String location = "MAIN PROGRAM";
	
	int currentCol = 0;
	List<Integer> theoricCol = new LinkedList<Integer>();
	List<Integer> numbers    = new LinkedList<Integer>();
	boolean endLine = true;
	int par = 0;
	int lastNum = 0;
    String parsedFileName;
	
	
	public COMPRESIndent(){
		theoricCol.add(0);
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
        this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMPRESIndent(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { currentCol+=yytext().length();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 54: break;
          case 2: 
            { 
            }
          case 55: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 56: break;
          case 4: 
            { currentCol=0; currentCol+=yytext().length();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 57: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 58: break;
          case 6: 
            { currentCol=0; 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 59: break;
          case 7: 
            { currentCol+=yytext().length();
            }
          case 60: break;
          case 8: 
            { currentCol+=yytext().length(); 
								 location = location + " " + yytext();
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
								 yybegin(COMMENT);
            }
          case 61: break;
          case 9: 
            { currentCol = 0;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 62: break;
          case 10: 
            { if((theoricCol.size() > 0) && currentCol!=5 && currentCol<=theoricCol.get(theoricCol.size()-1)){
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> AVOID (Transition : . )");
                                    yybegin(AVOID);
            }
          case 63: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 64: break;
          case 12: 
            { currentCol=0;
            }
          case 65: break;
          case 13: 
            { currentCol+=yytext().length();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : SPACE \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 66: break;
          case 14: 
            { currentCol+=yytext().length(); lastNum = Integer.parseInt(yytext()); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : INT \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 67: break;
          case 15: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : # )");
                                    yybegin(COMMENT);
            }
          case 68: break;
          case 16: 
            { if((theoricCol.size() > 0) && currentCol!=5 && currentCol<=theoricCol.get(theoricCol.size()-1)){
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location ,"The code is not indented.", yyline+1); 
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> AVOID (Transition : . )");
                                    yybegin(AVOID);
            }
          case 69: break;
          case 17: 
            { currentCol=0;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 70: break;
          case 18: 
            { if(currentCol==6){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> AVOID (Transition : & )");
                                        yybegin(AVOID);
                                    }
            }
          case 71: break;
          case 19: 
            { currentCol+=yytext().length(); lastNum = Integer.parseInt(yytext());
            }
          case 72: break;
          case 20: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : # )");
                                    yybegin(COMMENT);
            }
          case 73: break;
          case 21: 
            { currentCol=0;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 74: break;
          case 22: 
            { if(par==0) {
                                            currentCol=0;
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - IF_STATE -> NEW_LINE (Transition : \\n )");
                                            yybegin(NEW_LINE);
                                        }
            }
          case 75: break;
          case 23: 
            { par++;
            }
          case 76: break;
          case 24: 
            { par--;
            }
          case 77: break;
          case 25: 
            { theoricCol.add(currentCol); currentCol=0;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - TYPE_STATE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 78: break;
          case 26: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - TYPE_STATE -> COMMENT (Transition : [(] )");
                                    yybegin(COMMENT);
            }
          case 79: break;
          case 27: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DO_STATE -> COMMENT (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 80: break;
          case 28: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DO_STATE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 81: break;
          case 29: 
            { numbers.add(Integer.parseInt(yytext())); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DO_STATE -> COMMENT (Transition : INT \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 82: break;
          case 30: 
            { currentCol+=yytext().length();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : STRING \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 83: break;
          case 31: 
            { if((theoricCol.size() > 0) && (currentCol<=theoricCol.get(theoricCol.size()-1))){
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    if(yytext().toLowerCase().contains("if")) { 
                                        if(yytext().contains("(")){
                                            par=1;
                                        }
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> IF_STATE (Transition : INST \""+yytext()+"\" )");
                                        yybegin(IF_STATE);
                                    } else if(yytext().toLowerCase().contains("type")) {
                                        if(yytext().contains("(")){
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> AVOID (Transition : INST \""+yytext()+"\" )");
                                            yybegin(AVOID);
                                        } else {
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> TYPE_STATE (Transition : INST \""+yytext()+"\" )");
                                            yybegin(TYPE_STATE);
                                        }
                                    } else if(yytext().toLowerCase().contains("do")) {
                                        theoricCol.add(currentCol); 
                                        if(yytext().contains("\n")) {
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NEW_LINE (Transition : INST \""+yytext()+"\" )");
                                            yybegin(NEW_LINE);
                                        }
                                     	yybegin(DO_STATE);
                                    } else { 
                                        theoricCol.add(currentCol); 
                                        if(yytext().contains("\n")) {
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NEW_LINE (Transition : INST \""+yytext()+"\" )");
                                            yybegin(NEW_LINE);
                                        } else {
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : INST \""+yytext()+"\" )");
                                            yybegin(COMMENT);
                                        }
                                    }
            }
          case 84: break;
          case 32: 
            { if((theoricCol.size() > 0) && currentCol<=theoricCol.get(theoricCol.size()-1)){
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    } 
                                    if(yytext().toLowerCase().contains("if")) {
                                        if(yytext().contains("(")){
                                            par=1;
                                        }
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> IF_STATE (Transition : INST \""+yytext()+"\" )");
                                        yybegin(IF_STATE);
                                    } else if(yytext().toLowerCase().contains("type")) {
                                        if(yytext().contains("(")){
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> AVOID (Transition : INST \""+yytext()+"\" )");
                                            yybegin(AVOID);
                                        } else {
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> TYPE_STATE (Transition : INST \""+yytext()+"\" )");
                                            yybegin(TYPE_STATE);
                                        }
                                    } else if(yytext().toLowerCase().contains("do")) {
                                        theoricCol.add(currentCol); 
                                        if(yytext().contains("\n")){
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : INST \""+yytext()+"\" )");
                                            yybegin(NEW_LINE);
                                        }
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> DO_STATE (Transition : INST \""+yytext()+"\" )");
                                        yybegin(DO_STATE);
                                    } else { 
                                        theoricCol.add(currentCol); 
                                        if(yytext().contains("\n")){
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : INST \""+yytext()+"\" )");
                                            yybegin(NEW_LINE);
                                        } else {
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : INST \""+yytext()+"\" )");
                                            yybegin(COMMENT);
                                        }
                                    }
            }
          case 85: break;
          case 33: 
            { if(yytext().toLowerCase().contains("if")) {
                                        if(yytext().contains("(")){
                                            par=1;
                                        }
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> IF_STATE (Transition : INST \""+yytext()+"\" )");
                                        yybegin(IF_STATE);
                                    } else { 
                                        theoricCol.add(currentCol);
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> COMMENT (Transition : INST \""+yytext()+"\" )");
                                        yybegin(COMMENT);
                                    }
            }
          case 86: break;
          case 34: 
            { if((theoricCol.size() > 0) && (currentCol<=theoricCol.get(theoricCol.size()-1))){
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 87: break;
          case 35: 
            { theoricCol.remove(theoricCol.size()-1);
                                    if(yytext().contains("\n")){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NEW_LINE (Transition : END_TYPE \""+yytext()+"\" )");
                                        yybegin(NEW_LINE);
                                    } else {
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : END_TYPE \""+yytext()+"\" )");
                                        yybegin(COMMENT);
                                    }
            }
          case 88: break;
          case 36: 
            { if((theoricCol.size() > 0) && (currentCol != theoricCol.get(theoricCol.size()-1))) {
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : ELSE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 89: break;
          case 37: 
            { if((theoricCol.size() > 0) && currentCol<=theoricCol.get(theoricCol.size()-1)){
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 90: break;
          case 38: 
            { theoricCol.remove(theoricCol.size()-1);
                                    if(yytext().contains("\n")){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : END_TYPE \""+yytext()+"\" )");
                                        yybegin(NEW_LINE);
                                    } else {
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : END_TYPE \""+yytext()+"\" )");
                                        yybegin(COMMENT);
                                    }
            }
          case 91: break;
          case 39: 
            { if((theoricCol.size() > 0) && currentCol!=theoricCol.get(theoricCol.size()-1)) {
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : ELSE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 92: break;
          case 40: 
            { if(theoricCol.size() > 0){
                                        theoricCol.remove(theoricCol.size()-1);
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> COMMENT (Transition : END_TYPE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 93: break;
          case 41: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> COMMENT (Transition : ELSE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 94: break;
          case 42: 
            { theoricCol.add(currentCol);
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - IF_STATE -> COMMENT (Transition : THEN \""+yytext()+"\" )");
                                        yybegin(COMMENT);
            }
          case 95: break;
          case 43: 
            { if((theoricCol.size() > 0) && theoricCol.get(theoricCol.size()-1) !=0 && currentCol!=theoricCol.get(theoricCol.size()-1)) {
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    theoricCol.remove(theoricCol.size()-1);
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : END_INST \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 96: break;
          case 44: 
            { if((theoricCol.size() > 0) && theoricCol.get(theoricCol.size()-1) !=0 && currentCol!=theoricCol.get(theoricCol.size()-1)) {
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    theoricCol.remove(theoricCol.size()-1);
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : END_INST \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 97: break;
          case 45: 
            { if(theoricCol.size() > 0){
                                        theoricCol.remove(theoricCol.size()-1);
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> COMMENT (Transition : END_INST \""+yytext()+"\" )");
                                        yybegin(COMMENT);
                                    }
            }
          case 98: break;
          case 46: 
            { theoricCol.add(0); location = yytext(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 99: break;
          case 47: 
            { theoricCol.add(0); numbers.clear(); location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 100: break;
          case 48: 
            { theoricCol.add(0); numbers.clear(); location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 101: break;
          case 49: 
            { theoricCol.add(0);
                                    numbers.clear();
                                    location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 102: break;
          case 50: 
            { if(numbers.contains(lastNum)) {
                                        numbers.remove(numbers.indexOf(lastNum));
                                        theoricCol.remove(theoricCol.size()-1);
                                    }
                                    if((theoricCol.size() > 0) && currentCol<=theoricCol.get(theoricCol.size()-1)){
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : CONTINUE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 103: break;
          case 51: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : INCLUDE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 104: break;
          case 52: 
            { if(numbers.contains(lastNum)) {
                                        numbers.remove(numbers.indexOf(lastNum));
                                        theoricCol.remove(theoricCol.size()-1);
                                    }
                                    if((theoricCol.size() > 0) && currentCol<=theoricCol.get(theoricCol.size()-1)){
                                        LOGGER.fine("Setting error line "+(yyline+1)+" because the code is not indented.");
                                        setError(location,"The code is not indented.", yyline+1);
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : CONTINUE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 105: break;
          case 53: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : INCLUDE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
