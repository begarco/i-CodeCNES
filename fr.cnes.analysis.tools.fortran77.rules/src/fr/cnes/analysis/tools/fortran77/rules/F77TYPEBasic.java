/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F77.TYPE.Basic rule.	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77TYPEBasic.lex</tt>
 */
public class F77TYPEBasic extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int RD_WR = 10;
  public static final int RD_WR_PARAM = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\60\1\62\1\62\1\61\22\0\1\52\1\1\1\56"+
    "\4\0\1\55\2\0\1\4\5\0\12\45\7\0\1\36\1\32\1\3"+
    "\1\24\1\23\1\5\1\35\1\46\1\11\2\53\1\43\1\37\1\7"+
    "\1\12\1\21\1\53\1\22\1\31\1\10\1\6\2\53\1\50\2\53"+
    "\4\0\1\54\1\0\1\41\1\34\1\2\1\30\1\27\1\13\1\40"+
    "\1\47\1\17\2\53\1\44\1\42\1\15\1\20\1\25\1\53\1\26"+
    "\1\33\1\16\1\14\2\53\1\51\2\53\12\0\1\62\u1fa2\0\1\62"+
    "\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\2\20\1\1\3\1\4\1\5\1\6"+
    "\2\2\12\1\12\3\212\0\1\7\6\0\1\10\6\0"+
    "\1\11\56\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u0132\0\u0132\0\u0132\0\u04fb\0\u052e\0\u0561"+
    "\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9"+
    "\0\u072c\0\u075f\0\u01cb\0\u0231\0\u0297\0\u0330\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155"+
    "\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485"+
    "\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d"+
    "\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d"+
    "\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u1d16\0\u22aa"+
    "\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u0132\0\u23dc\0\u240f"+
    "\0\u2442\0\u2475\0\u24a8\0\u24db\0\u2013\0\u250e\0\u2541\0\u2574"+
    "\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c"+
    "\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4"+
    "\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c"+
    "\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4"+
    "\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c"+
    "\0\u2d9f\0\u2dd2\0\u2e05";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\10\1\13\3\7\1\14"+
    "\1\7\1\15\3\7\1\16\1\7\1\17\1\20\1\7"+
    "\1\21\1\22\1\23\1\7\1\24\1\25\1\7\1\26"+
    "\3\7\1\27\2\7\1\30\1\31\1\32\5\7\1\33"+
    "\4\7\1\33\1\34\1\33\1\35\1\33\1\10\56\33"+
    "\1\34\2\35\1\33\1\10\2\36\1\33\40\36\1\33"+
    "\4\36\1\33\1\36\4\33\1\34\2\35\1\7\1\10"+
    "\1\37\1\40\1\10\1\13\3\7\1\41\1\7\1\15"+
    "\3\7\1\42\1\7\1\17\1\43\1\7\1\44\1\22"+
    "\1\45\1\7\1\46\1\25\1\7\1\26\3\7\1\27"+
    "\2\7\1\30\1\47\1\50\5\7\1\33\2\7\1\51"+
    "\1\52\3\33\1\35\1\33\1\10\3\33\1\53\5\33"+
    "\1\54\5\33\1\55\3\33\1\56\3\33\1\57\1\33"+
    "\1\60\3\33\1\61\2\33\1\62\12\33\1\63\1\64"+
    "\1\33\1\34\3\35\1\10\61\35\103\0\1\65\26\0"+
    "\1\66\25\0\1\67\33\0\1\70\22\0\1\71\63\0"+
    "\1\72\67\0\1\73\63\0\1\74\67\0\1\75\63\0"+
    "\1\76\51\0\1\77\76\0\1\100\63\0\1\101\53\0"+
    "\1\102\50\0\1\103\70\0\1\104\60\0\1\105\70\0"+
    "\1\106\54\0\1\107\70\0\1\110\44\0\2\36\1\0"+
    "\45\36\1\0\2\36\26\0\1\111\26\0\1\112\25\0"+
    "\1\113\33\0\1\114\23\0\1\115\70\0\1\116\70\0"+
    "\1\117\51\0\1\120\77\0\1\121\53\0\1\122\54\0"+
    "\1\123\70\0\1\124\42\0\55\125\1\7\5\125\56\126"+
    "\1\7\4\126\55\127\1\33\5\127\56\130\1\33\4\130"+
    "\42\0\1\131\61\0\1\132\60\0\1\133\61\0\1\134"+
    "\33\0\1\135\63\0\1\136\67\0\1\137\63\0\1\140"+
    "\56\0\1\141\106\0\1\142\32\0\1\143\74\0\1\144"+
    "\103\0\1\145\35\0\1\146\100\0\1\147\64\0\1\150"+
    "\52\0\1\151\66\0\1\152\67\0\1\153\65\0\1\154"+
    "\64\0\1\155\61\0\1\156\60\0\1\157\61\0\1\160"+
    "\34\0\1\161\70\0\1\162\102\0\1\163\32\0\1\164"+
    "\115\0\1\165\35\0\1\166\103\0\1\167\65\0\1\170"+
    "\47\0\1\171\63\0\1\172\55\0\1\173\63\0\1\174"+
    "\43\0\1\175\102\0\1\176\41\0\1\177\107\0\1\200"+
    "\36\0\1\201\31\0\1\202\70\0\1\203\51\0\1\204"+
    "\32\0\1\205\35\0\1\206\66\0\1\203\52\0\1\207"+
    "\50\0\1\210\66\0\1\211\42\0\1\212\70\0\1\213"+
    "\57\0\1\214\70\0\1\215\70\0\1\216\63\0\1\217"+
    "\55\0\1\220\63\0\1\221\63\0\1\222\66\0\1\223"+
    "\76\0\1\224\51\0\1\225\74\0\1\224\52\0\1\226"+
    "\37\0\1\227\70\0\1\230\107\0\1\231\57\0\1\232"+
    "\64\0\1\233\55\0\1\234\34\0\1\235\107\0\1\236"+
    "\43\0\1\237\104\0\1\240\45\0\1\241\61\0\1\242"+
    "\44\0\1\243\121\0\1\244\46\0\1\245\61\0\1\246"+
    "\100\0\1\247\30\0\1\250\70\0\1\251\105\0\1\252"+
    "\63\0\1\253\21\0\1\76\61\0\1\101\124\0\1\254"+
    "\57\0\1\255\64\0\1\256\55\0\1\257\61\0\1\260"+
    "\65\0\1\261\26\0\1\262\121\0\1\263\63\0\1\264"+
    "\21\0\1\117\61\0\1\121\107\0\1\265\35\0\1\266"+
    "\103\0\1\267\42\0\1\270\70\0\1\271\74\0\1\272"+
    "\56\0\1\273\72\0\1\274\57\0\1\275\74\0\1\276"+
    "\71\0\1\277\40\0\1\300\67\0\1\301\73\0\1\302"+
    "\50\0\1\303\41\0\1\304\70\0\1\305\71\0\1\306"+
    "\66\0\1\306\62\0\1\307\35\0\1\310\103\0\1\311"+
    "\42\0\1\312\102\0\1\313\66\0\1\314\100\0\1\315"+
    "\40\0\1\316\66\0\1\317\104\0\1\203\27\0\1\240"+
    "\114\0\1\203\22\0\1\236\64\0\1\320\72\0\1\203"+
    "\60\0\1\321\70\0\1\203\42\0\1\322\113\0\1\306"+
    "\75\0\1\323\24\0\1\324\110\0\1\306\72\0\1\325"+
    "\20\0\1\326\70\0\1\327\115\0\1\224\27\0\1\261"+
    "\114\0\1\224\22\0\1\260\74\0\1\224\66\0\1\224"+
    "\106\0\1\330\62\0\1\331\17\0\1\306\70\0\1\306"+
    "\67\0\1\252\61\0\1\332\30\0\1\323\36\0\1\253"+
    "\61\0\1\333\24\0\1\325\21\0\1\334\70\0\1\335"+
    "\64\0\1\336\30\0\1\330\35\0\1\337\24\0\1\331"+
    "\32\0\1\340\66\0\1\341\43\0\1\252\70\0\1\253"+
    "\67\0\1\342\66\0\1\343\57\0\1\344\66\0\1\345"+
    "\56\0\1\346\66\0\1\347\36\0\1\350\61\0\1\351"+
    "\63\0\1\352\61\0\1\353\71\0\1\354\70\0\1\355"+
    "\54\0\1\356\70\0\1\357\74\0\1\360\64\0\1\361"+
    "\60\0\1\362\64\0\1\363\40\0\1\364\70\0\1\365"+
    "\54\0\1\366\70\0\1\367\55\0\1\370\70\0\1\371"+
    "\54\0\1\372\70\0\1\373\51\0\1\203\70\0\1\203"+
    "\54\0\1\224\70\0\1\224\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\22\1\3\11\27\1\212\0\1\1\6\0"+
    "\1\11\6\0\1\1\56\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	
	
	public F77TYPEBasic() {
    }

	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77TYPEBasic(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 10: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 11: break;
          case 3: 
            { 
            }
          case 12: break;
          case 4: 
            { yybegin(NEW_LINE);
            }
          case 13: break;
          case 5: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 14: break;
          case 6: 
            { location = location + " " + yytext();
								 yybegin(COMMENT);
            }
          case 15: break;
          case 7: 
            { setError(location , yytext() + " is not a basic type. Basic types are INTEGER, REAL, DOUBLE PRECISION, COMPLEX, LOGICAL and CHARACTER.", yyline+1); 
									 yybegin(LINE);
            }
          case 16: break;
          case 8: 
            { location = yytext(); yybegin(NAMING);
            }
          case 17: break;
          case 9: 
            { setError(location, yytext() + " is not a basic type. Basic types are INTEGER, REAL, DOUBLE PRECISION, COMPLEX, LOGICAL and CHARACTER.", yyline+1); 
									 yybegin(LINE);
            }
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
