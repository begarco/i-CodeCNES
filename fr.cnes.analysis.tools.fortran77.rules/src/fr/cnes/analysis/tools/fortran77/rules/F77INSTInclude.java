/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F77.INST.Incude rule.	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77INSTInclude.lex</tt>
 */
public class F77INSTInclude extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int INCLUDE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\60\1\61\1\61\1\61\22\0\1\45\1\1\1\57\4\0"+
    "\1\56\2\0\1\4\5\0\12\55\7\0\1\36\1\32\1\3\1\24"+
    "\1\23\1\5\1\35\1\54\1\11\1\54\1\50\1\43\1\37\1\7"+
    "\1\12\1\21\1\52\1\22\1\31\1\10\1\6\1\54\1\46\3\54"+
    "\4\0\1\55\1\0\1\41\1\34\1\2\1\30\1\27\1\13\1\40"+
    "\1\54\1\17\1\54\1\51\1\44\1\42\1\15\1\20\1\25\1\53"+
    "\1\26\1\33\1\16\1\14\1\54\1\47\3\54\12\0\1\61\u1fa2\0"+
    "\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\2\26\1\1\3\1\4\1\5\1\6"+
    "\2\2\67\5\6\0\1\7\2\0\1\7\7\0\1\7"+
    "\17\0\6\5\1\10\2\5\1\10\7\5\1\10\26\5"+
    "\1\7\3\5\1\7\7\5\1\7\23\5\3\0\1\11"+
    "\43\0\4\5\1\0\3\5\1\0\23\5\1\0\1\5"+
    "\1\0\47\5\26\0\2\5\1\0\2\5\1\0\14\5"+
    "\1\0\1\5\1\0\33\5\12\0\2\5\1\0\2\5"+
    "\1\0\6\5\1\10\22\5\6\0\2\5\1\0\1\5"+
    "\1\0\17\5\1\12\1\13\2\0\1\13\14\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[461];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u012c\0\u012c\0\u012c\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356"+
    "\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u012c\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u06a4"+
    "\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52"+
    "\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2"+
    "\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72"+
    "\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102"+
    "\0\u2134\0\u2166\0\u06a4\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260"+
    "\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0"+
    "\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u109a\0\u10cc"+
    "\0\u10fe\0\u012c\0\u1130\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616"+
    "\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6"+
    "\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936"+
    "\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6"+
    "\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56"+
    "\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6"+
    "\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76"+
    "\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106"+
    "\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296"+
    "\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426"+
    "\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6"+
    "\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746"+
    "\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6"+
    "\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66"+
    "\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6"+
    "\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u0320\0\u3d22\0\u03e8"+
    "\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2"+
    "\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042"+
    "\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2"+
    "\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362"+
    "\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0\0\u44f2"+
    "\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650\0\u4682"+
    "\0\u46b4\0\u46e6\0\u4718\0\u474a\0\u477c\0\u47ae\0\u47e0\0\u4812"+
    "\0\u4844\0\u4876\0\u48a8\0\u48da\0\u490c\0\u493e\0\u4970\0\u49a2"+
    "\0\u49d4\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c\0\u4ace\0\u4b00\0\u012c"+
    "\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c\0\u4c5e\0\u4c90"+
    "\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a\0\u4dbc\0\u4dee\0\u4e20"+
    "\0\u4e52\0\u4e84\0\u4eb6\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e\0\u4fb0"+
    "\0\u4fe2\0\u5014\0\u5046\0\u5078\0\u50aa\0\u50dc\0\u510e\0\u5140"+
    "\0\u5172\0\u51a4\0\u51d6\0\u5208\0\u523a\0\u526c\0\u529e\0\u52d0"+
    "\0\u5302\0\u5334\0\u5366\0\u5398\0\u06a4\0\u012c\0\u53ca\0\u53fc"+
    "\0\u06a4\0\u542e\0\u5460\0\u5492\0\u54c4\0\u54f6\0\u5528\0\u555a"+
    "\0\u558c\0\u55be\0\u55f0\0\u5622\0\u5654";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[461];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\10\4\7\1\13\1\14"+
    "\4\7\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\7\1\35\1\36\4\7\1\37\1\40\10\7"+
    "\1\41\1\42\1\43\1\10\56\43\1\41\1\42\1\43"+
    "\1\10\2\44\1\43\40\44\1\43\7\44\3\43\1\41"+
    "\1\42\1\7\1\10\1\45\1\46\1\10\4\47\1\50"+
    "\1\51\4\47\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\47\1\72\1\73\3\47\1\7\1\74"+
    "\1\75\5\47\3\7\1\43\1\42\1\43\1\10\1\76"+
    "\1\77\1\43\1\100\3\47\1\101\1\102\1\103\3\47"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\2\47\1\43\1\130\1\131"+
    "\5\47\1\43\1\132\1\133\1\41\1\42\1\43\1\10"+
    "\54\43\1\134\1\135\1\41\1\42\102\0\1\136\20\0"+
    "\1\137\2\0\1\140\27\0\1\141\23\0\1\142\4\0"+
    "\1\143\23\0\1\144\1\0\1\145\73\0\1\146\53\0"+
    "\1\147\1\0\1\150\71\0\1\151\56\0\1\152\13\0"+
    "\1\153\46\0\1\154\45\0\1\155\33\0\1\156\30\0"+
    "\1\157\75\0\1\160\12\0\1\161\47\0\1\162\47\0"+
    "\1\163\26\0\1\164\35\0\1\157\51\0\1\165\107\0"+
    "\1\166\41\0\1\167\104\0\1\170\32\0\1\171\100\0"+
    "\1\172\50\0\1\173\74\0\1\174\50\0\1\175\65\0"+
    "\1\176\35\0\2\44\1\0\40\44\1\0\10\44\6\0"+
    "\2\47\1\0\13\47\1\177\20\47\1\200\2\47\1\201"+
    "\1\0\10\47\6\0\2\47\1\0\5\47\1\202\23\47"+
    "\1\203\4\47\1\204\1\47\1\0\10\47\6\0\2\47"+
    "\1\0\40\47\1\0\10\47\6\0\2\47\1\0\1\205"+
    "\1\47\1\206\35\47\1\0\10\47\6\0\2\47\1\0"+
    "\14\47\1\207\23\47\1\0\10\47\6\0\2\47\1\0"+
    "\6\47\1\210\1\47\1\211\27\47\1\0\10\47\6\0"+
    "\2\47\1\0\20\47\1\212\17\47\1\0\10\47\6\0"+
    "\2\47\1\0\15\47\1\213\13\47\1\214\6\47\1\0"+
    "\10\47\6\0\2\47\1\0\16\47\1\215\21\47\1\0"+
    "\10\47\6\0\2\47\1\0\2\47\1\216\33\47\1\217"+
    "\1\47\1\0\10\47\6\0\2\47\1\0\5\47\1\220"+
    "\32\47\1\0\10\47\6\0\2\47\1\0\21\47\1\221"+
    "\12\47\1\222\3\47\1\0\10\47\6\0\2\47\1\0"+
    "\22\47\1\223\15\47\1\0\10\47\6\0\2\47\1\0"+
    "\10\47\1\224\26\47\1\225\1\0\10\47\6\0\2\47"+
    "\1\0\13\47\1\220\24\47\1\0\10\47\6\0\2\47"+
    "\1\0\3\47\1\226\34\47\1\0\10\47\6\0\2\47"+
    "\1\0\31\47\1\227\6\47\1\0\10\47\6\0\2\47"+
    "\1\0\11\47\1\230\26\47\1\0\10\47\6\0\2\47"+
    "\1\0\34\47\1\231\3\47\1\0\10\47\6\0\2\47"+
    "\1\0\5\47\1\232\32\47\1\0\10\47\6\0\2\47"+
    "\1\0\24\47\1\233\13\47\1\0\10\47\6\0\2\47"+
    "\1\0\13\47\1\234\24\47\1\0\10\47\6\0\2\47"+
    "\1\0\26\47\1\235\11\47\1\0\10\47\6\0\2\47"+
    "\1\0\15\47\1\236\22\47\1\0\10\47\6\0\2\47"+
    "\1\0\21\47\1\237\16\47\1\0\10\47\6\0\2\47"+
    "\1\0\13\47\1\240\20\47\1\241\2\47\1\242\1\0"+
    "\10\47\6\0\2\47\1\0\5\47\1\243\23\47\1\244"+
    "\4\47\1\245\1\47\1\0\10\47\6\0\2\47\1\0"+
    "\1\47\1\246\36\47\1\0\10\47\6\0\2\47\1\0"+
    "\1\247\1\47\1\250\35\47\1\0\10\47\6\0\2\47"+
    "\1\0\14\47\1\251\23\47\1\0\10\47\6\0\2\47"+
    "\1\0\7\47\1\252\30\47\1\0\10\47\6\0\2\47"+
    "\1\0\6\47\1\253\1\47\1\254\27\47\1\0\10\47"+
    "\6\0\2\47\1\0\20\47\1\255\17\47\1\0\10\47"+
    "\6\0\2\47\1\0\15\47\1\256\13\47\1\257\6\47"+
    "\1\0\10\47\6\0\2\47\1\0\16\47\1\260\21\47"+
    "\1\0\10\47\6\0\2\47\1\0\2\47\1\261\33\47"+
    "\1\262\1\47\1\0\10\47\6\0\2\47\1\0\5\47"+
    "\1\263\32\47\1\0\10\47\6\0\2\47\1\0\21\47"+
    "\1\264\12\47\1\265\3\47\1\0\10\47\6\0\2\47"+
    "\1\0\22\47\1\266\15\47\1\0\10\47\6\0\2\47"+
    "\1\0\10\47\1\267\26\47\1\270\1\0\10\47\6\0"+
    "\2\47\1\0\13\47\1\263\24\47\1\0\10\47\6\0"+
    "\2\47\1\0\1\47\1\271\1\47\1\272\34\47\1\0"+
    "\10\47\6\0\2\47\1\0\31\47\1\273\6\47\1\0"+
    "\10\47\6\0\2\47\1\0\7\47\1\274\1\47\1\275"+
    "\26\47\1\0\10\47\6\0\2\47\1\0\34\47\1\276"+
    "\3\47\1\0\10\47\6\0\2\47\1\0\5\47\1\277"+
    "\32\47\1\0\10\47\6\0\2\47\1\0\24\47\1\300"+
    "\13\47\1\0\10\47\6\0\2\47\1\0\5\47\1\301"+
    "\32\47\1\0\10\47\6\0\2\47\1\0\13\47\1\302"+
    "\24\47\1\0\10\47\6\0\2\47\1\0\26\47\1\303"+
    "\11\47\1\0\10\47\6\0\2\47\1\0\13\47\1\304"+
    "\24\47\1\0\10\47\6\0\2\47\1\0\15\47\1\305"+
    "\22\47\1\0\10\47\6\0\2\47\1\0\21\47\1\306"+
    "\16\47\1\0\10\47\4\0\56\307\1\43\3\307\57\310"+
    "\1\43\2\310\56\311\1\312\3\311\57\313\1\312\2\313"+
    "\15\0\1\314\110\0\1\315\35\0\1\164\50\0\1\316"+
    "\115\0\1\317\30\0\1\156\114\0\1\320\17\0\1\321"+
    "\46\0\1\322\32\0\1\323\103\0\1\324\16\0\1\325"+
    "\50\0\1\326\35\0\1\327\43\0\1\330\56\0\1\156"+
    "\63\0\1\331\25\0\1\332\7\0\1\333\37\0\1\334"+
    "\66\0\1\335\47\0\1\336\56\0\1\164\63\0\1\337"+
    "\22\0\1\340\5\0\1\341\42\0\1\342\64\0\1\343"+
    "\40\0\1\344\52\0\1\345\76\0\1\346\43\0\1\347"+
    "\124\0\1\350\45\0\1\351\75\0\1\352\47\0\1\353"+
    "\37\0\1\354\67\0\1\355\44\0\2\47\1\0\10\47"+
    "\1\356\27\47\1\0\10\47\6\0\2\47\1\0\37\47"+
    "\1\357\1\0\10\47\6\0\2\47\1\0\13\47\1\225"+
    "\24\47\1\0\10\47\6\0\2\47\1\0\2\47\1\360"+
    "\35\47\1\0\10\47\6\0\2\47\1\0\36\47\1\361"+
    "\1\47\1\0\10\47\6\0\2\47\1\0\5\47\1\217"+
    "\32\47\1\0\10\47\6\0\2\47\1\0\40\47\1\362"+
    "\10\47\6\0\1\47\1\363\1\0\40\47\1\0\4\47"+
    "\1\364\3\47\6\0\2\47\1\0\16\47\1\365\21\47"+
    "\1\0\10\47\6\0\2\47\1\0\40\47\1\366\10\47"+
    "\6\0\1\367\1\47\1\0\40\47\1\0\5\47\1\370"+
    "\2\47\6\0\2\47\1\0\22\47\1\371\15\47\1\0"+
    "\10\47\6\0\2\47\1\0\4\47\1\372\33\47\1\0"+
    "\10\47\6\0\2\47\1\0\1\47\1\217\36\47\1\0"+
    "\10\47\6\0\2\47\1\0\3\47\1\373\25\47\1\374"+
    "\6\47\1\0\1\375\7\47\6\0\2\47\1\0\17\47"+
    "\1\376\20\47\1\0\10\47\6\0\2\47\1\0\24\47"+
    "\1\377\13\47\1\0\10\47\6\0\2\47\1\0\12\47"+
    "\1\u0100\25\47\1\0\10\47\6\0\2\47\1\0\7\47"+
    "\1\225\30\47\1\0\10\47\6\0\2\47\1\0\11\47"+
    "\1\u0101\22\47\1\u0102\3\47\1\0\1\47\1\u0103\6\47"+
    "\6\0\2\47\1\0\23\47\1\u0104\14\47\1\0\10\47"+
    "\6\0\2\47\1\0\26\47\1\u0105\11\47\1\0\10\47"+
    "\6\0\2\47\1\0\5\47\1\u0106\32\47\1\0\10\47"+
    "\6\0\1\47\1\u0107\1\0\40\47\1\0\10\47\6\0"+
    "\2\47\1\0\13\47\1\u0108\24\47\1\0\10\47\6\0"+
    "\1\u0109\1\47\1\0\40\47\1\0\10\47\6\0\2\47"+
    "\1\0\40\47\1\u010a\10\47\6\0\2\47\1\0\24\47"+
    "\1\u010b\13\47\1\0\10\47\6\0\2\47\1\0\40\47"+
    "\1\u010c\10\47\6\0\2\47\1\0\26\47\1\u010d\11\47"+
    "\1\0\10\47\6\0\2\47\1\0\4\47\1\u010e\33\47"+
    "\1\0\10\47\6\0\2\47\1\0\12\47\1\u010f\25\47"+
    "\1\0\10\47\6\0\2\47\1\0\10\47\1\u0110\27\47"+
    "\1\0\10\47\6\0\2\47\1\0\37\47\1\u0111\1\0"+
    "\10\47\6\0\2\47\1\0\13\47\1\270\24\47\1\0"+
    "\10\47\6\0\2\47\1\0\2\47\1\u0112\35\47\1\0"+
    "\10\47\6\0\2\47\1\0\36\47\1\u0113\1\47\1\0"+
    "\10\47\6\0\2\47\1\0\5\47\1\262\32\47\1\0"+
    "\10\47\6\0\2\47\1\0\2\47\1\u0114\35\47\1\0"+
    "\10\47\6\0\2\47\1\0\40\47\1\320\10\47\6\0"+
    "\1\47\1\363\1\0\40\47\1\0\4\47\1\u0115\3\47"+
    "\6\0\2\47\1\0\16\47\1\u0116\21\47\1\0\10\47"+
    "\6\0\2\47\1\0\10\47\1\u0117\27\47\1\0\10\47"+
    "\6\0\2\47\1\0\40\47\1\324\10\47\6\0\1\367"+
    "\1\47\1\0\40\47\1\0\5\47\1\u0118\2\47\6\0"+
    "\2\47\1\0\22\47\1\u0119\15\47\1\0\10\47\6\0"+
    "\2\47\1\0\4\47\1\u011a\1\u011b\32\47\1\0\10\47"+
    "\6\0\2\47\1\0\1\47\1\262\36\47\1\0\10\47"+
    "\6\0\2\47\1\0\3\47\1\u011c\25\47\1\u011d\6\47"+
    "\1\0\1\u011e\7\47\6\0\2\47\1\0\17\47\1\u011f"+
    "\20\47\1\0\10\47\6\0\2\47\1\0\24\47\1\u0120"+
    "\13\47\1\0\10\47\6\0\2\47\1\0\12\47\1\u0121"+
    "\1\u0122\24\47\1\0\10\47\6\0\2\47\1\0\7\47"+
    "\1\270\30\47\1\0\10\47\6\0\2\47\1\0\11\47"+
    "\1\u0123\22\47\1\u0124\3\47\1\0\1\47\1\u0125\6\47"+
    "\6\0\2\47\1\0\23\47\1\u0126\14\47\1\0\10\47"+
    "\6\0\2\47\1\0\26\47\1\u0127\11\47\1\0\10\47"+
    "\6\0\2\47\1\0\25\47\1\u0128\12\47\1\0\10\47"+
    "\6\0\2\47\1\0\5\47\1\u0129\32\47\1\0\10\47"+
    "\6\0\1\47\1\u012a\1\0\40\47\1\0\10\47\6\0"+
    "\2\47\1\0\27\47\1\u012b\10\47\1\0\10\47\6\0"+
    "\2\47\1\0\13\47\1\u012c\24\47\1\0\10\47\6\0"+
    "\1\u012d\1\47\1\0\40\47\1\0\10\47\6\0\2\47"+
    "\1\0\40\47\1\350\10\47\6\0\2\47\1\0\24\47"+
    "\1\u012e\13\47\1\0\10\47\6\0\2\47\1\0\17\47"+
    "\1\u012f\20\47\1\0\10\47\6\0\2\47\1\0\40\47"+
    "\1\352\10\47\6\0\2\47\1\0\26\47\1\u0130\11\47"+
    "\1\0\10\47\6\0\2\47\1\0\23\47\1\u0131\14\47"+
    "\1\0\10\47\6\0\2\47\1\0\4\47\1\u0132\33\47"+
    "\1\0\10\47\6\0\2\47\1\0\12\47\1\u0133\25\47"+
    "\1\0\10\47\22\0\1\u0134\107\0\1\157\25\0\1\u0135"+
    "\114\0\1\157\41\0\1\u0136\21\0\1\320\57\0\1\u0137"+
    "\24\0\1\u0138\62\0\1\157\101\0\1\u0139\15\0\1\324"+
    "\60\0\1\u013a\31\0\1\u013b\62\0\1\157\53\0\1\u013c"+
    "\60\0\1\u013d\77\0\1\157\46\0\1\u013e\55\0\1\u013f"+
    "\77\0\1\157\53\0\1\u0140\60\0\1\u0141\75\0\1\157"+
    "\50\0\1\u0142\55\0\1\u0143\75\0\1\157\53\0\1\157"+
    "\110\0\1\u0144\36\0\1\157\105\0\1\u0145\20\0\1\u0146"+
    "\34\0\1\350\25\0\1\u0147\66\0\1\u0148\26\0\1\352"+
    "\33\0\1\u0149\52\0\1\335\67\0\1\343\45\0\2\47"+
    "\1\0\11\47\1\u014a\26\47\1\0\10\47\6\0\2\47"+
    "\1\0\37\47\1\220\1\0\10\47\6\0\2\47\1\0"+
    "\3\47\1\u014b\34\47\1\0\10\47\6\0\2\47\1\0"+
    "\36\47\1\220\1\47\1\0\10\47\27\0\1\u014c\21\0"+
    "\1\362\16\0\2\47\1\0\36\47\1\u014d\1\47\1\0"+
    "\10\47\6\0\2\47\1\0\1\47\1\u014e\36\47\1\0"+
    "\10\47\6\0\2\47\1\0\2\47\1\220\35\47\1\0"+
    "\10\47\33\0\1\u014f\15\0\1\366\16\0\2\47\1\0"+
    "\37\47\1\u0150\1\0\10\47\6\0\2\47\1\0\7\47"+
    "\1\u0151\30\47\1\0\10\47\6\0\2\47\1\0\10\47"+
    "\1\220\27\47\1\0\10\47\6\0\2\47\1\0\2\47"+
    "\1\u0152\35\47\1\0\10\47\6\0\2\47\1\0\1\47"+
    "\1\u0153\36\47\1\0\10\47\6\0\2\47\1\0\17\47"+
    "\1\220\20\47\1\0\10\47\6\0\2\47\1\0\4\47"+
    "\1\u0154\33\47\1\0\10\47\6\0\2\47\1\0\1\u0155"+
    "\37\47\1\0\10\47\6\0\2\47\1\0\16\47\1\220"+
    "\21\47\1\0\10\47\6\0\2\47\1\0\10\47\1\u0156"+
    "\27\47\1\0\10\47\6\0\2\47\1\0\7\47\1\u0157"+
    "\30\47\1\0\10\47\6\0\2\47\1\0\23\47\1\220"+
    "\14\47\1\0\10\47\6\0\2\47\1\0\12\47\1\u0158"+
    "\25\47\1\0\10\47\6\0\2\47\1\0\6\47\1\u0159"+
    "\31\47\1\0\10\47\6\0\2\47\1\0\22\47\1\220"+
    "\15\47\1\0\10\47\6\0\2\47\1\0\14\47\1\220"+
    "\23\47\1\0\10\47\6\0\2\47\1\0\40\47\1\0"+
    "\2\47\1\u015a\5\47\6\0\2\47\1\0\20\47\1\220"+
    "\17\47\1\0\10\47\6\0\2\47\1\0\40\47\1\0"+
    "\3\47\1\u015b\4\47\14\0\1\u015c\34\0\1\u010a\16\0"+
    "\2\47\1\0\4\47\1\u015d\33\47\1\0\10\47\22\0"+
    "\1\u015e\26\0\1\u010c\16\0\2\47\1\0\12\47\1\u015f"+
    "\25\47\1\0\10\47\6\0\2\47\1\0\3\47\1\377"+
    "\34\47\1\0\10\47\6\0\2\47\1\0\11\47\1\u0105"+
    "\26\47\1\0\10\47\6\0\2\47\1\0\11\47\1\u0160"+
    "\26\47\1\0\10\47\6\0\2\47\1\0\37\47\1\263"+
    "\1\0\10\47\6\0\2\47\1\0\3\47\1\u0161\34\47"+
    "\1\0\10\47\6\0\2\47\1\0\36\47\1\263\1\47"+
    "\1\0\10\47\6\0\1\47\1\u0162\1\0\40\47\1\0"+
    "\10\47\6\0\2\47\1\0\1\47\1\u0163\36\47\1\0"+
    "\10\47\6\0\2\47\1\0\2\47\1\263\35\47\1\0"+
    "\10\47\6\0\1\u0164\1\47\1\0\40\47\1\0\10\47"+
    "\6\0\2\47\1\0\7\47\1\u0165\30\47\1\0\10\47"+
    "\6\0\2\47\1\0\10\47\1\263\27\47\1\0\10\47"+
    "\6\0\2\47\1\0\2\47\1\u0166\35\47\1\0\10\47"+
    "\6\0\1\47\1\u0167\1\0\30\47\1\u0168\7\47\1\0"+
    "\10\47\6\0\2\47\1\0\1\47\1\u0169\36\47\1\0"+
    "\10\47\6\0\2\47\1\0\17\47\1\263\20\47\1\0"+
    "\10\47\6\0\2\47\1\0\4\47\1\u016a\33\47\1\0"+
    "\10\47\6\0\2\47\1\0\1\u016b\37\47\1\0\10\47"+
    "\6\0\2\47\1\0\16\47\1\263\21\47\1\0\10\47"+
    "\6\0\2\47\1\0\10\47\1\u016c\27\47\1\0\10\47"+
    "\6\0\1\u016d\1\47\1\0\33\47\1\u016e\4\47\1\0"+
    "\10\47\6\0\2\47\1\0\7\47\1\u016f\30\47\1\0"+
    "\10\47\6\0\2\47\1\0\23\47\1\263\14\47\1\0"+
    "\10\47\6\0\2\47\1\0\12\47\1\u0170\25\47\1\0"+
    "\10\47\6\0\2\47\1\0\6\47\1\u0171\31\47\1\0"+
    "\10\47\6\0\2\47\1\0\22\47\1\263\15\47\1\0"+
    "\10\47\6\0\2\47\1\0\15\47\1\u0172\22\47\1\0"+
    "\10\47\6\0\2\47\1\0\14\47\1\263\23\47\1\0"+
    "\10\47\6\0\2\47\1\0\40\47\1\0\2\47\1\u0173"+
    "\5\47\6\0\2\47\1\0\21\47\1\u0174\16\47\1\0"+
    "\10\47\6\0\2\47\1\0\20\47\1\263\17\47\1\0"+
    "\10\47\6\0\2\47\1\0\40\47\1\0\3\47\1\u0175"+
    "\4\47\6\0\2\47\1\0\4\47\1\u0176\33\47\1\0"+
    "\10\47\6\0\2\47\1\0\1\47\1\u0177\36\47\1\0"+
    "\10\47\6\0\2\47\1\0\12\47\1\u0178\25\47\1\0"+
    "\10\47\6\0\2\47\1\0\7\47\1\u0179\30\47\1\0"+
    "\10\47\6\0\2\47\1\0\3\47\1\u0120\34\47\1\0"+
    "\10\47\6\0\2\47\1\0\11\47\1\u0127\26\47\1\0"+
    "\10\47\23\0\1\u017a\53\0\1\u017b\113\0\1\156\24\0"+
    "\1\u017c\64\0\1\u017d\114\0\1\164\31\0\1\u017e\64\0"+
    "\1\u017f\52\0\1\157\73\0\1\323\46\0\1\332\63\0"+
    "\1\u0180\66\0\1\157\71\0\1\327\50\0\1\340\63\0"+
    "\1\u0181\73\0\1\u0182\63\0\1\u0183\63\0\1\323\64\0"+
    "\1\327\23\0\2\47\1\0\12\47\1\u0184\25\47\1\0"+
    "\10\47\6\0\2\47\1\0\4\47\1\u0185\33\47\1\0"+
    "\10\47\47\0\1\u0186\20\0\2\47\1\0\1\47\1\u0187"+
    "\36\47\1\0\10\47\6\0\2\47\1\0\4\47\1\u0188"+
    "\33\47\1\0\10\47\50\0\1\u0189\17\0\2\47\1\0"+
    "\7\47\1\u018a\30\47\1\0\10\47\6\0\2\47\1\0"+
    "\12\47\1\u018b\25\47\1\0\10\47\6\0\2\47\1\0"+
    "\3\47\1\220\34\47\1\0\10\47\6\0\2\47\1\0"+
    "\15\47\1\365\22\47\1\0\10\47\6\0\2\47\1\0"+
    "\2\47\1\374\35\47\1\0\10\47\6\0\2\47\1\0"+
    "\4\47\1\u018c\33\47\1\0\10\47\6\0\2\47\1\0"+
    "\11\47\1\220\26\47\1\0\10\47\6\0\2\47\1\0"+
    "\21\47\1\371\16\47\1\0\10\47\6\0\2\47\1\0"+
    "\10\47\1\u0102\27\47\1\0\10\47\6\0\2\47\1\0"+
    "\12\47\1\u018d\25\47\1\0\10\47\6\0\2\47\1\0"+
    "\24\47\1\u018e\13\47\1\0\10\47\6\0\2\47\1\0"+
    "\26\47\1\u018f\11\47\1\0\10\47\16\0\1\u0190\51\0"+
    "\2\47\1\0\30\47\1\365\7\47\1\0\10\47\24\0"+
    "\1\u0190\43\0\2\47\1\0\33\47\1\371\4\47\1\0"+
    "\10\47\6\0\2\47\1\0\12\47\1\u0191\25\47\1\0"+
    "\10\47\6\0\2\47\1\0\4\47\1\u0192\33\47\1\0"+
    "\10\47\6\0\2\47\1\0\3\47\1\u0193\34\47\1\0"+
    "\10\47\6\0\2\47\1\0\4\47\1\u0194\33\47\1\0"+
    "\10\47\6\0\2\47\1\0\11\47\1\u0195\26\47\1\0"+
    "\10\47\6\0\2\47\1\0\12\47\1\u0196\25\47\1\0"+
    "\10\47\6\0\2\47\1\0\3\47\1\263\34\47\1\0"+
    "\10\47\6\0\2\47\1\0\16\47\1\u0197\21\47\1\0"+
    "\10\47\6\0\2\47\1\0\15\47\1\u0198\22\47\1\0"+
    "\10\47\6\0\2\47\1\0\15\47\1\u0116\22\47\1\0"+
    "\10\47\6\0\2\47\1\0\2\47\1\u011d\35\47\1\0"+
    "\10\47\6\0\2\47\1\0\4\47\1\u0199\33\47\1\0"+
    "\10\47\6\0\2\47\1\0\11\47\1\263\26\47\1\0"+
    "\10\47\6\0\2\47\1\0\22\47\1\u019a\15\47\1\0"+
    "\10\47\6\0\2\47\1\0\21\47\1\u019b\16\47\1\0"+
    "\10\47\6\0\2\47\1\0\21\47\1\u0119\16\47\1\0"+
    "\10\47\6\0\2\47\1\0\10\47\1\u0124\27\47\1\0"+
    "\10\47\6\0\2\47\1\0\12\47\1\u019c\25\47\1\0"+
    "\10\47\6\0\2\47\1\0\5\47\1\u019d\32\47\1\0"+
    "\10\47\6\0\2\47\1\0\24\47\1\u019e\13\47\1\0"+
    "\10\47\6\0\2\47\1\0\13\47\1\u019f\24\47\1\0"+
    "\10\47\6\0\2\47\1\0\26\47\1\u01a0\11\47\1\0"+
    "\10\47\6\0\2\47\1\0\30\47\1\u0116\7\47\1\0"+
    "\10\47\6\0\2\47\1\0\36\47\1\u01a1\1\47\1\0"+
    "\10\47\6\0\2\47\1\0\33\47\1\u0119\4\47\1\0"+
    "\10\47\6\0\2\47\1\0\37\47\1\u01a2\1\0\10\47"+
    "\21\0\1\u01a3\53\0\1\u01a4\76\0\1\u01a5\57\0\1\335"+
    "\67\0\1\u01a6\57\0\1\343\76\0\1\335\62\0\1\343"+
    "\36\0\1\u01a7\65\0\1\u01a8\36\0\2\47\1\0\10\47"+
    "\1\u01a9\27\47\1\0\10\47\6\0\2\47\1\0\2\47"+
    "\1\u01aa\35\47\1\0\10\47\35\0\1\u01ab\32\0\2\47"+
    "\1\0\17\47\1\u01ac\20\47\1\0\10\47\6\0\2\47"+
    "\1\0\15\47\1\377\22\47\1\0\10\47\37\0\1\u01ad"+
    "\30\0\2\47\1\0\23\47\1\u01ae\14\47\1\0\10\47"+
    "\6\0\2\47\1\0\21\47\1\u0105\16\47\1\0\10\47"+
    "\6\0\2\47\1\0\36\47\1\377\1\47\1\0\10\47"+
    "\6\0\2\47\1\0\37\47\1\u0105\1\0\10\47\6\0"+
    "\2\47\1\0\14\47\1\u01af\23\47\1\0\10\47\6\0"+
    "\2\47\1\0\20\47\1\u01b0\17\47\1\0\10\47\6\0"+
    "\2\47\1\0\10\47\1\u01b1\27\47\1\0\10\47\6\0"+
    "\2\47\1\0\2\47\1\u01b2\35\47\1\0\10\47\6\0"+
    "\2\47\1\0\4\47\1\u01b3\33\47\1\0\10\47\6\0"+
    "\2\47\1\0\15\47\1\u0120\22\47\1\0\10\47\6\0"+
    "\2\47\1\0\12\47\1\u01b4\25\47\1\0\10\47\6\0"+
    "\2\47\1\0\21\47\1\u0127\16\47\1\0\10\47\6\0"+
    "\2\47\1\0\17\47\1\u01b5\20\47\1\0\10\47\6\0"+
    "\2\47\1\0\31\47\1\u01b6\6\47\1\0\10\47\6\0"+
    "\2\47\1\0\36\47\1\u0120\1\47\1\0\10\47\6\0"+
    "\2\47\1\0\23\47\1\u01b7\14\47\1\0\10\47\6\0"+
    "\2\47\1\0\34\47\1\u01b8\3\47\1\0\10\47\6\0"+
    "\2\47\1\0\37\47\1\u0127\1\0\10\47\6\0\2\47"+
    "\1\0\1\47\1\u01b9\36\47\1\0\10\47\6\0\2\47"+
    "\1\0\14\47\1\u01ba\23\47\1\0\10\47\6\0\2\47"+
    "\1\0\7\47\1\u01bb\30\47\1\0\10\47\6\0\2\47"+
    "\1\0\20\47\1\u01bc\17\47\1\0\10\47\6\0\2\47"+
    "\1\0\16\47\1\u01bd\21\47\1\0\10\47\6\0\2\47"+
    "\1\0\22\47\1\u01bd\15\47\1\0\10\47\20\0\1\343"+
    "\53\0\1\335\76\0\1\u01be\65\0\1\u01be\70\0\1\u01bf"+
    "\64\0\1\u01c0\22\0\2\47\1\0\7\47\1\u0105\30\47"+
    "\1\0\10\47\6\0\2\47\1\0\1\47\1\377\36\47"+
    "\1\0\10\47\27\0\1\u0190\40\0\2\47\1\0\16\47"+
    "\1\u01c1\21\47\1\0\10\47\33\0\1\u0190\34\0\2\47"+
    "\1\0\22\47\1\u01c1\15\47\1\0\10\47\6\0\2\47"+
    "\1\0\31\47\1\u01c2\6\47\1\0\10\47\6\0\2\47"+
    "\1\0\34\47\1\u01c3\3\47\1\0\10\47\6\0\2\47"+
    "\1\0\7\47\1\u0127\30\47\1\0\10\47\6\0\2\47"+
    "\1\0\1\47\1\u0120\36\47\1\0\10\47\6\0\2\47"+
    "\1\0\5\47\1\u01c4\32\47\1\0\10\47\6\0\2\47"+
    "\1\0\13\47\1\u01c5\24\47\1\0\10\47\6\0\2\47"+
    "\1\0\1\47\1\u01c6\36\47\1\0\10\47\6\0\2\47"+
    "\1\0\32\47\1\u01bd\5\47\1\0\10\47\6\0\2\47"+
    "\1\0\7\47\1\u01c7\30\47\1\0\10\47\6\0\2\47"+
    "\1\0\35\47\1\u01bd\2\47\1\0\10\47\6\0\2\47"+
    "\1\0\3\47\1\u01c8\34\47\1\0\10\47\6\0\2\47"+
    "\1\0\31\47\1\u01c9\6\47\1\0\10\47\6\0\2\47"+
    "\1\0\11\47\1\u01ca\26\47\1\0\10\47\6\0\2\47"+
    "\1\0\34\47\1\u01cb\3\47\1\0\10\47\7\0\1\335"+
    "\60\0\1\343\61\0\1\47\1\377\1\0\40\47\1\0"+
    "\10\47\6\0\1\u0105\1\47\1\0\40\47\1\0\10\47"+
    "\6\0\2\47\1\0\2\47\1\u01bd\35\47\1\0\10\47"+
    "\6\0\2\47\1\0\10\47\1\u01bd\27\47\1\0\10\47"+
    "\6\0\2\47\1\0\15\47\1\u01a1\22\47\1\0\10\47"+
    "\6\0\2\47\1\0\21\47\1\u01a2\16\47\1\0\10\47"+
    "\6\0\2\47\1\0\4\47\1\u01cc\33\47\1\0\10\47"+
    "\6\0\1\47\1\u0120\1\0\40\47\1\0\10\47\6\0"+
    "\2\47\1\0\12\47\1\u01cd\25\47\1\0\10\47\6\0"+
    "\1\u0127\1\47\1\0\40\47\1\0\10\47\6\0\2\47"+
    "\1\0\2\47\1\u01a1\35\47\1\0\10\47\6\0\2\47"+
    "\1\0\10\47\1\u01a2\27\47\1\0\10\47\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\30\1\3\11\72\1\6\0\1\1\2\0"+
    "\1\1\7\0\1\11\17\0\110\1\3\0\1\11\43\0"+
    "\4\1\1\0\3\1\1\0\23\1\1\0\1\1\1\0"+
    "\47\1\26\0\2\1\1\0\2\1\1\0\14\1\1\0"+
    "\1\1\1\0\33\1\12\0\2\1\1\0\2\1\1\0"+
    "\6\1\1\11\22\1\6\0\2\1\1\0\1\1\1\0"+
    "\20\1\1\11\2\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[461];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	
	boolean include = false;
	private String fileName ;
	private File includeFile;
	private String project;
	
	public F77INSTInclude() {
		this.include = false;
    }
    
    public F77INSTInclude(boolean included, IConfigurationElement pContribution) {
		this.setContribution(pContribution);
		this.include = included;
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		project = getProjectPath(file.toOSString());
		this.zzReader = new FileReader(file.toOSString());
	}
	
	private void analyseFile(String fileN) throws JFlexException {
		fileName = fileN.replaceAll("\\'", "");
		if(fileName.contains("/")) {
			String [] str = fileName.split("/");
			fileName = str[str.length-1];
		}
		try {
			final AbstractRule rule = new F77INSTInclude(true, this.getContribution());

			File[] currDir = new File(project).listFiles();
			getFileFromPath(currDir);
			if (includeFile != null) {
				final IPath filePath = new Path(includeFile.getPath());
				rule.setInputFile(filePath);
	
				// We verify that there is an error.
				List<Violation> l = rule.run();
				if (!l.isEmpty()) {
					Violation fv = l.get(0);
					if (fv.getLine() != 0)	setError(location,"There is an executable instruction not allowed in the included file.", yyline + 1);
				}
			}
		} catch (FileNotFoundException exception) {
			throw new JFlexException(exception);
		} catch (IOException exception) {
			throw new JFlexException(exception);
		} catch (JFlexException exception) {
			throw new JFlexException(exception);
		}
	}
	
	private String getProjectPath(String filePath) {
		String sep = File.separator.equals("/") ? "/" : "\\\\";
		String str[]= filePath.split(sep);
		String ret = "";
		for(int i = 0; i < str.length -1; i++) {
			ret = ret + str[i] + File.separator;
		}
		return ret;
	}
	
	private void getFileFromPath(File[] files) {
		for (File file : files) {
	        if (file.isDirectory()) {
	            getFileFromPath(file.listFiles());
	        } else {
	            if(file.getName().equals(fileName)) {
	            	includeFile = file;
	            }
	        }
	    }
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77INSTInclude(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 12: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 13: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 14: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 15: break;
          case 5: 
            { 
            }
          case 16: break;
          case 6: 
            { location = location + " " + yytext();
								 yybegin(COMMENT);
            }
          case 17: break;
          case 7: 
            { if(include) setError(location,"The executable instruction " + yytext() + " is not allowed in the include file.",yyline+1);
            }
          case 18: break;
          case 8: 
            { if(include) setError(location ,"The executable instruction " + yytext() + " is not allowed in the include file.",yyline+1);
            }
          case 19: break;
          case 9: 
            { if(yytext().contains(".f") || yytext().contains(".F")) analyseFile(yytext());
            }
          case 20: break;
          case 10: 
            { location = yytext(); yybegin(NAMING);
            }
          case 21: break;
          case 11: 
            { yybegin(INCLUDE);
            }
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
