/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for Tr.Parametres rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77INSTSave.lex</tt>
 */
public class F77INSTSave extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\56\1\57\1\57\1\57\22\0\1\53\1\1\10\0\1\4"+
    "\5\0\12\55\7\0\1\36\1\32\1\3\1\24\1\23\1\5\1\35"+
    "\1\47\1\11\2\54\1\43\1\37\1\7\1\12\1\21\1\54\1\22"+
    "\1\31\1\10\1\6\1\45\1\54\1\51\2\54\4\0\1\55\1\0"+
    "\1\41\1\34\1\2\1\30\1\27\1\13\1\40\1\50\1\17\2\54"+
    "\1\44\1\42\1\15\1\20\1\25\1\54\1\26\1\33\1\16\1\14"+
    "\1\46\1\54\1\52\2\54\12\0\1\57\u1fa2\0\1\57\1\57\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\10\1\1\3\1\4\1\5\1\6"+
    "\1\2\37\5\12\0\20\5\1\7\10\5\1\7\4\5"+
    "\1\7\10\5\12\0\44\5\7\0\1\10\3\0\7\5"+
    "\1\10\22\5\1\11\5\5\12\0\34\5\10\0\1\12"+
    "\10\5\1\13\20\5\1\14\6\0\11\5\1\0\1\5"+
    "\1\0\2\5\2\0\2\5\2\0\2\5\16\0\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\360"+
    "\0\360\0\360\0\u02a0\0\u02d0\0\u0300\0\u02d0\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660"+
    "\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u02d0\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0"+
    "\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230"+
    "\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530"+
    "\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0"+
    "\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830"+
    "\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0"+
    "\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30"+
    "\0\u1b60\0\360\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80"+
    "\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u02d0\0\u1d70\0\u1da0\0\u1dd0"+
    "\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50"+
    "\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u02d0"+
    "\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220"+
    "\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0"+
    "\0\u23d0\0\u2400\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520"+
    "\0\u2550\0\u2580\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0"+
    "\0\u26d0\0\u2700\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820"+
    "\0\u2850\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0"+
    "\0\u29d0\0\u2a00\0\u2a30\0\360\0\u2a60\0\u2a90\0\u2ac0\0\u2af0"+
    "\0\u2b20\0\u2b50\0\u2b80\0\u2bb0\0\u02d0\0\u2be0\0\u2c10\0\u2c40"+
    "\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30\0\u2d60\0\u2d90\0\u2dc0"+
    "\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\u2eb0\0\u02d0\0\u2ee0\0\u2f10"+
    "\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060\0\u3090"+
    "\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180\0\u31b0\0\u31e0\0\u3210"+
    "\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300\0\u3330\0\u3360\0\u3390"+
    "\0\u33c0\0\u33f0\0\u3420\0\u3450\0\u3480\0\u34b0\0\u34e0\0\u3510"+
    "\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600\0\u3630\0\u3660\0\u3690"+
    "\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\4\7\1\10\5\6\1\11\5\6\1\12\3\6"+
    "\1\13\3\6\1\14\1\6\1\15\3\6\1\16\2\6"+
    "\1\17\13\6\1\20\1\21\1\22\1\7\54\22\1\20"+
    "\1\21\1\22\1\7\2\23\1\22\46\23\1\22\1\23"+
    "\1\22\1\20\1\21\1\6\1\7\2\24\1\7\1\25"+
    "\5\26\1\27\5\26\1\30\3\26\1\31\3\26\1\32"+
    "\1\26\1\33\3\26\1\34\2\26\1\35\10\26\1\6"+
    "\1\26\1\6\1\22\1\21\1\22\1\7\1\36\1\37"+
    "\1\22\1\40\2\26\1\41\1\42\1\26\1\43\2\26"+
    "\1\44\1\45\1\26\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\26\1\57\3\26\1\60"+
    "\2\26\1\61\1\62\1\63\6\26\1\22\1\26\1\22"+
    "\1\20\1\21\66\0\1\64\65\0\1\65\65\0\1\66"+
    "\63\0\1\67\37\0\1\70\27\0\1\71\35\0\1\72"+
    "\24\0\1\73\30\0\1\74\65\0\1\75\41\0\2\23"+
    "\1\0\46\23\1\0\2\23\4\0\2\26\1\0\46\26"+
    "\1\0\2\26\4\0\2\26\1\0\1\26\1\76\44\26"+
    "\1\0\2\26\4\0\2\26\1\0\7\26\1\77\36\26"+
    "\1\0\2\26\4\0\2\26\1\0\15\26\1\100\30\26"+
    "\1\0\2\26\4\0\2\26\1\0\21\26\1\101\24\26"+
    "\1\0\2\26\4\0\2\26\1\0\1\26\1\102\27\26"+
    "\1\103\14\26\1\0\2\26\4\0\2\26\1\0\7\26"+
    "\1\104\24\26\1\105\11\26\1\0\2\26\4\0\2\26"+
    "\1\0\5\26\1\106\40\26\1\0\2\26\4\0\2\26"+
    "\1\0\13\26\1\107\32\26\1\0\2\26\4\0\2\26"+
    "\1\0\13\26\1\110\27\26\1\111\2\26\1\0\2\26"+
    "\4\0\2\26\1\0\5\26\1\112\34\26\1\113\3\26"+
    "\1\0\2\26\4\0\2\26\1\0\1\26\1\114\44\26"+
    "\1\0\2\26\4\0\2\26\1\0\42\26\1\115\3\26"+
    "\1\0\2\26\4\0\2\26\1\0\1\116\1\26\1\117"+
    "\43\26\1\0\2\26\4\0\2\26\1\0\7\26\1\120"+
    "\36\26\1\0\2\26\4\0\2\26\1\0\43\26\1\121"+
    "\2\26\1\0\2\26\4\0\2\26\1\0\6\26\1\116"+
    "\1\26\1\122\35\26\1\0\2\26\4\0\2\26\1\0"+
    "\15\26\1\123\30\26\1\0\2\26\4\0\2\26\1\0"+
    "\16\26\1\124\27\26\1\0\2\26\4\0\2\26\1\0"+
    "\2\26\1\125\33\26\1\126\7\26\1\0\2\26\4\0"+
    "\2\26\1\0\5\26\1\127\40\26\1\0\2\26\4\0"+
    "\2\26\1\0\21\26\1\130\24\26\1\0\2\26\4\0"+
    "\2\26\1\0\22\26\1\131\23\26\1\0\2\26\4\0"+
    "\2\26\1\0\10\26\1\132\26\26\1\133\6\26\1\0"+
    "\2\26\4\0\2\26\1\0\13\26\1\134\32\26\1\0"+
    "\2\26\4\0\2\26\1\0\1\26\1\135\27\26\1\136"+
    "\14\26\1\0\2\26\4\0\2\26\1\0\7\26\1\137"+
    "\24\26\1\140\11\26\1\0\2\26\4\0\2\26\1\0"+
    "\5\26\1\141\40\26\1\0\2\26\4\0\2\26\1\0"+
    "\13\26\1\142\32\26\1\0\2\26\4\0\2\26\1\0"+
    "\5\26\1\143\40\26\1\0\2\26\4\0\2\26\1\0"+
    "\13\26\1\144\32\26\1\0\2\26\11\0\1\145\65\0"+
    "\1\146\54\0\1\147\65\0\1\150\71\0\1\151\72\0"+
    "\1\152\46\0\1\153\71\0\1\154\35\0\1\155\63\0"+
    "\1\156\31\0\2\26\1\0\2\26\1\157\43\26\1\0"+
    "\2\26\4\0\2\26\1\0\10\26\1\160\35\26\1\0"+
    "\2\26\4\0\2\26\1\0\5\26\1\161\40\26\1\0"+
    "\2\26\4\0\2\26\1\0\13\26\1\162\32\26\1\0"+
    "\2\26\4\0\2\26\1\0\25\26\1\163\20\26\1\0"+
    "\2\26\4\0\2\26\1\0\40\26\1\164\5\26\1\0"+
    "\2\26\4\0\2\26\1\0\27\26\1\165\16\26\1\0"+
    "\2\26\4\0\2\26\1\0\41\26\1\166\4\26\1\0"+
    "\2\26\4\0\2\26\1\0\17\26\1\167\26\26\1\0"+
    "\2\26\4\0\2\26\1\0\23\26\1\170\22\26\1\0"+
    "\2\26\4\0\2\26\1\0\35\26\1\171\10\26\1\0"+
    "\2\26\4\0\2\26\1\0\34\26\1\172\11\26\1\0"+
    "\2\26\4\0\2\26\1\0\32\26\1\173\13\26\1\0"+
    "\2\26\4\0\2\26\1\0\31\26\1\174\14\26\1\0"+
    "\2\26\4\0\2\26\1\0\2\26\1\175\43\26\1\0"+
    "\2\26\4\0\2\26\1\0\16\26\1\176\27\26\1\0"+
    "\2\26\4\0\2\26\1\0\3\26\1\177\42\26\1\0"+
    "\2\26\4\0\2\26\1\0\10\26\1\200\35\26\1\0"+
    "\2\26\4\0\2\26\1\0\22\26\1\201\23\26\1\0"+
    "\2\26\4\0\2\26\1\0\11\26\1\202\34\26\1\0"+
    "\2\26\4\0\2\26\1\0\5\26\1\203\40\26\1\0"+
    "\2\26\4\0\2\26\1\0\31\26\1\204\14\26\1\0"+
    "\2\26\4\0\2\26\1\0\17\26\1\116\26\26\1\0"+
    "\2\26\4\0\2\26\1\0\24\26\1\205\21\26\1\0"+
    "\2\26\4\0\2\26\1\0\1\26\1\206\44\26\1\0"+
    "\2\26\4\0\2\26\1\0\13\26\1\207\32\26\1\0"+
    "\2\26\4\0\2\26\1\0\34\26\1\210\11\26\1\0"+
    "\2\26\4\0\2\26\1\0\23\26\1\116\22\26\1\0"+
    "\2\26\4\0\2\26\1\0\26\26\1\211\17\26\1\0"+
    "\2\26\4\0\2\26\1\0\7\26\1\212\36\26\1\0"+
    "\2\26\4\0\2\26\1\0\25\26\1\213\20\26\1\0"+
    "\2\26\4\0\2\26\1\0\40\26\1\214\5\26\1\0"+
    "\2\26\4\0\2\26\1\0\27\26\1\215\16\26\1\0"+
    "\2\26\4\0\2\26\1\0\41\26\1\216\4\26\1\0"+
    "\2\26\4\0\2\26\1\0\17\26\1\217\26\26\1\0"+
    "\2\26\4\0\2\26\1\0\23\26\1\220\22\26\1\0"+
    "\2\26\4\0\2\26\1\0\30\26\1\221\15\26\1\0"+
    "\2\26\4\0\2\26\1\0\33\26\1\222\12\26\1\0"+
    "\2\26\5\0\1\223\56\0\1\224\60\0\1\225\31\0"+
    "\1\226\24\0\1\227\35\0\1\230\41\0\1\231\60\0"+
    "\1\232\62\0\1\233\60\0\1\232\36\0\1\234\65\0"+
    "\1\235\45\0\1\26\1\236\1\0\46\26\1\0\2\26"+
    "\4\0\1\237\1\26\1\0\46\26\1\0\2\26\4\0"+
    "\1\26\1\240\1\0\30\26\1\241\15\26\1\0\2\26"+
    "\4\0\1\242\1\26\1\0\33\26\1\243\12\26\1\0"+
    "\2\26\4\0\2\26\1\0\15\26\1\244\30\26\1\0"+
    "\2\26\4\0\2\26\1\0\16\26\1\245\27\26\1\0"+
    "\2\26\4\0\2\26\1\0\21\26\1\246\24\26\1\0"+
    "\2\26\4\0\2\26\1\0\22\26\1\245\23\26\1\0"+
    "\2\26\4\0\2\26\1\0\1\26\1\247\44\26\1\0"+
    "\2\26\4\0\2\26\1\0\7\26\1\250\36\26\1\0"+
    "\2\26\4\0\2\26\1\0\20\26\1\251\25\26\1\0"+
    "\2\26\4\0\2\26\1\0\21\26\1\252\24\26\1\0"+
    "\2\26\4\0\2\26\1\0\14\26\1\253\31\26\1\0"+
    "\2\26\4\0\2\26\1\0\15\26\1\254\30\26\1\0"+
    "\2\26\4\0\1\26\1\255\1\0\46\26\1\0\2\26"+
    "\4\0\2\26\1\0\2\26\1\116\43\26\1\0\2\26"+
    "\4\0\2\26\1\0\16\26\1\256\27\26\1\0\2\26"+
    "\4\0\1\257\1\26\1\0\46\26\1\0\2\26\4\0"+
    "\2\26\1\0\10\26\1\116\35\26\1\0\2\26\4\0"+
    "\2\26\1\0\22\26\1\260\23\26\1\0\2\26\4\0"+
    "\1\26\1\261\1\0\30\26\1\262\15\26\1\0\2\26"+
    "\4\0\2\26\1\0\36\26\1\116\7\26\1\0\2\26"+
    "\4\0\2\26\1\0\16\26\1\116\27\26\1\0\2\26"+
    "\4\0\2\26\1\0\25\26\1\263\20\26\1\0\2\26"+
    "\4\0\1\264\1\26\1\0\33\26\1\265\12\26\1\0"+
    "\2\26\4\0\2\26\1\0\37\26\1\116\6\26\1\0"+
    "\2\26\4\0\2\26\1\0\22\26\1\116\23\26\1\0"+
    "\2\26\4\0\2\26\1\0\27\26\1\266\16\26\1\0"+
    "\2\26\4\0\2\26\1\0\15\26\1\267\30\26\1\0"+
    "\2\26\4\0\2\26\1\0\16\26\1\270\27\26\1\0"+
    "\2\26\4\0\2\26\1\0\21\26\1\271\24\26\1\0"+
    "\2\26\4\0\2\26\1\0\22\26\1\270\23\26\1\0"+
    "\2\26\4\0\2\26\1\0\1\26\1\272\44\26\1\0"+
    "\2\26\4\0\2\26\1\0\7\26\1\273\36\26\1\0"+
    "\2\26\4\0\2\26\1\0\4\26\1\274\41\26\1\0"+
    "\2\26\4\0\2\26\1\0\12\26\1\275\33\26\1\0"+
    "\2\26\12\0\1\276\65\0\1\277\64\0\1\300\56\0"+
    "\1\301\64\0\1\302\56\0\1\303\43\0\1\304\65\0"+
    "\1\305\102\0\1\306\60\0\1\307\15\0\2\26\1\0"+
    "\3\26\1\310\42\26\1\0\2\26\4\0\2\26\1\0"+
    "\11\26\1\311\34\26\1\0\2\26\4\0\2\26\1\0"+
    "\16\26\1\312\27\26\1\0\2\26\4\0\2\26\1\0"+
    "\15\26\1\313\30\26\1\0\2\26\4\0\2\26\1\0"+
    "\22\26\1\314\23\26\1\0\2\26\4\0\2\26\1\0"+
    "\21\26\1\315\24\26\1\0\2\26\4\0\2\26\1\0"+
    "\5\26\1\316\40\26\1\0\2\26\4\0\2\26\1\0"+
    "\13\26\1\317\32\26\1\0\2\26\4\0\2\26\1\0"+
    "\36\26\1\320\7\26\1\0\2\26\4\0\2\26\1\0"+
    "\37\26\1\321\6\26\1\0\2\26\4\0\2\26\1\0"+
    "\37\26\1\322\6\26\1\0\2\26\4\0\2\26\1\0"+
    "\34\26\1\323\11\26\1\0\2\26\4\0\2\26\1\0"+
    "\36\26\1\324\7\26\1\0\2\26\4\0\2\26\1\0"+
    "\31\26\1\325\14\26\1\0\2\26\4\0\2\26\1\0"+
    "\3\26\1\326\42\26\1\0\2\26\4\0\2\26\1\0"+
    "\30\26\1\327\15\26\1\0\2\26\4\0\2\26\1\0"+
    "\11\26\1\330\34\26\1\0\2\26\4\0\2\26\1\0"+
    "\33\26\1\331\12\26\1\0\2\26\4\0\2\26\1\0"+
    "\16\26\1\332\27\26\1\0\2\26\4\0\2\26\1\0"+
    "\15\26\1\333\30\26\1\0\2\26\4\0\2\26\1\0"+
    "\36\26\1\334\7\26\1\0\2\26\4\0\2\26\1\0"+
    "\22\26\1\335\23\26\1\0\2\26\4\0\2\26\1\0"+
    "\21\26\1\336\24\26\1\0\2\26\4\0\2\26\1\0"+
    "\37\26\1\337\6\26\1\0\2\26\4\0\2\26\1\0"+
    "\5\26\1\340\40\26\1\0\2\26\4\0\2\26\1\0"+
    "\13\26\1\341\32\26\1\0\2\26\4\0\2\26\1\0"+
    "\36\26\1\342\7\26\1\0\2\26\4\0\2\26\1\0"+
    "\37\26\1\343\6\26\1\0\2\26\4\0\1\26\1\124"+
    "\1\0\46\26\1\0\2\26\4\0\1\131\1\26\1\0"+
    "\46\26\1\0\2\26\13\0\1\344\65\0\1\345\64\0"+
    "\1\346\71\0\1\347\51\0\1\350\70\0\1\351\24\0"+
    "\1\352\65\0\1\353\66\0\1\354\63\0\1\354\32\0"+
    "\2\26\1\0\4\26\1\355\41\26\1\0\2\26\4\0"+
    "\2\26\1\0\12\26\1\356\33\26\1\0\2\26\4\0"+
    "\2\26\1\0\17\26\1\357\26\26\1\0\2\26\4\0"+
    "\2\26\1\0\31\26\1\360\14\26\1\0\2\26\4\0"+
    "\2\26\1\0\23\26\1\361\22\26\1\0\2\26\4\0"+
    "\2\26\1\0\34\26\1\362\11\26\1\0\2\26\4\0"+
    "\2\26\1\0\1\26\1\363\44\26\1\0\2\26\4\0"+
    "\2\26\1\0\7\26\1\364\36\26\1\0\2\26\4\0"+
    "\2\26\1\0\16\26\1\365\27\26\1\0\2\26\4\0"+
    "\2\26\1\0\22\26\1\365\23\26\1\0\2\26\4\0"+
    "\2\26\1\0\22\26\1\366\23\26\1\0\2\26\4\0"+
    "\1\367\1\26\1\0\46\26\1\0\2\26\4\0\2\26"+
    "\1\0\16\26\1\370\27\26\1\0\2\26\4\0\1\26"+
    "\1\371\1\0\46\26\1\0\2\26\4\0\2\26\1\0"+
    "\4\26\1\372\41\26\1\0\2\26\4\0\2\26\1\0"+
    "\16\26\1\373\27\26\1\0\2\26\4\0\2\26\1\0"+
    "\12\26\1\374\33\26\1\0\2\26\4\0\2\26\1\0"+
    "\22\26\1\375\23\26\1\0\2\26\4\0\2\26\1\0"+
    "\17\26\1\376\26\26\1\0\2\26\4\0\2\26\1\0"+
    "\31\26\1\377\14\26\1\0\2\26\4\0\2\26\1\0"+
    "\16\26\1\u0100\27\26\1\0\2\26\4\0\2\26\1\0"+
    "\23\26\1\u0101\22\26\1\0\2\26\4\0\2\26\1\0"+
    "\34\26\1\u0102\11\26\1\0\2\26\4\0\2\26\1\0"+
    "\22\26\1\u0103\23\26\1\0\2\26\4\0\2\26\1\0"+
    "\1\26\1\u0104\44\26\1\0\2\26\4\0\2\26\1\0"+
    "\7\26\1\u0105\36\26\1\0\2\26\4\0\2\26\1\0"+
    "\16\26\1\u0106\27\26\1\0\2\26\4\0\2\26\1\0"+
    "\22\26\1\u0106\23\26\1\0\2\26\14\0\1\u0107\65\0"+
    "\1\u0108\45\0\1\u0109\110\0\1\354\34\0\1\u010a\105\0"+
    "\1\354\25\0\1\u010b\65\0\1\u010c\43\0\2\26\1\0"+
    "\5\26\1\u010d\40\26\1\0\2\26\4\0\2\26\1\0"+
    "\13\26\1\u010e\32\26\1\0\2\26\4\0\2\26\1\0"+
    "\1\26\1\u010f\44\26\1\0\2\26\4\0\2\26\1\0"+
    "\32\26\1\365\13\26\1\0\2\26\4\0\2\26\1\0"+
    "\7\26\1\u0110\36\26\1\0\2\26\4\0\2\26\1\0"+
    "\35\26\1\365\10\26\1\0\2\26\4\0\2\26\1\0"+
    "\3\26\1\u0111\42\26\1\0\2\26\4\0\2\26\1\0"+
    "\11\26\1\u0112\34\26\1\0\2\26\4\0\2\26\1\0"+
    "\45\26\1\116\1\0\2\26\4\0\2\26\1\0\11\26"+
    "\1\331\34\26\1\0\2\26\4\0\2\26\1\0\44\26"+
    "\1\116\1\26\1\0\2\26\4\0\2\26\1\0\3\26"+
    "\1\327\42\26\1\0\2\26\4\0\2\26\1\0\5\26"+
    "\1\u0113\40\26\1\0\2\26\4\0\2\26\1\0\15\26"+
    "\1\116\30\26\1\0\2\26\4\0\2\26\1\0\13\26"+
    "\1\u0114\32\26\1\0\2\26\4\0\2\26\1\0\21\26"+
    "\1\116\24\26\1\0\2\26\4\0\2\26\1\0\1\26"+
    "\1\u0115\44\26\1\0\2\26\4\0\2\26\1\0\32\26"+
    "\1\u0106\13\26\1\0\2\26\4\0\2\26\1\0\46\26"+
    "\1\u0116\2\26\4\0\2\26\1\0\7\26\1\u0117\36\26"+
    "\1\0\2\26\4\0\2\26\1\0\35\26\1\u0106\10\26"+
    "\1\0\2\26\4\0\2\26\1\0\46\26\1\u0118\2\26"+
    "\4\0\2\26\1\0\3\26\1\u0119\42\26\1\0\2\26"+
    "\4\0\2\26\1\0\11\26\1\u011a\34\26\1\0\2\26"+
    "\11\0\1\354\65\0\1\354\64\0\1\306\63\0\1\307"+
    "\42\0\1\u011b\65\0\1\u011c\42\0\2\26\1\0\2\26"+
    "\1\365\43\26\1\0\2\26\4\0\2\26\1\0\10\26"+
    "\1\365\35\26\1\0\2\26\4\0\2\26\1\0\15\26"+
    "\1\320\30\26\1\0\2\26\4\0\2\26\1\0\21\26"+
    "\1\321\24\26\1\0\2\26\4\0\2\26\1\0\4\26"+
    "\1\u011d\41\26\1\0\2\26\4\0\2\26\1\0\12\26"+
    "\1\u011e\33\26\1\0\2\26\4\0\2\26\1\0\2\26"+
    "\1\u0106\43\26\1\0\2\26\4\0\2\26\1\0\10\26"+
    "\1\u0106\35\26\1\0\2\26\4\0\2\26\1\0\15\26"+
    "\1\342\30\26\1\0\2\26\23\0\1\u011f\31\0\1\u0116"+
    "\6\0\2\26\1\0\21\26\1\343\24\26\1\0\2\26"+
    "\27\0\1\u0120\25\0\1\u0118\6\0\2\26\1\0\4\26"+
    "\1\u0121\41\26\1\0\2\26\4\0\2\26\1\0\12\26"+
    "\1\u0122\33\26\1\0\2\26\11\0\1\306\65\0\1\307"+
    "\44\0\2\26\1\0\2\26\1\320\43\26\1\0\2\26"+
    "\4\0\2\26\1\0\10\26\1\321\35\26\1\0\2\26"+
    "\24\0\1\u0123\63\0\1\u0124\33\0\2\26\1\0\2\26"+
    "\1\342\43\26\1\0\2\26\4\0\2\26\1\0\10\26"+
    "\1\343\35\26\1\0\2\26\25\0\1\u0125\63\0\1\u0126"+
    "\61\0\1\u0127\61\0\1\u0128\35\0\1\u0129\65\0\1\u012a"+
    "\43\0\1\u012b\56\0\1\u012c\66\0\1\u012d\65\0\1\u012e"+
    "\52\0\1\u012f\65\0\1\u0130\46\0\1\u0131\65\0\1\u0131"+
    "\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14016];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\10\1\3\11\41\1\12\0\47\1\12\0"+
    "\44\1\7\0\1\11\3\0\40\1\12\0\34\1\10\0"+
    "\1\11\32\1\6\0\11\1\1\0\1\1\1\0\2\1"+
    "\2\0\2\1\2\0\2\1\16\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	
	boolean comment = false;
	
	public F77INSTSave() {
    }

	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}

	private void checkSave() throws JFlexException{
		if (!(location.contains("SUBROUTINE") || location.contains("subroutine")) || !comment) {
			setError(location,"The instruction SAVE is only permitted for local variables", yyline+1);
		}
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77INSTSave(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 13: break;
          case 2: 
            { comment=true; yybegin(COMMENT);
            }
          case 14: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 15: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 16: break;
          case 5: 
            { 
            }
          case 17: break;
          case 6: 
            { location = location + " " + yytext();
								 yybegin(COMMENT);
            }
          case 18: break;
          case 7: 
            { comment=false;
            }
          case 19: break;
          case 8: 
            { checkSave();
            }
          case 20: break;
          case 9: 
            { checkSave(); comment=false;
            }
          case 21: break;
          case 10: 
            { location = yytext(); yybegin(NAMING);
            }
          case 22: break;
          case 11: 
            { comment=false; location = yytext(); yybegin(NAMING);
            }
          case 23: break;
          case 12: 
            { location = yytext(); comment=false; yybegin(NAMING);
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
