/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for Tr.Parametres rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77DATACommon.lex</tt>
 */
public class F77DATACommon extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int INCLUDE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\51\1\52\1\52\1\52\23\0\1\1\1\50\4\0\1\47"+
    "\2\0\1\4\5\0\12\46\7\0\1\36\1\32\1\3\1\24\1\23"+
    "\1\5\1\35\1\45\1\11\2\45\1\43\1\37\1\7\1\12\1\21"+
    "\1\45\1\22\1\31\1\10\1\6\5\45\4\0\1\46\1\0\1\41"+
    "\1\34\1\2\1\30\1\27\1\13\1\40\1\45\1\17\2\45\1\44"+
    "\1\42\1\15\1\20\1\25\1\45\1\26\1\33\1\16\1\14\5\45"+
    "\12\0\1\52\u1fa2\0\1\52\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\3\3\14\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\3\13\14\12\16\6\1\14"+
    "\2\6\1\15\47\0\1\16\171\0\1\17\12\0\1\20"+
    "\1\21\12\0\1\22\1\23\12\0\1\24\1\0\1\25"+
    "\6\0\1\26\6\0\1\27\13\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u0102"+
    "\0\u012d\0\u0158\0\u0102\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0102"+
    "\0\u0102\0\u0102\0\u0102\0\u0387\0\u0102\0\u0102\0\u03b2\0\u03dd"+
    "\0\u0102\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a"+
    "\0\u0535\0\u0560\0\u058b\0\u0331\0\u035c\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u078f\0\u0331\0\u035c\0\u0102\0\u07ba\0\u07e5\0\u0102\0\u0810"+
    "\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u09e9\0\u0331\0\u035c\0\u0a14\0\u0a3f\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2"+
    "\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a"+
    "\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u07ba\0\u0102\0\u07e5"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49"+
    "\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1"+
    "\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9"+
    "\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351"+
    "\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9"+
    "\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601"+
    "\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1"+
    "\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09"+
    "\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61"+
    "\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9"+
    "\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11"+
    "\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69"+
    "\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1"+
    "\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee\0\u2219"+
    "\0\u0102\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u231b\0\u2346"+
    "\0\u2371\0\u239c\0\u23c7\0\u0102\0\u0102\0\u23f2\0\u241d\0\u2448"+
    "\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575\0\u0102"+
    "\0\u0102\0\u25a0\0\u25cb\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2"+
    "\0\u26cd\0\u26f8\0\u2723\0\u0102\0\u274e\0\u0102\0\u2779\0\u27a4"+
    "\0\u27cf\0\u27fa\0\u2825\0\u2850\0\u0102\0\u287b\0\u28a6\0\u28d1"+
    "\0\u28fc\0\u2927\0\u2952\0\u0102\0\u297d\0\u29a8\0\u29d3\0\u29fe"+
    "\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00\0\u2b2b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\3\7\1\15"+
    "\1\7\1\16\3\7\1\17\1\7\1\20\3\7\1\21"+
    "\3\7\1\22\1\7\1\23\3\7\1\24\2\7\1\25"+
    "\4\7\1\26\1\27\1\30\1\31\1\32\1\10\47\32"+
    "\1\33\1\31\1\32\1\10\2\34\1\32\41\34\3\32"+
    "\1\35\1\31\1\36\1\10\1\37\1\40\1\41\1\42"+
    "\3\36\1\43\1\36\1\44\3\36\1\45\1\36\1\46"+
    "\3\36\1\47\3\36\1\50\1\36\1\51\3\36\1\52"+
    "\2\36\1\53\4\36\1\54\1\55\1\32\1\31\1\32"+
    "\1\10\1\56\1\57\1\32\1\60\3\32\1\61\1\32"+
    "\1\62\3\32\1\63\1\32\1\64\3\32\1\65\3\32"+
    "\1\66\1\32\1\67\3\32\1\70\2\32\1\71\4\32"+
    "\1\72\1\73\1\74\1\31\1\32\1\10\45\32\1\75"+
    "\1\76\1\77\1\31\73\0\1\100\44\0\1\101\46\0"+
    "\1\102\53\0\1\103\57\0\1\104\53\0\1\105\57\0"+
    "\1\106\56\0\1\107\32\0\1\110\60\0\1\111\50\0"+
    "\1\112\60\0\1\113\32\0\47\114\1\32\3\114\50\115"+
    "\1\32\2\115\2\0\2\34\1\0\42\34\24\0\1\116"+
    "\44\0\1\117\46\0\1\120\53\0\1\121\57\0\1\122"+
    "\53\0\1\123\57\0\1\124\56\0\1\125\32\0\1\126"+
    "\60\0\1\127\50\0\1\130\60\0\1\131\52\0\1\132"+
    "\44\0\1\133\46\0\1\134\53\0\1\135\57\0\1\136"+
    "\53\0\1\137\57\0\1\140\56\0\1\141\32\0\1\142"+
    "\60\0\1\143\50\0\1\144\60\0\1\145\32\0\47\146"+
    "\1\147\3\146\50\150\1\147\2\150\42\0\1\151\47\0"+
    "\1\152\22\0\1\153\46\0\1\154\64\0\1\155\37\0"+
    "\1\156\62\0\1\157\60\0\1\160\64\0\1\161\54\0"+
    "\1\162\42\0\1\163\56\0\1\164\64\0\1\165\47\0"+
    "\1\166\22\0\1\167\46\0\1\170\64\0\1\171\37\0"+
    "\1\172\62\0\1\173\60\0\1\174\64\0\1\175\54\0"+
    "\1\176\42\0\1\177\56\0\1\200\64\0\1\201\47\0"+
    "\1\202\22\0\1\203\46\0\1\204\64\0\1\205\37\0"+
    "\1\206\62\0\1\207\60\0\1\210\64\0\1\211\54\0"+
    "\1\212\42\0\1\213\56\0\1\214\64\0\1\215\47\0"+
    "\1\216\16\0\1\217\112\0\1\220\11\0\1\221\114\0"+
    "\1\222\11\0\1\223\31\0\1\224\17\0\1\225\35\0"+
    "\1\226\34\0\1\227\56\0\1\230\32\0\1\231\60\0"+
    "\1\232\100\0\1\233\47\0\1\234\16\0\1\235\112\0"+
    "\1\236\11\0\1\237\114\0\1\240\11\0\1\241\31\0"+
    "\1\242\17\0\1\243\35\0\1\244\34\0\1\245\56\0"+
    "\1\246\32\0\1\247\60\0\1\250\100\0\1\251\47\0"+
    "\1\252\16\0\1\253\112\0\1\254\11\0\1\255\114\0"+
    "\1\256\11\0\1\257\31\0\1\260\17\0\1\261\35\0"+
    "\1\262\34\0\1\263\56\0\1\264\32\0\1\265\60\0"+
    "\1\266\56\0\1\267\44\0\1\270\50\0\1\271\50\0"+
    "\1\272\62\0\1\273\50\0\1\274\61\0\1\275\51\0"+
    "\1\276\57\0\1\277\51\0\1\300\36\0\1\301\60\0"+
    "\1\302\75\0\1\303\53\0\1\304\26\0\1\305\44\0"+
    "\1\306\50\0\1\307\50\0\1\310\62\0\1\311\50\0"+
    "\1\312\61\0\1\313\51\0\1\314\57\0\1\315\51\0"+
    "\1\316\36\0\1\317\60\0\1\320\75\0\1\321\53\0"+
    "\1\322\26\0\1\323\44\0\1\324\50\0\1\325\50\0"+
    "\1\326\62\0\1\327\50\0\1\330\61\0\1\331\51\0"+
    "\1\332\57\0\1\333\51\0\1\334\36\0\1\335\60\0"+
    "\1\336\75\0\1\337\53\0\1\340\23\0\1\341\44\0"+
    "\1\341\54\0\1\342\65\0\1\343\45\0\1\344\63\0"+
    "\1\345\46\0\1\346\64\0\1\347\44\0\1\350\63\0"+
    "\1\351\17\0\1\352\60\0\1\353\61\0\1\354\56\0"+
    "\1\354\40\0\1\355\44\0\1\355\54\0\1\356\65\0"+
    "\1\357\45\0\1\360\63\0\1\361\46\0\1\362\64\0"+
    "\1\363\44\0\1\364\63\0\1\365\17\0\1\366\60\0"+
    "\1\367\61\0\1\370\56\0\1\370\40\0\1\371\44\0"+
    "\1\371\54\0\1\372\65\0\1\373\45\0\1\374\63\0"+
    "\1\375\46\0\1\376\64\0\1\377\44\0\1\u0100\63\0"+
    "\1\u0101\17\0\1\u0102\60\0\1\u0103\61\0\1\u0104\56\0"+
    "\1\u0104\35\0\1\u0105\63\0\1\u0106\47\0\1\u0107\61\0"+
    "\1\u0106\31\0\1\u0108\103\0\1\354\27\0\1\u0109\100\0"+
    "\1\354\20\0\1\u010a\60\0\1\u010b\46\0\1\u010c\63\0"+
    "\1\u010d\47\0\1\u010e\61\0\1\u010d\31\0\1\u010f\103\0"+
    "\1\370\27\0\1\u0110\100\0\1\370\20\0\1\u0111\60\0"+
    "\1\u0112\46\0\1\u0113\63\0\1\u0114\47\0\1\u0115\61\0"+
    "\1\u0114\31\0\1\u0116\103\0\1\u0104\27\0\1\u0117\100\0"+
    "\1\u0104\20\0\1\u0118\60\0\1\u0119\43\0\1\354\60\0"+
    "\1\354\57\0\1\303\56\0\1\304\35\0\1\u011a\60\0"+
    "\1\u011b\42\0\1\370\60\0\1\370\57\0\1\321\56\0"+
    "\1\322\35\0\1\u011c\60\0\1\u011d\42\0\1\u0104\60\0"+
    "\1\u0104\57\0\1\337\56\0\1\340\35\0\1\u011e\60\0"+
    "\1\u011f\42\0\1\303\60\0\1\304\44\0\1\321\60\0"+
    "\1\322\44\0\1\337\60\0\1\340\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\2\1\1\11\14\1\4\11\1\1\2\11"+
    "\2\1\1\11\32\1\1\11\2\1\1\11\47\0\1\11"+
    "\171\0\1\11\12\0\2\11\12\0\2\11\12\0\1\11"+
    "\1\0\1\11\6\0\1\11\6\0\1\11\13\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private static final Logger LOGGER = Logger.getLogger(F77DATACommon.class.getName());
	String location = "MAIN PROGRAM";
	
	List<String> includeList    = new ArrayList<String>();
	List<String> commonList     = new ArrayList<String>();
	List<String> errorLocList   = new ArrayList<String>();
	List<Integer> errorLineList = new ArrayList<Integer>();
	
	String parsedFileName;
	
	public F77DATACommon() {
    }

	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		LOGGER.finest("begin method setInputFile");
		this.zzReader = new FileReader(file.toOSString());
		LOGGER.finest("end method setInputFile");
	}
	
	private void addCommon() {
		LOGGER.finest("begin method addCommon");
        commonList.add(getViolation().getFilePath().toFile().getName());
        errorLocList.add(this.location);
        errorLineList.add(this.yyline + 1);
        yybegin(LINE);
        LOGGER.finest("end method addCommon");
    }
	
	private void addInclude(String file) {
		LOGGER.finest("begin method addInclude");
		if (!includeList.contains(file))
			includeList.add(file);
		yybegin(LINE);
		LOGGER.finest("end method addInclude");
	}
	
	private void compareLists() throws JFlexException{
		LOGGER.finest("begin method compareLists");
		for (int i = 0; i < commonList.size(); i++) {
			if (!includeList.contains(commonList.get(i))) {
				setError(errorLocList.get(i),"The INCLUDE instruction shall be used to reference the needed common bloc.", errorLineList.get(i));
			}
		}
		LOGGER.finest("end method compareLists");
	}

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77DATACommon(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	compareLists();
	
	includeList.clear();
	commonList.clear();
	errorLocList.clear();
	errorLineList.clear();
	
return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
									yybegin(LINE);
            }
          case 24: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\")");
									yybegin(COMMENT);
            }
          case 25: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : VAR \""+yytext()+"\")");
									yybegin(COMMENT);
            }
          case 26: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition :  \\n )");
									yybegin(NEW_LINE);
            }
          case 27: break;
          case 5: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 28: break;
          case 6: 
            { 
            }
          case 29: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
									yybegin(NEW_LINE);
            }
          case 30: break;
          case 8: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\")");
									location = location + " " + yytext();
								 	yybegin(COMMENT);
            }
          case 31: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : \\n )");
									yybegin(NEW_LINE);
            }
          case 32: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
									yybegin(LINE);
            }
          case 33: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\")");
									yybegin(COMMENT);
            }
          case 34: break;
          case 12: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition :  \\n )");
									yybegin(NEW_LINE);
            }
          case 35: break;
          case 13: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - INCLUDE -> NEW_LINE (Transition :  \\n )");
									yybegin(NEW_LINE);
            }
          case 36: break;
          case 14: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - INCLUDE -> LINE (Transition : TYPE \""+yytext()+"\")");
									addInclude(yytext());
            }
          case 37: break;
          case 15: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : COMMON \""+yytext()+"\")");
									addCommon();
            }
          case 38: break;
          case 16: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\")");
									location = yytext(); 
									yybegin(NAMING);
            }
          case 39: break;
          case 17: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : COMMON \""+yytext()+"\")");
									addCommon();
            }
          case 40: break;
          case 18: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\")");
									location = yytext(); 
									yybegin(NAMING);
            }
          case 41: break;
          case 19: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> LINE (Transition : COMMON \""+yytext()+"\")");
									addCommon();
            }
          case 42: break;
          case 20: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\")");
									location = yytext(); yybegin(NAMING);
            }
          case 43: break;
          case 21: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> INCLUDE (Transition : INCLUDE \""+yytext()+"\")");
									yybegin(INCLUDE);
            }
          case 44: break;
          case 22: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> INCLUDE (Transition : INCLUDE \""+yytext()+"\")");
									yybegin(INCLUDE);
            }
          case 45: break;
          case 23: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> INCLUDE (Transition : INCLUDE \""+yytext()+"\")");
									yybegin(INCLUDE);
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
