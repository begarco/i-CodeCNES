/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F77NAMEKeyWords rule.	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77NAMEKeyWords.lex</tt>
 */
public class F77NAMEKeyWords extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int CLE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\70\1\72\1\72\1\71\22\0\1\62\1\1\1\66"+
    "\4\0\1\65\2\0\1\1\5\0\12\64\7\0\1\35\1\31\1\3"+
    "\1\23\1\22\1\4\1\34\1\60\1\10\1\63\1\44\1\42\1\36"+
    "\1\6\1\11\1\20\1\50\1\21\1\30\1\7\1\5\1\51\1\56"+
    "\1\54\1\46\1\63\4\0\1\64\1\0\1\40\1\33\1\2\1\27"+
    "\1\26\1\12\1\37\1\61\1\16\1\63\1\45\1\43\1\41\1\14"+
    "\1\17\1\24\1\52\1\25\1\32\1\15\1\13\1\53\1\57\1\55"+
    "\1\47\1\63\12\0\1\72\u1fa2\0\1\72\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\2\20\1\1\3\1\4\1\5\1\6"+
    "\51\5\24\0\11\5\1\7\53\5\22\0\33\5\1\7"+
    "\14\5\1\7\27\5\12\0\1\10\10\0\31\5\1\7"+
    "\14\5\1\7\15\5\22\0\40\5\20\0\1\11\32\5"+
    "\1\12\10\0\14\5\4\0\6\5\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u0162\0\u0162\0\u0162\0\u05c3\0\u0213\0\u0289"+
    "\0\u02ff\0\u03b0\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b"+
    "\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u054d\0\u0588\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u06af\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa"+
    "\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba"+
    "\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292"+
    "\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642"+
    "\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2"+
    "\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a"+
    "\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152"+
    "\0\u318d\0\u31c8\0\u3203\0\u323e\0\u0162\0\u3279\0\u32b4\0\u32ef"+
    "\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7"+
    "\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f"+
    "\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877"+
    "\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27"+
    "\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff"+
    "\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7"+
    "\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af"+
    "\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387"+
    "\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f"+
    "\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737"+
    "\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4\0\u490f"+
    "\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7"+
    "\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf"+
    "\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97"+
    "\0\u4ed2\0\u4f0d\0\u4f48\0\u0162\0\u4f83\0\u4fbe\0\u4ff9\0\u5034"+
    "\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c"+
    "\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4"+
    "\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u06af\0\u5581"+
    "\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759"+
    "\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931"+
    "\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09"+
    "\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1"+
    "\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9"+
    "\0\u5ef4\0\u5f2f\0\u5f6a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\3\7\1\14\1\7"+
    "\1\15\3\7\1\16\1\7\1\17\1\20\1\7\1\21"+
    "\1\22\1\23\1\7\1\24\1\25\1\7\1\26\3\7"+
    "\1\27\2\7\1\30\23\7\1\31\1\32\1\7\1\33"+
    "\2\34\70\35\1\33\2\34\2\35\60\36\1\35\1\36"+
    "\4\35\1\33\2\34\1\7\1\10\1\11\1\12\1\13"+
    "\3\7\1\14\1\7\1\15\3\7\1\16\1\7\1\17"+
    "\1\20\1\7\1\21\1\22\1\23\1\7\1\24\1\25"+
    "\1\7\1\26\3\7\1\27\2\7\1\30\20\7\1\35"+
    "\2\7\1\31\1\32\3\35\1\34\4\35\1\37\5\35"+
    "\1\40\5\35\1\41\3\35\1\42\3\35\1\43\1\35"+
    "\1\44\3\35\1\45\2\35\1\46\23\35\1\47\1\50"+
    "\1\35\1\33\2\34\2\35\1\51\1\52\1\53\2\54"+
    "\1\55\1\56\1\57\1\60\2\54\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\14\54\1\106\1\107\2\54\1\35\1\54"+
    "\4\35\1\33\2\34\112\0\1\110\41\0\1\111\22\0"+
    "\1\112\46\0\1\113\17\0\1\114\73\0\1\115\77\0"+
    "\1\116\73\0\1\117\77\0\1\120\73\0\1\121\61\0"+
    "\1\122\106\0\1\123\73\0\1\124\63\0\1\125\60\0"+
    "\1\126\100\0\1\127\70\0\1\130\100\0\1\131\53\0"+
    "\65\132\1\7\5\132\66\133\1\7\4\133\2\0\60\36"+
    "\1\0\2\36\10\0\15\54\1\134\20\54\1\135\2\54"+
    "\1\136\16\54\1\0\2\54\10\0\7\54\1\137\23\54"+
    "\1\140\4\54\1\141\17\54\1\0\2\54\10\0\3\54"+
    "\1\142\3\54\1\143\50\54\1\0\2\54\10\0\60\54"+
    "\1\0\2\54\10\0\56\54\1\144\1\54\1\0\2\54"+
    "\10\0\2\54\1\145\1\54\1\146\27\54\1\147\23\54"+
    "\1\0\2\54\10\0\16\54\1\144\41\54\1\0\2\54"+
    "\10\0\11\54\1\150\3\54\1\151\42\54\1\0\2\54"+
    "\10\0\57\54\1\152\1\0\2\54\10\0\10\54\1\145"+
    "\1\54\1\153\24\54\1\154\20\54\1\0\2\54\10\0"+
    "\22\54\1\152\35\54\1\0\2\54\10\0\17\54\1\155"+
    "\13\54\1\156\24\54\1\0\2\54\10\0\20\54\1\157"+
    "\37\54\1\0\2\54\10\0\4\54\1\160\33\54\1\161"+
    "\5\54\1\162\3\54\1\163\5\54\1\0\2\54\10\0"+
    "\6\54\1\164\1\145\23\54\1\165\24\54\1\0\2\54"+
    "\10\0\23\54\1\166\12\54\1\167\21\54\1\0\2\54"+
    "\10\0\24\54\1\170\33\54\1\0\2\54\10\0\12\54"+
    "\1\171\26\54\1\172\6\54\1\173\2\54\1\174\4\54"+
    "\1\0\2\54\10\0\14\54\1\175\1\145\20\54\1\176"+
    "\21\54\1\0\2\54\10\0\3\54\1\177\1\54\1\200"+
    "\25\54\1\201\24\54\1\0\2\54\10\0\33\54\1\202"+
    "\4\54\1\203\17\54\1\0\2\54\10\0\11\54\1\204"+
    "\1\54\1\205\22\54\1\206\21\54\1\0\2\54\10\0"+
    "\36\54\1\207\2\54\1\210\16\54\1\0\2\54\10\0"+
    "\7\54\1\211\50\54\1\0\2\54\10\0\26\54\1\212"+
    "\31\54\1\0\2\54\10\0\7\54\1\213\50\54\1\0"+
    "\2\54\10\0\15\54\1\214\42\54\1\0\2\54\10\0"+
    "\30\54\1\215\27\54\1\0\2\54\10\0\15\54\1\216"+
    "\42\54\1\0\2\54\10\0\17\54\1\217\40\54\1\0"+
    "\2\54\10\0\23\54\1\220\34\54\1\0\2\54\47\0"+
    "\1\221\71\0\1\222\70\0\1\223\71\0\1\224\43\0"+
    "\1\225\73\0\1\226\77\0\1\227\73\0\1\230\66\0"+
    "\1\231\116\0\1\232\42\0\1\233\104\0\1\234\113\0"+
    "\1\235\45\0\1\236\110\0\1\237\74\0\1\240\62\0"+
    "\1\241\76\0\1\242\45\0\12\54\1\243\24\54\1\244"+
    "\20\54\1\0\2\54\10\0\41\54\1\245\16\54\1\0"+
    "\2\54\10\0\15\54\1\246\42\54\1\0\2\54\10\0"+
    "\4\54\1\247\27\54\1\250\23\54\1\0\2\54\10\0"+
    "\40\54\1\251\17\54\1\0\2\54\10\0\7\54\1\252"+
    "\50\54\1\0\2\54\10\0\4\54\1\253\53\54\1\0"+
    "\2\54\10\0\17\54\1\254\40\54\1\0\2\54\10\0"+
    "\20\54\1\255\37\54\1\0\2\54\10\0\5\54\1\256"+
    "\40\54\1\257\11\54\1\0\2\54\10\0\16\54\1\260"+
    "\41\54\1\0\2\54\10\0\12\54\1\261\45\54\1\0"+
    "\2\54\10\0\23\54\1\262\34\54\1\0\2\54\10\0"+
    "\24\54\1\263\33\54\1\0\2\54\10\0\13\54\1\264"+
    "\34\54\1\265\7\54\1\0\2\54\10\0\22\54\1\266"+
    "\35\54\1\0\2\54\10\0\6\54\1\267\1\270\50\54"+
    "\1\0\2\54\10\0\3\54\1\252\13\54\1\271\40\54"+
    "\1\0\2\54\10\0\5\54\1\272\25\54\1\273\20\54"+
    "\1\274\3\54\1\0\2\54\10\0\5\54\1\275\13\54"+
    "\1\276\36\54\1\0\2\54\10\0\26\54\1\277\31\54"+
    "\1\0\2\54\10\0\3\54\1\300\54\54\1\0\2\54"+
    "\10\0\5\54\1\301\52\54\1\0\2\54\10\0\34\54"+
    "\1\302\23\54\1\0\2\54\10\0\5\54\1\303\52\54"+
    "\1\0\2\54\10\0\14\54\1\304\1\305\42\54\1\0"+
    "\2\54\10\0\11\54\1\246\11\54\1\306\34\54\1\0"+
    "\2\54\10\0\13\54\1\307\22\54\1\310\16\54\1\311"+
    "\2\54\1\0\2\54\10\0\13\54\1\312\11\54\1\313"+
    "\32\54\1\0\2\54\10\0\30\54\1\314\27\54\1\0"+
    "\2\54\10\0\11\54\1\315\46\54\1\0\2\54\10\0"+
    "\13\54\1\316\44\54\1\0\2\54\10\0\37\54\1\317"+
    "\20\54\1\0\2\54\10\0\13\54\1\320\44\54\1\0"+
    "\2\54\10\0\27\54\1\321\30\54\1\0\2\54\10\0"+
    "\7\54\1\322\50\54\1\0\2\54\10\0\47\54\1\323"+
    "\10\54\1\0\2\54\10\0\1\54\1\324\56\54\1\0"+
    "\2\54\10\0\7\54\1\325\50\54\1\0\2\54\10\0"+
    "\31\54\1\326\26\54\1\0\2\54\10\0\15\54\1\327"+
    "\42\54\1\0\2\54\10\0\51\54\1\330\6\54\1\0"+
    "\2\54\10\0\1\331\57\54\1\0\2\54\10\0\15\54"+
    "\1\332\42\54\1\0\2\54\10\0\5\54\1\333\52\54"+
    "\1\0\2\54\10\0\26\54\1\334\31\54\1\0\2\54"+
    "\10\0\21\54\1\335\36\54\1\0\2\54\10\0\13\54"+
    "\1\336\44\54\1\0\2\54\10\0\30\54\1\337\27\54"+
    "\1\0\2\54\10\0\25\54\1\340\32\54\1\0\2\54"+
    "\10\0\6\54\1\341\51\54\1\0\2\54\10\0\14\54"+
    "\1\342\43\54\1\0\2\54\32\0\1\343\73\0\1\344"+
    "\65\0\1\345\73\0\1\346\54\0\1\347\111\0\1\350"+
    "\52\0\1\351\116\0\1\352\47\0\1\353\30\0\1\354"+
    "\100\0\1\355\61\0\1\356\43\0\1\357\34\0\1\360"+
    "\76\0\1\355\62\0\1\361\60\0\1\362\76\0\1\363"+
    "\52\0\1\364\100\0\1\365\61\0\13\54\1\366\44\54"+
    "\1\0\2\54\10\0\37\54\1\367\20\54\1\0\2\54"+
    "\10\0\41\54\1\145\16\54\1\0\2\54\10\0\30\54"+
    "\1\330\27\54\1\0\2\54\10\0\5\54\1\370\52\54"+
    "\1\0\2\54\10\0\34\54\1\371\23\54\1\0\2\54"+
    "\10\0\40\54\1\145\17\54\1\0\2\54\10\0\26\54"+
    "\1\323\31\54\1\0\2\54\10\0\1\54\1\372\56\54"+
    "\1\0\2\54\10\0\34\54\1\373\23\54\1\0\2\54"+
    "\10\0\4\54\1\145\53\54\1\0\2\54\10\0\17\54"+
    "\1\374\1\375\37\54\1\0\2\54\10\0\3\54\1\376"+
    "\54\54\1\0\2\54\10\0\40\54\1\377\17\54\1\0"+
    "\2\54\10\0\1\u0100\57\54\1\0\2\54\10\0\37\54"+
    "\1\u0101\20\54\1\0\2\54\10\0\12\54\1\145\45\54"+
    "\1\0\2\54\10\0\23\54\1\u0102\1\u0103\33\54\1\0"+
    "\2\54\10\0\11\54\1\u0104\46\54\1\0\2\54\10\0"+
    "\41\54\1\u0105\16\54\1\0\2\54\10\0\4\54\1\u0106"+
    "\53\54\1\0\2\54\10\0\1\54\1\u0107\30\54\1\u0108"+
    "\25\54\1\0\2\54\10\0\33\54\1\u0109\24\54\1\0"+
    "\2\54\10\0\3\54\1\u010a\54\54\1\0\2\54\10\0"+
    "\21\54\1\145\36\54\1\0\2\54\10\0\6\54\1\u010b"+
    "\10\54\1\217\40\54\1\0\2\54\10\0\17\54\1\u010c"+
    "\40\54\1\0\2\54\10\0\2\54\1\u010d\3\54\1\u010e"+
    "\51\54\1\0\2\54\10\0\20\54\1\u010f\37\54\1\0"+
    "\2\54\10\0\6\54\1\u0110\51\54\1\0\2\54\10\0"+
    "\20\54\1\u0111\37\54\1\0\2\54\10\0\20\54\1\u0112"+
    "\37\54\1\0\2\54\10\0\33\54\1\145\24\54\1\0"+
    "\2\54\10\0\12\54\1\u0113\45\54\1\0\2\54\10\0"+
    "\1\u0114\34\54\1\u0115\22\54\1\0\2\54\10\0\36\54"+
    "\1\u0116\21\54\1\0\2\54\10\0\11\54\1\u0117\46\54"+
    "\1\0\2\54\10\0\25\54\1\145\32\54\1\0\2\54"+
    "\10\0\14\54\1\u0118\6\54\1\220\34\54\1\0\2\54"+
    "\10\0\23\54\1\u0119\34\54\1\0\2\54\10\0\10\54"+
    "\1\u011a\3\54\1\u011b\43\54\1\0\2\54\10\0\24\54"+
    "\1\u011c\33\54\1\0\2\54\10\0\14\54\1\u011d\43\54"+
    "\1\0\2\54\10\0\24\54\1\u011e\33\54\1\0\2\54"+
    "\10\0\24\54\1\u011f\33\54\1\0\2\54\10\0\36\54"+
    "\1\145\21\54\1\0\2\54\10\0\17\54\1\u0120\40\54"+
    "\1\0\2\54\10\0\16\54\1\145\41\54\1\0\2\54"+
    "\10\0\20\54\1\145\37\54\1\0\2\54\10\0\42\54"+
    "\1\u0121\15\54\1\0\2\54\10\0\1\54\1\u0122\56\54"+
    "\1\0\2\54\10\0\23\54\1\u0123\34\54\1\0\2\54"+
    "\10\0\22\54\1\145\35\54\1\0\2\54\10\0\24\54"+
    "\1\145\33\54\1\0\2\54\10\0\43\54\1\u0124\14\54"+
    "\1\0\2\54\10\0\1\u0125\57\54\1\0\2\54\10\0"+
    "\7\54\1\145\50\54\1\0\2\54\10\0\6\54\1\u0126"+
    "\51\54\1\0\2\54\10\0\3\54\1\u0127\54\54\1\0"+
    "\2\54\10\0\15\54\1\145\42\54\1\0\2\54\10\0"+
    "\14\54\1\u0128\43\54\1\0\2\54\10\0\11\54\1\u0129"+
    "\46\54\1\0\2\54\10\0\5\54\1\323\52\54\1\0"+
    "\2\54\10\0\13\54\1\330\44\54\1\0\2\54\51\0"+
    "\1\u012a\67\0\1\u012b\74\0\1\u012c\65\0\1\u012d\44\0"+
    "\1\u012e\117\0\1\u012f\53\0\1\u0130\114\0\1\u0131\55\0"+
    "\1\u0132\71\0\1\u0133\113\0\1\u0134\56\0\1\u0135\71\0"+
    "\1\u0136\110\0\1\u0137\40\0\1\u0138\100\0\1\u0139\115\0"+
    "\1\u013a\73\0\1\u013b\31\0\14\54\1\u013c\43\54\1\0"+
    "\2\54\10\0\15\54\1\263\42\54\1\0\2\54\10\0"+
    "\6\54\1\u013d\51\54\1\0\2\54\10\0\7\54\1\255"+
    "\50\54\1\0\2\54\10\0\5\54\1\u013e\52\54\1\0"+
    "\2\54\10\0\33\54\1\u0106\24\54\1\0\2\54\10\0"+
    "\6\54\1\u013f\51\54\1\0\2\54\10\0\32\54\1\u0140"+
    "\25\54\1\0\2\54\10\0\6\54\1\u0141\51\54\1\0"+
    "\2\54\10\0\6\54\1\u0142\51\54\1\0\2\54\10\0"+
    "\13\54\1\u0143\44\54\1\0\2\54\10\0\36\54\1\u0113"+
    "\21\54\1\0\2\54\10\0\14\54\1\u0144\43\54\1\0"+
    "\2\54\10\0\35\54\1\u0145\22\54\1\0\2\54\10\0"+
    "\14\54\1\u0146\43\54\1\0\2\54\10\0\14\54\1\u0147"+
    "\43\54\1\0\2\54\10\0\5\54\1\145\52\54\1\0"+
    "\2\54\10\0\20\54\1\u0148\37\54\1\0\2\54\10\0"+
    "\17\54\1\u0149\40\54\1\0\2\54\10\0\34\54\1\u014a"+
    "\23\54\1\0\2\54\10\0\17\54\1\255\40\54\1\0"+
    "\2\54\10\0\4\54\1\273\53\54\1\0\2\54\10\0"+
    "\44\54\1\145\13\54\1\0\2\54\10\0\6\54\1\u014b"+
    "\51\54\1\0\2\54\10\0\2\54\1\145\55\54\1\0"+
    "\2\54\10\0\6\54\1\u010e\51\54\1\0\2\54\10\0"+
    "\47\54\1\u014c\10\54\1\0\2\54\10\0\17\54\1\u014d"+
    "\40\54\1\0\2\54\10\0\4\54\1\u014e\53\54\1\0"+
    "\2\54\10\0\13\54\1\145\44\54\1\0\2\54\10\0"+
    "\24\54\1\u014f\33\54\1\0\2\54\10\0\23\54\1\u0150"+
    "\34\54\1\0\2\54\10\0\37\54\1\u0151\20\54\1\0"+
    "\2\54\10\0\23\54\1\263\34\54\1\0\2\54\10\0"+
    "\12\54\1\310\45\54\1\0\2\54\10\0\45\54\1\145"+
    "\12\54\1\0\2\54\10\0\14\54\1\u0152\43\54\1\0"+
    "\2\54\10\0\10\54\1\145\47\54\1\0\2\54\10\0"+
    "\14\54\1\u011b\43\54\1\0\2\54\10\0\51\54\1\u0153"+
    "\6\54\1\0\2\54\10\0\23\54\1\u0154\34\54\1\0"+
    "\2\54\10\0\12\54\1\u0155\45\54\1\0\2\54\10\0"+
    "\7\54\1\u0156\50\54\1\0\2\54\10\0\26\54\1\u0157"+
    "\31\54\1\0\2\54\10\0\42\54\1\145\15\54\1\0"+
    "\2\54\10\0\15\54\1\u0158\42\54\1\0\2\54\10\0"+
    "\30\54\1\u0159\27\54\1\0\2\54\10\0\43\54\1\145"+
    "\14\54\1\0\2\54\10\0\32\54\1\255\25\54\1\0"+
    "\2\54\10\0\40\54\1\u015a\17\54\1\0\2\54\10\0"+
    "\35\54\1\263\22\54\1\0\2\54\10\0\41\54\1\u015b"+
    "\16\54\1\0\2\54\34\0\1\u015c\46\0\1\u015d\112\0"+
    "\1\u015e\53\0\1\u015f\77\0\1\u0160\104\0\1\u0161\66\0"+
    "\1\u0162\102\0\1\u0163\67\0\1\u0164\104\0\1\u0165\57\0"+
    "\1\u0166\77\0\1\u0167\103\0\1\u0168\60\0\1\u0169\51\0"+
    "\1\u016a\100\0\1\u016b\101\0\1\u016c\76\0\1\u016c\46\0"+
    "\12\54\1\u016d\45\54\1\0\2\54\10\0\4\54\1\u016e"+
    "\53\54\1\0\2\54\10\0\6\54\1\u016f\51\54\1\0"+
    "\2\54\10\0\4\54\1\u0170\53\54\1\0\2\54\10\0"+
    "\20\54\1\u0171\37\54\1\0\2\54\10\0\17\54\1\323"+
    "\40\54\1\0\2\54\10\0\1\54\1\u0172\56\54\1\0"+
    "\2\54\10\0\14\54\1\u0173\43\54\1\0\2\54\10\0"+
    "\12\54\1\u0174\45\54\1\0\2\54\10\0\24\54\1\u0175"+
    "\33\54\1\0\2\54\10\0\23\54\1\330\34\54\1\0"+
    "\2\54\10\0\1\u0176\57\54\1\0\2\54\10\0\21\54"+
    "\1\u0177\36\54\1\0\2\54\10\0\33\54\1\u0178\24\54"+
    "\1\0\2\54\10\0\20\54\1\u0179\37\54\1\0\2\54"+
    "\10\0\40\54\1\323\17\54\1\0\2\54\10\0\33\54"+
    "\1\u017a\24\54\1\0\2\54\10\0\4\54\1\u017b\53\54"+
    "\1\0\2\54\10\0\26\54\1\u017c\31\54\1\0\2\54"+
    "\10\0\25\54\1\u017d\32\54\1\0\2\54\10\0\36\54"+
    "\1\u017e\21\54\1\0\2\54\10\0\24\54\1\u017f\33\54"+
    "\1\0\2\54\10\0\41\54\1\330\16\54\1\0\2\54"+
    "\10\0\36\54\1\u0180\21\54\1\0\2\54\10\0\12\54"+
    "\1\u0181\45\54\1\0\2\54\10\0\30\54\1\u0182\27\54"+
    "\1\0\2\54\10\0\3\54\1\u0183\54\54\1\0\2\54"+
    "\10\0\16\54\1\u0184\41\54\1\0\2\54\10\0\11\54"+
    "\1\u0185\46\54\1\0\2\54\10\0\22\54\1\u0186\35\54"+
    "\1\0\2\54\10\0\20\54\1\u0187\37\54\1\0\2\54"+
    "\10\0\24\54\1\u0187\33\54\1\0\2\54\63\0\1\355"+
    "\32\0\1\u0131\131\0\1\355\25\0\1\u012f\74\0\1\u0188"+
    "\102\0\1\355\70\0\1\u0189\100\0\1\355\52\0\1\u018a"+
    "\123\0\1\u016c\116\0\1\u018b\23\0\1\u018c\120\0\1\u016c"+
    "\113\0\1\u018d\17\0\1\u018e\100\0\1\u018f\57\0\11\54"+
    "\1\330\46\54\1\0\2\54\10\0\3\54\1\323\54\54"+
    "\1\0\2\54\10\0\7\54\1\u0190\50\54\1\0\2\54"+
    "\10\0\26\54\1\u0191\31\54\1\0\2\54\10\0\17\54"+
    "\1\145\40\54\1\0\2\54\10\0\6\54\1\u0106\51\54"+
    "\1\0\2\54\10\0\15\54\1\u0192\42\54\1\0\2\54"+
    "\10\0\30\54\1\u0193\27\54\1\0\2\54\10\0\23\54"+
    "\1\145\34\54\1\0\2\54\10\0\14\54\1\u0113\43\54"+
    "\1\0\2\54\10\0\3\54\1\u0194\54\54\1\0\2\54"+
    "\10\0\34\54\1\u0187\23\54\1\0\2\54\10\0\5\54"+
    "\1\u0140\52\54\1\0\2\54\10\0\40\54\1\u0195\17\54"+
    "\1\0\2\54\10\0\33\54\1\251\24\54\1\0\2\54"+
    "\10\0\6\54\1\371\51\54\1\0\2\54\10\0\11\54"+
    "\1\u0196\46\54\1\0\2\54\10\0\37\54\1\u0187\20\54"+
    "\1\0\2\54\10\0\13\54\1\u0145\44\54\1\0\2\54"+
    "\10\0\41\54\1\u0197\16\54\1\0\2\54\10\0\36\54"+
    "\1\245\21\54\1\0\2\54\10\0\14\54\1\367\43\54"+
    "\1\0\2\54\10\0\5\54\1\u0198\52\54\1\0\2\54"+
    "\10\0\33\54\1\u0199\24\54\1\0\2\54\10\0\13\54"+
    "\1\u019a\44\54\1\0\2\54\10\0\36\54\1\u019b\21\54"+
    "\1\0\2\54\14\0\1\u016c\100\0\1\u016c\77\0\1\u013a"+
    "\71\0\1\u019c\41\0\1\u018b\35\0\1\u013b\71\0\1\u019d"+
    "\35\0\1\u018d\20\0\1\u019e\100\0\1\u019f\56\0\4\54"+
    "\1\u0187\53\54\1\0\2\54\10\0\6\54\1\u01a0\51\54"+
    "\1\0\2\54\10\0\12\54\1\u0187\45\54\1\0\2\54"+
    "\10\0\14\54\1\u01a1\43\54\1\0\2\54\10\0\17\54"+
    "\1\u015a\40\54\1\0\2\54\10\0\20\54\1\u01a2\37\54"+
    "\1\0\2\54\10\0\23\54\1\u015b\34\54\1\0\2\54"+
    "\10\0\24\54\1\u01a3\33\54\1\0\2\54\10\0\6\54"+
    "\1\u01a4\51\54\1\0\2\54\10\0\1\54\1\323\56\54"+
    "\1\0\2\54\10\0\14\54\1\u01a5\43\54\1\0\2\54"+
    "\10\0\1\330\57\54\1\0\2\54\27\0\1\u01a6\76\0"+
    "\1\u01a7\53\0\1\u013a\100\0\1\u013b\60\0\1\54\1\145"+
    "\56\54\1\0\2\54\10\0\1\145\57\54\1\0\2\54"+
    "\10\0\4\54\1\u0199\53\54\1\0\2\54\10\0\12\54"+
    "\1\u019b\45\54\1\0\2\54\10\0\4\54\1\u015a\53\54"+
    "\1\0\2\54\10\0\12\54\1\u015b\45\54\1\0\2\54"+
    "\30\0\1\u01a8\76\0\1\u01a9\47\0\1\u01aa\71\0\1\u01ab"+
    "\100\0\1\u01ac\100\0\1\u01ad\104\0\1\u01ae\74\0\1\u01af"+
    "\50\0\1\u01b0\100\0\1\u01b1\65\0\1\u01b2\100\0\1\u01b3"+
    "\61\0\1\355\100\0\1\355\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24485];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\22\1\3\11\52\1\24\0\65\1\22\0"+
    "\100\1\12\0\1\11\10\0\64\1\22\0\40\1\20\0"+
    "\1\11\33\1\10\0\14\1\4\0\6\1\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM";
	
	
	public F77NAMEKeyWords() {
    }

	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77NAMEKeyWords(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 11: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 12: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 13: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 14: break;
          case 5: 
            { 
            }
          case 15: break;
          case 6: 
            { location = location + " " + yytext();
								 yybegin(COMMENT);
            }
          case 16: break;
          case 7: 
            { this.setError(location,"The variable " + yytext() + " is a keyword in Fortran77 language.", yyline + 1);
            }
          case 17: break;
          case 8: 
            { yybegin(CLE);
            }
          case 18: break;
          case 9: 
            { location = yytext();
								 yybegin(NAMING);
            }
          case 19: break;
          case 10: 
            { location = yytext(); yybegin(NAMING);
            }
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
