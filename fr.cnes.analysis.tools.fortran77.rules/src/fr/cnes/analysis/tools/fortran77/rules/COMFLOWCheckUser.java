/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.FLOW.CheckUser rule. 	*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMFLOWCheckUser.lex</tt>
 */
public class COMFLOWCheckUser extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int CHECK_USER = 10;
  public static final int NAMING_PROGRAM = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\35\1\36\1\37\1\36\22\0\1\26\1\1\1\31"+
    "\4\0\1\30\1\33\1\34\1\3\5\0\12\23\7\0\1\22\1\17"+
    "\1\2\1\15\1\14\1\4\1\32\1\27\1\24\2\27\1\21\1\20"+
    "\1\6\1\11\1\12\1\27\1\13\1\25\1\7\1\5\5\27\4\0"+
    "\1\23\1\0\1\22\1\17\1\2\1\15\1\14\1\4\1\32\1\27"+
    "\1\24\2\27\1\21\1\20\1\6\1\11\1\12\1\27\1\13\1\25"+
    "\1\7\1\5\5\27\12\0\1\36\252\0\2\10\115\0\1\16\u1ea8\0"+
    "\1\36\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\5\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\2\2\13\12\12\1\6"+
    "\1\5\1\14\7\6\1\15\1\6\1\16\1\17\22\0"+
    "\1\20\10\0\1\21\125\0\1\22\13\0\1\23\7\0"+
    "\1\24\4\0\1\25\6\0\1\6\3\0\1\26\6\0"+
    "\1\27\14\0\1\30\31\0\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\340\0\340\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\340"+
    "\0\340\0\340\0\340\0\u01a0\0\340\0\u01c0\0\u01c0\0\u01e0"+
    "\0\u01c0\0\u0200\0\u01e0\0\u0220\0\u0240\0\u0260\0\u0280\0\u02a0"+
    "\0\u02c0\0\u02e0\0\u0300\0\u01c0\0\u01c0\0\340\0\u0320\0\u0340"+
    "\0\u0360\0\u0380\0\u03a0\0\u03c0\0\u03e0\0\340\0\u0400\0\u0420"+
    "\0\340\0\u0440\0\u0460\0\u0480\0\u04a0\0\u04c0\0\u04e0\0\u0500"+
    "\0\u0520\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0\0\u05e0\0\u0600"+
    "\0\u0620\0\u0640\0\u0660\0\340\0\u0680\0\u06a0\0\u06c0\0\u06e0"+
    "\0\u0700\0\u0720\0\u0740\0\u03c0\0\340\0\u03e0\0\u0760\0\u0780"+
    "\0\u07a0\0\u07c0\0\u07e0\0\u0800\0\u0820\0\u0840\0\u0860\0\u0880"+
    "\0\u08a0\0\u08c0\0\u08e0\0\u0900\0\u0920\0\u0940\0\u0960\0\u0980"+
    "\0\u09a0\0\u09c0\0\u09e0\0\u0a00\0\u0a20\0\u0a40\0\u0a60\0\u0a80"+
    "\0\u0aa0\0\u0ac0\0\u0ae0\0\u0b00\0\u0b20\0\u0b40\0\u0b60\0\u0b80"+
    "\0\u0ba0\0\u0bc0\0\u0be0\0\u0c00\0\u0c20\0\u0c40\0\u0c60\0\u0c80"+
    "\0\u0ca0\0\u0cc0\0\u0ce0\0\u0d00\0\u0d20\0\u0d40\0\u0d60\0\u0d80"+
    "\0\u0da0\0\u0dc0\0\u0de0\0\u0e00\0\u0e20\0\u0e40\0\u0e60\0\u0e80"+
    "\0\u0ea0\0\u0ec0\0\u0ee0\0\u0f00\0\u0f20\0\u0f40\0\u0f60\0\u0f80"+
    "\0\u0fa0\0\u0fc0\0\u0fe0\0\u1000\0\u1020\0\u1040\0\u1060\0\u1080"+
    "\0\u10a0\0\u10c0\0\u10e0\0\u1100\0\u1120\0\u1140\0\u1160\0\u1180"+
    "\0\u11a0\0\u11c0\0\340\0\u11e0\0\u1200\0\u1220\0\u1240\0\u1260"+
    "\0\u1280\0\u12a0\0\u12c0\0\u12e0\0\u1300\0\u1320\0\u1340\0\u1360"+
    "\0\u1380\0\u13a0\0\u13c0\0\u13e0\0\u1400\0\u1420\0\340\0\u1440"+
    "\0\u1460\0\u1480\0\u14a0\0\340\0\u14c0\0\u14e0\0\u1500\0\u1520"+
    "\0\u1540\0\u1560\0\u1340\0\u1580\0\u15a0\0\u15c0\0\340\0\u15e0"+
    "\0\u1600\0\u1620\0\u1640\0\u1660\0\u1680\0\340\0\u16a0\0\u16c0"+
    "\0\u16e0\0\u1700\0\u1720\0\u1740\0\u1760\0\u1780\0\u17a0\0\u17c0"+
    "\0\u17e0\0\u1800\0\340\0\u1820\0\u1840\0\u1860\0\u1880\0\u18a0"+
    "\0\u18c0\0\u18e0\0\u1900\0\u1920\0\u1940\0\u1960\0\u1980\0\u19a0"+
    "\0\u19c0\0\u19e0\0\u1a00\0\u1a20\0\u1a40\0\u1a60\0\u1a80\0\u1aa0"+
    "\0\u1ac0\0\u1ae0\0\u1b00\0\u1b20\0\u0640\0\u0680";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\2\12\1\13\3\10\1\14\1\10\1\15"+
    "\3\10\1\16\1\10\1\17\3\10\1\14\1\16\7\10"+
    "\1\20\2\21\1\22\1\11\33\22\1\23\2\21\1\22"+
    "\1\11\1\24\1\22\4\24\1\22\5\24\1\22\4\24"+
    "\1\22\2\24\1\22\1\24\2\22\1\24\2\22\1\25"+
    "\2\21\1\26\1\27\1\30\1\31\1\32\3\33\1\34"+
    "\1\33\1\35\3\33\1\36\1\33\1\37\3\33\1\40"+
    "\1\41\1\26\1\33\1\42\1\43\1\33\2\26\1\44"+
    "\2\45\1\22\1\11\2\46\1\47\3\22\1\50\1\22"+
    "\1\51\3\22\1\52\1\22\1\53\3\22\1\50\1\52"+
    "\2\22\1\54\1\55\3\22\1\56\2\21\1\22\1\11"+
    "\30\22\1\57\3\22\2\21\1\22\1\11\1\60\1\22"+
    "\4\60\1\22\5\60\1\22\4\60\1\22\2\60\1\22"+
    "\1\60\2\22\1\60\2\22\1\61\2\21\45\0\1\62"+
    "\40\0\1\63\44\0\1\64\31\0\1\65\43\0\1\66"+
    "\30\0\1\24\1\0\4\24\1\0\5\24\1\0\7\24"+
    "\1\0\1\24\2\0\1\24\25\0\1\67\23\0\1\70"+
    "\3\0\1\71\1\0\1\72\3\0\1\73\1\0\1\74"+
    "\3\0\1\71\1\73\16\0\1\70\1\75\2\0\1\71"+
    "\1\0\1\72\3\0\1\73\1\0\1\74\3\0\1\71"+
    "\1\73\20\0\1\76\11\0\1\67\23\0\1\70\3\0"+
    "\1\71\1\0\1\72\1\77\2\0\1\73\1\0\1\74"+
    "\3\0\1\71\1\73\17\0\1\100\12\0\1\67\23\0"+
    "\1\70\3\0\1\71\1\101\1\72\3\0\1\73\1\0"+
    "\1\74\3\0\1\71\1\73\16\0\1\70\1\0\1\76"+
    "\1\0\1\71\1\0\1\72\3\0\1\73\1\0\1\74"+
    "\3\0\1\71\1\73\16\0\1\70\1\100\2\0\1\71"+
    "\1\0\1\72\3\0\1\73\1\0\1\74\3\0\1\71"+
    "\1\73\12\0\20\102\1\103\7\102\1\104\7\102\20\105"+
    "\1\106\10\105\1\104\6\105\5\0\1\107\40\0\1\110"+
    "\44\0\1\111\31\0\1\112\43\0\1\113\26\0\30\114"+
    "\1\115\7\114\31\116\1\115\6\116\14\0\1\117\25\0"+
    "\1\60\1\0\4\60\1\0\5\60\1\0\7\60\1\0"+
    "\1\60\2\0\1\60\13\0\1\120\40\0\1\121\41\0"+
    "\1\122\45\0\1\123\35\0\1\124\33\0\1\125\33\0"+
    "\1\126\40\0\1\127\44\0\1\130\31\0\1\131\43\0"+
    "\1\132\34\0\1\133\40\0\1\134\41\0\1\135\45\0"+
    "\1\136\35\0\1\137\22\0\30\102\1\104\20\102\1\140"+
    "\16\102\1\104\7\102\31\105\1\104\17\105\1\141\17\105"+
    "\1\104\6\105\6\0\1\142\40\0\1\143\41\0\1\144"+
    "\45\0\1\145\35\0\1\146\31\0\1\147\32\0\1\150"+
    "\51\0\1\151\25\0\1\152\27\0\1\153\20\0\1\154"+
    "\31\0\1\155\47\0\1\156\30\0\1\157\40\0\1\160"+
    "\41\0\1\161\45\0\1\162\35\0\1\163\24\0\1\164"+
    "\51\0\1\165\25\0\1\166\27\0\1\167\20\0\1\170"+
    "\31\0\1\171\32\0\15\102\1\172\12\102\1\104\7\102"+
    "\15\105\1\173\13\105\1\104\6\105\2\0\1\174\51\0"+
    "\1\175\25\0\1\176\27\0\1\177\20\0\1\200\31\0"+
    "\1\201\37\0\1\202\41\0\1\203\43\0\1\204\40\0"+
    "\1\205\36\0\1\206\35\0\1\207\47\0\1\210\23\0"+
    "\1\211\34\0\1\212\51\0\1\213\25\0\1\214\50\0"+
    "\1\215\31\0\1\216\41\0\1\217\43\0\1\220\40\0"+
    "\1\221\36\0\1\222\35\0\1\223\47\0\1\224\16\0"+
    "\5\102\1\225\22\102\1\104\7\102\5\105\1\226\23\105"+
    "\1\104\6\105\7\0\1\227\43\0\1\230\40\0\1\231"+
    "\36\0\1\232\35\0\1\233\47\0\1\234\26\0\1\235"+
    "\13\0\1\235\23\0\1\236\13\0\1\236\17\0\1\237"+
    "\50\0\1\240\44\0\1\241\22\0\1\242\46\0\1\243"+
    "\44\0\1\244\25\0\1\245\43\0\1\246\40\0\1\247"+
    "\34\0\1\250\47\0\1\251\26\0\1\252\13\0\1\252"+
    "\17\0\1\253\50\0\1\254\44\0\1\255\22\0\1\256"+
    "\46\0\1\257\23\0\21\102\1\260\6\102\1\104\7\102"+
    "\21\105\1\261\7\105\1\104\6\105\10\0\1\262\13\0"+
    "\1\262\17\0\1\263\50\0\1\264\44\0\1\265\22\0"+
    "\1\266\46\0\1\267\40\0\1\270\33\0\1\271\50\0"+
    "\1\272\22\0\1\273\52\0\1\274\26\0\1\275\44\0"+
    "\1\276\33\0\1\277\13\0\1\277\17\0\1\300\50\0"+
    "\1\301\27\0\1\302\46\0\1\303\34\0\1\304\50\0"+
    "\1\305\22\0\1\306\52\0\1\307\26\0\1\310\32\0"+
    "\1\22\1\0\4\22\1\0\5\22\1\0\7\22\1\0"+
    "\1\22\2\0\1\22\5\0\14\102\1\311\13\102\1\104"+
    "\7\102\14\105\1\312\14\105\1\104\6\105\11\0\1\313"+
    "\50\0\1\314\22\0\1\315\52\0\1\316\26\0\1\317"+
    "\56\0\1\270\4\0\1\320\3\0\1\270\6\0\1\243"+
    "\33\0\1\210\50\0\1\210\34\0\1\321\13\0\1\321"+
    "\25\0\1\322\13\0\1\276\10\0\1\276\11\0\1\323"+
    "\50\0\1\324\22\0\1\325\41\0\1\326\36\0\1\257"+
    "\33\0\1\224\50\0\1\224\34\0\1\327\13\0\1\327"+
    "\13\0\12\102\1\330\13\102\1\311\1\102\1\104\6\102"+
    "\1\311\12\105\1\331\13\105\1\312\2\105\1\104\5\105"+
    "\1\312\6\0\1\267\33\0\1\234\50\0\1\234\34\0"+
    "\1\332\13\0\1\332\41\0\1\320\5\0\1\333\2\0"+
    "\1\320\6\0\1\210\44\0\1\334\32\0\1\303\33\0"+
    "\1\251\50\0\1\251\34\0\1\335\13\0\1\335\21\0"+
    "\1\224\31\0\13\102\1\336\14\102\1\104\7\102\13\105"+
    "\1\337\15\105\1\104\6\105\6\0\1\234\42\0\1\340"+
    "\34\0\1\251\31\0\11\102\1\341\16\102\1\104\7\102"+
    "\11\105\1\342\17\105\1\104\6\105\2\0\1\343\35\0"+
    "\2\102\1\344\25\102\1\104\7\102\2\105\1\345\26\105"+
    "\1\104\6\105\14\0\1\346\23\0\14\102\1\347\13\102"+
    "\1\104\7\102\14\105\1\350\14\105\1\104\6\105\15\0"+
    "\1\351\22\0\15\102\1\352\12\102\1\104\7\102\15\105"+
    "\1\353\13\105\1\104\6\105\5\0\1\354\32\0\5\102"+
    "\1\355\22\102\1\104\7\102\5\105\1\356\23\105\1\104"+
    "\6\105\13\0\1\357\24\0\13\102\1\360\14\102\1\104"+
    "\7\102\13\105\1\361\15\105\1\104\6\105\14\0\1\362"+
    "\23\0\14\102\1\363\13\102\1\104\7\102\14\105\1\364"+
    "\14\105\1\104\6\105\2\22\1\0\1\22\4\0\1\22"+
    "\5\0\1\22\7\0\1\22\1\0\2\22\1\0\5\22"+
    "\2\365\1\102\1\365\4\102\1\365\5\102\1\365\7\102"+
    "\1\365\1\102\1\104\1\365\1\102\5\365\2\366\1\105"+
    "\1\366\4\105\1\366\5\105\1\366\7\105\1\366\1\105"+
    "\1\366\1\104\1\105\5\366";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6976];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\3\11\5\1\4\11\1\1\1\11\20\1\1\11"+
    "\7\1\1\11\2\1\1\11\22\0\1\11\10\0\1\11"+
    "\125\0\1\11\13\0\1\1\7\0\1\11\4\0\1\11"+
    "\6\0\1\1\3\0\1\11\6\0\1\11\14\0\1\11"+
    "\31\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMFLOWCheckUser.class.getName());

	String location = "PROGRAM";
	boolean getuid = false;
	boolean prg = false;
	int line = 0;
	String parsedFileName;
	
	public COMFLOWCheckUser(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
		this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
		


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMFLOWCheckUser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	if(!getuid && prg){
	   LOGGER.fine("Setting error line "+(line+1)+" cause the user identity is not verified in the main program.");
	   setError(location,"The user identity is not verified in the main program.", line+1);
    }
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");   
			                     yybegin(LINE);
            }
          case 25: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\" )");
                    			yybegin(COMMENT);
            }
          case 26: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
			                     yybegin(COMMENT);
            }
          case 27: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");        
			                     yybegin(NEW_LINE);
            }
          case 28: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 29: break;
          case 6: 
            { 
            }
          case 30: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                    			yybegin(NEW_LINE);
            }
          case 31: break;
          case 8: 
            { location = location + " " + yytext(); 
							 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
							 yybegin(COMMENT);
            }
          case 32: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
			                 yybegin(NEW_LINE);
            }
          case 33: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");  
			                     yybegin(LINE);
            }
          case 34: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
			                     yybegin(COMMENT);
            }
          case 35: break;
          case 12: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
			                     yybegin(COMMENT);
            }
          case 36: break;
          case 13: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )"); 
                                yybegin(NEW_LINE);
            }
          case 37: break;
          case 14: 
            { location = "PROGRAM " + yytext(); 
							 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING_PROGRAM -> CHECK_USER (Transition : VAR \""+yytext()+"\" )");
							 yybegin(CHECK_USER);
            }
          case 38: break;
          case 15: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING_PROGRAM -> CHECK_USER (Transition : \\n )");
			                 yybegin(CHECK_USER);
            }
          case 39: break;
          case 16: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : STRING \""+yytext()+"\" )");
			                     yybegin(LINE);
            }
          case 40: break;
          case 17: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> LINE (Transition : STRING \""+yytext()+"\" )");
			                     yybegin(LINE);
            }
          case 41: break;
          case 18: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
			                     yybegin(NAMING);
            }
          case 42: break;
          case 19: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
			                     yybegin(NAMING);
            }
          case 43: break;
          case 20: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
			                     yybegin(NAMING);
            }
          case 44: break;
          case 21: 
            { line=yyline; prg=true;
                                LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING_PROGRAM (Transition : \"program\" )");
                                yybegin(NAMING_PROGRAM);
            }
          case 45: break;
          case 22: 
            { line=yyline; prg=true;
                                LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING_PROGRAM (Transition : \"program\" )");
                                yybegin(NAMING_PROGRAM);
            }
          case 46: break;
          case 23: 
            { line=yyline; prg=true; 
			                     LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING_PROGRAM (Transition : \"program\" )");
			                     yybegin(NAMING_PROGRAM);
            }
          case 47: break;
          case 24: 
            { getuid=true;
            }
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
