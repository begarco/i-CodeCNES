/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.DATA.NotUsed rule. 		*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMDATANotUsed.lex</tt>
 */
public class COMDATANotUsed extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int DECL_PARAMS = 10;
  public static final int DECLARATION = 12;
  public static final int DECL_VAR = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\40\1\41\1\41\1\41\22\0\1\26\1\1\1\35\4\0"+
    "\1\34\1\27\1\42\1\3\1\0\1\37\3\0\12\33\3\0\1\36"+
    "\3\0\1\21\1\17\1\2\1\15\1\14\1\4\1\20\1\24\1\31"+
    "\2\30\1\23\1\22\1\6\1\11\1\12\1\30\1\13\1\32\1\7"+
    "\1\5\2\30\1\25\2\30\4\0\1\33\1\0\1\21\1\17\1\2"+
    "\1\15\1\14\1\4\1\20\1\24\1\31\2\30\1\23\1\22\1\6"+
    "\1\11\1\12\1\30\1\13\1\32\1\7\1\5\2\30\1\25\2\30"+
    "\12\0\1\41\252\0\2\10\115\0\1\16\u1ea8\0\1\41\1\41\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\4\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\2\14\1\12\3\14"+
    "\1\12\4\14\2\12\2\14\1\6\3\14\1\6\4\14"+
    "\2\6\1\15\3\16\1\6\1\16\1\17\1\16\1\6"+
    "\1\20\1\21\1\22\4\0\3\14\2\0\3\14\1\0"+
    "\5\14\2\0\3\14\2\0\3\14\1\0\5\14\2\16"+
    "\1\0\2\16\4\0\3\14\2\0\3\14\1\0\10\14"+
    "\2\0\3\14\1\0\5\14\2\16\1\0\2\16\5\0"+
    "\3\14\2\0\2\14\1\23\1\14\1\0\1\14\1\0"+
    "\7\14\2\0\2\14\1\24\1\14\1\0\1\14\1\0"+
    "\4\14\3\16\1\0\2\16\5\0\3\14\2\0\2\14"+
    "\1\0\1\14\1\0\1\14\1\0\7\14\2\0\3\14"+
    "\1\0\1\14\1\0\4\14\3\16\1\0\2\16\4\0"+
    "\1\25\2\14\1\0\1\14\2\0\3\14\1\0\1\26"+
    "\1\0\6\14\1\0\1\14\2\0\3\14\1\0\1\27"+
    "\1\0\4\14\1\0\3\16\1\0\1\30\1\16\3\0"+
    "\1\23\1\0\1\14\1\23\1\0\1\14\2\0\2\14"+
    "\1\24\1\0\1\14\1\24\1\0\1\14\2\0\2\14"+
    "\1\0\2\16\1\0\1\16\1\0\1\26\1\31\2\0"+
    "\1\31\1\14\1\27\1\32\2\0\1\32\1\14\1\30"+
    "\1\0\1\16\21\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u0118\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u01c7\0\u0118\0\u0118\0\u01ea\0\u0118"+
    "\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302"+
    "\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a"+
    "\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532"+
    "\0\u038e\0\u03b1\0\u0118\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1"+
    "\0\u0118\0\u0604\0\u0627\0\u0118\0\u0118\0\u0118\0\u064a\0\u066d"+
    "\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785"+
    "\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d"+
    "\0\u038e\0\u03b1\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f"+
    "\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87"+
    "\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f"+
    "\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7"+
    "\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf"+
    "\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7"+
    "\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff"+
    "\0\u1022\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117"+
    "\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f"+
    "\0\u1252\0\u1275\0\u1298\0\u12bb\0\u12de\0\u1301\0\u1324\0\u1347"+
    "\0\u136a\0\u138d\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u120c\0\u143c"+
    "\0\u145f\0\u1482\0\u14a5\0\u14c8\0\u14eb\0\u150e\0\u1531\0\u1554"+
    "\0\u1577\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u1626\0\u1649\0\u166c"+
    "\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b\0\u173e\0\u1761\0\u1784"+
    "\0\u17a7\0\u17ca\0\u17ed\0\u1810\0\u1833\0\u1856\0\u1879\0\u189c"+
    "\0\u18bf\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991\0\u19b4"+
    "\0\u19d7\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u1aa9\0\u1acc"+
    "\0\u1aef\0\u1b12\0\u1b35\0\u1b58\0\u1b7b\0\u1b9e\0\u1bc1\0\u1be4"+
    "\0\u1c07\0\u1c2a\0\u1c4d\0\u0118\0\u1c70\0\u1c93\0\u1cb6\0\u1cd9"+
    "\0\u1cfc\0\u1d1f\0\u1d42\0\u1d65\0\u1d88\0\u1dab\0\u0230\0\u1dce"+
    "\0\u1df1\0\u1e14\0\u1e37\0\u1e5a\0\u1e7d\0\u1ea0\0\u1ec3\0\u1ee6"+
    "\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72\0\u1f95\0\u1fb8\0\u0230\0\u1fdb"+
    "\0\u1ffe\0\u2021\0\u2044\0\u2067\0\u208a\0\u20ad\0\u20d0\0\u20f3"+
    "\0\u2116\0\u0555\0\u2139\0\u215c\0\u217f\0\u21a2\0\u0230\0\u21c5"+
    "\0\u21e8\0\u0118\0\u220b\0\u222e\0\u2251\0\u2274\0\u2297\0\u22ba"+
    "\0\u0230\0\u22dd\0\u2300\0\u0118\0\u2323\0\u2346\0\u2369\0\u238c"+
    "\0\u23af\0\u23d2\0\u23f5\0\u2418\0\u243b\0\u245e\0\u2481\0\u24a4"+
    "\0\u0118\0\u0118\0\u24c7\0\u24ea\0\u0230\0\u250d\0\u0118\0\u0118"+
    "\0\u2530\0\u2553\0\u0230\0\u2576\0\u0118\0\u2599\0\u25bc\0\u25df"+
    "\0\u2602\0\u2625\0\u2648\0\u266b\0\u268e\0\u26b1\0\u26d4\0\u26f7"+
    "\0\u271a\0\u273d\0\u2760\0\u2783\0\u27a6\0\u27c9\0\u27ec\0\u280f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\2\13\1\14\5\11\1\15\3\11\1\16"+
    "\3\11\1\17\7\11\1\16\5\11\1\20\1\21\1\11"+
    "\1\22\1\12\36\22\1\23\1\21\2\22\1\12\1\24"+
    "\1\22\4\24\1\22\5\24\1\22\7\24\2\22\3\24"+
    "\5\22\1\25\1\21\1\22\1\26\1\12\1\27\1\30"+
    "\1\31\3\32\1\33\1\32\1\34\1\35\1\32\1\36"+
    "\1\37\3\32\1\40\1\41\2\32\2\26\1\32\1\42"+
    "\1\43\1\26\1\44\1\45\2\26\1\22\1\21\1\26"+
    "\1\22\1\12\1\46\1\22\1\47\3\32\1\50\1\32"+
    "\1\51\1\52\1\32\1\53\1\54\3\32\1\55\1\56"+
    "\2\32\2\22\1\32\1\57\1\60\1\22\1\61\1\62"+
    "\2\22\1\63\1\21\1\22\1\21\1\12\41\21\1\22"+
    "\1\12\1\64\1\22\1\65\3\64\1\22\1\64\1\66"+
    "\3\64\1\67\3\64\1\70\3\64\1\22\1\71\2\64"+
    "\1\72\1\22\1\61\1\62\1\73\1\22\1\74\1\21"+
    "\2\22\1\12\1\32\1\22\4\32\1\22\5\32\1\22"+
    "\7\32\1\22\1\75\3\32\7\22\1\76\50\0\1\77"+
    "\50\0\1\100\34\0\1\101\46\0\1\102\33\0\1\24"+
    "\1\0\4\24\1\0\5\24\1\0\7\24\2\0\4\24"+
    "\11\0\1\32\1\0\4\32\1\0\1\103\4\32\1\0"+
    "\5\32\1\104\1\32\2\0\4\32\11\0\1\32\1\0"+
    "\1\32\1\105\2\32\1\0\5\32\1\0\7\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\0\5\32\1\0"+
    "\7\32\2\0\4\32\15\0\1\106\13\0\1\107\22\0"+
    "\1\32\1\0\4\32\1\0\2\32\1\110\2\32\1\0"+
    "\7\32\2\0\4\32\11\0\1\32\1\0\4\32\1\0"+
    "\3\32\1\111\1\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\0\1\112\4\32\1\0\7\32"+
    "\2\0\4\32\14\0\1\113\37\0\1\32\1\0\4\32"+
    "\1\0\1\114\4\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\0\1\115\4\32\1\0\7\32"+
    "\2\0\4\32\11\0\1\32\1\0\2\32\1\116\1\32"+
    "\1\0\5\32\1\0\3\32\1\117\3\32\2\0\4\32"+
    "\11\0\1\32\1\0\1\32\1\120\2\32\1\0\5\32"+
    "\1\0\7\32\2\0\4\32\7\0\34\121\1\22\6\121"+
    "\35\122\1\22\5\122\2\0\1\32\1\0\4\32\1\0"+
    "\1\123\4\32\1\0\5\32\1\124\1\32\2\0\4\32"+
    "\11\0\1\32\1\0\1\32\1\125\2\32\1\0\5\32"+
    "\1\0\7\32\2\0\4\32\15\0\1\126\13\0\1\127"+
    "\22\0\1\32\1\0\4\32\1\0\2\32\1\130\2\32"+
    "\1\0\7\32\2\0\4\32\11\0\1\32\1\0\4\32"+
    "\1\0\3\32\1\131\1\32\1\0\7\32\2\0\4\32"+
    "\11\0\1\32\1\0\4\32\1\0\1\132\4\32\1\0"+
    "\7\32\2\0\4\32\14\0\1\133\37\0\1\32\1\0"+
    "\4\32\1\0\1\134\4\32\1\0\7\32\2\0\4\32"+
    "\11\0\1\32\1\0\4\32\1\0\1\135\4\32\1\0"+
    "\7\32\2\0\4\32\11\0\1\32\1\0\2\32\1\136"+
    "\1\32\1\0\5\32\1\0\3\32\1\137\3\32\2\0"+
    "\4\32\11\0\1\32\1\0\1\32\1\140\2\32\1\0"+
    "\5\32\1\0\7\32\2\0\4\32\11\0\1\64\1\0"+
    "\4\64\1\0\5\64\1\0\7\64\2\0\4\64\11\0"+
    "\1\64\1\0\1\64\1\141\2\64\1\0\5\64\1\0"+
    "\7\64\2\0\4\64\11\0\1\64\1\0\4\64\1\0"+
    "\2\64\1\142\2\64\1\0\7\64\2\0\4\64\14\0"+
    "\1\143\37\0\1\64\1\0\4\64\1\0\1\144\4\64"+
    "\1\0\7\64\2\0\4\64\11\0\1\64\1\0\1\64"+
    "\1\145\2\64\1\0\5\64\1\0\7\64\2\0\4\64"+
    "\7\0\34\73\2\0\1\73\2\0\2\73\6\0\1\146"+
    "\45\0\1\147\50\0\1\150\40\0\1\151\27\0\1\32"+
    "\1\0\4\32\1\0\5\32\1\0\3\32\1\152\3\32"+
    "\2\0\4\32\11\0\1\32\1\0\4\32\1\0\5\32"+
    "\1\0\2\32\1\153\4\32\2\0\4\32\11\0\1\32"+
    "\1\0\2\32\1\154\1\32\1\0\5\32\1\0\7\32"+
    "\2\0\4\32\16\0\1\155\45\0\1\156\32\0\1\32"+
    "\1\0\4\32\1\0\1\157\4\32\1\0\7\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\0\5\32\1\0"+
    "\2\32\1\160\4\32\2\0\4\32\11\0\1\32\1\0"+
    "\1\32\1\161\2\32\1\0\5\32\1\0\7\32\2\0"+
    "\4\32\26\0\1\162\25\0\1\32\1\0\4\32\1\0"+
    "\4\32\1\163\1\0\7\32\2\0\4\32\11\0\1\32"+
    "\1\0\4\32\1\0\5\32\1\0\1\32\1\164\5\32"+
    "\2\0\4\32\11\0\1\32\1\0\3\32\1\165\1\0"+
    "\5\32\1\0\7\32\2\0\4\32\11\0\1\32\1\0"+
    "\4\32\1\0\1\32\1\166\3\32\1\0\7\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\0\5\32\1\0"+
    "\1\167\6\32\2\0\4\32\11\0\1\32\1\0\4\32"+
    "\1\0\5\32\1\0\3\32\1\170\3\32\2\0\4\32"+
    "\11\0\1\32\1\0\4\32\1\0\5\32\1\0\2\32"+
    "\1\171\4\32\2\0\4\32\11\0\1\32\1\0\2\32"+
    "\1\172\1\32\1\0\5\32\1\0\7\32\2\0\4\32"+
    "\16\0\1\173\45\0\1\174\32\0\1\32\1\0\4\32"+
    "\1\0\1\175\4\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\0\5\32\1\0\2\32\1\176"+
    "\4\32\2\0\4\32\11\0\1\32\1\0\1\32\1\177"+
    "\2\32\1\0\5\32\1\0\7\32\2\0\4\32\26\0"+
    "\1\200\25\0\1\32\1\0\4\32\1\0\4\32\1\201"+
    "\1\0\7\32\2\0\4\32\11\0\1\32\1\0\4\32"+
    "\1\0\5\32\1\0\1\32\1\202\5\32\2\0\4\32"+
    "\11\0\1\32\1\0\3\32\1\203\1\0\5\32\1\0"+
    "\7\32\2\0\4\32\11\0\1\32\1\0\4\32\1\0"+
    "\1\32\1\204\3\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\0\5\32\1\0\1\205\6\32"+
    "\2\0\4\32\11\0\1\64\1\0\2\64\1\206\1\64"+
    "\1\0\5\64\1\0\7\64\2\0\4\64\11\0\1\64"+
    "\1\0\4\64\1\0\1\207\4\64\1\0\7\64\2\0"+
    "\4\64\26\0\1\210\25\0\1\64\1\0\4\64\1\0"+
    "\4\64\1\211\1\0\7\64\2\0\4\64\11\0\1\64"+
    "\1\0\4\64\1\0\5\64\1\0\1\212\6\64\2\0"+
    "\4\64\11\0\1\213\42\0\1\214\15\0\1\215\35\0"+
    "\1\216\34\0\1\217\37\0\1\32\1\0\4\32\1\0"+
    "\1\32\1\220\3\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\0\2\32\1\221\2\32\1\0"+
    "\7\32\2\0\4\32\11\0\1\222\1\0\4\32\1\0"+
    "\5\32\1\0\7\32\2\0\4\32\23\0\1\223\51\0"+
    "\1\224\21\0\1\225\1\0\4\32\1\0\5\32\1\0"+
    "\1\32\1\226\5\32\2\0\4\32\11\0\1\32\1\0"+
    "\4\32\1\0\5\32\1\0\4\32\1\227\2\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\0\5\32\1\0"+
    "\1\230\6\32\2\0\4\32\22\0\1\231\31\0\1\32"+
    "\1\0\1\32\1\232\2\32\1\0\5\32\1\0\7\32"+
    "\2\0\4\32\11\0\1\32\1\0\4\32\1\233\5\32"+
    "\1\0\7\32\2\0\1\32\1\234\2\32\11\0\1\32"+
    "\1\0\4\32\1\0\3\32\1\235\1\32\1\0\7\32"+
    "\2\0\4\32\11\0\1\32\1\0\4\32\1\0\5\32"+
    "\1\0\4\32\1\236\2\32\2\0\4\32\11\0\1\32"+
    "\1\0\4\32\1\0\2\32\1\237\2\32\1\0\7\32"+
    "\2\0\4\32\11\0\1\32\1\0\4\32\1\0\1\32"+
    "\1\240\3\32\1\0\7\32\2\0\4\32\11\0\1\32"+
    "\1\0\4\32\1\0\2\32\1\241\2\32\1\0\7\32"+
    "\2\0\4\32\11\0\1\242\1\0\4\32\1\0\5\32"+
    "\1\0\7\32\2\0\4\32\23\0\1\243\51\0\1\244"+
    "\21\0\1\245\1\0\4\32\1\0\5\32\1\0\1\32"+
    "\1\246\5\32\2\0\4\32\11\0\1\32\1\0\4\32"+
    "\1\0\5\32\1\0\4\32\1\247\2\32\2\0\4\32"+
    "\11\0\1\32\1\0\4\32\1\0\5\32\1\0\1\250"+
    "\6\32\2\0\4\32\22\0\1\251\31\0\1\32\1\0"+
    "\1\32\1\252\2\32\1\0\5\32\1\0\7\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\253\5\32\1\0"+
    "\7\32\2\0\1\32\1\254\2\32\11\0\1\32\1\0"+
    "\4\32\1\0\3\32\1\255\1\32\1\0\7\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\0\5\32\1\0"+
    "\4\32\1\256\2\32\2\0\4\32\11\0\1\32\1\0"+
    "\4\32\1\0\2\32\1\257\2\32\1\0\7\32\2\0"+
    "\4\32\11\0\1\260\1\0\4\64\1\0\5\64\1\0"+
    "\7\64\2\0\4\64\11\0\1\261\1\0\4\64\1\0"+
    "\5\64\1\0\1\64\1\262\5\64\2\0\4\64\22\0"+
    "\1\263\31\0\1\64\1\0\1\64\1\264\2\64\1\0"+
    "\5\64\1\0\7\64\2\0\4\64\11\0\1\64\1\0"+
    "\4\64\1\0\2\64\1\265\2\64\1\0\7\64\2\0"+
    "\4\64\16\0\1\266\47\0\1\267\41\0\1\270\40\0"+
    "\1\271\54\0\1\272\21\0\1\32\1\0\4\32\1\0"+
    "\5\32\1\0\4\32\1\273\2\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\0\5\32\1\0\2\32\1\274"+
    "\4\32\2\0\4\32\11\0\1\32\1\0\3\32\1\275"+
    "\1\0\5\32\1\0\7\32\2\0\4\32\27\0\1\276"+
    "\32\0\1\277\20\0\1\277\13\0\1\32\1\0\4\32"+
    "\1\0\3\32\1\300\1\32\1\0\7\32\2\0\4\32"+
    "\11\0\1\32\1\0\4\32\1\0\2\32\1\301\2\32"+
    "\1\0\7\32\2\0\4\32\11\0\1\32\1\0\4\32"+
    "\1\0\5\32\1\0\7\32\1\302\1\22\4\32\11\0"+
    "\1\32\1\0\4\32\1\0\5\32\1\0\4\32\1\303"+
    "\2\32\2\0\4\32\20\0\1\304\33\0\1\32\1\0"+
    "\4\32\1\0\5\32\1\0\4\32\1\305\2\32\2\0"+
    "\4\32\11\0\1\306\42\0\1\307\1\0\4\32\1\0"+
    "\5\32\1\0\7\32\2\0\4\32\11\0\1\32\1\0"+
    "\4\32\1\0\5\32\1\0\1\32\1\310\5\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\277\5\32\1\0"+
    "\7\32\2\0\1\32\1\311\2\32\11\0\1\32\1\0"+
    "\4\32\1\0\1\312\4\32\1\0\7\32\2\0\4\32"+
    "\11\0\1\32\1\0\4\32\1\0\5\32\1\0\4\32"+
    "\1\313\2\32\2\0\4\32\11\0\1\32\1\0\4\32"+
    "\1\0\5\32\1\0\2\32\1\314\4\32\2\0\4\32"+
    "\11\0\1\32\1\0\3\32\1\315\1\0\5\32\1\0"+
    "\7\32\2\0\4\32\27\0\1\316\32\0\1\317\20\0"+
    "\1\317\13\0\1\32\1\0\4\32\1\0\3\32\1\320"+
    "\1\32\1\0\7\32\2\0\4\32\11\0\1\32\1\0"+
    "\4\32\1\0\2\32\1\321\2\32\1\0\7\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\0\5\32\1\0"+
    "\4\32\1\322\2\32\2\0\4\32\20\0\1\323\33\0"+
    "\1\32\1\0\4\32\1\0\5\32\1\0\4\32\1\324"+
    "\2\32\2\0\4\32\11\0\1\325\42\0\1\326\1\0"+
    "\4\32\1\0\5\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\0\5\32\1\0\1\32\1\327"+
    "\5\32\2\0\4\32\11\0\1\32\1\0\4\32\1\317"+
    "\5\32\1\0\7\32\2\0\1\32\1\330\2\32\11\0"+
    "\1\32\1\0\4\32\1\0\1\331\4\32\1\0\7\32"+
    "\2\0\4\32\11\0\1\64\1\0\3\64\1\332\1\0"+
    "\5\64\1\0\7\64\2\0\4\64\11\0\1\64\1\0"+
    "\4\64\1\0\3\64\1\333\1\64\1\0\7\64\2\0"+
    "\4\64\11\0\1\64\1\0\4\64\1\0\2\64\1\334"+
    "\2\64\1\0\7\64\2\0\4\64\20\0\1\335\33\0"+
    "\1\64\1\0\4\64\1\0\5\64\1\0\4\64\1\336"+
    "\2\64\2\0\4\64\11\0\1\64\1\0\4\64\1\0"+
    "\1\337\4\64\1\0\7\64\2\0\4\64\17\0\1\340"+
    "\20\0\1\340\26\0\1\341\46\0\1\342\26\0\1\343"+
    "\51\0\1\344\30\0\1\32\1\0\4\32\1\0\3\32"+
    "\1\345\1\32\1\0\7\32\2\0\4\32\11\0\1\346"+
    "\1\0\4\32\1\0\5\32\1\0\7\32\2\0\4\32"+
    "\11\0\1\32\1\0\4\32\1\347\5\32\1\0\7\32"+
    "\2\0\1\32\1\350\2\32\23\0\1\351\30\0\1\352"+
    "\42\0\1\32\1\0\4\32\1\0\4\32\1\353\1\0"+
    "\7\32\2\0\4\32\11\0\1\32\1\0\4\32\1\0"+
    "\5\32\1\0\2\32\1\354\4\32\2\0\4\32\35\0"+
    "\1\302\1\22\15\0\1\32\1\0\4\32\1\0\3\32"+
    "\1\355\1\32\1\0\7\32\2\0\4\32\14\0\1\356"+
    "\37\0\1\32\1\0\4\32\1\0\3\32\1\357\1\32"+
    "\1\0\7\32\2\0\4\32\30\0\1\360\23\0\1\32"+
    "\1\0\4\32\1\0\5\32\1\0\2\32\1\361\4\32"+
    "\2\0\4\32\11\0\1\32\1\0\4\32\1\0\3\32"+
    "\1\362\1\32\1\0\7\32\2\0\4\32\11\0\1\363"+
    "\1\0\4\32\1\0\5\32\1\0\7\32\2\0\4\32"+
    "\11\0\1\32\1\0\1\32\1\364\2\32\1\0\5\32"+
    "\1\0\7\32\2\0\4\32\11\0\1\32\1\0\4\32"+
    "\1\0\3\32\1\365\1\32\1\0\7\32\2\0\4\32"+
    "\11\0\1\366\1\0\4\32\1\0\5\32\1\0\7\32"+
    "\2\0\4\32\11\0\1\32\1\0\4\32\1\367\5\32"+
    "\1\0\7\32\2\0\1\32\1\370\2\32\23\0\1\371"+
    "\30\0\1\372\42\0\1\32\1\0\4\32\1\0\4\32"+
    "\1\373\1\0\7\32\2\0\4\32\11\0\1\32\1\0"+
    "\4\32\1\0\5\32\1\0\2\32\1\374\4\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\0\3\32\1\375"+
    "\1\32\1\0\7\32\2\0\4\32\14\0\1\376\37\0"+
    "\1\32\1\0\4\32\1\0\3\32\1\377\1\32\1\0"+
    "\7\32\2\0\4\32\30\0\1\u0100\23\0\1\32\1\0"+
    "\4\32\1\0\5\32\1\0\2\32\1\u0101\4\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\0\3\32\1\u0102"+
    "\1\32\1\0\7\32\2\0\4\32\11\0\1\u0103\1\0"+
    "\4\32\1\0\5\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\1\32\1\u0104\2\32\1\0\5\32\1\0"+
    "\7\32\2\0\4\32\11\0\1\64\1\0\4\64\1\u0105"+
    "\5\64\1\0\7\64\2\0\1\64\1\u0106\2\64\11\0"+
    "\1\64\1\0\4\64\1\0\4\64\1\u0107\1\0\7\64"+
    "\2\0\4\64\11\0\1\64\1\0\4\64\1\0\5\64"+
    "\1\0\2\64\1\u0108\4\64\2\0\4\64\14\0\1\u0109"+
    "\37\0\1\64\1\0\4\64\1\0\3\64\1\u010a\1\64"+
    "\1\0\7\64\2\0\4\64\11\0\1\64\1\0\1\64"+
    "\1\u010b\2\64\1\0\5\64\1\0\7\64\2\0\4\64"+
    "\20\0\1\u010c\36\0\1\u010d\57\0\1\344\27\0\1\u010e"+
    "\35\0\1\32\1\0\4\32\1\0\5\32\1\0\6\32"+
    "\1\u010f\2\0\4\32\11\0\1\32\1\0\3\32\1\310"+
    "\1\0\5\32\1\0\7\32\2\0\4\32\20\0\1\u0110"+
    "\33\0\1\32\1\0\4\32\1\0\1\u0111\4\32\1\0"+
    "\7\32\2\0\4\32\22\0\1\u0112\37\0\1\u0113\20\0"+
    "\1\u0113\13\0\1\32\1\0\1\32\1\u0114\2\32\1\0"+
    "\5\32\1\0\7\32\2\0\4\32\11\0\1\32\1\0"+
    "\4\32\1\0\5\32\1\0\3\32\1\357\3\32\2\0"+
    "\4\32\11\0\1\32\1\0\4\32\1\0\5\32\1\0"+
    "\7\32\1\u0115\1\0\4\32\16\0\1\u0116\56\0\1\u0112"+
    "\21\0\1\32\1\0\4\32\1\0\5\32\1\0\4\32"+
    "\1\u010f\2\32\2\0\4\32\11\0\1\32\1\0\4\32"+
    "\1\0\2\32\1\u010f\2\32\1\0\7\32\2\0\4\32"+
    "\11\0\1\32\1\0\4\32\1\u0113\5\32\1\0\7\32"+
    "\2\0\1\32\1\u0117\2\32\11\0\1\32\1\0\3\32"+
    "\1\u0118\1\0\5\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\0\5\32\1\0\6\32\1\u0119"+
    "\2\0\4\32\11\0\1\32\1\0\3\32\1\327\1\0"+
    "\5\32\1\0\7\32\2\0\4\32\20\0\1\u011a\33\0"+
    "\1\32\1\0\4\32\1\0\1\u011b\4\32\1\0\7\32"+
    "\2\0\4\32\22\0\1\u011c\37\0\1\u011d\20\0\1\u011d"+
    "\13\0\1\32\1\0\1\32\1\u011e\2\32\1\0\5\32"+
    "\1\0\7\32\2\0\4\32\11\0\1\32\1\0\4\32"+
    "\1\0\5\32\1\0\3\32\1\377\3\32\2\0\4\32"+
    "\11\0\1\32\1\0\4\32\1\0\5\32\1\0\7\32"+
    "\1\u011f\1\0\4\32\16\0\1\u0120\56\0\1\u011c\21\0"+
    "\1\32\1\0\4\32\1\0\5\32\1\0\4\32\1\u0119"+
    "\2\32\2\0\4\32\11\0\1\32\1\0\4\32\1\0"+
    "\2\32\1\u0119\2\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\u011d\5\32\1\0\7\32\2\0"+
    "\1\32\1\u0121\2\32\11\0\1\32\1\0\3\32\1\u0122"+
    "\1\0\5\32\1\0\7\32\2\0\4\32\20\0\1\u0123"+
    "\33\0\1\64\1\0\4\64\1\0\1\u0124\4\64\1\0"+
    "\7\64\2\0\4\64\11\0\1\64\1\0\1\64\1\u0125"+
    "\2\64\1\0\5\64\1\0\7\64\2\0\4\64\11\0"+
    "\1\64\1\0\4\64\1\0\5\64\1\0\3\64\1\u010a"+
    "\3\64\2\0\4\64\16\0\1\u0126\35\0\1\64\1\0"+
    "\3\64\1\u0127\1\0\5\64\1\0\7\64\2\0\4\64"+
    "\15\0\1\344\47\0\1\272\37\0\1\u0128\20\0\1\u0128"+
    "\17\0\1\u0129\36\0\1\32\1\0\2\32\1\357\1\32"+
    "\1\0\5\32\1\0\7\32\2\0\4\32\16\0\1\u012a"+
    "\35\0\1\32\1\0\4\32\1\0\2\32\1\305\2\32"+
    "\1\0\7\32\2\0\4\32\21\0\1\u012b\13\0\1\u0115"+
    "\24\0\1\u012c\20\0\1\u012c\13\0\1\32\1\0\3\32"+
    "\1\u012d\1\0\5\32\1\0\7\32\2\0\4\32\11\0"+
    "\1\32\1\0\4\32\1\u012c\5\32\1\0\7\32\2\0"+
    "\1\32\1\u012e\2\32\15\0\1\u012f\36\0\1\32\1\0"+
    "\2\32\1\377\1\32\1\0\5\32\1\0\7\32\2\0"+
    "\4\32\16\0\1\u0130\35\0\1\32\1\0\4\32\1\0"+
    "\2\32\1\324\2\32\1\0\7\32\2\0\4\32\21\0"+
    "\1\u0131\13\0\1\u011f\24\0\1\u0132\20\0\1\u0132\13\0"+
    "\1\32\1\0\3\32\1\u0133\1\0\5\32\1\0\7\32"+
    "\2\0\4\32\11\0\1\32\1\0\4\32\1\u0132\5\32"+
    "\1\0\7\32\2\0\1\32\1\u0134\2\32\15\0\1\u0135"+
    "\36\0\1\64\1\0\2\64\1\u010a\1\64\1\0\5\64"+
    "\1\0\7\64\2\0\4\64\11\0\1\64\1\0\4\64"+
    "\1\0\2\64\1\336\2\64\1\0\7\64\2\0\4\64"+
    "\17\0\1\u0136\20\0\1\u0136\13\0\1\64\1\0\4\64"+
    "\1\u0136\5\64\1\0\7\64\2\0\1\64\1\u0137\2\64"+
    "\15\0\1\272\47\0\1\u0138\35\0\1\u0139\36\0\1\32"+
    "\1\0\2\32\1\305\1\32\1\0\5\32\1\0\7\32"+
    "\2\0\4\32\22\0\1\u013a\35\0\1\u013b\36\0\1\32"+
    "\1\0\2\32\1\324\1\32\1\0\5\32\1\0\7\32"+
    "\2\0\4\32\15\0\1\u013c\36\0\1\64\1\0\2\64"+
    "\1\336\1\64\1\0\5\64\1\0\7\64\2\0\4\64"+
    "\23\0\1\u013d\42\0\1\u0129\42\0\1\u013e\42\0\1\u012f"+
    "\42\0\1\u0135\30\0\1\u013f\42\0\1\u0140\50\0\1\u0141"+
    "\20\0\1\u0141\21\0\1\u0142\20\0\1\u0142\27\0\1\u0143"+
    "\13\0\1\u0143\26\0\1\u0144\13\0\1\u0144\20\0\1\u0145"+
    "\20\0\1\u0145\21\0\1\u0146\20\0\1\u0146\22\0\1\u0147"+
    "\42\0\1\u0148\37\0\1\u0112\42\0\1\u011c\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\3\11\4\1\4\11\1\1\2\11\1\1\1\11"+
    "\32\1\1\11\5\1\1\11\2\1\3\11\4\0\3\1"+
    "\2\0\3\1\1\0\5\1\2\0\3\1\2\0\3\1"+
    "\1\0\7\1\1\0\2\1\4\0\3\1\2\0\3\1"+
    "\1\0\10\1\2\0\3\1\1\0\7\1\1\0\2\1"+
    "\5\0\3\1\2\0\4\1\1\0\1\1\1\0\7\1"+
    "\2\0\4\1\1\0\1\1\1\0\7\1\1\0\2\1"+
    "\5\0\3\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\7\1\2\0\3\1\1\0\1\1\1\0\7\1"+
    "\1\0\2\1\4\0\1\11\2\1\1\0\1\1\2\0"+
    "\3\1\1\0\1\1\1\0\6\1\1\0\1\1\2\0"+
    "\3\1\1\0\1\1\1\0\4\1\1\0\3\1\1\0"+
    "\2\1\3\0\1\1\1\0\1\1\1\11\1\0\1\1"+
    "\2\0\3\1\1\0\1\1\1\11\1\0\1\1\2\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\2\11\2\0"+
    "\2\1\2\11\2\0\2\1\1\11\1\0\1\1\21\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMDATANotUsed.class.getName());

	String location = "MAIN PROGRAM";
	
	List<String> variables = new LinkedList<String>();
	List<String> locations = new LinkedList<String>();
	List<Integer> errors   = new LinkedList<Integer>();
	int par = 0;
    String parsedFileName;
	
	
	public COMDATANotUsed(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
		this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
	private void checkVar(String word) {
        LOGGER.finest("begin method checkVar");
		int index = variables.lastIndexOf(word.toLowerCase());
		if (index != -1) {
			errors.remove(index);
			locations.remove(index);
			variables.remove(index);
		} 
        LOGGER.finest("end method checkVar");
	}
	
	private void printError() throws JFlexException {
        LOGGER.finest("begin method printError");
		for (int i = 0; i < locations.size(); i++) {
            LOGGER.fine("Setting error line "+errors.get(i)+" for the variable "+ variables.get(i) +".");
			setError(locations.get(i),"The variable " + variables.get(i) + " is declared and not used.", errors.get(i));
		}
        LOGGER.finest("end method printError");
	}

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMDATANotUsed(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	printError();
	
return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 27: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT )");
                				    yybegin(COMMENT);
            }
          case 28: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 29: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 30: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 31: break;
          case 6: 
            { 
            }
          case 32: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 33: break;
          case 8: 
            { location = location + " " + yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 34: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 35: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 36: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 37: break;
          case 12: 
            { checkVar(yytext());
            }
          case 38: break;
          case 13: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 39: break;
          case 14: 
            { variables.add(yytext().toLowerCase());
								 locations.add(location);
								 errors.add(yyline+1);
            }
          case 40: break;
          case 15: 
            { par=1;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> DECL_VAR (Transition : [(] )");
                                    yybegin(DECL_VAR);
            }
          case 41: break;
          case 16: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 42: break;
          case 17: 
            { par++;
            }
          case 43: break;
          case 18: 
            { par--;
                                    if(par==0){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECL_VAR -> DECLARATION (Transition : [)] )");
                                        yybegin(DECLARATION);
                                    }
            }
          case 44: break;
          case 19: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> DECL_PARAMS (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(DECL_PARAMS);
            }
          case 45: break;
          case 20: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> DECLARATION (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 46: break;
          case 21: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 47: break;
          case 22: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 48: break;
          case 23: 
            { location=yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 49: break;
          case 24: 
            { location=yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 50: break;
          case 25: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : IMPLICIT \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 51: break;
          case 26: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : IMPLICIT \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
