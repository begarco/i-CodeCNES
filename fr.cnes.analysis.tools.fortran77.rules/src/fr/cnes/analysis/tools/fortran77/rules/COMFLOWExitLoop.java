/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for Tr.BoucleSortie rule. 	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMFLOWExitLoop.lex</tt>
 */
public class COMFLOWExitLoop extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int IFLINE = 8;
  public static final int AVOID = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\36\1\37\1\40\1\36\22\0\1\27\1\1\1\32"+
    "\3\0\1\41\1\31\2\0\1\3\5\0\12\24\7\0\1\21\1\17"+
    "\1\2\1\15\1\14\1\4\1\20\1\35\1\25\2\30\1\23\1\22"+
    "\1\6\1\11\1\12\1\30\1\13\1\26\1\7\1\5\2\30\1\33"+
    "\1\34\1\30\4\0\1\24\1\0\1\21\1\17\1\2\1\15\1\14"+
    "\1\4\1\20\1\35\1\25\2\30\1\23\1\22\1\6\1\11\1\12"+
    "\1\30\1\13\1\26\1\7\1\5\2\30\1\33\1\34\1\30\12\0"+
    "\1\37\252\0\2\10\115\0\1\16\u1ea8\0\1\37\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\11\1\1\2\1\4\1\5"+
    "\1\6\1\7\1\1\1\2\1\10\1\5\1\11\1\12"+
    "\1\11\44\0\6\1\1\11\51\0\1\13\3\0\1\14"+
    "\15\0\1\13\3\0\1\14\4\0\1\13\3\0\1\14"+
    "\11\0\1\15\16\0\1\15\1\1\4\0\1\15\14\0"+
    "\1\15\1\16\12\0\1\17\6\0\1\15\2\1\1\16"+
    "\7\0\1\15\1\1\1\16\1\0\1\20\1\21\17\0"+
    "\1\1\62\0\1\15\10\0\1\15\7\0\1\15\103\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[377];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\314"+
    "\0\356\0\314\0\u0110\0\356\0\u0132\0\u0154\0\u0176\0\u0198"+
    "\0\u01ba\0\u01dc\0\u01fe\0\u01fe\0\u0220\0\u01fe\0\u0242\0\u01fe"+
    "\0\u0264\0\u0264\0\u0264\0\u0264\0\u0286\0\u01fe\0\u02a8\0\u02ca"+
    "\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da"+
    "\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea"+
    "\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa"+
    "\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a"+
    "\0\u072c\0\u074e\0\u0770\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770"+
    "\0\u0792\0\u01fe\0\u07b4\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e"+
    "\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e"+
    "\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e"+
    "\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e"+
    "\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c\0\u0c9e"+
    "\0\u0cc0\0\u0ce2\0\u0d04\0\u01fe\0\u0d26\0\u0d48\0\u0d6a\0\u01fe"+
    "\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\u0e7a"+
    "\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24\0\u04c8\0\u0f46\0\u0f68"+
    "\0\u0f8a\0\u04c8\0\u0fac\0\u0fce\0\u0ff0\0\u1012\0\u05d8\0\u1034"+
    "\0\u1056\0\u1078\0\u05d8\0\u109a\0\u10bc\0\u10de\0\u1100\0\u1122"+
    "\0\u1144\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\u1210\0\u1232"+
    "\0\u1254\0\u1276\0\u1298\0\u12ba\0\u12dc\0\u12fe\0\u1320\0\u1342"+
    "\0\u1364\0\u1386\0\u13a8\0\u13ca\0\u11cc\0\u13ec\0\u140e\0\u1430"+
    "\0\u1452\0\u1474\0\u1496\0\u14b8\0\u14da\0\u14fc\0\u151e\0\u1540"+
    "\0\u1562\0\u1584\0\u15a6\0\u15c8\0\u15ea\0\u160c\0\u162e\0\u01fe"+
    "\0\u1650\0\u1672\0\u1694\0\u16b6\0\u16d8\0\u16fa\0\u171c\0\u173e"+
    "\0\u1760\0\u1782\0\u17a4\0\u17c6\0\u17e8\0\u180a\0\u182c\0\u184e"+
    "\0\u1870\0\u1892\0\u1562\0\u04c8\0\u04c8\0\u18b4\0\u18d6\0\u18f8"+
    "\0\u191a\0\u193c\0\u195e\0\u1980\0\u19a2\0\u05d8\0\u05d8\0\u19c4"+
    "\0\u01fe\0\u01fe\0\u19e6\0\u1a08\0\u1a2a\0\u1a4c\0\u1a6e\0\u1a90"+
    "\0\u1ab2\0\u1ad4\0\u1af6\0\u1b18\0\u1b3a\0\u1b5c\0\u1b7e\0\u1ba0"+
    "\0\u1bc2\0\u17a4\0\u1be4\0\u1c06\0\u1c28\0\u1c4a\0\u1c6c\0\u1c8e"+
    "\0\u1cb0\0\u1cd2\0\u1cf4\0\u1d16\0\u1d38\0\u1d5a\0\u1d7c\0\u1d9e"+
    "\0\u1dc0\0\u1de2\0\u1e04\0\u1e26\0\u1e48\0\u1e6a\0\u1e8c\0\u1eae"+
    "\0\u1ed0\0\u1ef2\0\u1f14\0\u1f36\0\u1f58\0\u1f7a\0\u1f9c\0\u1fbe"+
    "\0\u1fe0\0\u2002\0\u2024\0\u2046\0\u2068\0\u208a\0\u20ac\0\u20ce"+
    "\0\u20f0\0\u2112\0\u2134\0\u2156\0\u2178\0\u219a\0\u21bc\0\u21de"+
    "\0\u2200\0\u2222\0\u2244\0\u2266\0\u01fe\0\u2288\0\u22aa\0\u22cc"+
    "\0\u22ee\0\u2310\0\u2332\0\u2354\0\u2376\0\u04c8\0\u2398\0\u23ba"+
    "\0\u23dc\0\u23fe\0\u2420\0\u2442\0\u2464\0\u05d8\0\u2486\0\u24a8"+
    "\0\u24ca\0\u24ec\0\u250e\0\u2530\0\u2552\0\u2574\0\u2596\0\u25b8"+
    "\0\u25da\0\u25fc\0\u261e\0\u2640\0\u2662\0\u2684\0\u26a6\0\u26c8"+
    "\0\u26ea\0\u270c\0\u272e\0\u2750\0\u2772\0\u2794\0\u27b6\0\u27d8"+
    "\0\u27fa\0\u281c\0\u283e\0\u2860\0\u2882\0\u28a4\0\u28c6\0\u28e8"+
    "\0\u290a\0\u292c\0\u294e\0\u2970\0\u2992\0\u29b4\0\u29d6\0\u29f8"+
    "\0\u2a1a\0\u2a3c\0\u2a5e\0\u2a80\0\u2aa2\0\u2ac4\0\u2ae6\0\u2b08"+
    "\0\u2b2a\0\u2b4c\0\u2b6e\0\u2b90\0\u2bb2\0\u2bd4\0\u2bf6\0\u2c18"+
    "\0\u2c3a\0\u2c5c\0\u2c7e\0\u2ca0\0\u2cc2\0\u2ce4\0\u2d06\0\u2d28"+
    "\0\u2d4a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[377];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\3\14\1\7\1\14"+
    "\1\15\3\14\1\16\3\14\1\17\3\14\1\20\1\7"+
    "\1\14\1\21\1\22\3\14\4\7\1\23\1\24\34\23"+
    "\1\25\2\26\2\23\1\24\1\27\1\23\4\27\1\23"+
    "\5\27\1\23\5\27\1\23\2\27\1\23\1\27\2\23"+
    "\3\27\1\30\2\26\1\23\1\26\1\24\40\26\1\31"+
    "\1\32\1\23\1\31\4\23\1\31\5\23\1\31\10\23"+
    "\1\31\1\23\2\31\3\23\1\33\2\34\1\35\1\36"+
    "\1\24\37\36\1\37\2\0\1\40\5\0\1\41\3\0"+
    "\1\42\1\43\1\44\1\0\1\45\1\0\1\46\2\0"+
    "\1\41\1\44\17\0\1\47\5\0\1\50\3\0\1\51"+
    "\3\0\1\52\3\0\1\51\17\0\1\47\1\53\4\0"+
    "\1\50\3\0\1\51\3\0\1\52\3\0\1\51\17\0"+
    "\1\47\5\0\1\50\1\54\2\0\1\51\3\0\1\52"+
    "\3\0\1\51\15\0\1\40\2\0\1\55\2\0\1\41"+
    "\3\0\1\42\1\43\1\44\1\0\1\45\1\0\1\46"+
    "\2\0\1\41\1\44\17\0\1\47\4\0\1\56\1\50"+
    "\3\0\1\51\3\0\1\52\3\0\1\51\17\0\1\47"+
    "\1\55\4\0\1\50\3\0\1\51\3\0\1\52\3\0"+
    "\1\51\13\0\2\57\1\60\5\57\1\61\3\57\1\62"+
    "\1\63\1\64\1\57\1\65\1\57\1\66\2\57\1\61"+
    "\1\64\2\57\1\23\10\57\2\67\1\70\5\67\1\71"+
    "\3\67\1\72\1\73\1\74\1\67\1\75\1\67\1\76"+
    "\2\67\1\71\1\74\3\67\1\23\7\67\100\0\1\25"+
    "\5\0\1\27\1\0\4\27\1\0\5\27\1\0\10\27"+
    "\1\0\1\27\2\0\3\27\6\0\1\77\4\0\1\100"+
    "\4\0\1\101\1\0\1\102\1\0\1\103\5\0\1\102"+
    "\13\0\2\23\1\104\4\23\1\105\4\23\1\106\1\23"+
    "\1\107\1\23\1\110\5\23\1\107\1\111\6\23\1\0"+
    "\1\23\1\111\1\23\27\112\1\37\6\112\1\0\1\112"+
    "\1\37\1\112\34\0\1\113\11\0\1\114\43\0\1\115"+
    "\14\0\1\116\7\0\1\117\17\0\1\120\37\0\1\121"+
    "\43\0\1\122\41\0\1\123\35\0\1\124\47\0\1\125"+
    "\33\0\1\126\45\0\1\127\36\0\1\130\44\0\1\131"+
    "\47\0\1\132\37\0\1\133\24\0\31\57\1\23\41\57"+
    "\1\23\2\57\1\134\11\57\1\135\24\57\1\23\16\57"+
    "\1\136\14\57\1\137\5\57\1\23\1\57\1\140\17\57"+
    "\1\141\17\57\1\23\17\57\1\142\21\57\1\23\21\57"+
    "\1\143\17\57\1\23\21\57\1\144\17\57\1\23\10\57"+
    "\32\67\1\23\41\67\1\23\1\67\1\145\11\67\1\146"+
    "\25\67\1\23\15\67\1\147\14\67\1\150\6\67\1\23"+
    "\1\151\17\67\1\152\20\67\1\23\16\67\1\153\22\67"+
    "\1\23\20\67\1\154\20\67\1\23\20\67\1\155\20\67"+
    "\1\23\7\67\34\0\1\156\42\0\1\157\37\0\1\160"+
    "\15\0\1\161\43\0\1\162\30\0\27\23\1\111\6\23"+
    "\1\0\1\23\1\111\1\23\2\0\1\163\37\0\2\164"+
    "\1\0\1\164\4\0\1\164\5\0\1\164\10\0\1\164"+
    "\1\0\2\164\3\0\4\164\15\0\1\165\42\0\1\166"+
    "\7\0\1\166\23\0\1\167\14\0\1\167\14\0\2\170"+
    "\1\0\1\170\4\0\1\170\5\0\1\170\10\0\1\170"+
    "\1\0\2\170\3\0\4\170\11\0\1\171\37\0\1\172"+
    "\17\0\1\122\10\0\1\122\16\0\1\173\32\0\1\174"+
    "\44\0\1\175\47\0\1\176\37\0\1\177\26\0\1\200"+
    "\41\0\1\201\15\0\1\202\34\0\1\203\33\0\1\204"+
    "\34\0\2\57\1\205\26\57\1\23\10\57\2\206\1\57"+
    "\1\206\4\57\1\206\5\57\1\206\10\57\1\206\1\57"+
    "\1\23\1\206\3\57\4\206\15\57\1\207\13\57\1\23"+
    "\26\57\1\210\7\57\1\210\2\57\1\23\20\57\1\211"+
    "\14\57\1\211\3\57\1\23\10\57\2\212\1\57\1\212"+
    "\4\57\1\212\5\57\1\212\10\57\1\212\1\57\1\23"+
    "\1\212\3\57\4\212\11\57\1\213\17\57\1\23\17\57"+
    "\1\214\17\57\1\143\1\57\1\23\6\57\1\143\16\57"+
    "\1\215\13\57\1\23\10\57\2\67\1\216\27\67\1\23"+
    "\7\67\2\217\1\67\1\217\4\67\1\217\5\67\1\217"+
    "\10\67\1\217\1\67\1\217\1\23\3\67\4\217\15\67"+
    "\1\220\14\67\1\23\25\67\1\221\7\67\1\221\3\67"+
    "\1\23\17\67\1\222\14\67\1\222\4\67\1\23\7\67"+
    "\2\223\1\67\1\223\4\67\1\223\5\67\1\223\10\67"+
    "\1\223\1\67\1\223\1\23\3\67\4\223\11\67\1\224"+
    "\20\67\1\23\16\67\1\225\17\67\1\154\2\67\1\23"+
    "\5\67\1\154\16\67\1\226\14\67\1\23\7\67\2\0"+
    "\1\227\53\0\1\230\35\0\1\231\14\0\1\231\25\0"+
    "\1\232\37\0\1\233\17\0\1\162\10\0\1\162\24\0"+
    "\1\234\16\0\2\235\1\0\1\235\4\0\1\235\5\0"+
    "\1\235\10\0\1\235\1\0\2\235\3\0\4\235\14\0"+
    "\1\236\34\0\1\237\44\0\1\237\40\0\1\237\35\0"+
    "\1\240\36\0\1\241\41\0\1\242\15\0\1\243\34\0"+
    "\1\244\33\0\1\245\43\0\1\246\46\0\1\247\40\0"+
    "\1\250\37\0\1\251\53\0\1\252\16\0\23\57\1\253"+
    "\5\57\1\23\10\57\2\254\1\57\1\254\4\57\1\254"+
    "\5\57\1\254\10\57\1\254\1\57\1\255\1\254\3\57"+
    "\4\254\14\57\1\256\14\57\1\23\17\57\1\257\21\57"+
    "\1\23\22\57\1\257\16\57\1\23\21\57\1\257\17\57"+
    "\1\23\15\57\1\260\23\57\1\23\10\57\23\67\1\261"+
    "\6\67\1\23\7\67\2\262\1\67\1\262\4\67\1\262"+
    "\5\67\1\262\10\67\1\262\1\67\1\262\1\255\3\67"+
    "\4\262\14\67\1\263\15\67\1\23\16\67\1\264\22\67"+
    "\1\23\21\67\1\264\17\67\1\23\20\67\1\264\20\67"+
    "\1\23\14\67\1\265\24\67\1\23\7\67\23\0\1\266"+
    "\24\0\1\267\42\0\1\270\44\0\1\270\40\0\1\270"+
    "\44\0\1\237\25\0\2\271\1\0\1\271\1\272\3\0"+
    "\1\271\1\0\1\273\3\0\1\274\3\0\1\275\3\0"+
    "\1\276\1\277\1\0\2\271\3\0\2\271\1\277\1\271"+
    "\2\23\1\0\1\23\4\0\1\23\5\0\1\23\10\0"+
    "\1\23\1\0\2\23\3\0\4\23\2\300\1\0\1\300"+
    "\4\0\1\300\5\0\1\300\10\0\1\300\1\0\2\300"+
    "\3\0\4\300\23\0\1\301\25\0\1\302\46\0\1\303"+
    "\40\0\1\304\37\0\1\305\53\0\1\306\26\0\1\307"+
    "\14\0\1\307\31\0\1\310\45\0\1\311\25\0\1\312"+
    "\50\0\1\313\25\0\14\57\1\257\14\57\1\23\10\57"+
    "\2\314\1\57\1\314\1\315\3\57\1\314\1\57\1\316"+
    "\3\57\1\317\3\57\1\320\3\57\1\321\1\322\1\57"+
    "\1\323\1\314\3\57\2\314\1\322\1\314\2\324\1\57"+
    "\1\324\4\57\1\324\5\57\1\324\10\57\1\324\1\57"+
    "\1\23\1\324\3\57\4\324\2\325\1\57\1\325\4\57"+
    "\1\325\5\57\1\325\10\57\1\325\1\57\1\23\1\325"+
    "\3\57\4\325\23\57\1\326\5\57\1\23\10\57\14\67"+
    "\1\264\15\67\1\23\7\67\2\327\1\67\1\327\1\330"+
    "\3\67\1\327\1\67\1\331\3\67\1\332\3\67\1\333"+
    "\3\67\1\334\1\335\1\67\1\327\1\323\3\67\2\327"+
    "\1\335\1\327\2\336\1\67\1\336\4\67\1\336\5\67"+
    "\1\336\10\67\1\336\1\67\1\336\1\23\3\67\4\336"+
    "\2\337\1\67\1\337\4\67\1\337\5\67\1\337\10\67"+
    "\1\337\1\67\1\337\1\23\3\67\4\337\23\67\1\340"+
    "\6\67\1\23\7\67\14\0\1\270\25\0\2\341\1\0"+
    "\1\341\4\0\1\341\5\0\1\341\10\0\1\341\1\0"+
    "\2\341\3\0\4\341\2\342\1\0\1\342\4\0\1\342"+
    "\5\0\1\342\10\0\1\342\1\0\2\342\3\0\4\342"+
    "\10\0\1\343\4\0\1\344\1\345\6\0\1\343\1\345"+
    "\20\0\1\346\47\0\1\347\33\0\1\350\2\0\1\343"+
    "\4\0\1\344\1\345\6\0\1\343\1\345\24\0\1\351"+
    "\35\0\1\350\34\0\2\271\1\0\1\271\1\272\3\0"+
    "\1\352\1\0\1\273\2\0\1\344\1\353\3\0\1\275"+
    "\2\0\1\343\1\354\1\277\1\0\2\271\3\0\2\271"+
    "\1\277\1\271\14\0\1\355\35\0\1\356\14\0\1\356"+
    "\31\0\1\357\45\0\1\360\25\0\1\361\50\0\1\362"+
    "\36\0\1\363\35\0\1\364\56\0\1\313\26\0\1\365"+
    "\34\0\1\23\1\0\4\23\1\0\5\23\1\0\10\23"+
    "\1\0\1\23\2\0\3\23\4\0\10\57\1\366\4\57"+
    "\1\367\1\370\6\57\1\366\1\370\2\57\1\23\15\57"+
    "\1\371\23\57\1\23\23\57\1\372\15\57\1\23\15\57"+
    "\1\373\2\57\1\366\4\57\1\367\1\370\6\57\1\366"+
    "\1\370\2\57\1\23\21\57\1\374\17\57\1\23\15\57"+
    "\1\373\23\57\1\23\10\57\2\314\1\57\1\314\1\315"+
    "\3\57\1\375\1\57\1\316\2\57\1\367\1\376\3\57"+
    "\1\320\2\57\1\366\1\377\1\322\1\57\1\323\1\314"+
    "\3\57\2\314\1\322\1\314\14\57\1\u0100\14\57\1\23"+
    "\10\57\10\67\1\u0101\4\67\1\u0102\1\u0103\6\67\1\u0101"+
    "\1\u0103\3\67\1\23\14\67\1\u0104\24\67\1\23\22\67"+
    "\1\u0105\16\67\1\23\14\67\1\u0106\2\67\1\u0101\4\67"+
    "\1\u0102\1\u0103\6\67\1\u0101\1\u0103\3\67\1\23\20\67"+
    "\1\u0107\20\67\1\23\14\67\1\u0106\24\67\1\23\7\67"+
    "\2\327\1\67\1\327\1\330\3\67\1\u0108\1\67\1\331"+
    "\2\67\1\u0102\1\u0109\3\67\1\333\2\67\1\u0101\1\u010a"+
    "\1\335\1\67\1\327\1\323\3\67\2\327\1\335\1\327"+
    "\14\67\1\u010b\15\67\1\23\7\67\4\0\1\u010c\46\0"+
    "\1\u010c\44\0\1\u010d\33\0\1\u010e\44\0\1\u010f\47\0"+
    "\1\u0110\37\0\1\u0111\30\0\1\u010c\3\0\1\343\4\0"+
    "\1\344\1\345\6\0\1\343\1\345\20\0\1\350\2\0"+
    "\1\343\3\0\1\u010d\1\344\1\345\6\0\1\343\1\345"+
    "\20\0\1\350\6\0\1\u010d\37\0\1\u0112\14\0\1\355"+
    "\10\0\1\355\12\0\1\u0113\35\0\1\u0114\56\0\1\362"+
    "\26\0\1\u0115\40\0\1\313\46\0\1\252\36\0\1\u0116"+
    "\14\0\1\u0116\14\0\4\57\1\u0117\24\57\1\23\21\57"+
    "\1\u0117\17\57\1\23\24\57\1\u0118\14\57\1\23\16\57"+
    "\1\u0119\22\57\1\23\21\57\1\u011a\17\57\1\23\27\57"+
    "\1\u011b\11\57\1\23\25\57\1\u011c\13\57\1\23\14\57"+
    "\1\u0117\3\57\1\366\4\57\1\367\1\370\6\57\1\366"+
    "\1\370\2\57\1\23\15\57\1\373\2\57\1\366\3\57"+
    "\1\u0118\1\367\1\370\6\57\1\366\1\370\2\57\1\23"+
    "\15\57\1\373\6\57\1\u0118\14\57\1\23\22\57\1\u011d"+
    "\14\57\1\u0100\1\57\1\23\6\57\1\u0100\1\57\4\67"+
    "\1\u011e\25\67\1\23\20\67\1\u011e\20\67\1\23\23\67"+
    "\1\u011f\15\67\1\23\15\67\1\u0120\23\67\1\23\20\67"+
    "\1\u0121\20\67\1\23\26\67\1\u0122\12\67\1\23\24\67"+
    "\1\u0123\14\67\1\23\13\67\1\u011e\3\67\1\u0101\4\67"+
    "\1\u0102\1\u0103\6\67\1\u0101\1\u0103\3\67\1\23\14\67"+
    "\1\u0106\2\67\1\u0101\3\67\1\u011f\1\u0102\1\u0103\6\67"+
    "\1\u0101\1\u0103\3\67\1\23\14\67\1\u0106\6\67\1\u011f"+
    "\15\67\1\23\21\67\1\u0124\14\67\1\u010b\2\67\1\23"+
    "\5\67\1\u010b\1\67\2\u0125\1\0\1\u0125\4\0\1\u0125"+
    "\5\0\1\u0125\10\0\1\u0125\1\0\2\u0125\3\0\4\u0125"+
    "\23\0\1\u0126\20\0\1\u0127\41\0\1\u0128\15\0\1\u0129"+
    "\34\0\1\u012a\33\0\1\u012b\47\0\1\u012c\34\0\1\362"+
    "\46\0\1\306\36\0\1\u012d\14\0\1\u012d\22\0\1\252"+
    "\33\0\2\u012e\1\57\1\u012e\4\57\1\u012e\5\57\1\u012e"+
    "\10\57\1\u012e\1\57\1\23\1\u012e\3\57\4\u012e\23\57"+
    "\1\u012f\5\57\1\23\12\57\1\u0130\26\57\1\23\12\57"+
    "\1\u0131\15\57\1\u0132\10\57\1\23\23\57\1\u0133\15\57"+
    "\1\23\15\57\1\u0134\23\57\1\23\23\57\1\u0135\15\57"+
    "\1\23\10\57\2\u0136\1\67\1\u0136\4\67\1\u0136\5\67"+
    "\1\u0136\10\67\1\u0136\1\67\1\u0136\1\23\3\67\4\u0136"+
    "\23\67\1\u0137\6\67\1\23\11\67\1\u0138\27\67\1\23"+
    "\11\67\1\u0139\15\67\1\u013a\11\67\1\23\22\67\1\u013b"+
    "\16\67\1\23\14\67\1\u013c\24\67\1\23\22\67\1\u013d"+
    "\16\67\1\23\7\67\14\0\1\u013e\34\0\1\u013f\46\0"+
    "\1\u0140\40\0\1\u0141\37\0\1\u0142\53\0\1\u0143\27\0"+
    "\1\u0144\36\0\1\306\33\0\14\57\1\u0145\14\57\1\23"+
    "\17\57\1\u0146\21\57\1\23\24\57\1\u0147\14\57\1\23"+
    "\23\57\1\u0148\15\57\1\23\21\57\1\u0149\17\57\1\23"+
    "\33\57\1\u014a\5\57\1\23\21\57\1\u014b\17\57\1\23"+
    "\10\57\14\67\1\u014c\15\67\1\23\16\67\1\u014d\22\67"+
    "\1\23\23\67\1\u014e\15\67\1\23\22\67\1\u014f\16\67"+
    "\1\23\20\67\1\u0150\20\67\1\23\32\67\1\u0151\6\67"+
    "\1\23\20\67\1\u0152\20\67\1\23\7\67\2\0\1\u0153"+
    "\47\0\1\u0154\14\0\1\u0154\31\0\1\u0155\45\0\1\u0156"+
    "\25\0\1\u0157\50\0\1\u0125\27\0\1\u0158\37\0\2\57"+
    "\1\u0159\26\57\1\23\20\57\1\u015a\14\57\1\u015a\3\57"+
    "\1\23\25\57\1\u015b\13\57\1\23\31\57\1\u015c\7\57"+
    "\1\23\15\57\1\u015d\23\57\1\23\24\57\1\u012e\14\57"+
    "\1\23\12\57\1\u015e\26\57\1\23\10\57\2\67\1\u015f"+
    "\27\67\1\23\17\67\1\u0160\14\67\1\u0160\4\67\1\23"+
    "\24\67\1\u0161\14\67\1\23\30\67\1\u0162\10\67\1\23"+
    "\14\67\1\u0163\24\67\1\23\23\67\1\u0136\15\67\1\23"+
    "\11\67\1\u0164\27\67\1\23\7\67\7\0\1\u010c\43\0"+
    "\1\u0165\35\0\1\u0166\56\0\1\u0125\26\0\1\u0167\46\0"+
    "\1\u0168\25\0\7\57\1\u0117\21\57\1\23\21\57\1\u0169"+
    "\17\57\1\23\15\57\1\u016a\23\57\1\23\32\57\1\u012e"+
    "\6\57\1\23\17\57\1\u016b\21\57\1\23\24\57\1\u016c"+
    "\14\57\1\23\10\57\7\67\1\u011e\22\67\1\23\20\67"+
    "\1\u016d\20\67\1\23\14\67\1\u016e\24\67\1\23\31\67"+
    "\1\u0136\7\67\1\23\16\67\1\u016f\22\67\1\23\23\67"+
    "\1\u0170\15\67\1\23\7\67\6\0\1\u0125\46\0\1\u0143"+
    "\36\0\1\u0171\14\0\1\u0171\31\0\1\u0172\24\0\6\57"+
    "\1\u012e\22\57\1\23\23\57\1\u014a\15\57\1\23\20\57"+
    "\1\u0173\14\57\1\u0173\3\57\1\23\25\57\1\u0174\13\57"+
    "\1\23\10\57\6\67\1\u0136\23\67\1\23\22\67\1\u0151"+
    "\16\67\1\23\17\67\1\u0175\14\67\1\u0175\4\67\1\23"+
    "\24\67\1\u0176\14\67\1\23\7\67\6\0\1\u0143\40\0"+
    "\1\u0177\34\0\6\57\1\u014a\22\57\1\23\15\57\1\u0178"+
    "\23\57\1\23\10\57\6\67\1\u0151\23\67\1\23\14\67"+
    "\1\u0179\24\67\1\23\7\67\13\0\1\166\26\0\13\57"+
    "\1\210\15\57\1\23\10\57\13\67\1\221\16\67\1\23"+
    "\7\67";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11628];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\14\1\2\11\1\1\1\11\1\1\1\11\5\1"+
    "\1\11\1\1\44\0\6\1\1\11\51\0\1\11\3\0"+
    "\1\11\15\0\1\1\3\0\1\1\4\0\1\1\3\0"+
    "\1\1\11\0\1\1\16\0\2\1\4\0\1\1\14\0"+
    "\1\1\1\11\12\0\1\1\6\0\4\1\7\0\3\1"+
    "\1\0\2\11\17\0\1\1\62\0\1\11\10\0\1\1"+
    "\7\0\1\1\103\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[377];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMFLOWExitLoop.class.getName());


	/** Variable used to store violation location and variable involved. **/
	String location = "MAIN PROGRAM";
	/** Variable used to store file value and function values associated. **/
	
	/** List of string used to store if and do statements. **/
	List<String> identifiers = new LinkedList<String>();
	/** Integer to determine imbrication depth. **/
	int depth = 0;
	/** A boolean to found continuation line. **/
	boolean ampFound = false;
    /** Name of the file currently parsed */
    String parsedFileName;
    
    	
	public COMFLOWExitLoop() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
        this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMFLOWExitLoop(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 18: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 19: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
		                      yybegin(COMMENT);
            }
          case 20: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> YYINITIAL (Transition : \\n|\\r )");
			                     yybegin(YYINITIAL);
            }
          case 21: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 22: break;
          case 6: 
            { location = location + " " + yytext();
							 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
							 yybegin(COMMENT);
            }
          case 23: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> YYINITIAL (Transition : \\n|\\r )");
			                 yybegin(YYINITIAL);
            }
          case 24: break;
          case 8: 
            { if (!ampFound){
									LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - IFLINE -> YYINITIAL (Transition : \\n|\\r )");
									yybegin(YYINITIAL);
								 }
								 ampFound = false;
            }
          case 25: break;
          case 9: 
            { ampFound = true;
            }
          case 26: break;
          case 10: 
            { if (!ampFound){
									LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> YYINITIAL (Transition : \\n|\\r )");
									yybegin(YYINITIAL);
								 }
								 ampFound = false;
            }
          case 27: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> IFLINE (Transition : IF \""+yytext()+"\" )");
			                     yybegin(IFLINE);
            }
          case 28: break;
          case 12: 
            { identifiers.add("DO");
							 depth++;
            }
          case 29: break;
          case 13: 
            { if (!identifiers.isEmpty()) {
								int idLength = identifiers.size();
								if (identifiers.get(idLength-1).equals("DO")) {
									depth--;
								}
								identifiers.remove(idLength-1);
							 }
							 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : END \""+yytext()+"\" )");
							 yybegin(COMMENT);
            }
          case 30: break;
          case 14: 
            { if (depth > 0) {
							 	LOGGER.fine("Setting error line "+(yyline+1)+" cause there is more than one exit in the loop.");
							 	this.setError(location,"There is more than one exit in the loop.", yyline + 1);
							 }
            }
          case 31: break;
          case 15: 
            { location = yytext();
			                     LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
			                     yybegin(NAMING);
            }
          case 32: break;
          case 16: 
            { identifiers.add("IF");
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - IFLINE -> AVOID (Transition : THEN \""+yytext()+"\" )");
								 yybegin(AVOID);
            }
          case 33: break;
          case 17: 
            { LOGGER.fine("Setting error line "+(yyline+1)+" cause there is more than one exit in the loop.");
			                     this.setError(location,"There is more than one exit in the loop.", yyline + 1);
            }
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
