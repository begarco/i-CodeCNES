/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.NAME.Homonime rule. 	*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*                 						   								        */          								   
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import java.util.logging.Logger;
import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMNAMEHomonymy.lex</tt>
 */
public class COMNAMEHomonymy extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int PARAMS = 6;
  public static final int NEW_LINE = 8;
  public static final int LINE = 10;
  public static final int DECLARATION = 12;
  public static final int AVOID_DECL = 14;
  public static final int AVOID = 16;
  public static final int TYPE_DEC = 18;
  public static final int DECL_PARAMS = 20;
  public static final int NOTHING = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\42\1\44\1\43\1\43\22\0\1\24\1\1\1\40"+
    "\3\0\1\45\1\37\1\30\1\31\1\3\1\0\1\46\3\0\12\36"+
    "\7\0\1\21\1\17\1\2\1\15\1\14\1\4\1\20\1\26\1\34"+
    "\2\33\1\23\1\22\1\6\1\11\1\12\1\33\1\13\1\35\1\7"+
    "\1\5\1\25\1\33\1\27\1\32\1\33\4\0\1\36\1\0\1\21"+
    "\1\17\1\2\1\15\1\14\1\4\1\20\1\26\1\34\2\33\1\23"+
    "\1\22\1\6\1\11\1\12\1\33\1\13\1\35\1\7\1\5\1\25"+
    "\1\33\1\27\1\32\1\33\12\0\1\44\252\0\2\10\115\0\1\16"+
    "\u1ea8\0\1\44\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\2\3\12\1\1\4\1\5\3\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\12\1\14\1\15"+
    "\1\16\2\17\3\6\1\16\4\6\1\16\4\6\2\16"+
    "\1\20\4\21\1\20\4\21\1\20\4\21\2\20\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\6\1\31"+
    "\1\32\1\33\1\34\2\5\3\35\1\36\1\37\14\0"+
    "\4\6\1\0\4\6\1\0\4\6\4\21\1\0\4\21"+
    "\1\0\4\21\14\0\4\6\1\0\5\6\1\0\4\6"+
    "\4\21\1\0\5\21\1\0\4\21\15\0\3\6\1\40"+
    "\1\0\3\6\1\41\2\6\1\0\3\6\1\0\2\6"+
    "\1\0\3\6\1\0\1\6\1\0\3\6\3\21\1\42"+
    "\1\0\3\21\1\43\12\21\1\0\1\21\1\0\3\21"+
    "\15\0\3\6\1\0\3\6\1\0\3\6\1\0\3\6"+
    "\1\0\2\6\7\0\3\6\1\0\1\6\1\0\3\6"+
    "\3\21\1\0\3\21\1\0\13\21\1\0\1\21\1\0"+
    "\3\21\13\0\1\44\2\6\1\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\3\6\1\0\4\6\1\0\2\6"+
    "\10\0\3\6\1\0\1\45\1\0\2\6\2\21\1\0"+
    "\1\21\1\0\2\21\1\0\1\21\1\0\14\21\1\0"+
    "\1\46\1\0\2\21\7\0\1\6\1\0\1\6\1\41"+
    "\1\6\1\0\1\6\1\0\3\6\1\0\5\6\1\0"+
    "\1\6\1\0\1\6\11\0\2\6\2\0\1\6\1\21"+
    "\1\0\1\21\1\43\1\21\1\0\1\21\1\0\14\21"+
    "\2\0\1\21\1\47\4\0\1\6\1\45\1\0\1\6"+
    "\1\0\3\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\11\0\2\6\2\0\1\6\1\21\1\46"+
    "\1\0\1\21\1\0\13\21\2\0\1\21\3\0\1\41"+
    "\1\0\1\6\1\0\2\6\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\50\10\0\2\6\2\0\1\43"+
    "\1\0\1\21\1\0\7\21\1\50\2\21\14\0\1\6"+
    "\1\0\2\6\1\0\1\6\7\0\1\50\1\6\6\0"+
    "\5\21\6\0\1\6\1\0\1\6\4\0\1\6\3\0"+
    "\3\21\4\0\1\6\1\0\1\6\4\0\2\21\33\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[654];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01d4\0\u01fb\0\u01d4"+
    "\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u01d4\0\u01d4\0\u01d4\0\u035a\0\u0381\0\u01d4"+
    "\0\u03a8\0\u01d4\0\u01d4\0\u03cf\0\u035a\0\u0381\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u03f6\0\u01d4\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1"+
    "\0\u035a\0\u0381\0\u01d4\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4"+
    "\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec"+
    "\0\u0813\0\u035a\0\u0381\0\u01d4\0\u083a\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u0861\0\u01d4\0\u0888\0\u01d4\0\u01d4\0\u035a"+
    "\0\u0381\0\u01d4\0\u035a\0\u0381\0\u01d4\0\u01d4\0\u08af\0\u08d6"+
    "\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e"+
    "\0\u035a\0\u0381\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8"+
    "\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30"+
    "\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68"+
    "\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0"+
    "\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8"+
    "\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110"+
    "\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248"+
    "\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380"+
    "\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8"+
    "\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0"+
    "\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u1701\0\u1728"+
    "\0\u0444\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u1839"+
    "\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923\0\u194a\0\u1971"+
    "\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9"+
    "\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u0666\0\u1b6c\0\u1b93\0\u1bba"+
    "\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2"+
    "\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a"+
    "\0\u1e51\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62"+
    "\0\u1f89\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a"+
    "\0\u20c1\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab\0\u21d2"+
    "\0\u21f9\0\u2220\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a"+
    "\0\u2331\0\u2358\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442"+
    "\0\u2469\0\u2490\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553\0\u257a"+
    "\0\u25a1\0\u25c8\0\u25ef\0\u2616\0\u263d\0\u2664\0\u268b\0\u26b2"+
    "\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775\0\u279c\0\u27c3\0\u27ea"+
    "\0\u2811\0\u2838\0\u285f\0\u2886\0\u28ad\0\u28d4\0\u28fb\0\u2922"+
    "\0\u2949\0\u2970\0\u2997\0\u29be\0\u29e5\0\u2a0c\0\u2a33\0\u2a5a"+
    "\0\u2a81\0\u2aa8\0\u0222\0\u2acf\0\u2af6\0\u01d4\0\u2b1d\0\u2b44"+
    "\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0\0\u2c07\0\u2c2e\0\u2c55\0\u2c7c"+
    "\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18\0\u2d3f\0\u2d66\0\u2d8d\0\u2db4"+
    "\0\u2ddb\0\u2e02\0\u2e29\0\u2e50\0\u2e77\0\u2e9e\0\u2ec5\0\u2eec"+
    "\0\u2f13\0\u2f3a\0\u2f61\0\u2f88\0\u2faf\0\u2fd6\0\u2ffd\0\u0444"+
    "\0\u3024\0\u304b\0\u3072\0\u3099\0\u30c0\0\u30e7\0\u310e\0\u3135"+
    "\0\u315c\0\u3183\0\u31aa\0\u31d1\0\u31f8\0\u321f\0\u3246\0\u326d"+
    "\0\u3294\0\u32bb\0\u32e2\0\u3309\0\u3330\0\u3357\0\u337e\0\u33a5"+
    "\0\u33cc\0\u33f3\0\u0666\0\u341a\0\u3441\0\u3468\0\u348f\0\u34b6"+
    "\0\u34dd\0\u3504\0\u352b\0\u3552\0\u3579\0\u35a0\0\u35c7\0\u35ee"+
    "\0\u3615\0\u363c\0\u3663\0\u368a\0\u36b1\0\u36d8\0\u36ff\0\u3726"+
    "\0\u374d\0\u3774\0\u379b\0\u37c2\0\u37e9\0\u3810\0\u3837\0\u385e"+
    "\0\u3885\0\u38ac\0\u38d3\0\u38fa\0\u3921\0\u3948\0\u396f\0\u3996"+
    "\0\u39bd\0\u39e4\0\u3a0b\0\u3a32\0\u3a59\0\u3a80\0\u3aa7\0\u3ace"+
    "\0\u3af5\0\u3b1c\0\u3b43\0\u3b6a\0\u3b91\0\u3bb8\0\u3bdf\0\u3c06"+
    "\0\u3c2d\0\u3c54\0\u3c7b\0\u3ca2\0\u3cc9\0\u3cf0\0\u3d17\0\u3d3e"+
    "\0\u3d65\0\u3d8c\0\u3db3\0\u3dda\0\u3e01\0\u3e28\0\u3e4f\0\u01d4"+
    "\0\u3e76\0\u3e9d\0\u3ec4\0\u3eeb\0\u3f12\0\u01d4\0\u3f39\0\u3f60"+
    "\0\u3f87\0\u3fae\0\u3fd5\0\u3ffc\0\u4023\0\u404a\0\u4071\0\u4098"+
    "\0\u40bf\0\u40e6\0\u410d\0\u4134\0\u415b\0\u4182\0\u41a9\0\u41d0"+
    "\0\u41f7\0\u421e\0\u4245\0\u426c\0\u4293\0\u42ba\0\u42e1\0\u4308"+
    "\0\u432f\0\u4356\0\u437d\0\u43a4\0\u43cb\0\u01d4\0\u43f2\0\u4419"+
    "\0\u4440\0\u4467\0\u448e\0\u44b5\0\u44dc\0\u4503\0\u452a\0\u4551"+
    "\0\u4578\0\u459f\0\u45c6\0\u45ed\0\u4614\0\u463b\0\u4662\0\u4689"+
    "\0\u46b0\0\u46d7\0\u46fe\0\u4725\0\u474c\0\u4773\0\u479a\0\u47c1"+
    "\0\u47e8\0\u480f\0\u4836\0\u485d\0\u4884\0\u48ab\0\u48d2\0\u48f9"+
    "\0\u4920\0\u0444\0\u4947\0\u496e\0\u4995\0\u49bc\0\u49e3\0\u4a0a"+
    "\0\u4a31\0\u4a58\0\u4a7f\0\u4aa6\0\u4acd\0\u4af4\0\u4b1b\0\u4b42"+
    "\0\u4b69\0\u4b90\0\u4bb7\0\u4bde\0\u4c05\0\u4c2c\0\u4c53\0\u4c7a"+
    "\0\u4ca1\0\u0666\0\u4cc8\0\u4cef\0\u4d16\0\u4d3d\0\u4d64\0\u4d8b"+
    "\0\u4db2\0\u4dd9\0\u4e00\0\u4e27\0\u4e4e\0\u4e75\0\u4e9c\0\u4ec3"+
    "\0\u4eea\0\u4f11\0\u4f38\0\u4f5f\0\u4f86\0\u4fad\0\u4fd4\0\u4ffb"+
    "\0\u5022\0\u5049\0\u5070\0\u5097\0\u50be\0\u01d4\0\u50e5\0\u510c"+
    "\0\u5133\0\u515a\0\u5181\0\u51a8\0\u51cf\0\u51f6\0\u521d\0\u5244"+
    "\0\u526b\0\u5292\0\u52b9\0\u52e0\0\u02e5\0\u5307\0\u532e\0\u0555"+
    "\0\u5355\0\u537c\0\u53a3\0\u53ca\0\u53f1\0\u5418\0\u543f\0\u5466"+
    "\0\u548d\0\u54b4\0\u0777\0\u54db\0\u5502\0\u5529\0\u5550\0\u5577"+
    "\0\u559e\0\u55c5\0\u55ec\0\u5613\0\u563a\0\u5661\0\u5688\0\u56af"+
    "\0\u56d6\0\u56fd\0\u5724\0\u574b\0\u5772\0\u5799\0\u57c0\0\u57e7"+
    "\0\u580e\0\u5835\0\u585c\0\u5883\0\u58aa\0\u58d1\0\u58f8\0\u591f"+
    "\0\u5946\0\u596d\0\u5994\0\u59bb\0\u59e2\0\u5a09\0\u5a30\0\u5a57"+
    "\0\u5a7e\0\u5aa5\0\u5acc\0\u5af3\0\u5b1a\0\u5b41";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[654];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\3\15\1\22\1\15"+
    "\1\23\1\24\1\15\1\25\1\26\3\15\1\27\1\30"+
    "\10\15\1\22\1\26\1\15\1\31\1\32\1\15\1\33"+
    "\2\34\2\15\1\35\1\16\35\35\1\36\1\37\1\35"+
    "\1\40\2\34\3\35\1\16\1\41\1\35\4\41\1\35"+
    "\5\41\1\35\5\41\1\35\3\41\2\35\4\41\1\35"+
    "\1\36\1\37\1\35\1\42\2\34\2\35\1\43\1\16"+
    "\1\44\1\43\4\44\1\43\5\44\1\43\5\44\1\35"+
    "\3\44\2\43\4\44\1\43\1\45\1\46\1\35\1\47"+
    "\1\35\1\34\1\50\1\43\1\51\1\16\1\52\1\53"+
    "\1\54\2\55\1\56\1\57\1\55\1\60\1\61\1\62"+
    "\1\63\1\64\3\55\1\65\1\66\1\51\3\55\2\51"+
    "\2\55\1\67\1\70\1\51\1\71\1\72\1\51\1\35"+
    "\2\34\2\51\1\73\1\16\1\74\1\73\1\75\2\76"+
    "\1\77\1\100\1\76\1\101\1\102\1\103\1\104\1\105"+
    "\3\76\1\106\1\107\1\35\3\76\2\73\2\76\1\110"+
    "\1\111\1\73\1\112\1\113\1\35\1\114\1\35\1\34"+
    "\2\73\1\43\1\16\1\115\1\43\4\115\1\43\5\115"+
    "\1\43\5\115\1\35\3\115\1\116\1\117\4\115\1\43"+
    "\1\45\1\46\1\35\1\120\1\35\1\34\1\50\2\43"+
    "\1\16\22\43\1\35\3\43\1\116\1\117\5\43\1\45"+
    "\1\46\1\35\1\121\1\35\1\34\1\50\1\122\1\35"+
    "\1\16\12\35\1\123\22\35\1\36\1\37\1\35\1\124"+
    "\2\34\3\35\1\16\1\125\1\35\4\125\1\35\5\125"+
    "\1\35\5\125\1\35\3\125\1\126\1\35\4\125\1\35"+
    "\1\36\1\37\1\35\1\127\2\34\2\35\1\34\1\16"+
    "\35\34\1\130\1\131\6\34\1\132\1\16\22\132\1\35"+
    "\12\132\1\133\1\134\1\35\1\135\1\35\1\34\1\136"+
    "\1\132\60\0\1\137\14\0\1\140\25\0\1\141\47\0"+
    "\1\142\53\0\1\143\47\0\1\144\43\0\1\145\42\0"+
    "\1\146\52\0\1\147\46\0\1\150\35\0\37\151\1\35"+
    "\7\151\40\152\1\35\6\152\2\0\1\41\1\0\4\41"+
    "\1\0\5\41\1\0\5\41\1\0\3\41\2\0\5\41"+
    "\12\0\1\44\1\0\4\44\1\0\5\44\1\0\5\44"+
    "\1\0\3\44\2\0\5\44\12\0\1\55\1\0\4\55"+
    "\1\0\1\153\4\55\1\0\5\55\1\0\1\55\1\154"+
    "\1\55\2\0\5\55\12\0\1\55\1\0\1\55\1\155"+
    "\2\55\1\0\5\55\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\12\0\1\55\1\0\4\55\1\0\5\55\1\0"+
    "\5\55\1\0\3\55\2\0\5\55\12\0\1\55\1\0"+
    "\4\55\1\0\5\55\1\0\5\55\1\0\3\55\2\0"+
    "\1\156\4\55\16\0\1\157\42\0\1\55\1\0\4\55"+
    "\1\0\2\55\1\160\2\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\3\55"+
    "\1\161\1\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\2\55\1\162\1\55\1\0\5\55"+
    "\1\0\5\55\1\0\3\55\2\0\5\55\12\0\1\55"+
    "\1\0\4\55\1\0\1\163\4\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\15\0\1\164\43\0\1\55\1\0"+
    "\4\55\1\0\1\165\4\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\1\166"+
    "\4\55\1\0\5\55\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\2\55\1\167\1\55\1\0\5\55\1\0"+
    "\5\55\1\0\3\55\2\0\5\55\12\0\1\55\1\0"+
    "\1\55\1\170\2\55\1\0\5\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\76\1\0\4\76\1\0"+
    "\1\171\4\76\1\0\5\76\1\0\1\76\1\172\1\76"+
    "\2\0\5\76\12\0\1\76\1\0\1\76\1\173\2\76"+
    "\1\0\5\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\76\1\0\4\76\1\0\5\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\5\76\1\0\5\76\1\0\3\76\2\0\1\174"+
    "\4\76\16\0\1\175\42\0\1\76\1\0\4\76\1\0"+
    "\2\76\1\176\2\76\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\12\0\1\76\1\0\4\76\1\0\3\76\1\177"+
    "\1\76\1\0\5\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\2\76\1\200\1\76\1\0\5\76\1\0"+
    "\5\76\1\0\3\76\2\0\5\76\12\0\1\76\1\0"+
    "\4\76\1\0\1\201\4\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\15\0\1\202\43\0\1\76\1\0\4\76"+
    "\1\0\1\203\4\76\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\12\0\1\76\1\0\4\76\1\0\1\204\4\76"+
    "\1\0\5\76\1\0\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\2\76\1\205\1\76\1\0\5\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\1\76"+
    "\1\206\2\76\1\0\5\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\115\1\0\4\115\1\0\5\115"+
    "\1\0\5\115\1\0\3\115\2\0\5\115\16\0\1\207"+
    "\42\0\1\125\1\0\4\125\1\0\5\125\1\0\5\125"+
    "\1\0\3\125\2\0\5\125\32\0\1\210\45\0\1\211"+
    "\33\0\1\212\47\0\1\213\50\0\1\214\37\0\1\215"+
    "\16\0\1\216\32\0\1\217\60\0\1\220\44\0\1\221"+
    "\51\0\1\222\30\0\1\55\1\0\4\55\1\0\5\55"+
    "\1\0\3\55\1\223\1\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\0\5\55\1\0\2\55"+
    "\1\224\2\55\1\0\3\55\2\0\5\55\12\0\1\55"+
    "\1\0\2\55\1\225\1\55\1\0\5\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\0\1\55\1\226\3\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\17\0\1\227\41\0\1\55\1\0\4\55"+
    "\1\0\1\230\4\55\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\12\0\1\231\1\0\4\55\1\0\5\55\1\0"+
    "\2\55\1\232\2\55\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\4\55\1\0\4\55\1\233\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\1\55"+
    "\1\234\2\55\1\0\5\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\27\0\1\235\31\0\1\55\1\0\4\55"+
    "\1\0\4\55\1\236\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\12\0\1\55\1\0\4\55\1\0\5\55\1\0"+
    "\1\55\1\237\3\55\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\3\55\1\240\1\0\5\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\0\5\55\1\0\1\241\4\55\1\0\3\55\2\0"+
    "\5\55\12\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\3\76\1\242\1\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\5\76\1\0\2\76\1\243"+
    "\2\76\1\0\3\76\2\0\5\76\12\0\1\76\1\0"+
    "\2\76\1\244\1\76\1\0\5\76\1\0\5\76\1\0"+
    "\3\76\2\0\5\76\12\0\1\76\1\0\4\76\1\0"+
    "\1\76\1\245\3\76\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\17\0\1\246\41\0\1\76\1\0\4\76\1\0"+
    "\1\247\4\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\250\1\0\4\76\1\0\5\76\1\0\2\76"+
    "\1\251\2\76\1\0\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\4\76\1\0\4\76\1\252\1\0\5\76\1\0"+
    "\3\76\2\0\5\76\12\0\1\76\1\0\1\76\1\253"+
    "\2\76\1\0\5\76\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\27\0\1\254\31\0\1\76\1\0\4\76\1\0"+
    "\4\76\1\255\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\76\1\0\4\76\1\0\5\76\1\0\1\76"+
    "\1\256\3\76\1\0\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\3\76\1\257\1\0\5\76\1\0\5\76\1\0"+
    "\3\76\2\0\5\76\12\0\1\76\1\0\4\76\1\0"+
    "\5\76\1\0\1\260\4\76\1\0\3\76\2\0\5\76"+
    "\25\0\1\261\43\0\1\262\47\0\1\263\35\0\1\264"+
    "\60\0\1\265\34\0\1\266\15\0\1\267\33\0\1\270"+
    "\64\0\1\271\42\0\1\272\42\0\1\273\40\0\1\274"+
    "\51\0\1\275\23\0\1\275\14\0\1\55\1\0\4\55"+
    "\1\0\1\55\1\276\3\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\2\55"+
    "\1\277\2\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\300\1\0\4\55\1\0\5\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\0\3\55\1\301\1\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\24\0\1\302\34\0\1\303\1\0\4\55"+
    "\1\0\5\55\1\0\1\55\1\304\3\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\1\55\1\305\2\55"+
    "\1\0\5\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\0\5\55\1\0\4\55"+
    "\1\306\1\0\3\55\2\0\5\55\12\0\1\307\1\0"+
    "\1\310\3\55\1\311\1\55\1\312\1\313\1\55\1\314"+
    "\1\315\3\55\1\316\1\317\1\320\3\55\2\0\2\55"+
    "\1\321\1\322\1\55\12\0\1\55\1\0\4\55\1\0"+
    "\5\55\1\0\1\323\4\55\1\0\3\55\2\0\5\55"+
    "\23\0\1\324\35\0\1\55\1\0\1\55\1\325\2\55"+
    "\1\0\5\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\326\5\55\1\0\5\55"+
    "\1\0\3\55\2\0\2\55\1\327\2\55\12\0\1\55"+
    "\1\0\4\55\1\0\3\55\1\330\1\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\0\2\55\1\331\2\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\76\1\0\4\76\1\0\1\76"+
    "\1\332\3\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\76\1\0\4\76\1\0\2\76\1\333\2\76"+
    "\1\0\5\76\1\0\3\76\2\0\5\76\12\0\1\334"+
    "\1\0\4\76\1\0\5\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\0\3\76"+
    "\1\335\1\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\24\0\1\336\34\0\1\337\1\0\4\76\1\0\5\76"+
    "\1\0\1\76\1\340\3\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\76\1\0\1\76\1\341\2\76\1\0\5\76"+
    "\1\0\5\76\1\0\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\4\76\1\0\5\76\1\0\4\76\1\342\1\0"+
    "\3\76\2\0\5\76\12\0\1\343\1\0\1\344\3\76"+
    "\1\311\1\76\1\345\1\346\1\76\1\347\1\315\3\76"+
    "\1\350\1\351\1\320\3\76\2\0\2\76\1\352\1\353"+
    "\1\76\12\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\1\354\4\76\1\0\3\76\2\0\5\76\23\0\1\355"+
    "\35\0\1\76\1\0\1\76\1\356\2\76\1\0\5\76"+
    "\1\0\5\76\1\0\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\4\76\1\357\5\76\1\0\5\76\1\0\3\76"+
    "\2\0\2\76\1\360\2\76\12\0\1\76\1\0\4\76"+
    "\1\0\3\76\1\361\1\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\0\2\76"+
    "\1\362\2\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\17\0\1\363\14\0\1\261\45\0\1\364\44\0\1\365"+
    "\34\0\1\366\57\0\1\367\42\0\1\370\45\0\1\371"+
    "\46\0\1\372\57\0\1\373\45\0\1\374\34\0\1\375"+
    "\60\0\1\376\25\0\1\377\46\0\1\55\1\0\4\55"+
    "\1\0\5\55\1\0\4\55\1\u0100\1\0\3\55\2\0"+
    "\5\55\12\0\1\55\1\0\4\55\1\0\5\55\1\0"+
    "\2\55\1\u0101\2\55\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\3\55\1\u0102\1\0\5\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\30\0\1\u0103\30\0\1\55"+
    "\1\0\4\55\1\0\3\55\1\u0104\1\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\0\2\55\1\u0105\2\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\2\55"+
    "\1\u0106\2\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\0\5\55\1\0\5\55"+
    "\1\u0107\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\0\1\u0108\4\55\1\0\5\55\1\0\1\55\1\u0109"+
    "\1\55\2\0\5\55\12\0\1\55\1\0\1\55\1\u010a"+
    "\2\55\1\0\5\55\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\16\0\1\u010b\42\0\1\55\1\0\4\55\1\0"+
    "\2\55\1\u010c\2\55\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\12\0\1\55\1\0\4\55\1\0\3\55\1\u010d"+
    "\1\55\1\0\5\55\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\4\55\1\0\1\u010e\4\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\15\0\1\u010f\43\0\1\55"+
    "\1\0\4\55\1\0\1\u0110\4\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\55\1\0\4\55\1\0"+
    "\1\u0111\4\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\u0112\1\0\1\u0113\3\0\1\311\1\0\1\u0114"+
    "\1\u0115\1\0\1\u0116\1\315\3\0\1\u0117\1\u0118\1\320"+
    "\7\0\1\311\1\315\13\0\1\55\1\0\2\55\1\u0119"+
    "\1\55\1\0\5\55\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\12\0\1\55\1\0\1\55\1\u011a\2\55\1\0"+
    "\5\55\1\0\5\55\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\4\55\1\0\5\55\1\0\4\55\1\u011b"+
    "\1\0\3\55\2\0\5\55\21\0\1\u011c\37\0\1\55"+
    "\1\0\4\55\1\0\5\55\1\0\4\55\1\u011d\1\0"+
    "\3\55\2\0\5\55\12\0\1\u011e\46\0\1\u011f\1\0"+
    "\4\55\1\0\5\55\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\12\0\1\55\1\0\4\55\1\0\5\55\1\0"+
    "\1\55\1\u0120\3\55\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\4\55\1\0\1\u0121\4\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\76\1\0\4\76"+
    "\1\0\5\76\1\0\4\76\1\u0122\1\0\3\76\2\0"+
    "\5\76\12\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\2\76\1\u0123\2\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\3\76\1\u0124\1\0\5\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\30\0\1\u0125\30\0\1\76"+
    "\1\0\4\76\1\0\3\76\1\u0126\1\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\2\76\1\u0127\2\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\0\2\76"+
    "\1\u0128\2\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\76\1\0\4\76\1\0\5\76\1\0\5\76"+
    "\1\u0129\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\1\u012a\4\76\1\0\5\76\1\0\1\76\1\u012b"+
    "\1\76\2\0\5\76\12\0\1\76\1\0\1\76\1\u012c"+
    "\2\76\1\0\5\76\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\12\0\1\76\1\0\4\76\1\0\2\76\1\u012d"+
    "\2\76\1\0\5\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\3\76\1\u012e\1\76\1\0"+
    "\5\76\1\0\3\76\2\0\5\76\12\0\1\76\1\0"+
    "\4\76\1\0\1\u012f\4\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\0\1\u0130"+
    "\4\76\1\0\5\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\1\u0131\4\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\2\76"+
    "\1\u0132\1\76\1\0\5\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\1\76\1\u0133\2\76"+
    "\1\0\5\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\76\1\0\4\76\1\0\5\76\1\0\4\76"+
    "\1\u0134\1\0\3\76\2\0\5\76\21\0\1\u0135\37\0"+
    "\1\76\1\0\4\76\1\0\5\76\1\0\4\76\1\u0136"+
    "\1\0\3\76\2\0\5\76\12\0\1\u0137\46\0\1\u0138"+
    "\1\0\4\76\1\0\5\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\0\5\76"+
    "\1\0\1\76\1\u0139\3\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\76\1\0\4\76\1\0\1\u013a\4\76\1\0"+
    "\5\76\1\0\3\76\2\0\5\76\42\0\1\u013b\30\0"+
    "\1\u013c\34\0\1\u013d\54\0\1\u013e\23\0\1\u013e\26\0"+
    "\1\u013f\47\0\1\u0140\52\0\1\u0141\43\0\1\u0142\16\0"+
    "\1\u0142\15\0\1\u0143\17\0\1\373\36\0\1\u0144\37\0"+
    "\1\u0145\55\0\1\u0146\53\0\1\216\27\0\1\55\1\0"+
    "\4\55\1\0\3\55\1\u0147\1\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\u0148\1\0\4\55\1\0"+
    "\5\55\1\0\5\55\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\4\55\1\u0149\5\55\1\0\5\55\1\0"+
    "\3\55\2\0\2\55\1\u014a\2\55\24\0\1\u014b\34\0"+
    "\1\55\1\0\4\55\1\0\4\55\1\u014c\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\0\5\55\1\0\2\55\1\u014d\2\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\5\55"+
    "\1\u014e\5\55\1\0\3\55\2\0\3\55\1\u014f\1\55"+
    "\14\0\1\u0150\17\0\1\u0107\24\0\1\55\1\0\4\55"+
    "\1\0\5\55\1\0\3\55\1\u0151\1\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\5\55"+
    "\1\0\2\55\1\u0152\2\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\2\55\1\u0153\1\55\1\0\5\55"+
    "\1\0\5\55\1\0\3\55\2\0\5\55\17\0\1\u0154"+
    "\41\0\1\55\1\0\4\55\1\0\1\u0155\4\55\1\0"+
    "\5\55\1\0\3\55\2\0\5\55\12\0\1\u0156\1\0"+
    "\4\55\1\0\5\55\1\0\2\55\1\u0157\2\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\55\1\0\1\55\1\u0158"+
    "\2\55\1\0\5\55\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\27\0\1\u0159\31\0\1\55\1\0\4\55\1\0"+
    "\4\55\1\u015a\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\0\5\55\1\0\1\55"+
    "\1\u015b\3\55\1\0\3\55\2\0\5\55\21\0\1\u015c"+
    "\14\0\1\u015d\25\0\1\u015e\54\0\1\u015f\47\0\1\u0160"+
    "\43\0\1\u0161\46\0\1\u0162\46\0\1\u0163\37\0\1\55"+
    "\1\0\3\55\1\u0164\1\0\5\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\55\1\0\4\55\1\0"+
    "\5\55\1\0\1\u0165\4\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\0\3\55\1\u0166\1\55"+
    "\1\0\5\55\1\0\3\55\2\0\5\55\15\0\1\u0167"+
    "\43\0\1\55\1\0\4\55\1\0\3\55\1\u0168\1\55"+
    "\1\0\5\55\1\0\3\55\2\0\5\55\31\0\1\u0169"+
    "\27\0\1\55\1\0\4\55\1\0\5\55\1\0\2\55"+
    "\1\232\2\55\1\0\3\55\2\0\5\55\12\0\1\55"+
    "\1\0\4\55\1\0\3\55\1\u016a\1\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\1\55"+
    "\1\u016b\2\55\1\0\5\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\76\1\0\4\76\1\0\3\76"+
    "\1\u016c\1\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\u016d\1\0\4\76\1\0\5\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\u016e\5\76\1\0\5\76\1\0\3\76\2\0\2\76"+
    "\1\u016f\2\76\24\0\1\u0170\34\0\1\76\1\0\4\76"+
    "\1\0\4\76\1\u0171\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\12\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\2\76\1\u0172\2\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\5\76\1\u0173\5\76\1\0"+
    "\3\76\2\0\3\76\1\u0174\1\76\14\0\1\u0175\17\0"+
    "\1\u0129\24\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\3\76\1\u0176\1\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\5\76\1\0\2\76\1\u0177"+
    "\2\76\1\0\3\76\2\0\5\76\12\0\1\76\1\0"+
    "\2\76\1\u0178\1\76\1\0\5\76\1\0\5\76\1\0"+
    "\3\76\2\0\5\76\12\0\1\76\1\0\4\76\1\0"+
    "\1\u0179\4\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\u017a\1\0\4\76\1\0\5\76\1\0\2\76"+
    "\1\u017b\2\76\1\0\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\1\76\1\u017c\2\76\1\0\5\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\4\76\1\u017d\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\12\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\1\76\1\u017e\3\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\3\76\1\u017f\1\0\5\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\5\76\1\0\1\u0180\4\76\1\0\3\76\2\0"+
    "\5\76\12\0\1\76\1\0\4\76\1\0\3\76\1\u0181"+
    "\1\76\1\0\5\76\1\0\3\76\2\0\5\76\15\0"+
    "\1\u0182\43\0\1\76\1\0\4\76\1\0\3\76\1\u0183"+
    "\1\76\1\0\5\76\1\0\3\76\2\0\5\76\31\0"+
    "\1\u0184\27\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\2\76\1\251\2\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\3\76\1\u0185\1\76\1\0"+
    "\5\76\1\0\3\76\2\0\5\76\12\0\1\76\1\0"+
    "\1\76\1\u0186\2\76\1\0\5\76\1\0\5\76\1\0"+
    "\3\76\2\0\5\76\22\0\1\u0187\63\0\1\271\26\0"+
    "\1\u0188\50\0\1\u0189\50\0\1\271\40\0\1\u018a\63\0"+
    "\1\u0146\34\0\1\u018b\23\0\1\u018b\36\0\1\u018c\31\0"+
    "\1\u018d\41\0\1\55\1\0\4\55\1\0\5\55\1\0"+
    "\5\55\1\0\2\55\1\306\2\0\5\55\12\0\1\55"+
    "\1\0\3\55\1\u018e\1\0\5\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\21\0\1\u018f\37\0\1\55\1\0"+
    "\4\55\1\0\1\u0190\4\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\23\0\1\u0191\35\0\1\55\1\0\1\55"+
    "\1\u0192\2\55\1\0\5\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\5\55"+
    "\1\0\3\55\1\u0168\1\55\1\0\3\55\2\0\5\55"+
    "\20\0\1\u0193\23\0\1\u0193\14\0\1\55\1\0\4\55"+
    "\1\u0193\5\55\1\0\5\55\1\0\3\55\2\0\2\55"+
    "\1\u0194\2\55\15\0\1\u0195\43\0\1\55\1\0\4\55"+
    "\1\0\1\55\1\u0196\3\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\2\55"+
    "\1\u0197\2\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\u0198\1\0\4\55\1\0\5\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\24\0\1\u0199\34\0\1\u019a"+
    "\1\0\4\55\1\0\5\55\1\0\1\55\1\u019b\3\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\1\55"+
    "\1\u019c\2\55\1\0\5\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\5\55"+
    "\1\0\4\55\1\u019d\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\4\55\1\0\5\55\1\0\1\u019e\4\55"+
    "\1\0\3\55\2\0\5\55\23\0\1\u019f\35\0\1\55"+
    "\1\0\1\55\1\u01a0\2\55\1\0\5\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\u01a1\5\55\1\0\5\55\1\0\3\55\2\0\2\55"+
    "\1\u01a2\2\55\32\0\1\u01a3\45\0\1\u01a4\33\0\1\u01a5"+
    "\51\0\1\u01a6\37\0\1\u01a7\16\0\1\u01a8\32\0\1\u01a9"+
    "\56\0\1\u01aa\51\0\1\u01ab\30\0\1\55\1\0\4\55"+
    "\1\0\3\55\1\u01ac\1\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\2\55"+
    "\1\u01ad\2\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\0\5\55\1\0\5\55"+
    "\1\u01ae\3\55\2\0\5\55\17\0\1\u01af\62\0\1\u0191"+
    "\25\0\1\55\1\0\4\55\1\0\2\55\1\306\2\55"+
    "\1\0\5\55\1\0\3\55\2\0\5\55\12\0\1\55"+
    "\1\0\3\55\1\u01b0\1\0\5\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\76\1\0\4\76\1\0"+
    "\5\76\1\0\5\76\1\0\2\76\1\342\2\0\5\76"+
    "\12\0\1\76\1\0\3\76\1\u01b1\1\0\5\76\1\0"+
    "\5\76\1\0\3\76\2\0\5\76\21\0\1\u01b2\37\0"+
    "\1\76\1\0\4\76\1\0\1\u01b3\4\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\23\0\1\u01b4\35\0\1\76"+
    "\1\0\1\76\1\u01b5\2\76\1\0\5\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\5\76\1\0\3\76\1\u0183\1\76\1\0\3\76"+
    "\2\0\5\76\20\0\1\u01b6\23\0\1\u01b6\14\0\1\76"+
    "\1\0\4\76\1\u01b6\5\76\1\0\5\76\1\0\3\76"+
    "\2\0\2\76\1\u01b7\2\76\15\0\1\u01b8\43\0\1\76"+
    "\1\0\4\76\1\0\1\76\1\u01b9\3\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\2\76\1\u01ba\2\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\u01bb\1\0\4\76\1\0\5\76"+
    "\1\0\5\76\1\0\3\76\2\0\5\76\12\0\1\u01bc"+
    "\1\0\4\76\1\0\5\76\1\0\1\76\1\u01bd\3\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\1\76"+
    "\1\u01be\2\76\1\0\5\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\0\5\76"+
    "\1\0\4\76\1\u01bf\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\5\76\1\0\1\u01c0\4\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\1\76"+
    "\1\u01c1\2\76\1\0\5\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\u01a1\5\76"+
    "\1\0\5\76\1\0\3\76\2\0\2\76\1\u01c2\2\76"+
    "\12\0\1\76\1\0\4\76\1\0\3\76\1\u01c3\1\76"+
    "\1\0\5\76\1\0\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\4\76\1\0\2\76\1\u01c4\2\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\5\76\1\0\5\76\1\u01c5\3\76\2\0\5\76"+
    "\17\0\1\u01c6\62\0\1\u01b4\25\0\1\76\1\0\4\76"+
    "\1\0\2\76\1\342\2\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\3\76\1\u01c7\1\0"+
    "\5\76\1\0\5\76\1\0\3\76\2\0\5\76\24\0"+
    "\1\u01c8\46\0\1\u01c9\40\0\1\u0146\53\0\1\376\60\0"+
    "\1\u01ca\33\0\1\u01cb\11\0\1\u018c\32\0\1\u01cc\23\0"+
    "\1\u01cc\14\0\1\55\1\0\4\55\1\0\3\55\1\u01cd"+
    "\1\55\1\0\5\55\1\0\3\55\2\0\5\55\16\0"+
    "\1\u01ce\42\0\1\55\1\0\2\55\1\u0168\1\55\1\0"+
    "\5\55\1\0\5\55\1\0\3\55\2\0\5\55\34\0"+
    "\1\u0107\24\0\1\55\1\0\4\55\1\0\2\55\1\u011d"+
    "\2\55\1\0\5\55\1\0\3\55\2\0\5\55\35\0"+
    "\1\u01cf\23\0\1\55\1\0\4\55\1\0\5\55\1\0"+
    "\5\55\1\0\1\u01d0\2\55\2\0\5\55\16\0\1\u01d1"+
    "\42\0\1\55\1\0\4\55\1\0\5\55\1\0\4\55"+
    "\1\u01d2\1\0\3\55\2\0\5\55\12\0\1\55\1\0"+
    "\4\55\1\0\5\55\1\0\2\55\1\u01d3\2\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\55\1\0\3\55\1\u01d4"+
    "\1\0\5\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\30\0\1\u01d5\30\0\1\55\1\0\4\55\1\0\3\55"+
    "\1\u01d6\1\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\0\2\55\1\u01d7\2\55"+
    "\1\0\5\55\1\0\3\55\2\0\5\55\12\0\1\55"+
    "\1\0\4\55\1\0\2\55\1\u01d8\2\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\0\5\55\1\0\5\55\1\u01d9\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\0\5\55\1\0\4\55"+
    "\1\u01da\1\0\3\55\2\0\5\55\21\0\1\u01db\37\0"+
    "\1\55\1\0\4\55\1\0\5\55\1\0\4\55\1\u01dc"+
    "\1\0\3\55\2\0\5\55\12\0\1\u01dd\46\0\1\u01de"+
    "\1\0\4\55\1\0\5\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\22\0\1\u01df\47\0\1\u01e0\35\0\1\u01e1"+
    "\46\0\1\u01e2\15\0\1\u01e3\33\0\1\u01e4\64\0\1\u01e5"+
    "\42\0\1\u01e6\34\0\1\u01e7\51\0\1\u01a1\23\0\1\u01a1"+
    "\14\0\1\55\1\0\4\55\1\0\5\55\1\0\1\55"+
    "\1\u01e8\3\55\1\0\3\55\2\0\5\55\12\0\1\55"+
    "\1\0\4\55\1\0\1\u01e9\4\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\22\0\1\u01ea\11\0\1\u01ae\32\0"+
    "\1\u01eb\23\0\1\u01eb\14\0\1\55\1\0\4\55\1\u01eb"+
    "\5\55\1\0\5\55\1\0\3\55\2\0\2\55\1\u01ec"+
    "\2\55\12\0\1\76\1\0\4\76\1\0\3\76\1\u01ed"+
    "\1\76\1\0\5\76\1\0\3\76\2\0\5\76\16\0"+
    "\1\u01ee\42\0\1\76\1\0\2\76\1\u0183\1\76\1\0"+
    "\5\76\1\0\5\76\1\0\3\76\2\0\5\76\34\0"+
    "\1\u0129\24\0\1\76\1\0\4\76\1\0\2\76\1\u0136"+
    "\2\76\1\0\5\76\1\0\3\76\2\0\5\76\35\0"+
    "\1\u01ef\23\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\5\76\1\0\1\u01f0\2\76\2\0\5\76\16\0\1\u01f1"+
    "\42\0\1\76\1\0\4\76\1\0\5\76\1\0\4\76"+
    "\1\u01f2\1\0\3\76\2\0\5\76\12\0\1\76\1\0"+
    "\4\76\1\0\5\76\1\0\2\76\1\u01f3\2\76\1\0"+
    "\3\76\2\0\5\76\12\0\1\76\1\0\3\76\1\u01f4"+
    "\1\0\5\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\76\1\0\4\76\1\0\3\76\1\u01f5\1\76"+
    "\1\0\5\76\1\0\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\4\76\1\0\2\76\1\u01f6\2\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\2\76\1\u01f7\2\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\0\5\76"+
    "\1\0\5\76\1\u01d9\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\4\76\1\0\5\76\1\0\4\76\1\u01f8\1\0"+
    "\3\76\2\0\5\76\12\0\1\76\1\0\4\76\1\0"+
    "\5\76\1\0\4\76\1\u01f9\1\0\3\76\2\0\5\76"+
    "\12\0\1\u01fa\1\0\4\76\1\0\5\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\5\76\1\0\1\76\1\u01fb\3\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\0\1\u01fc"+
    "\4\76\1\0\5\76\1\0\3\76\2\0\5\76\22\0"+
    "\1\u01fd\11\0\1\u01c5\32\0\1\u01fe\23\0\1\u01fe\14\0"+
    "\1\76\1\0\4\76\1\u01fe\5\76\1\0\5\76\1\0"+
    "\3\76\2\0\2\76\1\u01ff\2\76\23\0\1\u0200\47\0"+
    "\1\u0201\45\0\1\u0202\41\0\1\376\42\0\1\55\1\0"+
    "\4\55\1\0\2\55\1\u0203\2\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\24\0\1\u0204\34\0\1\55\1\0"+
    "\4\55\1\0\3\55\1\u0205\1\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\u0206\46\0\1\55\1\0"+
    "\4\55\1\0\3\55\1\u0207\1\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\u0208\1\0\4\55\1\0"+
    "\5\55\1\0\5\55\1\0\3\55\2\0\5\55\12\0"+
    "\1\55\1\0\4\55\1\u0209\5\55\1\0\5\55\1\0"+
    "\3\55\2\0\2\55\1\u020a\2\55\24\0\1\u020b\34\0"+
    "\1\55\1\0\4\55\1\0\4\55\1\u020c\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\12\0\1\55\1\0\4\55"+
    "\1\0\5\55\1\0\2\55\1\u020d\2\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\4\55\1\0\5\55"+
    "\1\u020e\5\55\1\0\3\55\2\0\3\55\1\u020f\1\55"+
    "\14\0\1\u0113\17\0\1\u01d9\24\0\1\55\1\0\4\55"+
    "\1\0\3\55\1\u0210\1\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\15\0\1\u0211\43\0\1\55\1\0\4\55"+
    "\1\0\3\55\1\u0212\1\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\31\0\1\u01a8\27\0\1\55\1\0\4\55"+
    "\1\0\5\55\1\0\2\55\1\u0157\2\55\1\0\3\55"+
    "\2\0\5\55\33\0\1\u0213\44\0\1\u0214\34\0\1\u0215"+
    "\53\0\1\u0216\45\0\1\u0217\46\0\1\u0218\57\0\1\u01d9"+
    "\45\0\1\u0219\46\0\1\u021a\25\0\1\55\1\0\4\55"+
    "\1\0\3\55\1\u021b\1\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\55\1\0\1\55\1\u021c\2\55"+
    "\1\0\5\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\23\0\1\u021d\41\0\1\u021e\42\0\1\55\1\0\2\55"+
    "\1\u011d\1\55\1\0\5\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\12\0\1\76\1\0\4\76\1\0\2\76"+
    "\1\u021f\2\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\24\0\1\u0220\34\0\1\76\1\0\4\76\1\0\3\76"+
    "\1\u0221\1\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\u0222\46\0\1\76\1\0\4\76\1\0\3\76"+
    "\1\u0223\1\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\u0224\1\0\4\76\1\0\5\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\u0209\5\76\1\0\5\76\1\0\3\76\2\0\2\76"+
    "\1\u0225\2\76\12\0\1\76\1\0\4\76\1\0\4\76"+
    "\1\u0226\1\0\5\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\5\76\1\0\2\76\1\u0227"+
    "\2\76\1\0\3\76\2\0\5\76\12\0\1\76\1\0"+
    "\4\76\1\0\5\76\1\u020e\5\76\1\0\3\76\2\0"+
    "\3\76\1\u0228\1\76\12\0\1\76\1\0\4\76\1\0"+
    "\3\76\1\u0229\1\76\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\12\0\1\76\1\0\4\76\1\0\3\76\1\u022a"+
    "\1\76\1\0\5\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\5\76\1\0\2\76\1\u017b"+
    "\2\76\1\0\3\76\2\0\5\76\12\0\1\76\1\0"+
    "\4\76\1\0\3\76\1\u022b\1\76\1\0\5\76\1\0"+
    "\3\76\2\0\5\76\12\0\1\76\1\0\1\76\1\u022c"+
    "\2\76\1\0\5\76\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\23\0\1\u022d\41\0\1\u022e\42\0\1\76\1\0"+
    "\2\76\1\u0136\1\76\1\0\5\76\1\0\5\76\1\0"+
    "\3\76\2\0\5\76\13\0\1\u022f\20\0\1\u0230\14\0"+
    "\1\u0231\1\0\1\u0231\27\0\1\u0232\36\0\1\u0233\34\0"+
    "\1\55\1\u0234\4\55\1\0\5\55\1\0\5\55\1\u0235"+
    "\3\55\2\0\5\55\2\0\1\u0236\1\0\1\u0236\27\0"+
    "\1\u0237\24\0\1\55\1\0\4\55\1\0\5\55\1\0"+
    "\5\55\1\u0237\3\55\2\0\5\55\17\0\1\u0238\41\0"+
    "\1\55\1\0\4\55\1\0\5\55\1\0\5\55\1\0"+
    "\2\55\1\u019d\2\0\5\55\12\0\1\55\1\0\3\55"+
    "\1\u0239\1\0\5\55\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\21\0\1\u023a\37\0\1\55\1\0\4\55\1\0"+
    "\1\u023b\4\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\23\0\1\u01e5\35\0\1\55\1\0\1\55\1\u023c\2\55"+
    "\1\0\5\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\4\55\1\0\5\55\1\0\3\55"+
    "\1\u0212\1\55\1\0\3\55\2\0\5\55\20\0\1\u023d"+
    "\23\0\1\u023d\14\0\1\55\1\0\4\55\1\u023d\5\55"+
    "\1\0\5\55\1\0\3\55\2\0\2\55\1\u023e\2\55"+
    "\12\0\1\55\1\0\4\55\1\0\5\55\1\0\5\55"+
    "\1\u023f\3\55\2\0\5\55\17\0\1\u0240\53\0\1\u0241"+
    "\34\0\1\u0242\54\0\1\u0209\23\0\1\u0209\27\0\1\u0243"+
    "\52\0\1\u0244\43\0\1\u020e\16\0\1\u020e\25\0\1\u0245"+
    "\46\0\1\u0246\34\0\1\55\1\0\4\55\1\0\2\55"+
    "\1\u019d\2\55\1\0\5\55\1\0\3\55\2\0\5\55"+
    "\12\0\1\55\1\0\3\55\1\u0247\1\0\5\55\1\0"+
    "\5\55\1\0\3\55\2\0\5\55\24\0\1\u0248\46\0"+
    "\1\u01ce\34\0\1\76\1\u0249\4\76\1\0\5\76\1\0"+
    "\5\76\1\u024a\3\76\2\0\5\76\2\0\1\u024b\1\0"+
    "\1\u024b\27\0\1\u024c\24\0\1\76\1\0\4\76\1\0"+
    "\5\76\1\0\5\76\1\u024c\3\76\2\0\5\76\17\0"+
    "\1\u024d\41\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\5\76\1\0\2\76\1\u01bf\2\0\5\76\12\0\1\76"+
    "\1\0\3\76\1\u024e\1\0\5\76\1\0\5\76\1\0"+
    "\3\76\2\0\5\76\12\0\1\76\1\0\4\76\1\0"+
    "\1\u024f\4\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\12\0\1\76\1\0\1\76\1\u0250\2\76\1\0\5\76"+
    "\1\0\5\76\1\0\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\4\76\1\0\5\76\1\0\3\76\1\u022a\1\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\u023d\5\76\1\0\5\76\1\0\3\76\2\0\2\76"+
    "\1\u0251\2\76\12\0\1\76\1\0\4\76\1\0\5\76"+
    "\1\0\5\76\1\u023f\3\76\2\0\5\76\12\0\1\76"+
    "\1\0\4\76\1\0\2\76\1\u01bf\2\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\3\76"+
    "\1\u0252\1\0\5\76\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\24\0\1\u0253\46\0\1\u01ee\56\0\1\u022f\3\0"+
    "\1\u0254\10\0\1\u022f\1\0\1\u022f\6\0\1\u022f\1\u0143"+
    "\17\0\1\u0230\14\0\1\u0231\1\0\1\u0231\6\0\1\u022f"+
    "\20\0\1\u0231\14\0\1\u0231\1\0\1\u0231\21\0\1\u0255"+
    "\16\0\1\u0255\13\0\1\u0256\70\0\1\u0234\3\0\1\u0257"+
    "\10\0\1\u0234\1\0\1\u0234\6\0\1\u0234\1\u0150\17\0"+
    "\1\u0235\14\0\1\u0236\1\0\1\u0236\6\0\1\u0234\20\0"+
    "\1\u0236\14\0\1\u0236\1\0\1\u0236\21\0\1\u0258\16\0"+
    "\1\u0258\21\0\1\u0149\23\0\1\u0149\14\0\1\55\1\0"+
    "\4\55\1\0\3\55\1\u0259\1\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\16\0\1\u0246\42\0\1\55\1\0"+
    "\2\55\1\u0212\1\55\1\0\5\55\1\0\5\55\1\0"+
    "\3\55\2\0\5\55\12\0\1\55\1\0\4\55\1\0"+
    "\2\55\1\u01dc\2\55\1\0\5\55\1\0\3\55\2\0"+
    "\5\55\35\0\1\u025a\23\0\1\55\1\0\4\55\1\0"+
    "\5\55\1\0\5\55\1\0\1\u025b\2\55\2\0\5\55"+
    "\22\0\1\u025c\11\0\1\u023f\32\0\1\u025d\23\0\1\u025d"+
    "\41\0\1\u01e5\26\0\1\u025e\44\0\1\u025f\63\0\1\u0246"+
    "\50\0\1\u023f\24\0\1\55\1\0\4\55\1\u025d\5\55"+
    "\1\0\5\55\1\0\3\55\2\0\2\55\1\u0260\2\55"+
    "\12\0\1\u0261\70\0\1\u0249\3\0\1\u0262\10\0\1\u0249"+
    "\1\0\1\u0249\6\0\1\u0249\1\u0175\17\0\1\u024a\14\0"+
    "\1\u024b\1\0\1\u024b\6\0\1\u0249\20\0\1\u024b\14\0"+
    "\1\u024b\1\0\1\u024b\21\0\1\u0263\16\0\1\u0263\21\0"+
    "\1\u016e\23\0\1\u016e\14\0\1\76\1\0\4\76\1\0"+
    "\3\76\1\u0264\1\76\1\0\5\76\1\0\3\76\2\0"+
    "\5\76\12\0\1\76\1\0\2\76\1\u022a\1\76\1\0"+
    "\5\76\1\0\5\76\1\0\3\76\2\0\5\76\12\0"+
    "\1\76\1\0\4\76\1\0\2\76\1\u01f9\2\76\1\0"+
    "\5\76\1\0\3\76\2\0\5\76\12\0\1\76\1\0"+
    "\4\76\1\0\5\76\1\0\5\76\1\0\1\u0265\2\76"+
    "\2\0\5\76\12\0\1\76\1\0\4\76\1\u025d\5\76"+
    "\1\0\5\76\1\0\3\76\2\0\2\76\1\u0266\2\76"+
    "\12\0\1\u0267\46\0\1\u0268\1\0\4\u0268\1\0\5\u0268"+
    "\1\0\5\u0268\1\u0254\3\u0268\2\0\4\u0268\3\0\1\u0254"+
    "\1\0\1\u0254\13\0\1\u0269\23\0\1\u0269\14\0\1\u026a"+
    "\1\0\4\u026a\1\0\5\u026a\1\0\5\u026a\1\u0257\3\u026a"+
    "\2\0\4\u026a\3\0\1\u0257\1\0\1\u0257\5\0\1\55"+
    "\1\0\4\55\1\0\2\55\1\u026b\2\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\24\0\1\u026c\34\0\1\55"+
    "\1\0\4\55\1\0\3\55\1\u026d\1\55\1\0\5\55"+
    "\1\0\3\55\2\0\5\55\23\0\1\u026e\41\0\1\u021a"+
    "\54\0\1\u026f\45\0\1\u021a\35\0\1\55\1\0\2\55"+
    "\1\u01dc\1\55\1\0\5\55\1\0\5\55\1\0\3\55"+
    "\2\0\5\55\20\0\1\u0270\23\0\1\u0270\14\0\1\u0271"+
    "\1\0\4\u0271\1\0\5\u0271\1\0\5\u0271\1\u0262\3\u0271"+
    "\2\0\4\u0271\3\0\1\u0262\1\0\1\u0262\5\0\1\76"+
    "\1\0\4\76\1\0\2\76\1\u0272\2\76\1\0\5\76"+
    "\1\0\3\76\2\0\5\76\12\0\1\76\1\0\4\76"+
    "\1\0\3\76\1\u0273\1\76\1\0\5\76\1\0\3\76"+
    "\2\0\5\76\12\0\1\76\1\0\2\76\1\u01f9\1\76"+
    "\1\0\5\76\1\0\5\76\1\0\3\76\2\0\5\76"+
    "\20\0\1\u0274\23\0\1\u0274\14\0\1\u0268\1\0\4\u0268"+
    "\1\0\5\u0268\1\0\5\u0268\1\u0275\3\u0268\1\0\1\271"+
    "\5\u0268\2\0\1\u0275\1\0\1\u0275\21\0\1\u0276\16\0"+
    "\1\u0276\13\0\1\u026a\1\0\4\u026a\1\0\5\u026a\1\0"+
    "\5\u026a\1\u0277\3\u026a\1\0\1\u0191\5\u026a\2\0\1\u0277"+
    "\1\0\1\u0277\5\0\1\55\1\u0278\4\55\1\0\5\55"+
    "\1\0\5\55\1\u0279\3\55\2\0\5\55\2\0\1\u027a"+
    "\1\0\1\u027a\27\0\1\u027b\24\0\1\55\1\0\4\55"+
    "\1\0\5\55\1\0\5\55\1\u027b\3\55\2\0\5\55"+
    "\24\0\1\u027c\45\0\1\u027d\51\0\1\u027e\16\0\1\u027e"+
    "\13\0\1\u0271\1\0\4\u0271\1\0\5\u0271\1\0\5\u0271"+
    "\1\u027f\3\u0271\1\0\1\u01b4\5\u0271\2\0\1\u027f\1\0"+
    "\1\u027f\5\0\1\76\1\u0278\4\76\1\0\5\76\1\0"+
    "\5\76\1\u0279\3\76\2\0\5\76\2\0\1\u027a\1\0"+
    "\1\u027a\5\0\1\76\1\0\4\76\1\0\5\76\1\0"+
    "\5\76\1\u027b\3\76\2\0\5\76\26\0\1\u0280\16\0"+
    "\1\u0280\35\0\1\u0275\4\0\1\271\7\0\1\u0275\1\0"+
    "\1\u0275\13\0\1\u0281\23\0\1\u0281\36\0\1\u0277\4\0"+
    "\1\u0191\7\0\1\u0277\1\0\1\u0277\27\0\1\u0278\3\0"+
    "\1\u0282\10\0\1\u0278\1\0\1\u0278\6\0\1\u0278\1\u0113"+
    "\17\0\1\u0279\14\0\1\u027a\1\0\1\u027a\6\0\1\u0278"+
    "\20\0\1\u027a\14\0\1\u027a\1\0\1\u027a\21\0\1\315"+
    "\16\0\1\315\13\0\1\u0283\47\0\1\u0278\20\0\1\u0279"+
    "\14\0\1\u027a\1\0\1\u027a\13\0\1\u0284\23\0\1\u0284"+
    "\36\0\1\u027f\4\0\1\u01b4\7\0\1\u027f\1\0\1\u027f"+
    "\13\0\1\u0285\23\0\1\u0285\23\0\1\u0286\37\0\1\u0287"+
    "\1\0\4\u0287\1\0\5\u0287\1\0\5\u0287\1\u0282\3\u0287"+
    "\2\0\4\u0287\3\0\1\u0282\1\0\1\u0282\13\0\1\u0288"+
    "\23\0\1\u0288\23\0\1\u0289\46\0\1\u028a\43\0\1\271"+
    "\42\0\1\u0287\1\0\4\u0287\1\0\5\u0287\1\0\5\u0287"+
    "\1\u028b\3\u0287\1\0\1\u01e5\5\u0287\2\0\1\u028b\1\0"+
    "\1\u028b\21\0\1\u028c\16\0\1\u028c\17\0\1\u0191\46\0"+
    "\1\u01b4\64\0\1\u028b\4\0\1\u01e5\7\0\1\u028b\1\0"+
    "\1\u028b\13\0\1\u028d\23\0\1\u028d\23\0\1\u028e\43\0"+
    "\1\u01e5\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\11\1\1\1\11\12\1\3\11\2\1\1\11"+
    "\1\1\2\11\3\1\3\11\1\1\1\11\17\1\1\11"+
    "\20\1\1\11\1\1\5\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\2\1\2\11\14\0\4\1\1\0\4\1"+
    "\1\0\10\1\1\0\4\1\1\0\4\1\14\0\4\1"+
    "\1\0\5\1\1\0\10\1\1\0\5\1\1\0\4\1"+
    "\15\0\4\1\1\0\6\1\1\0\3\1\1\0\2\1"+
    "\1\0\3\1\1\0\1\1\1\0\7\1\1\0\16\1"+
    "\1\0\1\1\1\0\3\1\15\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\2\1\7\0\3\1"+
    "\1\0\1\1\1\0\6\1\1\0\3\1\1\0\13\1"+
    "\1\0\1\1\1\0\3\1\13\0\1\11\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\3\1\1\0"+
    "\4\1\1\0\2\1\10\0\3\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\14\1\1\0\1\1\1\0\2\1\7\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\3\1\1\0\5\1\1\0"+
    "\1\1\1\0\1\1\11\0\2\1\2\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\14\1\2\0\1\1\1\11"+
    "\4\0\1\1\1\11\1\0\1\1\1\0\3\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\1\1\11\0"+
    "\2\1\2\0\2\1\1\11\1\0\1\1\1\0\13\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\10\0\2\1\2\0\1\1\1\0\1\1\1\0\12\1"+
    "\14\0\1\1\1\0\2\1\1\0\1\1\7\0\1\11"+
    "\1\1\6\0\5\1\6\0\1\1\1\0\1\1\4\0"+
    "\1\1\3\0\3\1\4\0\1\1\1\0\1\1\4\0"+
    "\2\1\33\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[654];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMNAMEHomonymy.class.getName());
	String location = "MAIN PROGRAM";
	
	Map<String, List<String>> hierarchy = new HashMap<String, List<String>>();
	Map<String, List<String>> variables = new HashMap<String, List<String>>();
	List<String> locOrder = new LinkedList<String>();
	List<String> parameters = new LinkedList<String>();
	int par = 0;
	boolean end = true, endStruct = true;
    String parsedFileName;
	
	public COMNAMEHomonymy(){
		locOrder.add(location);
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
        this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
	private void chechHomonymy(String var) throws JFlexException {
        LOGGER.finest("begin method chechHomonymy");
		String loc = location;
		boolean found = false;
		while (loc!=null && !found) {
			List<String> list = variables.get(loc);
			if(list != null) {
				if(list.contains(var) && !parameters.contains(var)) {
					LOGGER.fine("Setting error line "+(yyline+1)+" because the variable"+ var +" is already defined in this file.");
					setError(location,"Variable names should be unique. The variable " + var + " is already defined in this file.", yyline+1);
					found = true;
				}
			}
			if(!found) loc = findParent(loc);
		}
        LOGGER.finest("end method chechHomonymy");
	}
	
	private String findParent(String currentLoc) {
        LOGGER.finest("begin method findParent");
		Iterator<Entry<String, List<String>>> it = hierarchy.entrySet().iterator();
		while (it.hasNext()) {
			Entry<String, List<String>> pairs = it.next();
			List<String> list = pairs.getValue();
			if(list.contains(currentLoc)) return pairs.getKey();
		}
        LOGGER.finest("end method findParent");
		return null;
	}


	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMNAMEHomonymy(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 41: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\" )");
				                    yybegin(COMMENT);
            }
          case 42: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 43: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 44: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 45: break;
          case 6: 
            { 
            }
          case 46: break;
          case 7: 
            { if(endStruct){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                                        yybegin(NEW_LINE);
                                    } else {
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> AVOID (Transition : \\n )");
                                        yybegin(AVOID);
                                    }
            }
          case 47: break;
          case 8: 
            { String text = yytext().toLowerCase().trim();
								 if(!location.toLowerCase().trim().equals("module") || !text.equals("procedure")) {
								 	location = location + " " + text; 
								 	locOrder.add(location); String oldLoc = locOrder.get(locOrder.size()-2);
								 	List<String> list = hierarchy.get(oldLoc);
								 	if(list==null) list = new LinkedList<String>();
								 	list.add(location);
								 	hierarchy.put(oldLoc, list);
								 }
								 parameters.clear();
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> PARAMS (Transition : VAR \""+yytext()+"\" )");
								 yybegin(PARAMS);
            }
          case 48: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 49: break;
          case 10: 
            { end=true;
            }
          case 50: break;
          case 11: 
            { parameters.add(yytext());
            }
          case 51: break;
          case 12: 
            { if(end){
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - PARAMS -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
                                 }
            }
          case 52: break;
          case 13: 
            { end=false;
            }
          case 53: break;
          case 14: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 54: break;
          case 15: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 55: break;
          case 16: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NOTHING (Transition : . )");
                                    yybegin(NOTHING);
            }
          case 56: break;
          case 17: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NOTHING (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(NOTHING);
            }
          case 57: break;
          case 18: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 58: break;
          case 19: 
            { end=true; chechHomonymy(yytext());
								 List<String> list = variables.get(location);
								 if(list==null) list = new LinkedList<String>();
								 list.add(yytext());
								 variables.put(location, list);
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> AVOID_DECL (Transition : VAR \""+yytext()+"\" )");
								 yybegin(AVOID_DECL);
            }
          case 59: break;
          case 20: 
            { par++; end=true;
            }
          case 60: break;
          case 21: 
            { par--; end=true;
            }
          case 61: break;
          case 22: 
            { if(end){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> NEW_LINE (Transition : \\n )");
                                        yybegin(NEW_LINE);
                                    }
            }
          case 62: break;
          case 23: 
            { if(end){ 
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID_DECL -> NEW_LINE (Transition : \\n )");
                                        yybegin(NEW_LINE);
                                    }
            }
          case 63: break;
          case 24: 
            { end=true;
                                    if(par==0){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID_DECL -> DECLARATION (Transition : , )");
                                        yybegin(DECLARATION);
                                    }
            }
          case 64: break;
          case 25: 
            { if(endStruct){
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
                                 }
            }
          case 65: break;
          case 26: 
            { chechHomonymy(yytext());
								 List<String> list = variables.get(location);
								 if(list==null) list = new LinkedList<String>();
								 list.add(yytext());
								 variables.put(location, list);
								 endStruct = false;
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - TYPE_DEC -> AVOID (Transition : VAR \""+yytext()+"\" )");
								 yybegin(AVOID);
            }
          case 66: break;
          case 27: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - TYPE_DEC -> DECLARATION (Transition : [(] )");
                                    yybegin(DECLARATION);
            }
          case 67: break;
          case 28: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - TYPE_DEC -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 68: break;
          case 29: 
            { end = true;
            }
          case 69: break;
          case 30: 
            { if(end){
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NOTHING -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
                                 }
            }
          case 70: break;
          case 31: 
            { end = false;
            }
          case 71: break;
          case 32: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> TYPE_DEC (Transition : STRUCT \""+yytext()+"\" )");
                                    yybegin(TYPE_DEC);
            }
          case 72: break;
          case 33: 
            { par=0;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> DECLARATION (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 73: break;
          case 34: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> TYPE_DEC (Transition : STRUCT \""+yytext()+"\" )");
                                    yybegin(TYPE_DEC);
            }
          case 74: break;
          case 35: 
            { par=0;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> DECLARATION (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 75: break;
          case 36: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 76: break;
          case 37: 
            { location = yytext(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 77: break;
          case 38: 
            { location = yytext(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 78: break;
          case 39: 
            { endStruct = true;
            }
          case 79: break;
          case 40: 
            { locOrder.remove(locOrder.size()-1);
            }
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
