/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.TYPE.Expression rule. 	*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMTYPEExpression.lex</tt>
 */
public class COMTYPEExpression extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int DECL_PARAMS = 10;
  public static final int DECLARATION = 12;
  public static final int IO = 14;
  public static final int CONV_FUNC = 16;
  public static final int REAL = 18;
  public static final int AVOID = 20;
  public static final int AVOIDI = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\55\1\56\1\56\1\56\22\0\1\26\1\1\1\52\1\0"+
    "\1\53\1\0\1\36\1\51\1\31\1\57\1\3\1\33\1\61\1\34"+
    "\1\37\1\35\12\54\1\60\1\0\1\42\1\43\1\42\2\0\1\21"+
    "\1\17\1\2\1\15\1\14\1\4\1\20\1\24\1\45\1\44\1\47"+
    "\1\23\1\22\1\6\1\11\1\12\1\40\1\13\1\46\1\7\1\5"+
    "\1\41\1\27\1\25\1\44\1\32\4\0\1\50\1\0\1\21\1\17"+
    "\1\2\1\15\1\14\1\4\1\20\1\24\1\45\1\44\1\47\1\23"+
    "\1\22\1\6\1\11\1\12\1\40\1\13\1\46\1\7\1\5\1\41"+
    "\1\27\1\25\1\44\1\32\12\0\1\56\252\0\2\10\115\0\1\16"+
    "\u1ea8\0\1\56\1\56\u0100\0\1\30\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\3\6\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\3\14\1\12\4\14"+
    "\1\12\4\14\1\15\1\16\2\12\1\17\1\12\2\14"+
    "\2\12\1\20\1\21\1\14\1\22\3\14\1\6\4\14"+
    "\1\6\4\14\3\6\2\14\2\6\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\6\1\31\1\32\1\6"+
    "\1\33\1\34\1\35\6\0\5\14\1\0\1\36\1\22"+
    "\3\14\1\0\1\14\3\0\6\14\1\0\4\14\2\0"+
    "\5\14\1\0\1\17\6\0\12\14\1\0\1\37\3\14"+
    "\1\0\1\14\3\0\6\14\1\0\4\14\2\0\12\14"+
    "\2\0\1\40\1\0\1\31\4\0\1\14\1\0\7\14"+
    "\1\0\1\14\1\41\2\0\1\14\1\0\5\14\1\0"+
    "\4\14\2\0\4\14\1\0\1\14\1\16\5\0\3\14"+
    "\1\0\7\14\1\0\1\14\1\42\2\0\1\14\1\0"+
    "\5\14\1\0\4\14\2\0\4\14\1\0\3\14\3\0"+
    "\1\31\5\0\1\14\1\0\1\14\1\43\5\14\2\0"+
    "\1\44\2\0\4\14\1\45\1\14\1\0\2\14\1\0"+
    "\1\14\1\0\1\14\1\0\1\14\2\16\1\0\3\14"+
    "\1\0\1\14\1\46\5\14\2\0\1\47\2\0\4\14"+
    "\1\50\1\14\1\0\2\14\1\0\1\14\1\0\1\14"+
    "\1\0\3\14\1\0\1\33\5\0\1\14\1\0\1\14"+
    "\2\43\2\14\2\0\3\14\1\0\1\51\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\3\14\1\0\1\14\2\46"+
    "\2\14\2\0\3\14\1\0\1\52\1\14\1\0\1\14"+
    "\1\0\3\14\5\0\1\53\2\14\1\0\1\14\1\0"+
    "\4\14\1\0\1\54\1\0\5\14\1\0\1\14\1\0"+
    "\4\14\1\0\1\55\1\0\3\14\4\0\1\45\1\0"+
    "\1\14\1\45\2\14\2\0\1\14\1\50\1\0\1\14"+
    "\1\50\2\14\2\0\1\14\1\0\1\54\1\14\2\0"+
    "\1\14\1\55\1\14\2\0\1\14\20\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u0258\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u0258\0\u0258\0\u0258"+
    "\0\u0258\0\u03b6\0\u0258\0\u0258\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u0258\0\u0258\0\u06d6\0\u0708\0\u073a"+
    "\0\u073a\0\u076c\0\u079e\0\u0352\0\u0384\0\u0258\0\u0258\0\u07d0"+
    "\0\u041a\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u06d6\0\u0708"+
    "\0\u073a\0\u0a8c\0\u0abe\0\u0352\0\u0384\0\u0af0\0\u0b22\0\u0af0"+
    "\0\u0af0\0\u0258\0\u0258\0\u0b54\0\u0b86\0\u0bb8\0\u0258\0\u0bea"+
    "\0\u0258\0\u0258\0\u0258\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0352"+
    "\0\u0384\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0258"+
    "\0\u0258\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u0258\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u0258\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u0258\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6"+
    "\0\u2008\0\u203a\0\u0258\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134"+
    "\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4"+
    "\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454"+
    "\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4"+
    "\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774"+
    "\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u0258\0\u286e\0\u28a0\0\u28d2"+
    "\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62"+
    "\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2"+
    "\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82"+
    "\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12"+
    "\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2"+
    "\0\u30d4\0\u0258\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200"+
    "\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390"+
    "\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520"+
    "\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0"+
    "\0\u36e2\0\u3714\0\u3746\0\u0258\0\u3778\0\u37aa\0\u37dc\0\u380e"+
    "\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e"+
    "\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e"+
    "\0\u0b54\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c"+
    "\0\u3cbe\0\u3cf0\0\u0258\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea"+
    "\0\u3e1c\0\u3e4e\0\u3e80\0\u0258\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48"+
    "\0\u3f7a\0\u3458\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6"+
    "\0\u0258\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204"+
    "\0\u4236\0\u0258\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362"+
    "\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e\0\u0258\0\u44c0"+
    "\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650"+
    "\0\u4682\0\u047e\0\u46b4\0\u46e6\0\u4718\0\u474a\0\u477c\0\u47ae"+
    "\0\u47e0\0\u4812\0\u4844\0\u4876\0\u48a8\0\u48da\0\u490c\0\u493e"+
    "\0\u0834\0\u4970\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c"+
    "\0\u4ace\0\u047e\0\u4b00\0\u4b32\0\u0258\0\u4b64\0\u4b96\0\u4bc8"+
    "\0\u4bfa\0\u4c2c\0\u0834\0\u4c5e\0\u4c90\0\u0258\0\u4cc2\0\u4cf4"+
    "\0\u4d26\0\u4d58\0\u4d8a\0\u4dbc\0\u0258\0\u4dee\0\u4e20\0\u4e52"+
    "\0\u4e84\0\u0258\0\u4eb6\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e\0\u4fb0"+
    "\0\u4fe2\0\u5014\0\u5046\0\u5078\0\u50aa\0\u50dc\0\u510e\0\u5140"+
    "\0\u5172\0\u51a4\0\u51d6\0\u5208\0\u523a\0\u526c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\2\17\1\20\5\15\1\21\3\15\1\22"+
    "\3\15\1\23\23\15\1\22\2\15\1\24\1\25\2\15"+
    "\1\26\1\27\3\15\1\30\1\16\53\30\1\31\1\27"+
    "\4\30\1\16\1\32\1\30\4\32\1\30\5\32\1\30"+
    "\7\32\1\30\1\32\2\30\1\32\5\30\2\32\2\30"+
    "\4\32\5\30\1\33\1\27\3\30\1\34\1\16\1\35"+
    "\1\36\1\37\1\40\1\41\1\40\1\42\1\43\1\44"+
    "\1\45\1\40\1\46\1\47\2\40\1\50\1\51\1\52"+
    "\2\40\1\34\1\53\1\34\1\54\1\40\2\55\1\56"+
    "\1\34\1\57\2\40\1\60\1\61\1\40\1\62\1\63"+
    "\1\40\1\34\1\64\1\65\2\34\1\66\1\27\1\67"+
    "\2\34\1\30\1\16\1\70\1\71\1\72\1\73\1\74"+
    "\1\73\1\75\1\76\1\77\1\100\1\73\1\101\1\102"+
    "\2\73\1\103\1\104\1\105\2\73\1\30\1\106\1\30"+
    "\1\54\1\73\2\55\1\107\1\30\1\110\2\73\1\60"+
    "\1\111\1\73\1\112\1\113\1\73\1\30\1\114\1\115"+
    "\2\30\1\116\1\27\1\67\2\30\1\27\1\16\60\27"+
    "\1\30\1\16\1\117\1\30\4\117\1\30\5\117\1\30"+
    "\7\117\1\30\1\117\2\30\1\117\5\30\2\117\2\30"+
    "\4\117\1\30\1\114\1\115\2\30\1\120\1\27\4\30"+
    "\1\16\53\30\1\121\1\27\4\30\1\16\27\30\1\54"+
    "\17\30\1\114\1\115\2\30\1\122\1\27\1\123\3\30"+
    "\1\16\1\124\1\30\4\124\1\30\5\124\1\30\7\124"+
    "\1\30\1\124\1\125\1\30\1\124\5\30\2\124\2\30"+
    "\3\124\1\126\1\30\1\114\1\115\2\30\1\127\1\27"+
    "\1\30\1\130\1\131\1\30\1\16\27\30\1\54\17\30"+
    "\1\114\1\115\4\30\1\132\3\30\1\16\27\30\1\54"+
    "\25\30\1\133\2\30\67\0\1\134\67\0\1\135\53\0"+
    "\1\136\65\0\1\137\50\0\51\140\1\30\10\140\52\141"+
    "\1\30\7\141\2\0\1\32\1\0\4\32\1\0\5\32"+
    "\1\0\7\32\1\0\1\32\2\0\1\32\5\0\2\32"+
    "\2\0\5\32\3\0\1\32\7\0\1\40\1\0\4\40"+
    "\1\0\1\142\2\40\1\143\1\40\1\0\2\40\1\144"+
    "\1\145\1\40\1\146\1\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\10\0"+
    "\1\151\60\0\1\40\1\0\1\40\1\152\2\40\1\0"+
    "\1\153\4\40\1\0\4\40\1\154\2\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\0\5\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\7\0\1\40\1\0\4\40"+
    "\1\155\5\40\1\0\7\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\1\40\1\156\3\40\3\0"+
    "\1\40\11\0\1\157\1\0\1\160\12\0\1\161\42\0"+
    "\1\40\1\0\4\40\1\0\1\40\1\162\3\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\7\0\1\40\1\0\4\40"+
    "\1\0\2\40\1\163\2\40\1\0\2\40\1\164\4\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\3\40\1\165\1\40\1\0\7\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\7\0\1\166\1\0\1\167\3\40\1\170\1\171\4\40"+
    "\1\0\1\172\1\40\1\173\4\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\1\40\1\174\3\40"+
    "\3\0\1\40\12\0\1\175\2\0\1\176\34\0\1\176"+
    "\16\0\1\177\1\0\4\40\1\170\5\40\1\0\7\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\1\40\1\174\3\40\3\0\1\40\7\0\1\40\1\0"+
    "\4\40\1\0\1\200\4\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\0\1\201\2\40"+
    "\1\202\1\40\1\0\7\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\40\1\0\4\40\1\0\2\40\1\203\2\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\43\0\1\204\4\0\1\205"+
    "\24\0\1\206\2\0\1\207\2\0\1\210\3\0\1\211"+
    "\1\212\1\0\1\211\1\0\1\213\77\0\1\205\20\0"+
    "\1\40\1\0\1\214\1\40\1\215\1\40\1\0\5\40"+
    "\1\0\2\40\1\216\4\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\40\1\0\1\40\1\217\2\40\1\176\5\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\1\40\1\220\3\40\3\0\1\40\7\0\1\73"+
    "\1\0\4\73\1\0\1\221\2\73\1\222\1\73\1\0"+
    "\2\73\1\223\1\224\1\73\1\225\1\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\1\73\1\230\2\73\1\0"+
    "\1\231\4\73\1\0\4\73\1\232\2\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\4\73"+
    "\1\233\5\73\1\0\7\73\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\1\73\1\234\3\73\3\0"+
    "\1\73\11\0\1\235\1\0\1\236\12\0\1\237\42\0"+
    "\1\73\1\0\4\73\1\0\1\73\1\240\3\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\4\73"+
    "\1\0\2\73\1\241\2\73\1\0\2\73\1\242\4\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\7\0\1\73\1\0\4\73\1\0"+
    "\3\73\1\243\1\73\1\0\7\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\7\0\1\244\1\0\1\245\3\73\1\246\1\247\4\73"+
    "\1\0\1\250\1\73\1\251\4\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\1\73\1\252\3\73"+
    "\3\0\1\73\12\0\1\253\2\0\1\254\34\0\1\254"+
    "\16\0\1\255\1\0\4\73\1\246\5\73\1\0\7\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\1\73\1\252\3\73\3\0\1\73\7\0\1\73\1\0"+
    "\4\73\1\0\1\256\4\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\1\257\2\73"+
    "\1\260\1\73\1\0\7\73\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\5\73\3\0\1\73\7\0"+
    "\1\73\1\0\4\73\1\0\2\73\1\261\2\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\1\262"+
    "\1\73\1\263\1\73\1\0\5\73\1\0\2\73\1\264"+
    "\4\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\1\73"+
    "\1\265\2\73\1\254\5\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\1\73\1\266"+
    "\3\73\3\0\1\73\33\0\1\267\35\0\1\117\1\0"+
    "\4\117\1\0\5\117\1\0\7\117\1\270\1\117\1\0"+
    "\1\271\1\117\5\0\2\117\2\0\5\117\3\0\1\117"+
    "\7\0\1\124\1\0\4\124\1\0\5\124\1\0\7\124"+
    "\1\0\1\124\2\0\1\124\5\0\2\124\2\0\5\124"+
    "\3\0\1\124\15\0\1\272\34\0\1\272\16\0\1\124"+
    "\1\0\4\124\1\272\5\124\1\0\7\124\1\0\1\124"+
    "\2\0\1\124\5\0\2\124\2\0\1\124\1\273\3\124"+
    "\3\0\1\124\65\0\1\131\7\0\1\274\64\0\1\275"+
    "\67\0\1\276\57\0\1\277\46\0\1\40\1\0\4\40"+
    "\1\0\5\40\1\0\3\40\1\300\3\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\301\5\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\1\40\1\302\3\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\4\40\1\303\2\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\1\40\1\304\3\40\1\0\7\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\7\0\1\40\1\0\4\40\1\0\5\40\1\0\2\40"+
    "\1\305\4\40\1\147\1\40\1\0\1\150\1\40\5\0"+
    "\2\40\2\0\5\40\3\0\1\40\33\0\1\147\2\0"+
    "\1\150\32\0\1\40\1\0\2\40\1\306\1\40\1\0"+
    "\5\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\2\40\1\307\2\40\1\0\7\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\1\310\4\40\1\0\7\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\13\0"+
    "\1\311\55\0\1\40\1\0\2\40\1\312\1\40\1\0"+
    "\5\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\33\0\1\157"+
    "\2\0\1\313\37\0\1\314\54\0\1\315\61\0\1\40"+
    "\1\0\4\40\1\0\3\40\1\316\1\40\1\0\7\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\317"+
    "\1\320\4\40\1\0\7\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\1\40\1\321\3\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\0\2\40\1\322"+
    "\2\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\2\40\1\323\4\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\5\40\1\0\3\40\1\145\3\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\7\0\1\40\1\0\4\40\1\0\5\40\1\0\4\40"+
    "\1\324\2\40\1\147\1\40\1\0\1\150\1\40\5\0"+
    "\2\40\2\0\5\40\3\0\1\40\27\0\1\325\41\0"+
    "\1\40\1\0\1\40\1\326\2\40\1\0\5\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\7\0\1\40\1\0\4\40"+
    "\1\0\5\40\1\0\4\40\1\327\2\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\3\40\1\330\1\0\5\40"+
    "\1\0\7\40\1\147\1\40\1\0\1\150\1\40\5\0"+
    "\2\40\2\0\5\40\3\0\1\40\7\0\1\40\1\0"+
    "\4\40\1\0\5\40\1\0\3\40\1\331\3\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\24\0\1\332\74\0\1\333\31\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\5\40\1\334\1\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\4\40\1\335\1\0\7\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\40\1\0\4\40\1\0\5\40\1\0\1\40\1\336"+
    "\5\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\7\0\1\40\1\0\2\40"+
    "\1\337\1\40\1\0\5\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\340\5\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\1\40\1\341\3\40\3\0\1\40\43\0\1\342"+
    "\34\0\1\343\2\0\1\344\60\0\1\345\106\0\1\346"+
    "\30\0\1\345\4\0\1\345\53\0\1\347\64\0\1\207"+
    "\52\0\1\40\1\0\4\40\1\0\5\40\1\0\7\40"+
    "\1\157\1\40\1\0\1\313\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\3\40\1\350"+
    "\1\0\5\40\1\0\7\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\177\1\0\4\40\1\0\5\40\1\0\7\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\7\0\1\40\1\0\4\40\1\0\5\40"+
    "\1\0\1\351\6\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\327\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\3\73\1\352\3\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\73"+
    "\1\0\4\73\1\353\5\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\1\73\1\354"+
    "\3\73\3\0\1\73\7\0\1\73\1\0\4\73\1\0"+
    "\5\73\1\0\4\73\1\355\2\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\7\0\1\73\1\0\4\73\1\0\1\73\1\356\3\73"+
    "\1\0\7\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\4\73\1\0\5\73\1\0\2\73\1\357\4\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\33\0\1\226\2\0\1\227\32\0\1\73"+
    "\1\0\2\73\1\360\1\73\1\0\5\73\1\0\7\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\7\0\1\73\1\0\4\73\1\0"+
    "\2\73\1\361\2\73\1\0\7\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\7\0\1\73\1\0\4\73\1\0\1\362\4\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\13\0\1\363\55\0\1\73"+
    "\1\0\2\73\1\364\1\73\1\0\5\73\1\0\7\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\33\0\1\235\2\0\1\365\37\0"+
    "\1\366\54\0\1\367\61\0\1\73\1\0\4\73\1\0"+
    "\3\73\1\370\1\73\1\0\7\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\7\0\1\73\1\0\4\73\1\371\1\372\4\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\1\73\1\373\3\73\3\0\1\73\7\0\1\73"+
    "\1\0\4\73\1\0\2\73\1\374\2\73\1\0\7\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\7\0\1\73\1\0\4\73\1\0"+
    "\5\73\1\0\2\73\1\375\4\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\7\0\1\73\1\0\4\73\1\0\5\73\1\0\3\73"+
    "\1\224\3\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\4\73\1\0\5\73\1\0\4\73\1\376\2\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\27\0\1\377\41\0\1\73\1\0\1\73"+
    "\1\u0100\2\73\1\0\5\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\4\73\1\u0101\2\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\73"+
    "\1\0\3\73\1\u0102\1\0\5\73\1\0\7\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\73\1\0\4\73\1\0\5\73"+
    "\1\0\3\73\1\u0103\3\73\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\5\73\3\0\1\73\24\0"+
    "\1\u0104\74\0\1\u0105\31\0\1\73\1\0\4\73\1\0"+
    "\5\73\1\0\5\73\1\u0106\1\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\7\0\1\73\1\0\4\73\1\0\4\73\1\u0107\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\4\73"+
    "\1\0\5\73\1\0\1\73\1\u0108\5\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\2\73\1\u0109\1\73\1\0"+
    "\5\73\1\0\7\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\73"+
    "\1\0\4\73\1\u010a\5\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\1\73\1\u010b"+
    "\3\73\3\0\1\73\7\0\1\73\1\0\4\73\1\0"+
    "\5\73\1\0\7\73\1\235\1\73\1\0\1\365\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\73"+
    "\1\0\3\73\1\u010c\1\0\5\73\1\0\7\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\255\1\0\4\73\1\0\5\73"+
    "\1\0\7\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\4\73\1\0\5\73\1\0\1\u010d\6\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\u0101\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\u010e\1\30\4\u010e"+
    "\1\0\5\u010e\1\0\7\u010e\1\u010f\1\u010e\2\0\1\u010e"+
    "\1\30\2\0\2\30\2\u010e\2\0\4\u010e\3\0\2\30"+
    "\33\0\1\270\2\0\1\271\36\0\1\u0110\55\0\1\124"+
    "\1\0\2\124\1\u0111\1\124\1\0\5\124\1\0\7\124"+
    "\1\0\1\124\2\0\1\124\5\0\2\124\2\0\5\124"+
    "\3\0\1\124\7\0\1\u0112\61\0\1\u0113\15\0\1\u0114"+
    "\54\0\1\u0115\53\0\1\u0116\56\0\1\40\1\0\4\40"+
    "\1\0\1\40\1\u0117\3\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\30\0\1\u0118\40\0\1\40\1\0\4\40\1\0"+
    "\5\40\1\0\4\40\1\u0119\2\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\7\0\1\40\1\0\4\40\1\0\5\40\1\0\4\40"+
    "\1\u011a\2\40\1\147\1\40\1\0\1\150\1\40\5\0"+
    "\2\40\2\0\5\40\3\0\1\40\7\0\1\40\1\0"+
    "\4\40\1\0\5\40\1\0\4\40\1\u011b\2\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\7\0\1\40\1\0\4\40\1\0\2\40"+
    "\1\u011c\2\40\1\0\7\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\u011d\1\0\4\40\1\0\5\40\1\0\7\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\7\0\1\40\1\0\4\40\1\0\5\40"+
    "\1\0\3\40\1\u011e\3\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\40\1\0\4\40\1\0\1\u011f\4\40\1\0\2\40"+
    "\1\312\4\40\1\147\1\40\1\0\1\150\1\40\5\0"+
    "\2\40\2\0\5\40\3\0\1\40\14\0\1\u0120\54\0"+
    "\1\40\1\0\3\40\1\337\1\0\5\40\1\0\7\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\21\0\1\u0121\11\0\1\u0120\2\0"+
    "\1\u0122\54\0\1\u0123\37\0\1\40\1\0\2\40\1\u011a"+
    "\1\40\1\0\5\40\1\0\7\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\13\0\1\u0124\55\0\1\u0125\1\0\4\40\1\0\5\40"+
    "\1\0\1\40\1\u0126\5\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\40\1\0\2\40\1\u0127\1\40\1\0\5\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\7\0\1\40\1\0\4\40"+
    "\1\0\5\40\1\0\2\40\1\u0128\4\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\0\4\40\1\u011a"+
    "\1\0\4\40\1\u0129\2\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\40\1\0\4\40\1\0\1\u012a\4\40\1\0\7\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\26\0\1\u012b\42\0\1\40\1\0"+
    "\4\40\1\0\5\40\1\0\1\u012c\6\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\0\3\40\1\337"+
    "\1\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\2\40\1\u011a\4\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\5\40\1\0\2\40\1\u012d\4\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\20\0\1\u012e\62\0\1\u0120\47\0\1\40\1\0\4\40"+
    "\1\0\5\40\1\0\2\40\1\u011f\4\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\1\40\1\u012f\2\40\1\0"+
    "\5\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\u0130\5\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\1\40\1\u0131"+
    "\3\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\5\40\1\0\7\40\1\u0120\1\40\1\0\1\u0122\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\14\0\1\u0132"+
    "\54\0\1\40\1\0\3\40\1\u0133\1\0\5\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\5\0\35\u0134\1\u0135\24\u0134"+
    "\7\0\1\345\111\0\1\205\1\u0136\60\0\1\205\61\0"+
    "\1\205\1\0\1\345\35\0\1\345\46\0\1\40\1\0"+
    "\4\40\1\0\3\40\1\u0137\1\40\1\0\7\40\1\u0120"+
    "\1\40\1\0\1\u0122\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\7\0\1\40\1\0\4\40\1\0\2\40"+
    "\1\u0138\2\40\1\0\7\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\73\1\0\4\73\1\0\1\73\1\u0139\3\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\30\0\1\u013a\40\0\1\73"+
    "\1\0\4\73\1\0\5\73\1\0\4\73\1\u013b\2\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\7\0\1\73\1\0\4\73\1\0"+
    "\5\73\1\0\4\73\1\u013c\2\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\7\0\1\73\1\0\4\73\1\0\5\73\1\0\4\73"+
    "\1\u013d\2\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\4\73\1\0\2\73\1\u013e\2\73\1\0\7\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\u013f\1\0\4\73\1\0\5\73"+
    "\1\0\7\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\4\73\1\0\5\73\1\0\3\73\1\u0140\3\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\73\1\0\4\73\1\0\1\u0141"+
    "\4\73\1\0\2\73\1\364\4\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\14\0\1\u0142\54\0\1\73\1\0\3\73\1\u0109\1\0"+
    "\5\73\1\0\7\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\21\0\1\u0143"+
    "\11\0\1\u0142\2\0\1\u0144\54\0\1\u0145\37\0\1\73"+
    "\1\0\2\73\1\u013c\1\73\1\0\5\73\1\0\7\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\13\0\1\u0146\55\0\1\u0147\1\0"+
    "\4\73\1\0\5\73\1\0\1\73\1\u0148\5\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\73\1\0\2\73\1\u0149\1\73"+
    "\1\0\5\73\1\0\7\73\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\5\73\3\0\1\73\7\0"+
    "\1\73\1\0\4\73\1\0\5\73\1\0\2\73\1\u014a"+
    "\4\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\4\73"+
    "\1\0\4\73\1\u013c\1\0\4\73\1\u014b\2\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\73\1\0\4\73\1\0\1\u014c"+
    "\4\73\1\0\7\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\26\0\1\u014d"+
    "\42\0\1\73\1\0\4\73\1\0\5\73\1\0\1\u014e"+
    "\6\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\4\73"+
    "\1\0\3\73\1\u0109\1\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\2\73\1\u013c\4\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\73"+
    "\1\0\4\73\1\0\5\73\1\0\2\73\1\u014f\4\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\20\0\1\u0150\62\0\1\u0142\47\0"+
    "\1\73\1\0\4\73\1\0\5\73\1\0\2\73\1\u0141"+
    "\4\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\1\73"+
    "\1\u0151\2\73\1\0\5\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\u0152\5\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\1\73\1\u0153\3\73\3\0\1\73\7\0\1\73"+
    "\1\0\4\73\1\0\5\73\1\0\7\73\1\u0142\1\73"+
    "\1\0\1\u0144\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\14\0\1\u0154\54\0\1\73\1\0\3\73\1\u0155"+
    "\1\0\5\73\1\0\7\73\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\5\73\3\0\1\73\7\0"+
    "\1\73\1\0\4\73\1\0\3\73\1\u0156\1\73\1\0"+
    "\7\73\1\u0142\1\73\1\0\1\u0144\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\4\73"+
    "\1\0\2\73\1\u0157\2\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\33\0\1\30\35\0\1\u010e\1\30\4\u010e\1\0"+
    "\5\u010e\1\0\7\u010e\1\u0158\1\u010e\2\0\1\u010e\1\30"+
    "\2\0\2\30\2\u010e\2\0\4\u010e\3\0\2\30\22\0"+
    "\1\131\46\0\1\124\1\0\4\124\1\0\4\124\1\u0159"+
    "\1\0\7\124\1\0\1\124\2\0\1\124\5\0\2\124"+
    "\2\0\5\124\3\0\1\124\14\0\1\u015a\66\0\1\u015b"+
    "\60\0\1\u015c\57\0\1\u015d\73\0\1\u015e\40\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\4\40\1\u015f\2\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\15\0\1\u0160\34\0\1\u0160\16\0"+
    "\1\40\1\0\4\40\1\u0160\5\40\1\0\7\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\1\40"+
    "\1\u0161\3\40\3\0\1\40\7\0\1\40\1\0\4\40"+
    "\1\0\5\40\1\0\7\40\1\u0162\1\40\1\0\1\u0163"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\40\1\0\4\40\1\0\5\40\1\0\6\40\1\337"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\5\40\1\0\2\40\1\u0164\4\40\1\u0120\1\40\1\0"+
    "\1\u0122\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\7\0\1\40\1\0\3\40\1\u0165\1\0\5\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\7\0\1\40\1\0\4\40"+
    "\1\0\5\40\1\0\2\40\1\u0127\4\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\0\2\40\1\337"+
    "\2\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\33\0\1\u0120"+
    "\2\0\1\u0122\50\0\1\u0166\62\0\1\u0167\47\0\1\u0162"+
    "\54\0\1\40\1\0\4\40\1\0\3\40\1\u0168\1\40"+
    "\1\0\7\40\1\147\1\40\1\0\1\150\1\40\5\0"+
    "\2\40\2\0\5\40\3\0\1\40\7\0\1\40\1\0"+
    "\4\40\1\0\2\40\1\u0169\2\40\1\0\7\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\7\0\1\40\1\0\3\40\1\u011a\1\0"+
    "\5\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\3\40\1\u016a\3\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\5\40\1\0\7\40\1\u016b\1\40\1\0\1\u016c\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\2\40\1\312\4\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\25\0\1\u0120\43\0\1\40\1\0"+
    "\4\40\1\0\5\40\1\0\4\40\1\u016d\2\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\7\0\1\40\1\0\4\40\1\0\5\40"+
    "\1\0\1\40\1\337\5\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\16\0"+
    "\1\u016e\52\0\1\40\1\0\4\40\1\0\5\40\1\0"+
    "\4\40\1\u016f\2\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\u0170"+
    "\61\0\1\u0171\1\0\4\40\1\0\5\40\1\0\7\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\21\0\1\u0162\47\0\1\40\1\0"+
    "\4\40\1\0\3\40\1\u011a\1\40\1\0\7\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\5\0\117\u0134\1\u0172\24\u0134\41\0\1\345"+
    "\22\0\1\40\1\0\4\40\1\0\5\40\1\0\1\40"+
    "\1\u0173\5\40\1\147\1\40\1\0\1\150\1\40\5\0"+
    "\2\40\2\0\5\40\3\0\1\40\7\0\1\40\1\0"+
    "\4\40\1\0\1\u0174\4\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\4\73\1\u0175\2\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\15\0\1\u0176"+
    "\34\0\1\u0176\16\0\1\73\1\0\4\73\1\u0176\5\73"+
    "\1\0\7\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\1\73\1\u0177\3\73\3\0\1\73\7\0"+
    "\1\73\1\0\4\73\1\0\5\73\1\0\7\73\1\u0178"+
    "\1\73\1\0\1\u0179\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\73\1\0\4\73\1\0\5\73"+
    "\1\0\6\73\1\u0109\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\73"+
    "\1\0\4\73\1\0\5\73\1\0\2\73\1\u017a\4\73"+
    "\1\u0142\1\73\1\0\1\u0144\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\7\0\1\73\1\0\3\73\1\u017b"+
    "\1\0\5\73\1\0\7\73\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\5\73\3\0\1\73\7\0"+
    "\1\73\1\0\4\73\1\0\5\73\1\0\2\73\1\u0149"+
    "\4\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\4\73"+
    "\1\0\2\73\1\u0109\2\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\33\0\1\u0142\2\0\1\u0144\50\0\1\u017c\62\0"+
    "\1\u017d\47\0\1\u0178\54\0\1\73\1\0\4\73\1\0"+
    "\3\73\1\u017e\1\73\1\0\7\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\7\0\1\73\1\0\4\73\1\0\2\73\1\u017f\2\73"+
    "\1\0\7\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\3\73\1\u013c\1\0\5\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\3\73\1\u0180\3\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\73"+
    "\1\0\4\73\1\0\5\73\1\0\7\73\1\u0181\1\73"+
    "\1\0\1\u0182\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\2\73\1\364\4\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\25\0\1\u0142"+
    "\43\0\1\73\1\0\4\73\1\0\5\73\1\0\4\73"+
    "\1\u0183\2\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\4\73\1\0\5\73\1\0\1\73\1\u0109\5\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\16\0\1\u0184\52\0\1\73\1\0\4\73"+
    "\1\0\5\73\1\0\4\73\1\u0185\2\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\u0186\61\0\1\u0187\1\0\4\73\1\0"+
    "\5\73\1\0\7\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\21\0\1\u0178"+
    "\47\0\1\73\1\0\4\73\1\0\3\73\1\u013c\1\73"+
    "\1\0\7\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\4\73\1\0\5\73\1\0\1\73\1\u0188\5\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\73\1\0\4\73\1\0\1\u0189"+
    "\4\73\1\0\7\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\u010e"+
    "\1\30\4\u010e\1\0\5\u010e\1\0\7\u010e\1\u018a\1\u010e"+
    "\2\0\1\u010e\1\30\2\0\2\30\2\u010e\2\0\4\u010e"+
    "\3\0\2\30\15\0\1\u018b\34\0\1\u018b\31\0\1\u018c"+
    "\65\0\1\u018d\45\0\1\u018e\70\0\1\u018f\47\0\1\40"+
    "\1\0\4\40\1\0\3\40\1\u0190\1\40\1\0\7\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\13\0\1\u012b\55\0\1\40\1\0"+
    "\2\40\1\u012d\1\40\1\0\5\40\1\0\7\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\33\0\1\u0162\2\0\1\u0163\32\0\1\u0191"+
    "\1\0\4\40\1\0\5\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\u0192\5\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\1\40\1\u0193\3\40\3\0\1\40\21\0\1\u0194"+
    "\60\0\1\u0120\50\0\1\40\1\0\4\40\1\0\4\40"+
    "\1\u0195\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\2\40\1\u0196\4\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\40\1\0\4\40\1\0"+
    "\3\40\1\u0197\1\40\1\0\7\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\33\0\1\u016b\2\0\1\u016c\32\0\1\40\1\0\4\40"+
    "\1\0\3\40\1\u0198\1\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\12\0\1\u0199\56\0\1\40\1\0\4\40\1\0"+
    "\3\40\1\u019a\1\40\1\0\7\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\26\0\1\u019b\42\0\1\40\1\0\4\40\1\0\5\40"+
    "\1\0\2\40\1\u019c\4\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\40\1\0\4\40\1\0\3\40\1\u019d\1\40\1\0"+
    "\7\40\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\7\0\1\40\1\0\1\40"+
    "\1\u019e\2\40\1\0\5\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\73\1\0\4\73\1\0\3\73\1\u019f"+
    "\1\73\1\0\7\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\13\0\1\u014d"+
    "\55\0\1\73\1\0\2\73\1\u014f\1\73\1\0\5\73"+
    "\1\0\7\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\33\0\1\u0178\2\0"+
    "\1\u0179\32\0\1\u01a0\1\0\4\73\1\0\5\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\73\1\0\4\73"+
    "\1\u01a1\5\73\1\0\7\73\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\1\73\1\u01a2\3\73\3\0"+
    "\1\73\21\0\1\u01a3\60\0\1\u0142\50\0\1\73\1\0"+
    "\4\73\1\0\4\73\1\u01a4\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\2\73\1\u01a5\4\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\73"+
    "\1\0\4\73\1\0\3\73\1\u01a6\1\73\1\0\7\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\33\0\1\u0181\2\0\1\u0182\32\0"+
    "\1\73\1\0\4\73\1\0\3\73\1\u01a7\1\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\12\0\1\u01a8\56\0\1\73"+
    "\1\0\4\73\1\0\3\73\1\u01a9\1\73\1\0\7\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\26\0\1\u01aa\42\0\1\73\1\0"+
    "\4\73\1\0\5\73\1\0\2\73\1\u01ab\4\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\73\1\0\4\73\1\0\3\73"+
    "\1\u01ac\1\73\1\0\7\73\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\5\73\3\0\1\73\7\0"+
    "\1\73\1\0\1\73\1\u01ad\2\73\1\0\5\73\1\0"+
    "\7\73\1\226\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\7\0\1\u010e\1\30\4\u010e"+
    "\1\0\5\u010e\1\0\7\u010e\1\u01ae\1\u010e\2\0\1\u010e"+
    "\1\30\2\0\2\30\2\u010e\2\0\4\u010e\3\0\2\30"+
    "\16\0\1\u01af\55\0\1\u01b0\76\0\1\u018f\46\0\1\u01b1"+
    "\54\0\1\40\1\0\4\40\1\0\5\40\1\0\6\40"+
    "\1\u01b2\1\147\1\40\1\0\1\150\1\40\5\0\2\40"+
    "\2\0\5\40\3\0\1\40\7\0\1\40\1\0\3\40"+
    "\1\u0173\1\0\5\40\1\0\7\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\5\40\3\0\1\40"+
    "\16\0\1\u01b3\52\0\1\40\1\0\4\40\1\0\1\u01b4"+
    "\4\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\20\0\1\u01b5"+
    "\50\0\1\40\1\0\1\40\1\u01b6\2\40\1\0\5\40"+
    "\1\0\7\40\1\147\1\40\1\0\1\150\1\40\5\0"+
    "\2\40\2\0\5\40\3\0\1\40\7\0\1\40\1\0"+
    "\4\40\1\0\5\40\1\0\3\40\1\u019a\3\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\7\0\1\40\1\0\3\40\1\u01b7\1\0"+
    "\5\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\5\40\1\0\7\40\1\u01b8\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\14\0\1\u01b9\75\0\1\u01b5\40\0\1\40\1\0"+
    "\4\40\1\0\5\40\1\0\4\40\1\u01b2\2\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\7\0\1\40\1\0\4\40\1\0\2\40"+
    "\1\u01b2\2\40\1\0\7\40\1\147\1\40\1\0\1\150"+
    "\1\40\5\0\2\40\2\0\5\40\3\0\1\40\7\0"+
    "\1\40\1\0\3\40\1\u01ba\1\0\5\40\1\0\7\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\7\0\1\73\1\0\4\73\1\0"+
    "\5\73\1\0\6\73\1\u01bb\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\5\73\3\0\1\73\7\0"+
    "\1\73\1\0\3\73\1\u0188\1\0\5\73\1\0\7\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\16\0\1\u01bc\52\0\1\73\1\0"+
    "\4\73\1\0\1\u01bd\4\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\20\0\1\u01be\50\0\1\73\1\0\1\73\1\u01bf"+
    "\2\73\1\0\5\73\1\0\7\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\7\0\1\73\1\0\4\73\1\0\5\73\1\0\3\73"+
    "\1\u01a9\3\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\3\73\1\u01c0\1\0\5\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\5\73\1\0"+
    "\7\73\1\u01c1\1\73\1\0\1\227\1\73\5\0\2\73"+
    "\2\0\5\73\3\0\1\73\14\0\1\u01c2\75\0\1\u01be"+
    "\40\0\1\73\1\0\4\73\1\0\5\73\1\0\4\73"+
    "\1\u01bb\2\73\1\226\1\73\1\0\1\227\1\73\5\0"+
    "\2\73\2\0\5\73\3\0\1\73\7\0\1\73\1\0"+
    "\4\73\1\0\2\73\1\u01bb\2\73\1\0\7\73\1\226"+
    "\1\73\1\0\1\227\1\73\5\0\2\73\2\0\5\73"+
    "\3\0\1\73\7\0\1\73\1\0\3\73\1\u01c3\1\0"+
    "\5\73\1\0\7\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\u010e"+
    "\1\30\4\u010e\1\0\5\u010e\1\0\7\u010e\1\0\1\u010e"+
    "\2\0\1\u010e\1\30\2\0\2\30\2\u010e\2\0\4\u010e"+
    "\3\0\2\30\13\0\1\u018f\66\0\1\u015e\56\0\1\u01c4"+
    "\34\0\1\u01c4\22\0\1\u01c5\55\0\1\40\1\0\2\40"+
    "\1\u019a\1\40\1\0\5\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\7\0\1\40\1\0\4\40\1\0\2\40\1\u016f"+
    "\2\40\1\0\7\40\1\147\1\40\1\0\1\150\1\40"+
    "\5\0\2\40\2\0\5\40\3\0\1\40\7\0\1\40"+
    "\1\0\4\40\1\0\3\40\1\u01c6\1\40\1\0\7\40"+
    "\1\147\1\40\1\0\1\150\1\40\5\0\2\40\2\0"+
    "\5\40\3\0\1\40\17\0\1\u01c7\13\0\1\u01b8\2\0"+
    "\1\150\40\0\1\u01c8\34\0\1\u01c8\16\0\1\40\1\0"+
    "\4\40\1\u01c8\5\40\1\0\7\40\1\147\1\40\1\0"+
    "\1\150\1\40\5\0\2\40\2\0\1\40\1\u01c9\3\40"+
    "\3\0\1\40\13\0\1\u01ca\55\0\1\73\1\0\2\73"+
    "\1\u01a9\1\73\1\0\5\73\1\0\7\73\1\226\1\73"+
    "\1\0\1\227\1\73\5\0\2\73\2\0\5\73\3\0"+
    "\1\73\7\0\1\73\1\0\4\73\1\0\2\73\1\u0185"+
    "\2\73\1\0\7\73\1\226\1\73\1\0\1\227\1\73"+
    "\5\0\2\73\2\0\5\73\3\0\1\73\7\0\1\73"+
    "\1\0\4\73\1\0\3\73\1\u01cb\1\73\1\0\7\73"+
    "\1\226\1\73\1\0\1\227\1\73\5\0\2\73\2\0"+
    "\5\73\3\0\1\73\17\0\1\u01cc\13\0\1\u01c1\2\0"+
    "\1\227\40\0\1\u01cd\34\0\1\u01cd\16\0\1\73\1\0"+
    "\4\73\1\u01cd\5\73\1\0\7\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\1\73\1\u01ce\3\73"+
    "\3\0\1\73\13\0\1\u015e\55\0\1\40\1\0\4\40"+
    "\1\0\2\40\1\u011a\2\40\1\0\7\40\1\147\1\40"+
    "\1\0\1\150\1\40\5\0\2\40\2\0\5\40\3\0"+
    "\1\40\20\0\1\u01cf\54\0\1\u01d0\55\0\1\40\1\0"+
    "\2\40\1\u016f\1\40\1\0\5\40\1\0\7\40\1\147"+
    "\1\40\1\0\1\150\1\40\5\0\2\40\2\0\5\40"+
    "\3\0\1\40\7\0\1\73\1\0\4\73\1\0\2\73"+
    "\1\u013c\2\73\1\0\7\73\1\226\1\73\1\0\1\227"+
    "\1\73\5\0\2\73\2\0\5\73\3\0\1\73\20\0"+
    "\1\u01d1\54\0\1\u01d2\55\0\1\73\1\0\2\73\1\u0185"+
    "\1\73\1\0\5\73\1\0\7\73\1\226\1\73\1\0"+
    "\1\227\1\73\5\0\2\73\2\0\5\73\3\0\1\73"+
    "\21\0\1\u01d3\61\0\1\u01c5\61\0\1\u01d4\61\0\1\u01ca"+
    "\47\0\1\u01d5\61\0\1\u01d6\67\0\1\u01d7\34\0\1\u01d7"+
    "\24\0\1\u01d8\34\0\1\u01d8\32\0\1\u01d9\27\0\1\u01d9"+
    "\31\0\1\u01da\27\0\1\u01da\23\0\1\u01db\34\0\1\u01db"+
    "\24\0\1\u01dc\34\0\1\u01dc\25\0\1\u01dd\61\0\1\u01de"+
    "\56\0\1\u01b5\61\0\1\u01be\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\3\11\6\1\4\11\1\1\2\11\17\1\2\11"+
    "\10\1\2\11\32\1\2\11\3\1\1\11\1\1\3\11"+
    "\6\0\5\1\1\0\2\11\3\1\1\0\1\1\3\0"+
    "\6\1\1\0\4\1\2\0\5\1\1\0\1\11\6\0"+
    "\12\1\1\0\1\11\3\1\1\0\1\1\3\0\6\1"+
    "\1\0\4\1\2\0\12\1\2\0\1\11\1\0\1\1"+
    "\4\0\1\1\1\0\7\1\1\0\1\1\1\11\2\0"+
    "\1\1\1\0\5\1\1\0\4\1\2\0\4\1\1\0"+
    "\2\1\5\0\3\1\1\0\7\1\1\0\1\1\1\11"+
    "\2\0\1\1\1\0\5\1\1\0\4\1\2\0\4\1"+
    "\1\0\3\1\3\0\1\1\5\0\1\1\1\0\7\1"+
    "\2\0\1\11\2\0\6\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\3\1\1\0\7\1"+
    "\2\0\1\11\2\0\6\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\5\0\1\1"+
    "\1\0\2\1\1\11\2\1\2\0\3\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\11\2\1\2\0\3\1\1\0\1\11\1\1"+
    "\1\0\1\1\1\0\3\1\5\0\1\11\2\1\1\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\0\5\1\1\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\0\3\1\4\0"+
    "\1\1\1\0\1\1\1\11\2\1\2\0\2\1\1\0"+
    "\1\1\1\11\2\1\2\0\1\1\1\0\1\11\1\1"+
    "\2\0\1\1\1\11\1\1\2\0\1\1\20\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMTYPEExpression.class.getName());

	String location = "MAIN PROGRAM";
    String parsedFileName;
	
	Map<String, String> variables = new HashMap<String, String>();
	List<String> arrays = new LinkedList<String>();
	List<Integer> errors = new LinkedList<Integer>();
	String type;
	String expressionType = "empty";
	boolean exception = false;
	boolean expression = false;
	boolean error = false;
	boolean dim = false;
	boolean isArray = false;
	int par = 0;
	String conv = "";
	
	public COMTYPEExpression(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
        this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
	private void checkExpression (String var) throws JFlexException {
        LOGGER.finest("begin method checkExpression");
		String key = variables.get(var);
		if (key != null) {
			if(exception && expression) {
				if(!key.equals("integer") && !expressionType.equals(key) && !expressionType.equals("empty"))
					error = true;
				exception = false;
			}
			else  {
				if (expressionType.equals("empty") ) 
					expressionType = key;
				else if (!expressionType.equals(key) ) 
					error = true;
			}
			
			if (expression && error && !errors.contains(yyline)) {
				LOGGER.fine("Setting error line "+(yyline+1)+" because of mixed type in expression \""+ expressionType +"\" with \""+key+"\" .");
				setError(location,"Mixed type " + expressionType + " with " + key , yyline+1);
				errors.add(yyline);
			}
		}
		if (arrays.contains(var)) isArray = true;
        LOGGER.finest("end method checkExpression");
	}

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMTYPEExpression(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 46: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\" )");
				                    yybegin(COMMENT);
            }
          case 47: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 48: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 49: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 50: break;
          case 6: 
            { 
            }
          case 51: break;
          case 7: 
            { error = false; 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 52: break;
          case 8: 
            { location = location + " " + yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 53: break;
          case 9: 
            { par=0; 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 54: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 55: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 56: break;
          case 12: 
            { if(!isArray || par==0) { checkExpression(yytext()); }
            }
          case 57: break;
          case 13: 
            { par++;
            }
          case 58: break;
          case 14: 
            { expression = true;
            }
          case 59: break;
          case 15: 
            { expression = false; expressionType = "empty";
            }
          case 60: break;
          case 16: 
            { par=0; expressionType="empty"; expression = false; error = false; isArray = false;
            }
          case 61: break;
          case 17: 
            { par--; if(isArray) isArray=false;
            }
          case 62: break;
          case 18: 
            { exception=true; expression = true;
            }
          case 63: break;
          case 19: 
            { par=0; expressionType="empty"; expression = false; error = false; isArray = false; 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(NEW_LINE);
            }
          case 64: break;
          case 20: 
            { variables.put(yytext(), type);
								 if(dim) arrays.add(yytext());
            }
          case 65: break;
          case 21: 
            { par=0;  dim = false; 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 66: break;
          case 22: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - IO -> LINE (Transition : \\n )");
                                    yybegin(LINE);
            }
          case 67: break;
          case 23: 
            { par=0; 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - CONV_FUNC -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 68: break;
          case 24: 
            { par--; if (par==0) {
									String et = "";
									if(conv.contains("real") || conv.contains("aimag")) et = "REAL";
									else if(conv.contains("dble")|| conv.contains("float") || conv.contains("dimag") ||
											conv.contains("dcmplx")) et = "DOUBLE PRECISION";
									else if(conv.contains("cmplx")) et = "COMPLEX";
									else if(conv.contains("char") || conv.contains("len")) et = "CHARACTER";
									else et = "INTEGER";
									if(expression) {
										if(expressionType.equals("empty")) expressionType = et;
										else if(!et.equals(expressionType)  && !errors.contains(yyline))  {
											LOGGER.fine("Setting error line "+(yyline+1)+" because of mixed type \""+ expressionType +"\" with \""+et+"\" .");
											setError(location,"Mixed type " + expressionType + " with " + et, yyline+1);
											errors.add(yyline);	
										}
									} 
									LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - CONV_FUNC -> LINE (Transition : [)] )");
									yybegin(LINE);
								 }
            }
          case 69: break;
          case 25: 
            { par=1; conv="real"; 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - REAL -> CONV_FUNC (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(CONV_FUNC);
            }
          case 70: break;
          case 26: 
            { par=0;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - REAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 71: break;
          case 27: 
            { type="REAL"; 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - REAL -> DECL_PARAMS (Transition : KIND \""+yytext()+"\" )");
                                    yybegin(DECL_PARAMS);
            }
          case 72: break;
          case 28: 
            { par--; 
                                    if(par==0){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> LINE (Transition : [)] )");
                                        yybegin(LINE);
                                    }
            }
          case 73: break;
          case 29: 
            { par--; if(par==0){
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOIDI -> DECLARATION (Transition : [)] )");
                                    yybegin(DECLARATION);
                                }
            }
          case 74: break;
          case 30: 
            { String v = yytext().substring(0, yytext().length()-1).trim();
                                    if(variables.get(v) != null) {
                                        par=1;
                                        checkExpression(v);
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> AVOID (Transition : VAR \""+yytext()+"\" )");
                                        yybegin(AVOID);
                                    }
            }
          case 75: break;
          case 31: 
            { String v = yytext().substring(0, yytext().length()-1).trim(); 
								 if(variables.get(v) != null) {
								    par=1;
								    checkExpression(v);
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> AVOID (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(AVOID);
                                 }
            }
          case 76: break;
          case 32: 
            { String var = yytext(); var = var.substring(0, var.length()-1).trim();  
								    variables.put(var, type); arrays.add(yytext().substring(0, yytext().length()-1));
								    par=1;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> AVOIDI (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(AVOIDI);
            }
          case 77: break;
          case 33: 
            { par=1;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> AVOID (Transition : IF \""+yytext()+"\" )");
                                    yybegin(AVOID);
            }
          case 78: break;
          case 34: 
            { par=1;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> AVOID (Transition : IF \""+yytext()+"\" )");
                                    yybegin(AVOID);
            }
          case 79: break;
          case 35: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> IO (Transition : IO \""+yytext()+"\" )");
                                    yybegin(IO);
            }
          case 80: break;
          case 36: 
            { par=1; conv=yytext().toLowerCase();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> CONV_FUNC (Transition : CONVERSION \""+yytext()+"\" )");
                                    yybegin(CONV_FUNC);
            }
          case 81: break;
          case 37: 
            { type=yytext().toUpperCase(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> DECLARATION (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 82: break;
          case 38: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> IO (Transition : IO \""+yytext()+"\" )");
                                    yybegin(IO);
            }
          case 83: break;
          case 39: 
            { par=1; conv=yytext().toLowerCase();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> CONV_FUNC (Transition : CONVERSION \""+yytext()+"\" )");
                                    yybegin(CONV_FUNC);
            }
          case 84: break;
          case 40: 
            { type=yytext().toUpperCase();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> DECLARATION (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 85: break;
          case 41: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> REAL (Transition : REAL \""+yytext()+"\" )");
                                    yybegin(REAL);
            }
          case 86: break;
          case 42: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> REAL (Transition : REAL \""+yytext()+"\" )");
                                    yybegin(REAL);
            }
          case 87: break;
          case 43: 
            { location = yytext(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 88: break;
          case 44: 
            { location = yytext(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 89: break;
          case 45: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
