/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F77.REF.Open rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;

import java.util.List;

import org.eclipse.core.runtime.IPath;




import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77REFOpen.lex</tt>
 */
public class F77REFOpen extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int OPEN = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\57\1\60\1\60\1\60\23\0\1\1\1\50\3\0\1\61"+
    "\1\47\2\0\1\4\5\0\12\46\7\0\1\36\1\32\1\3\1\24"+
    "\1\23\1\5\1\35\1\52\1\11\1\45\1\55\1\43\1\37\1\7"+
    "\1\12\1\21\1\45\1\22\1\31\1\10\1\6\1\45\1\56\3\45"+
    "\4\0\1\46\1\0\1\41\1\34\1\2\1\30\1\27\1\13\1\40"+
    "\1\51\1\17\1\45\1\53\1\44\1\42\1\15\1\20\1\25\1\45"+
    "\1\26\1\33\1\16\1\14\1\45\1\54\3\45\12\0\1\60\u1fa2\0"+
    "\1\60\1\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\16\1\1\3\1\4\3\5\1\6"+
    "\1\2\25\5\1\7\1\10\16\0\14\5\26\0\14\5"+
    "\14\0\1\11\12\0\2\5\1\11\12\5\1\12\24\0"+
    "\14\5\22\0\1\13\12\5\1\13\5\0\1\14\11\0"+
    "\10\5\1\15\2\0\1\16\2\0\2\5\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u012c\0\u012c"+
    "\0\u012c\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u044c\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u012c\0\u012c\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u03b6\0\u03e8\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u012c\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u044c\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u012c\0\u1a5e\0\u1a90\0\u1ac2"+
    "\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52"+
    "\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2"+
    "\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72"+
    "\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102"+
    "\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292"+
    "\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\u012c"+
    "\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580"+
    "\0\u25b2\0\u25e4\0\u044c\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de"+
    "\0\u012c\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc"+
    "\0\u29fe\0\u2a30\0\u012c\0\u2a62\0\u2a94\0\u012c\0\u2ac6\0\u2af8"+
    "\0\u2b2a\0\u2b5c\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\4\10\1\11\3\7\1\12\1\13\1\14\3\7"+
    "\1\15\1\16\1\17\3\7\1\20\3\7\1\21\1\7"+
    "\1\22\3\7\1\23\2\7\1\24\4\7\1\25\1\26"+
    "\6\7\1\27\1\30\1\7\1\31\1\10\45\31\1\32"+
    "\1\33\6\31\1\27\1\30\2\31\1\10\2\34\1\31"+
    "\41\34\1\31\1\32\1\33\6\34\1\27\1\30\1\31"+
    "\1\7\1\10\2\35\1\10\1\36\3\37\1\40\1\41"+
    "\1\42\3\37\1\43\1\44\1\45\3\37\1\46\3\37"+
    "\1\47\1\37\1\50\3\37\1\51\2\37\1\52\3\37"+
    "\1\7\1\25\1\26\6\37\1\31\1\30\1\7\1\31"+
    "\1\10\2\37\1\31\1\36\3\37\1\40\1\41\1\42"+
    "\3\37\1\43\1\44\1\45\3\37\1\46\3\37\1\47"+
    "\1\37\1\50\3\37\1\51\2\37\1\52\3\37\1\31"+
    "\1\32\1\33\6\37\1\27\1\30\2\31\1\10\3\31"+
    "\1\53\1\54\4\31\1\55\1\56\4\31\1\57\3\31"+
    "\1\60\3\31\1\61\1\31\1\62\13\31\1\32\1\33"+
    "\6\31\1\63\1\30\1\64\70\0\1\65\62\0\1\66"+
    "\73\0\1\67\54\0\1\70\62\0\1\71\71\0\1\72"+
    "\56\0\1\73\65\0\1\74\41\0\1\75\67\0\1\76"+
    "\57\0\1\77\67\0\1\100\41\0\47\101\1\31\12\101"+
    "\50\102\1\31\11\102\2\0\2\34\1\0\42\34\2\0"+
    "\6\34\5\0\2\37\1\0\42\37\2\0\6\37\5\0"+
    "\2\37\1\0\1\37\1\103\40\37\2\0\6\37\5\0"+
    "\2\37\1\0\2\37\1\104\37\37\2\0\6\37\5\0"+
    "\2\37\1\0\14\37\1\105\25\37\2\0\6\37\5\0"+
    "\2\37\1\0\7\37\1\106\32\37\2\0\6\37\5\0"+
    "\2\37\1\0\10\37\1\107\31\37\2\0\6\37\5\0"+
    "\2\37\1\0\20\37\1\110\21\37\2\0\6\37\5\0"+
    "\2\37\1\0\15\37\1\111\24\37\2\0\6\37\5\0"+
    "\2\37\1\0\21\37\1\112\20\37\2\0\6\37\5\0"+
    "\2\37\1\0\1\37\1\113\40\37\2\0\6\37\5\0"+
    "\2\37\1\0\7\37\1\114\32\37\2\0\6\37\5\0"+
    "\2\37\1\0\5\37\1\115\34\37\2\0\6\37\5\0"+
    "\2\37\1\0\13\37\1\116\26\37\2\0\6\37\14\0"+
    "\1\117\57\0\1\120\71\0\1\121\57\0\1\122\56\0"+
    "\1\123\67\0\1\124\44\0\1\125\4\0\1\126\53\0"+
    "\1\127\13\0\1\130\52\0\1\131\62\0\1\132\74\0"+
    "\1\133\53\0\1\134\62\0\1\135\72\0\1\136\44\0"+
    "\1\137\67\0\1\140\73\0\1\141\63\0\1\142\51\0"+
    "\1\143\65\0\1\144\33\0\2\37\1\0\2\37\1\145"+
    "\37\37\2\0\6\37\5\0\2\37\1\0\3\37\1\146"+
    "\36\37\2\0\6\37\5\0\2\37\1\0\16\37\1\147"+
    "\23\37\2\0\6\37\5\0\2\37\1\0\10\37\1\150"+
    "\31\37\2\0\6\37\5\0\2\37\1\0\11\37\1\151"+
    "\30\37\2\0\6\37\5\0\2\37\1\0\22\37\1\152"+
    "\17\37\2\0\6\37\5\0\2\37\1\0\5\37\1\153"+
    "\34\37\2\0\6\37\5\0\2\37\1\0\13\37\1\154"+
    "\26\37\2\0\6\37\5\0\2\37\1\0\25\37\1\155"+
    "\14\37\2\0\6\37\5\0\2\37\1\0\27\37\1\156"+
    "\12\37\2\0\6\37\5\0\2\37\1\0\17\37\1\157"+
    "\22\37\2\0\6\37\5\0\2\37\1\0\23\37\1\160"+
    "\16\37\2\0\6\37\46\0\1\161\73\0\1\162\50\0"+
    "\1\163\70\0\1\164\37\0\1\165\63\0\1\166\50\0"+
    "\1\167\75\0\1\170\51\0\1\171\74\0\1\172\23\0"+
    "\1\173\101\0\1\174\45\0\1\175\54\0\1\176\106\0"+
    "\1\177\47\0\1\175\47\0\1\200\31\0\1\201\26\0"+
    "\1\202\35\0\1\203\43\0\1\204\65\0\1\205\41\0"+
    "\1\206\67\0\1\207\47\0\1\37\1\210\1\0\42\37"+
    "\2\0\6\37\5\0\2\37\1\0\16\37\1\211\23\37"+
    "\2\0\6\37\5\0\2\37\1\0\2\37\1\212\37\37"+
    "\2\0\6\37\5\0\1\213\1\37\1\0\42\37\2\0"+
    "\6\37\5\0\2\37\1\0\22\37\1\214\17\37\2\0"+
    "\6\37\5\0\2\37\1\0\10\37\1\212\31\37\2\0"+
    "\6\37\5\0\1\37\1\215\1\0\30\37\1\216\11\37"+
    "\2\0\6\37\5\0\1\217\1\37\1\0\33\37\1\220"+
    "\6\37\2\0\6\37\5\0\2\37\1\0\15\37\1\221"+
    "\24\37\2\0\6\37\5\0\2\37\1\0\21\37\1\222"+
    "\20\37\2\0\6\37\5\0\2\37\1\0\1\37\1\223"+
    "\40\37\2\0\6\37\5\0\2\37\1\0\7\37\1\224"+
    "\32\37\2\0\6\37\26\0\1\225\45\0\1\226\101\0"+
    "\1\225\47\0\1\227\55\0\1\230\67\0\1\231\100\0"+
    "\1\232\33\0\1\233\112\0\1\234\36\0\1\235\53\0"+
    "\1\236\73\0\1\237\55\0\1\240\71\0\1\241\56\0"+
    "\1\242\60\0\1\243\66\0\1\244\60\0\1\245\45\0"+
    "\1\246\67\0\1\247\104\0\1\250\62\0\1\251\17\0"+
    "\2\37\1\0\3\37\1\252\36\37\2\0\6\37\5\0"+
    "\2\37\1\0\15\37\1\253\24\37\2\0\6\37\5\0"+
    "\2\37\1\0\11\37\1\254\30\37\2\0\6\37\5\0"+
    "\2\37\1\0\21\37\1\255\20\37\2\0\6\37\5\0"+
    "\2\37\1\0\16\37\1\256\23\37\2\0\6\37\5\0"+
    "\2\37\1\0\15\37\1\257\24\37\2\0\6\37\5\0"+
    "\2\37\1\0\22\37\1\260\17\37\2\0\6\37\5\0"+
    "\2\37\1\0\21\37\1\261\20\37\2\0\6\37\5\0"+
    "\2\37\1\0\5\37\1\262\34\37\2\0\6\37\5\0"+
    "\2\37\1\0\13\37\1\263\26\37\2\0\6\37\5\0"+
    "\2\37\1\0\36\37\1\264\3\37\2\0\6\37\5\0"+
    "\2\37\1\0\37\37\1\265\2\37\2\0\6\37\15\0"+
    "\1\266\67\0\1\267\51\0\1\270\67\0\1\271\53\0"+
    "\1\272\57\0\1\273\71\0\1\274\57\0\1\275\56\0"+
    "\1\276\55\0\1\277\73\0\1\300\55\0\1\301\72\0"+
    "\1\302\73\0\1\303\53\0\1\304\72\0\1\305\26\0"+
    "\1\306\67\0\1\307\70\0\1\310\65\0\1\310\34\0"+
    "\2\37\1\0\4\37\1\311\35\37\2\0\6\37\5\0"+
    "\2\37\1\0\1\312\41\37\2\0\6\37\5\0\2\37"+
    "\1\0\12\37\1\313\27\37\2\0\6\37\5\0\2\37"+
    "\1\0\6\37\1\314\33\37\2\0\6\37\5\0\2\37"+
    "\1\0\17\37\1\315\22\37\2\0\6\37\5\0\2\37"+
    "\1\0\31\37\1\316\10\37\2\0\6\37\5\0\2\37"+
    "\1\0\23\37\1\317\16\37\2\0\6\37\5\0\2\37"+
    "\1\0\34\37\1\320\5\37\2\0\6\37\5\0\2\37"+
    "\1\0\1\37\1\321\40\37\2\0\6\37\5\0\2\37"+
    "\1\0\7\37\1\322\32\37\2\0\6\37\5\0\2\37"+
    "\1\0\16\37\1\323\23\37\2\0\6\37\5\0\2\37"+
    "\1\0\22\37\1\323\17\37\2\0\6\37\61\0\1\324"+
    "\57\0\1\325\16\0\1\326\67\0\1\327\45\0\1\330"+
    "\107\0\1\331\32\0\1\332\112\0\1\331\40\0\1\333"+
    "\105\0\1\334\43\0\1\335\102\0\1\336\26\0\1\337"+
    "\112\0\1\310\36\0\1\340\107\0\1\310\27\0\1\341"+
    "\67\0\1\342\45\0\2\37\1\0\5\37\1\343\34\37"+
    "\2\0\6\37\5\0\2\37\1\0\31\37\1\344\10\37"+
    "\2\0\6\37\5\0\2\37\1\0\13\37\1\345\26\37"+
    "\2\0\6\37\5\0\2\37\1\0\34\37\1\346\5\37"+
    "\2\0\6\37\5\0\2\37\1\0\1\37\1\347\40\37"+
    "\2\0\6\37\5\0\2\37\1\0\32\37\1\323\7\37"+
    "\2\0\6\37\5\0\2\37\1\0\7\37\1\350\32\37"+
    "\2\0\6\37\5\0\2\37\1\0\35\37\1\323\4\37"+
    "\2\0\6\37\5\0\2\37\1\0\3\37\1\351\36\37"+
    "\2\0\6\37\5\0\2\37\1\0\11\37\1\352\30\37"+
    "\2\0\6\37\12\0\1\353\67\0\1\353\56\0\1\354"+
    "\67\0\1\355\113\0\1\356\60\0\1\356\17\0\1\310"+
    "\55\0\1\250\73\0\1\310\46\0\1\251\101\0\1\250"+
    "\65\0\1\251\44\0\1\357\67\0\1\360\44\0\2\37"+
    "\1\0\2\37\1\323\37\37\2\0\6\37\5\0\1\37"+
    "\1\264\1\0\42\37\2\0\6\37\5\0\2\37\1\0"+
    "\10\37\1\323\31\37\2\0\6\37\5\0\1\265\1\37"+
    "\1\0\42\37\2\0\6\37\5\0\2\37\1\0\15\37"+
    "\1\264\24\37\2\0\6\37\5\0\2\37\1\0\21\37"+
    "\1\265\20\37\2\0\6\37\5\0\2\37\1\0\4\37"+
    "\1\361\35\37\2\0\6\37\5\0\2\37\1\0\12\37"+
    "\1\362\27\37\2\0\6\37\12\0\1\363\67\0\1\363"+
    "\53\0\1\250\67\0\1\251\46\0\2\37\1\0\2\37"+
    "\1\264\37\37\2\0\6\37\5\0\2\37\1\0\10\37"+
    "\1\265\31\37\2\0\6\37\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\16\1\3\11\31\1\2\11\16\0\14\1"+
    "\26\0\14\1\14\0\1\11\12\0\15\1\1\11\24\0"+
    "\14\1\22\0\1\11\13\1\5\0\1\11\11\0\10\1"+
    "\1\11\2\0\1\11\2\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String location = "MAIN PROGRAM"; 
 
	boolean fileFound = false;
	boolean scratchFound = false;
	boolean statusFound = false;
	boolean unknownFound = false;
	boolean positionFound = false;
	boolean multLines = false;
	
	public F77REFOpen() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(file.toOSString());
	}
	
	public void checkViolation(final boolean fileFound, final boolean scratchFound, final boolean statusFound, final boolean unknownFound, final boolean positionFound) throws JFlexException {
		boolean norFileNorScratch = !fileFound && !scratchFound;
		boolean hasViolation = unknownFound || !positionFound || !statusFound || norFileNorScratch ;
		if (hasViolation){
			this.setError(location,"The instruction OPEN shall be called with the parameters FILE, STATUS and POSITION.", yyline + 1);
		}
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77REFOpen(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(LINE);
            }
          case 16: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 17: break;
          case 3: 
            { yybegin(NEW_LINE);
            }
          case 18: break;
          case 4: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 19: break;
          case 5: 
            { 
            }
          case 20: break;
          case 6: 
            { location = location + " " + yytext();
								 yybegin(COMMENT);
            }
          case 21: break;
          case 7: 
            { if (!multLines) {
								 	this.checkViolation(fileFound, scratchFound, statusFound, unknownFound, positionFound);
								 	fileFound = false;
								 	scratchFound = false;
								 	statusFound = false;
								 	unknownFound = false;
								 	positionFound = false;
								 	yybegin(NEW_LINE);
								 }
								 multLines = false;
            }
          case 22: break;
          case 8: 
            { multLines = true;
            }
          case 23: break;
          case 9: 
            { yybegin(OPEN);
            }
          case 24: break;
          case 10: 
            { fileFound = true;
            }
          case 25: break;
          case 11: 
            { location = yytext(); yybegin(NAMING);
            }
          case 26: break;
          case 12: 
            { statusFound = true;
            }
          case 27: break;
          case 13: 
            { unknownFound = true;
            }
          case 28: break;
          case 14: 
            { scratchFound = true;
            }
          case 29: break;
          case 15: 
            { positionFound = true;
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
