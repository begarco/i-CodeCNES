/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.DATA.Alloc rule.	 	*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMDESIGNAlloc.lex</tt>
 */
public class COMDESIGNAlloc extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int OPEN = 10;
  public static final int CLOSE = 12;
  public static final int ALLOC = 14;
  public static final int DEALLOC = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\34\1\35\1\36\1\35\22\0\1\27\1\1\1\32"+
    "\4\0\1\31\2\0\1\3\5\0\12\33\7\0\1\21\1\17\1\2"+
    "\1\15\1\14\1\4\1\20\1\30\1\25\2\30\1\23\1\22\1\6"+
    "\1\11\1\12\1\30\1\13\1\26\1\7\1\5\5\30\4\0\1\24"+
    "\1\0\1\21\1\17\1\2\1\15\1\14\1\4\1\20\1\30\1\25"+
    "\2\30\1\23\1\22\1\6\1\11\1\12\1\30\1\13\1\26\1\7"+
    "\1\5\5\30\12\0\1\35\252\0\2\10\115\0\1\16\u1ea8\0\1\35"+
    "\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\5\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\2\2\13\12\12\1\6"+
    "\1\5\1\6\1\2\2\14\11\6\1\15\1\5\3\16"+
    "\3\17\1\20\1\21\32\0\1\22\24\0\1\23\5\0"+
    "\1\16\1\17\60\0\1\16\1\17\62\0\2\6\70\0"+
    "\1\24\1\0\1\25\16\0\1\26\1\0\1\25\4\0"+
    "\1\25\4\0\1\27\7\0\1\30\1\0\1\27\3\0"+
    "\1\27\6\0\1\31\10\0\1\6\4\0\1\31\3\0"+
    "\1\31\3\0\1\32\6\0\1\32\2\0\1\32\51\0"+
    "\1\33\2\0\1\33\2\0\1\33\2\0\1\34\1\0"+
    "\1\34\1\0\1\34\11\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\3\36\14\0\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0117\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193"+
    "\0\u01b2\0\u0117\0\u0117\0\u0117\0\u0117\0\u01d1\0\u0117\0\u01f0"+
    "\0\u01f0\0\u020f\0\u01f0\0\u022e\0\u020f\0\u024d\0\u026c\0\u028b"+
    "\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u01f0\0\u01f0\0\u0345"+
    "\0\u0345\0\u0117\0\u0345\0\u0364\0\u0383\0\u03a2\0\u03c1\0\u03e0"+
    "\0\u03ff\0\u041e\0\u043d\0\u045c\0\u0345\0\u0345\0\u047b\0\u049a"+
    "\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\u0535\0\u0554\0\u0573\0\u0592"+
    "\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c\0\u066b\0\u068a"+
    "\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0725\0\u0744\0\u0763\0\u0782"+
    "\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b\0\u087a"+
    "\0\u0117\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915\0\u0934\0\u0953"+
    "\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b"+
    "\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0117\0\u0b05\0\u0b24"+
    "\0\u0b43\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u0c1c"+
    "\0\u0c3b\0\u0c5a\0\u0c79\0\u0c98\0\u0cb7\0\u0cd6\0\u0cf5\0\u0d14"+
    "\0\u0d33\0\u0d52\0\u0d71\0\u0d90\0\u0daf\0\u0dce\0\u0ded\0\u0e0c"+
    "\0\u0e2b\0\u0e4a\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6\0\u0ee5\0\u0f04"+
    "\0\u0f23\0\u0f42\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe\0\u0fdd\0\u0ffc"+
    "\0\u101b\0\u103a\0\u1059\0\u1078\0\u1097\0\u10b6\0\u10d5\0\u10f4"+
    "\0\u1113\0\u1132\0\u1151\0\u1170\0\u118f\0\u11ae\0\u11cd\0\u11ec"+
    "\0\u120b\0\u122a\0\u1249\0\u1268\0\u1287\0\u12a6\0\u12c5\0\u12e4"+
    "\0\u1303\0\u1322\0\u1341\0\u1360\0\u137f\0\u139e\0\u13bd\0\u13dc"+
    "\0\u13fb\0\u141a\0\u1439\0\u1458\0\u1477\0\u1496\0\u14b5\0\u14d4"+
    "\0\u14f3\0\u1512\0\u1531\0\u1550\0\u156f\0\u158e\0\u15ad\0\u15cc"+
    "\0\u15eb\0\u160a\0\u1629\0\u1648\0\u1667\0\u1686\0\u16a5\0\u16c4"+
    "\0\u16e3\0\u1702\0\u1721\0\u1740\0\u175f\0\u177e\0\u179d\0\u17bc"+
    "\0\u17db\0\u047b\0\u04d8\0\u17fa\0\u1819\0\u1838\0\u1857\0\u1876"+
    "\0\u1895\0\u18b4\0\u18d3\0\u18f2\0\u1911\0\u1930\0\u194f\0\u196e"+
    "\0\u198d\0\u19ac\0\u19cb\0\u19ea\0\u1a09\0\u1a28\0\u1a47\0\u1a66"+
    "\0\u1a85\0\u1aa4\0\u1ac3\0\u1ae2\0\u1b01\0\u1b20\0\u1b3f\0\u1b5e"+
    "\0\u1b7d\0\u1b9c\0\u1bbb\0\u1bda\0\u1bf9\0\u1c18\0\u1c37\0\u1c56"+
    "\0\u1c75\0\u1c94\0\u1cb3\0\u1cd2\0\u1cf1\0\u1d10\0\u1d2f\0\u1d4e"+
    "\0\u1d6d\0\u1d8c\0\u1dab\0\u1dca\0\u1de9\0\u1e08\0\u1e27\0\u1e46"+
    "\0\u1e65\0\u1e84\0\u1ea3\0\u0117\0\u1ec2\0\u0117\0\u1ee1\0\u1f00"+
    "\0\u1f1f\0\u1f3e\0\u1f5d\0\u1f7c\0\u1f9b\0\u1fba\0\u1fd9\0\u1ff8"+
    "\0\u2017\0\u2036\0\u2055\0\u2074\0\u2093\0\u20b2\0\u07df\0\u20d1"+
    "\0\u20f0\0\u210f\0\u212e\0\u0899\0\u214d\0\u216c\0\u218b\0\u21aa"+
    "\0\u0117\0\u21c9\0\u21e8\0\u2207\0\u2226\0\u2245\0\u2264\0\u2283"+
    "\0\u0117\0\u22a2\0\u0a6a\0\u22c1\0\u22e0\0\u22ff\0\u0b05\0\u231e"+
    "\0\u233d\0\u235c\0\u237b\0\u239a\0\u23b9\0\u0117\0\u23d8\0\u23f7"+
    "\0\u2416\0\u2435\0\u2454\0\u2473\0\u2492\0\u24b1\0\u2093\0\u24d0"+
    "\0\u24ef\0\u250e\0\u252d\0\u07df\0\u254c\0\u256b\0\u258a\0\u0899"+
    "\0\u25a9\0\u25c8\0\u25e7\0\u0117\0\u2606\0\u2625\0\u2644\0\u2663"+
    "\0\u2682\0\u26a1\0\u0a6a\0\u26c0\0\u26df\0\u0b05\0\u26fe\0\u271d"+
    "\0\u273c\0\u275b\0\u277a\0\u2799\0\u27b8\0\u27d7\0\u27f6\0\u2815"+
    "\0\u2834\0\u2853\0\u2872\0\u2891\0\u28b0\0\u28cf\0\u28ee\0\u290d"+
    "\0\u292c\0\u294b\0\u296a\0\u2989\0\u29a8\0\u29c7\0\u29e6\0\u2a05"+
    "\0\u2a24\0\u2a43\0\u2a62\0\u2a81\0\u2aa0\0\u2abf\0\u2ade\0\u2afd"+
    "\0\u2b1c\0\u2b3b\0\u2b5a\0\u2b79\0\u2b98\0\u2bb7\0\u2bd6\0\u0117"+
    "\0\u2bf5\0\u2c14\0\u07df\0\u2c33\0\u2c52\0\u0899\0\u2c71\0\u2c90"+
    "\0\u0117\0\u2caf\0\u0a6a\0\u2cce\0\u0b05\0\u2ced\0\u2d0c\0\u2d2b"+
    "\0\u2d4a\0\u2d69\0\u2d88\0\u2da7\0\u2dc6\0\u2de5\0\u0117\0\u2e04"+
    "\0\u07df\0\u2e23\0\u0899\0\u2e42\0\u0117\0\u0a6a\0\u0b05\0\u2e61"+
    "\0\u2e80\0\u2e9f\0\u2ebe\0\u2edd\0\u2efc\0\u2f1b\0\u2f3a\0\u2f59"+
    "\0\u2f78\0\u2f97\0\u2fb6\0\u07df\0\u0899";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\2\14\1\15\3\12\1\16\1\12\1\17"+
    "\3\12\1\20\3\12\1\21\2\12\1\16\1\20\5\12"+
    "\1\22\2\23\1\24\1\13\32\24\1\25\2\23\1\24"+
    "\1\13\1\26\1\24\4\26\1\24\5\26\1\24\5\26"+
    "\1\24\2\26\1\24\1\26\3\24\1\27\2\23\1\30"+
    "\1\31\1\32\1\33\1\34\3\35\1\36\1\35\1\37"+
    "\3\35\1\40\3\35\1\41\2\35\1\42\1\43\1\30"+
    "\1\35\1\44\1\45\1\35\1\46\2\47\1\50\1\51"+
    "\1\52\1\53\1\54\3\24\1\55\1\24\1\56\3\24"+
    "\1\57\3\24\1\60\2\24\1\61\1\62\1\50\1\24"+
    "\1\63\1\64\1\24\1\65\2\66\1\24\1\13\1\67"+
    "\1\24\1\67\1\70\2\67\1\24\5\67\1\24\5\67"+
    "\1\24\2\67\1\24\1\67\2\24\1\71\1\24\2\23"+
    "\1\24\1\13\1\72\1\24\1\72\1\73\2\72\1\24"+
    "\5\72\1\24\5\72\1\24\2\72\1\24\1\72\2\24"+
    "\1\74\1\24\2\23\1\24\1\13\1\75\1\24\4\75"+
    "\1\24\5\75\1\24\5\75\1\24\2\75\1\24\1\75"+
    "\4\24\2\23\1\24\1\13\1\76\1\24\4\76\1\24"+
    "\5\76\1\24\5\76\1\24\2\76\1\24\1\76\4\24"+
    "\2\23\44\0\1\77\37\0\1\100\43\0\1\101\30\0"+
    "\1\102\42\0\1\103\27\0\1\26\1\0\4\26\1\0"+
    "\5\26\1\0\10\26\1\0\1\26\2\0\1\26\5\0"+
    "\1\104\6\0\1\105\3\0\1\106\3\0\1\107\1\110"+
    "\20\0\1\111\3\0\1\112\1\0\1\113\3\0\1\114"+
    "\3\0\1\115\2\0\1\112\1\114\14\0\1\111\1\116"+
    "\2\0\1\112\1\0\1\113\3\0\1\114\3\0\1\115"+
    "\2\0\1\112\1\114\12\0\1\104\3\0\1\117\2\0"+
    "\1\105\3\0\1\106\3\0\1\107\1\110\20\0\1\111"+
    "\3\0\1\112\1\0\1\113\1\120\2\0\1\114\3\0"+
    "\1\115\2\0\1\112\1\114\12\0\1\104\2\0\1\121"+
    "\3\0\1\105\3\0\1\106\3\0\1\107\1\110\20\0"+
    "\1\111\3\0\1\112\1\122\1\113\3\0\1\114\3\0"+
    "\1\115\2\0\1\112\1\114\14\0\1\111\1\0\1\117"+
    "\1\0\1\112\1\0\1\113\3\0\1\114\3\0\1\115"+
    "\2\0\1\112\1\114\14\0\1\111\1\121\2\0\1\112"+
    "\1\0\1\113\3\0\1\114\3\0\1\115\2\0\1\112"+
    "\1\114\10\0\2\123\1\124\6\123\1\125\3\123\1\126"+
    "\3\123\1\127\1\130\6\123\1\131\5\123\2\132\1\133"+
    "\6\132\1\134\3\132\1\135\3\132\1\136\1\137\7\132"+
    "\1\131\4\132\2\0\1\140\6\0\1\141\3\0\1\142"+
    "\3\0\1\143\22\0\1\144\33\0\1\140\3\0\1\145"+
    "\2\0\1\141\3\0\1\142\3\0\1\143\30\0\1\146"+
    "\25\0\1\140\2\0\1\147\3\0\1\141\3\0\1\142"+
    "\3\0\1\143\26\0\1\150\33\0\1\145\35\0\1\147"+
    "\31\0\2\151\1\152\6\151\1\153\3\151\1\154\3\151"+
    "\1\155\7\151\1\156\5\151\2\157\1\160\6\157\1\161"+
    "\3\157\1\162\3\157\1\163\10\157\1\156\4\157\2\0"+
    "\1\67\1\0\4\67\1\0\5\67\1\0\10\67\1\0"+
    "\1\67\2\0\1\67\5\0\1\67\1\0\2\67\1\164"+
    "\1\67\1\0\5\67\1\0\10\67\1\0\1\67\2\0"+
    "\1\67\36\0\1\71\5\0\1\72\1\0\4\72\1\0"+
    "\5\72\1\0\10\72\1\0\1\72\2\0\1\72\5\0"+
    "\1\72\1\0\2\72\1\165\1\72\1\0\5\72\1\0"+
    "\10\72\1\0\1\72\2\0\1\72\36\0\1\74\5\0"+
    "\1\75\1\0\4\75\1\0\5\75\1\0\10\75\1\0"+
    "\1\75\2\0\1\75\5\0\1\76\1\0\4\76\1\0"+
    "\5\76\1\0\10\76\1\0\1\76\2\0\1\76\11\0"+
    "\1\166\37\0\1\167\40\0\1\170\44\0\1\171\34\0"+
    "\1\172\44\0\1\173\25\0\1\174\40\0\1\175\45\0"+
    "\1\176\24\0\1\177\32\0\1\200\37\0\1\201\43\0"+
    "\1\202\30\0\1\203\42\0\1\204\33\0\1\205\37\0"+
    "\1\206\40\0\1\207\44\0\1\210\34\0\1\211\21\0"+
    "\31\123\1\131\30\123\1\212\5\123\1\131\17\123\1\213"+
    "\16\123\1\131\21\123\1\214\14\123\1\131\30\123\1\215"+
    "\5\123\1\131\16\123\1\216\17\123\1\131\5\123\32\132"+
    "\1\131\27\132\1\217\6\132\1\131\16\132\1\220\17\132"+
    "\1\131\20\132\1\221\15\132\1\131\27\132\1\222\6\132"+
    "\1\131\15\132\1\223\20\132\1\131\4\132\23\0\1\224"+
    "\25\0\1\225\40\0\1\226\45\0\1\227\21\0\1\230"+
    "\37\0\1\231\40\0\1\232\44\0\1\233\34\0\1\234"+
    "\21\0\31\151\1\156\30\151\1\235\5\151\1\156\17\151"+
    "\1\236\16\151\1\156\21\151\1\237\14\151\1\156\30\151"+
    "\1\240\5\151\1\156\5\151\32\157\1\156\27\157\1\241"+
    "\6\157\1\156\16\157\1\242\17\157\1\156\20\157\1\243"+
    "\15\157\1\156\27\157\1\244\6\157\1\156\4\157\2\0"+
    "\1\67\1\0\4\67\1\245\5\67\1\0\6\67\1\246"+
    "\1\67\1\0\1\67\2\0\1\67\5\0\1\72\1\0"+
    "\4\72\1\245\5\72\1\0\6\72\1\247\1\72\1\0"+
    "\1\72\2\0\1\72\5\0\1\250\50\0\1\251\24\0"+
    "\1\252\15\0\1\253\31\0\1\254\30\0\1\255\42\0"+
    "\1\256\41\0\1\257\43\0\1\260\40\0\1\261\30\0"+
    "\1\262\27\0\1\263\37\0\1\264\40\0\1\265\44\0"+
    "\1\266\34\0\1\267\23\0\1\270\50\0\1\271\24\0"+
    "\1\272\15\0\1\273\31\0\1\274\30\0\1\275\31\0"+
    "\11\123\1\276\17\123\1\131\21\123\1\277\14\123\1\131"+
    "\26\123\1\300\7\123\1\131\30\123\1\301\5\123\1\131"+
    "\22\123\1\302\13\123\1\131\5\123\11\132\1\303\20\132"+
    "\1\131\20\132\1\304\15\132\1\131\25\132\1\305\10\132"+
    "\1\131\27\132\1\306\6\132\1\131\21\132\1\307\14\132"+
    "\1\131\4\132\11\0\1\310\41\0\1\311\43\0\1\312"+
    "\40\0\1\313\15\0\1\314\50\0\1\315\24\0\1\316"+
    "\15\0\1\317\31\0\1\320\30\0\1\321\31\0\11\151"+
    "\1\322\17\151\1\156\21\151\1\323\14\151\1\156\26\151"+
    "\1\324\7\151\1\156\30\151\1\325\5\151\1\156\5\151"+
    "\11\157\1\326\20\157\1\156\20\157\1\327\15\157\1\156"+
    "\25\157\1\330\10\157\1\156\27\157\1\331\6\157\1\156"+
    "\4\157\7\0\1\24\31\0\1\67\1\0\3\67\1\332"+
    "\1\0\5\67\1\0\10\67\1\0\1\67\2\0\1\67"+
    "\5\0\1\72\1\0\3\72\1\333\1\0\5\72\1\0"+
    "\10\72\1\0\1\72\2\0\1\72\12\0\1\334\42\0"+
    "\1\335\37\0\1\336\35\0\1\337\34\0\1\340\50\0"+
    "\1\341\31\0\1\342\7\0\1\342\16\0\1\343\53\0"+
    "\1\344\24\0\1\345\32\0\1\346\33\0\1\347\50\0"+
    "\1\350\24\0\1\351\15\0\1\352\31\0\1\353\30\0"+
    "\1\354\40\0\1\355\42\0\1\356\37\0\1\357\35\0"+
    "\1\360\34\0\1\361\50\0\1\362\13\0\16\123\1\363"+
    "\7\123\1\363\2\123\1\131\13\123\1\364\22\123\1\131"+
    "\30\123\1\365\5\123\1\131\16\123\1\366\17\123\1\131"+
    "\12\123\1\367\23\123\1\131\5\123\16\132\1\370\7\132"+
    "\1\370\3\132\1\131\12\132\1\371\23\132\1\131\27\132"+
    "\1\372\6\132\1\131\15\132\1\373\20\132\1\131\11\132"+
    "\1\374\24\132\1\131\4\132\16\0\1\375\7\0\1\375"+
    "\16\0\1\376\53\0\1\377\24\0\1\u0100\34\0\1\u0101"+
    "\42\0\1\u0102\37\0\1\u0103\35\0\1\u0104\34\0\1\u0105"+
    "\50\0\1\u0106\13\0\16\151\1\u0107\7\151\1\u0107\2\151"+
    "\1\156\13\151\1\u0108\22\151\1\156\30\151\1\u0109\5\151"+
    "\1\156\16\151\1\u010a\17\151\1\156\5\151\16\157\1\u010b"+
    "\7\157\1\u010b\3\157\1\156\12\157\1\u010c\23\157\1\156"+
    "\27\157\1\u010d\6\157\1\156\15\157\1\u010e\20\157\1\156"+
    "\4\157\10\0\1\u010f\14\0\1\u010f\15\0\1\u0110\47\0"+
    "\1\u0111\42\0\1\u0112\22\0\1\u0113\45\0\1\u0114\36\0"+
    "\1\u0115\22\0\2\u0116\1\0\1\u0116\4\0\1\u0116\5\0"+
    "\1\u0116\10\0\1\u0116\1\0\2\u0116\1\0\3\u0116\23\0"+
    "\1\u0117\15\0\1\u0118\57\0\1\u0119\22\0\1\u011a\42\0"+
    "\1\u011b\37\0\1\u011c\35\0\1\u011d\34\0\1\u011e\50\0"+
    "\1\u011f\23\0\1\u0120\14\0\1\u0120\15\0\1\u0121\47\0"+
    "\1\u0122\42\0\1\u0123\22\0\1\u0124\45\0\1\u0125\22\0"+
    "\14\123\1\u0126\14\123\1\131\5\123\2\u0127\1\123\1\u0127"+
    "\4\123\1\u0127\5\123\1\u0127\10\123\1\u0127\1\123\1\131"+
    "\1\u0127\1\123\3\u0127\23\123\1\u0128\5\123\1\131\7\123"+
    "\1\u0129\26\123\1\131\30\123\1\u012a\5\123\1\131\5\123"+
    "\14\132\1\u012b\15\132\1\131\4\132\2\u012c\1\132\1\u012c"+
    "\4\132\1\u012c\5\132\1\u012c\10\132\1\u012c\1\132\1\u012c"+
    "\1\131\1\132\3\u012c\23\132\1\u012d\6\132\1\131\6\132"+
    "\1\u012e\27\132\1\131\27\132\1\u012f\6\132\1\131\4\132"+
    "\14\0\1\u0130\22\0\2\u0131\1\0\1\u0131\4\0\1\u0131"+
    "\5\0\1\u0131\10\0\1\u0131\1\0\2\u0131\1\0\3\u0131"+
    "\23\0\1\u0132\15\0\1\u0133\44\0\1\u0134\14\0\1\u0134"+
    "\15\0\1\u0135\47\0\1\u0136\42\0\1\u0137\22\0\1\u0138"+
    "\45\0\1\u0139\22\0\14\151\1\u013a\14\151\1\156\5\151"+
    "\2\u013b\1\151\1\u013b\4\151\1\u013b\5\151\1\u013b\10\151"+
    "\1\u013b\1\151\1\156\1\u013b\1\151\3\u013b\23\151\1\u013c"+
    "\5\151\1\156\7\151\1\u013d\26\151\1\156\5\151\14\157"+
    "\1\u013e\15\157\1\156\4\157\2\u013f\1\157\1\u013f\4\157"+
    "\1\u013f\5\157\1\u013f\10\157\1\u013f\1\157\1\u013f\1\156"+
    "\1\157\3\u013f\23\157\1\u0140\6\157\1\156\6\157\1\u0141"+
    "\27\157\1\156\4\157\11\0\1\u0142\46\0\1\u0143\22\0"+
    "\1\u0144\53\0\1\u0114\23\0\1\u0145\27\0\2\u0146\1\0"+
    "\1\u0146\4\0\1\u0146\5\0\1\u0146\10\0\1\u0146\1\0"+
    "\2\u0146\1\0\3\u0146\11\0\1\u0147\46\0\1\u0148\31\0"+
    "\1\u0149\32\0\1\u014a\14\0\1\u014a\15\0\1\u014b\47\0"+
    "\1\u014c\42\0\1\u014d\22\0\1\u014e\45\0\1\u014f\33\0"+
    "\1\u0150\46\0\1\u0151\22\0\1\u0152\53\0\1\u0125\23\0"+
    "\1\u0153\31\0\1\24\1\0\4\24\1\0\5\24\1\0"+
    "\10\24\1\0\1\24\2\0\1\24\3\0\2\u0154\1\123"+
    "\1\u0154\4\123\1\u0154\5\123\1\u0154\10\123\1\u0154\1\123"+
    "\1\131\1\u0154\1\123\3\u0154\11\123\1\u0155\17\123\1\131"+
    "\26\123\1\u0156\7\123\1\131\21\123\1\u0157\14\123\1\131"+
    "\5\123\2\u0158\1\132\1\u0158\4\132\1\u0158\5\132\1\u0158"+
    "\10\132\1\u0158\1\132\1\u0158\1\131\1\132\3\u0158\11\132"+
    "\1\u0159\20\132\1\131\25\132\1\u015a\10\132\1\131\20\132"+
    "\1\u015b\15\132\1\131\4\132\2\u015c\1\0\1\u015c\4\0"+
    "\1\u015c\5\0\1\u015c\10\0\1\u015c\1\0\2\u015c\1\0"+
    "\3\u015c\11\0\1\u015d\46\0\1\u015e\26\0\1\u015f\46\0"+
    "\1\u0160\22\0\1\u0161\53\0\1\u0139\23\0\1\u0162\27\0"+
    "\2\u0163\1\151\1\u0163\4\151\1\u0163\5\151\1\u0163\10\151"+
    "\1\u0163\1\151\1\156\1\u0163\1\151\3\u0163\11\151\1\u0164"+
    "\17\151\1\156\26\151\1\u0165\7\151\1\156\5\151\2\u0166"+
    "\1\157\1\u0166\4\157\1\u0166\5\157\1\u0166\10\157\1\u0166"+
    "\1\157\1\u0166\1\156\1\157\3\u0166\11\157\1\u0167\20\157"+
    "\1\156\25\157\1\u0168\10\157\1\156\4\157\6\0\1\u0114"+
    "\32\0\1\341\47\0\1\341\33\0\1\u0169\14\0\1\u0169"+
    "\13\0\1\u016a\43\0\1\u016b\41\0\1\u016c\14\0\1\u0149"+
    "\6\0\1\u0149\11\0\1\u016d\46\0\1\u016e\22\0\1\u016f"+
    "\53\0\1\u014f\23\0\1\u0170\35\0\1\u0125\32\0\1\362"+
    "\47\0\1\362\33\0\1\u0171\14\0\1\u0171\11\0\2\123"+
    "\1\u0172\26\123\1\131\14\123\1\u0173\21\123\1\131\17\123"+
    "\1\u0174\14\123\1\u0157\1\123\1\131\4\123\1\u0157\2\132"+
    "\1\u0175\27\132\1\131\13\132\1\u0176\22\132\1\131\16\132"+
    "\1\u0177\14\132\1\u015b\2\132\1\131\3\132\1\u015b\2\0"+
    "\1\u0178\43\0\1\u0179\35\0\1\u0139\32\0\1\u0106\47\0"+
    "\1\u0106\33\0\1\u017a\14\0\1\u017a\11\0\2\151\1\u017b"+
    "\26\151\1\156\14\151\1\u017c\21\151\1\156\5\151\2\157"+
    "\1\u017d\27\157\1\156\13\157\1\u017e\22\157\1\156\4\157"+
    "\6\0\1\341\51\0\1\u017f\31\0\1\u0180\35\0\1\u0181"+
    "\31\0\1\u014f\32\0\1\u011f\47\0\1\u011f\33\0\1\u0182"+
    "\14\0\1\u0182\17\0\1\362\30\0\21\123\1\u0183\7\123"+
    "\1\131\21\123\1\u0184\14\123\1\131\20\123\1\u0185\15\123"+
    "\1\131\5\123\21\132\1\u0186\10\132\1\131\20\132\1\u0187"+
    "\15\132\1\131\17\132\1\u0188\16\132\1\131\4\132\21\0"+
    "\1\u0189\31\0\1\u018a\30\0\1\u0106\30\0\21\151\1\u018b"+
    "\7\151\1\156\21\151\1\u018c\14\151\1\156\5\151\21\157"+
    "\1\u018d\10\157\1\156\20\157\1\u018e\15\157\1\156\4\157"+
    "\7\0\1\u018f\27\0\2\u0190\1\0\1\u0190\4\0\1\u0190"+
    "\5\0\1\u0190\10\0\1\u0190\1\0\2\u0190\1\0\3\u0190"+
    "\11\0\1\u0191\33\0\1\u011f\30\0\7\123\1\u0192\21\123"+
    "\1\131\5\123\2\u0193\1\123\1\u0193\4\123\1\u0193\5\123"+
    "\1\u0193\10\123\1\u0193\1\123\1\131\1\u0193\1\123\3\u0193"+
    "\11\123\1\u0194\17\123\1\131\5\123\7\132\1\u0195\22\132"+
    "\1\131\4\132\2\u0196\1\132\1\u0196\4\132\1\u0196\5\132"+
    "\1\u0196\10\132\1\u0196\1\132\1\u0196\1\131\1\132\3\u0196"+
    "\11\132\1\u0197\20\132\1\131\4\132\7\0\1\u0198\27\0"+
    "\2\u0199\1\0\1\u0199\4\0\1\u0199\5\0\1\u0199\10\0"+
    "\1\u0199\1\0\2\u0199\1\0\3\u0199\7\151\1\u019a\21\151"+
    "\1\156\5\151\2\u019b\1\151\1\u019b\4\151\1\u019b\5\151"+
    "\1\u019b\10\151\1\u019b\1\151\1\156\1\u019b\1\151\3\u019b"+
    "\7\157\1\u019c\22\157\1\156\4\157\2\u019d\1\157\1\u019d"+
    "\4\157\1\u019d\5\157\1\u019d\10\157\1\u019d\1\157\1\u019d"+
    "\1\156\1\157\3\u019d\14\0\1\u019e\24\0\1\u019f\34\0"+
    "\14\123\1\u01a0\14\123\1\131\7\123\1\u01a1\26\123\1\131"+
    "\5\123\14\132\1\u01a2\15\132\1\131\6\132\1\u01a3\27\132"+
    "\1\131\4\132\14\0\1\u01a4\22\0\14\151\1\u01a5\14\151"+
    "\1\156\5\151\14\157\1\u01a6\15\157\1\156\4\157\2\u01a7"+
    "\1\0\1\u01a7\4\0\1\u01a7\5\0\1\u01a7\10\0\1\u01a7"+
    "\1\0\2\u01a7\1\0\3\u01a7\14\0\1\u01a8\22\0\2\u01a9"+
    "\1\123\1\u01a9\4\123\1\u01a9\5\123\1\u01a9\10\123\1\u01a9"+
    "\1\123\1\131\1\u01a9\1\123\3\u01a9\14\123\1\u01aa\14\123"+
    "\1\131\5\123\2\u01ab\1\132\1\u01ab\4\132\1\u01ab\5\132"+
    "\1\u01ab\10\132\1\u01ab\1\132\1\u01ab\1\131\1\132\3\u01ab"+
    "\14\132\1\u01ac\15\132\1\131\4\132\2\u01ad\1\0\1\u01ad"+
    "\4\0\1\u01ad\5\0\1\u01ad\10\0\1\u01ad\1\0\2\u01ad"+
    "\1\0\3\u01ad\2\u01ae\1\151\1\u01ae\4\151\1\u01ae\5\151"+
    "\1\u01ae\10\151\1\u01ae\1\151\1\156\1\u01ae\1\151\3\u01ae"+
    "\2\u01af\1\157\1\u01af\4\157\1\u01af\5\157\1\u01af\10\157"+
    "\1\u01af\1\157\1\u01af\1\156\1\157\3\u01af\15\0\1\u01b0"+
    "\21\0\15\123\1\u01b1\13\123\1\131\5\123\15\132\1\u01b2"+
    "\14\132\1\131\4\132\5\0\1\u01b3\31\0\5\123\1\u01b4"+
    "\23\123\1\131\5\123\5\132\1\u01b5\24\132\1\131\4\132"+
    "\13\0\1\u01b6\23\0\13\123\1\u01b7\15\123\1\131\5\123"+
    "\13\132\1\u01b8\16\132\1\131\4\132\14\0\1\u01b9\22\0"+
    "\14\123\1\u01ba\14\123\1\131\5\123\14\132\1\u01bb\15\132"+
    "\1\131\4\132\2\24\1\0\1\24\4\0\1\24\5\0"+
    "\1\24\10\0\1\24\1\0\2\24\1\0\3\24\2\u01bc"+
    "\1\123\1\u01bc\4\123\1\u01bc\5\123\1\u01bc\10\123\1\u01bc"+
    "\1\123\1\131\1\u01bc\1\123\3\u01bc\2\u01bd\1\132\1\u01bd"+
    "\4\132\1\u01bd\5\132\1\u01bd\10\132\1\u01bd\1\132\1\u01bd"+
    "\1\131\1\132\3\u01bd";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12245];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\3\11\5\1\4\11\1\1\1\11\22\1\1\11"+
    "\24\1\32\0\1\11\24\0\1\11\5\0\2\1\60\0"+
    "\2\1\62\0\2\1\70\0\1\11\1\0\1\11\16\0"+
    "\1\1\1\0\1\1\4\0\1\1\4\0\1\11\7\0"+
    "\1\11\1\0\1\1\3\0\1\1\6\0\1\11\10\0"+
    "\1\1\4\0\1\1\3\0\1\1\3\0\1\11\6\0"+
    "\1\1\2\0\1\1\51\0\1\11\2\0\1\1\2\0"+
    "\1\1\2\0\1\11\1\0\1\1\1\0\1\1\11\0"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\1\11\2\1"+
    "\14\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMDESIGNAlloc.class.getName());

	String location = "MAIN PROGRAM";
	Map<String, String> memory = new HashMap<String, String>();
	Map<String, String> files  = new HashMap<String, String>();
	Map<String, Integer> lines = new HashMap<String, Integer>();
	List<String> errors = new LinkedList<String>();
    String parsedFileName;
	
	public COMDESIGNAlloc(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
		this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
	/**
     * Method used to throw errors due to allocate or open, not followed by a
     * deallocate or a close.
     **/
    public void raiseRemainingErrors() throws JFlexException {
        LOGGER.finest("begin method raiseRemainingErrors");
        Iterator<Entry<String, String>> iterator =
                this.memory.entrySet().iterator();
        while (iterator.hasNext()) {
            final Map.Entry<String, String> pairs = iterator.next();
            LOGGER.fine("Setting error line "+this.lines.get(pairs.getKey())+" for the variable "+pairs.getKey()+".");
            this.setError(pairs.getValue(),"The resource named "+
            		pairs.getKey() + " has not been allocated and deallocate in the same algorithmic level.",
                    this.lines.get(pairs.getKey()));
            iterator.remove();
        }

        iterator = this.files.entrySet().iterator();
        while (iterator.hasNext()) {
            final Map.Entry<String, String> pairs = iterator.next();
            LOGGER.fine("Setting error line "+this.lines.get(pairs.getKey())+" for the variable "+pairs.getKey()+".");
            this.setError(pairs.getValue(),"The resource named "+
            		pairs.getKey() + " has not been allocated and deallocate in the same algorithmic level.",
                    this.lines.get(pairs.getKey()));
            iterator.remove();
        }
        LOGGER.finest("end method raiseRemainingErrors");
    }
	
	/**
     * Sort all violations.
     **/
    public void sortResults() {
        LOGGER.finest("begin method sortResults");
        Collections.sort(getViolations(), new Comparator<Violation>() {
            @Override
            public int compare(final Violation viol1, final Violation viol2) {
                int res = viol1.getRuleId().compareTo(viol2.getRuleId());
                if (res == 0) {
                    res =
                            viol1.getFilePath()
                                    .toFile()
                                    .getName()
                                    .compareTo(
                                            viol2.getFilePath().toFile()
                                                    .getName());
                    if (res == 0) {
                        res = viol1.getLine().compareTo(viol2.getLine());
                        if (res == 0) {
                            res =
                                    viol1.getLocation().compareTo(
                                            viol2.getLocation());
                        }
                    }
                }
                return res;
            }
        });
        LOGGER.finest("end method sortResults");
    }
		


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMDESIGNAlloc(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	raiseRemainingErrors();
	sortResults();
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                    			yybegin(LINE);
            }
          case 31: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\" )");
                    			yybegin(COMMENT);
            }
          case 32: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                      			yybegin(COMMENT);
            }
          case 33: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                      			yybegin(NEW_LINE);
            }
          case 34: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 35: break;
          case 6: 
            { 
            }
          case 36: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                	       		yybegin(NEW_LINE);
            }
          case 37: break;
          case 8: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
                    			location = location + " " + yytext();
                    			yybegin(COMMENT);
            }
          case 38: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
                    			yybegin(NEW_LINE);
            }
          case 39: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                    			yybegin(LINE);
            }
          case 40: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                    			yybegin(COMMENT);
            }
          case 41: break;
          case 12: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                       			yybegin(COMMENT);
            }
          case 42: break;
          case 13: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
                    			yybegin(NEW_LINE);
            }
          case 43: break;
          case 14: 
            { files.put(yytext(), location);
                    			lines.put(yytext(), yyline+1);
                    			LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - OPEN -> COMMENT (Transition : {VAR}|{INT} \""+yytext()+"\" )");
                    			yybegin(COMMENT);
            }
          case 44: break;
          case 15: 
            { String loc = files.get(yytext());
        						 if (!location.equals(loc) && !errors.contains(yytext())) {
        							LOGGER.fine("Setting error line "+(yyline+1)+" for the variable "+ yytext()+".");
        							setError(location,"The resource named "+
                							 yytext() + " has not been allocated and deallocate in the same algorithmic level.", yyline+1);
        						 }
        						 if (loc != null) {
        							errors.add(yytext());
        						 }
        						 files.remove(yytext()); 
        						 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - CLOSE -> COMMENT (Transition : {VAR}|{INT} \""+yytext()+"\" )");
        						 yybegin(COMMENT);
            }
          case 45: break;
          case 16: 
            { memory.put(yytext(), location); 
    							 lines.put(yytext(), yyline+1);
    							 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ALLOC -> COMMENT (Transition : VAR \""+yytext()+"\" )");
    							 yybegin(COMMENT);
            }
          case 46: break;
          case 17: 
            { String loc = memory.get(yytext());
    							 if (!location.equals(loc) && !errors.contains(yytext())) {
    								LOGGER.fine("Setting error line "+(yyline+1)+" for the variable "+ yytext()+".");
    								setError(location,"The resource named "+
                							 yytext() + " has not been allocated and deallocate in the same algorithmic level.", yyline+1);
    							 }
    							 if (loc != null) {
    								errors.add(yytext());
    							 }
    							 memory.remove(yytext()); 
    							 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DEALLOC -> COMMENT (Transition : VAR \""+yytext()+"\" )");
    							 yybegin(COMMENT);
            }
          case 47: break;
          case 18: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : STRING \""+yytext()+"\" )");
                    			yybegin(LINE);
            }
          case 48: break;
          case 19: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> LINE (Transition : STRING \""+yytext()+"\" )");
                     			yybegin(LINE);
            }
          case 49: break;
          case 20: 
            { location = yytext();
                    			LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                    			yybegin(NAMING);
            }
          case 50: break;
          case 21: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> OPEN (Transition : OPEN \""+yytext()+"\" )");
                    			yybegin(OPEN);
            }
          case 51: break;
          case 22: 
            { location = yytext();
                    			LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                    			yybegin(NAMING);
            }
          case 52: break;
          case 23: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> OPEN (Transition : OPEN \""+yytext()+"\" )");
                    			yybegin(OPEN);
            }
          case 53: break;
          case 24: 
            { location = yytext();
                    			LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                    			yybegin(NAMING);
            }
          case 54: break;
          case 25: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> CLOSE (Transition : CLOSE \""+yytext()+"\" )");
                		      	yybegin(CLOSE);
            }
          case 55: break;
          case 26: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> CLOSE (Transition : CLOSE \""+yytext()+"\" )");
                    			yybegin(CLOSE);
            }
          case 56: break;
          case 27: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> ALLOC (Transition : ALLOCATE \""+yytext()+"\" )");
                    			yybegin(ALLOC);
            }
          case 57: break;
          case 28: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> ALLOC (Transition : ALLOCATE \""+yytext()+"\" )");
                    			yybegin(ALLOC);
            }
          case 58: break;
          case 29: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> DEALLOC (Transition : DEALLOCATE \""+yytext()+"\" )");
                		      	yybegin(DEALLOC);
            }
          case 59: break;
          case 30: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> DEALLOC (Transition : DEALLOCATE \""+yytext()+"\" )");
                       			yybegin(DEALLOC);
            }
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
