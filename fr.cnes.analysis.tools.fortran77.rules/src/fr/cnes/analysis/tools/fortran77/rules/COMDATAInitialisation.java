/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/**********************************************************************************/
/* This file is used to generate a rule checker for COM.DATA.Initialisation rule. */
/* For further information on this, we advise you to refer to RNC manuals.	      */
/* As many comments have been done on the ExampleRule.lex file, this file         */
/* will restrain its comments on modifications.								      */
/*																			      */
/**********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMDATAInitialisation.lex</tt>
 */
public class COMDATAInitialisation extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int INIT = 10;
  public static final int VAR_EQ = 12;
  public static final int WAIT = 14;
  public static final int FUNC = 16;
  public static final int AVOID = 18;
  public static final int DATA = 20;
  public static final int WAIT_ARRAY = 22;
  public static final int PARAMS = 24;
  public static final int ARRAY = 26;
  public static final int DECLARATION = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\4\1\56\1\55\1\55\22\0\1\33\1\1\1\52"+
    "\1\0\1\53\1\47\1\53\1\51\1\35\1\36\1\3\1\46\1\60"+
    "\1\45\1\27\1\26\12\44\1\57\2\0\1\25\3\0\1\22\1\20"+
    "\1\2\1\16\1\15\1\5\1\21\1\31\1\40\2\43\1\24\1\23"+
    "\1\7\1\12\1\13\1\30\1\14\1\41\1\10\1\6\1\42\1\54"+
    "\1\32\1\34\1\43\4\0\1\37\1\0\1\22\1\20\1\2\1\16"+
    "\1\15\1\5\1\21\1\31\1\40\2\43\1\24\1\23\1\7\1\12"+
    "\1\13\1\30\1\14\1\41\1\10\1\6\1\42\1\54\1\32\1\34"+
    "\1\43\12\0\1\56\252\0\2\11\115\0\1\17\u1ea8\0\1\56\1\56"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\2\3\1\4\11\1\1\5\1\6"+
    "\1\7\1\2\1\10\1\11\1\12\1\2\2\13\1\6"+
    "\4\14\1\12\4\14\1\12\3\14\3\12\2\14\4\12"+
    "\1\14\1\5\1\6\1\2\1\15\1\16\4\15\1\6"+
    "\4\15\1\6\3\15\1\17\2\6\2\15\4\6\1\15"+
    "\1\5\1\20\1\21\1\22\1\23\1\24\3\20\1\25"+
    "\1\26\1\27\1\26\1\25\1\26\1\30\2\25\1\6"+
    "\1\25\1\26\4\25\1\26\1\5\1\31\2\6\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\46\1\6\2\46"+
    "\1\6\1\46\1\50\2\46\1\6\13\0\1\6\11\0"+
    "\3\14\1\0\1\51\4\14\3\0\10\14\2\0\3\14"+
    "\1\52\2\0\5\14\1\53\1\0\12\53\11\0\1\54"+
    "\13\0\1\14\7\0\1\55\3\15\1\0\1\56\4\15"+
    "\2\0\10\15\2\0\3\15\1\57\2\0\5\15\1\6"+
    "\1\0\12\6\24\0\1\15\1\0\1\60\4\0\1\61"+
    "\2\26\2\0\1\26\2\6\4\0\1\26\1\0\1\62"+
    "\1\46\1\0\1\46\1\0\1\46\1\0\3\46\1\63"+
    "\27\0\7\14\2\0\3\14\1\0\5\14\2\0\1\14"+
    "\1\0\2\14\2\0\4\14\2\53\2\0\2\53\1\0"+
    "\14\53\35\0\2\14\10\0\7\15\2\0\10\15\2\0"+
    "\1\15\1\0\2\15\2\0\4\15\2\6\2\0\2\6"+
    "\1\0\14\6\34\0\2\15\2\0\2\60\2\0\2\26"+
    "\1\0\2\26\1\46\1\0\1\46\1\0\1\46\1\0"+
    "\3\46\7\0\1\64\16\0\10\14\2\0\2\14\1\65"+
    "\2\66\1\0\1\14\1\0\3\14\1\67\2\0\1\14"+
    "\1\0\4\14\2\0\16\53\4\0\1\6\16\0\1\6"+
    "\13\0\1\14\10\0\10\15\2\0\2\15\1\70\2\71"+
    "\1\15\1\0\3\15\1\72\2\0\1\15\1\0\4\15"+
    "\2\0\16\6\34\0\1\15\3\0\3\26\1\46\1\0"+
    "\2\46\1\0\1\46\1\0\3\46\15\0\2\14\2\67"+
    "\4\14\1\0\1\65\2\0\3\14\1\0\3\14\1\0"+
    "\1\14\1\0\4\14\5\53\1\66\5\53\5\0\1\66"+
    "\11\0\1\66\7\0\2\15\2\72\4\15\1\0\1\70"+
    "\2\0\3\15\1\0\3\15\1\0\1\15\1\0\4\15"+
    "\5\6\1\71\5\6\5\0\1\71\11\0\1\71\5\0"+
    "\1\60\1\26\1\46\1\0\2\46\1\0\1\46\1\0"+
    "\3\46\10\0\1\73\4\0\2\14\1\0\1\14\1\0"+
    "\1\14\2\0\2\14\1\0\3\14\1\0\1\74\1\0"+
    "\4\14\1\53\1\67\6\53\1\0\1\67\7\0\1\67"+
    "\11\0\2\15\1\0\1\15\1\0\1\15\2\0\2\15"+
    "\1\0\3\15\1\0\1\75\1\0\4\15\1\6\1\72"+
    "\5\6\1\0\1\72\6\0\1\72\7\0\1\46\1\0"+
    "\2\46\1\0\1\46\1\0\1\76\2\46\6\0\1\14"+
    "\1\0\1\14\1\0\1\14\1\0\3\14\2\0\2\14"+
    "\4\53\12\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\3\15\2\0\2\15\4\6\11\0\1\46\1\77\1\46"+
    "\1\0\1\46\1\0\1\46\3\0\1\74\1\0\2\14"+
    "\2\0\1\14\4\53\11\0\1\75\1\0\2\15\2\0"+
    "\1\15\4\6\10\0\1\76\3\0\1\46\1\0\1\46"+
    "\2\0\2\14\2\0\1\53\3\0\2\15\2\0\1\6"+
    "\3\0\2\100\2\0\1\14\1\0\1\53\2\0\1\15"+
    "\1\0\1\6\2\0\1\101\2\0\1\14\2\0\1\15"+
    "\3\0\1\14\1\0\1\15\2\0\1\14\1\0\1\15"+
    "\2\0\1\14\1\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[1172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u02df\0\u0310\0\u02df\0\u02df\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u02df\0\u02df\0\u02df"+
    "\0\u04fa\0\u052b\0\u02df\0\u055c\0\u055c\0\u058d\0\u055c\0\u055c"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u02df"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u055c"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u09f4\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u09f4\0\u02df\0\u0ebd\0\u0eee\0\u02df"+
    "\0\u02df\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u0fb2\0\u1014"+
    "\0\u1045\0\u1076\0\u10a7\0\u10a7\0\u10d8\0\u0fb2\0\u02df\0\u1109"+
    "\0\u0dc8\0\u113a\0\u116b\0\u119c\0\u11cd\0\u0fb2\0\u02df\0\u0f50"+
    "\0\u0f81\0\u02df\0\u11fe\0\u02df\0\u02df\0\u0eee\0\u122f\0\u0eee"+
    "\0\u02df\0\u1260\0\u0eee\0\u1291\0\u02df\0\u12c2\0\u0eee\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u02df\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u1665\0\u1696\0\u04fa\0\u16c7\0\u16f8\0\u1729"+
    "\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1"+
    "\0\u18e2\0\u1913\0\u02df\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u02df"+
    "\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f"+
    "\0\u08ff\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u02df\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5"+
    "\0\u0a25\0\u25e6\0\u2617\0\u2648\0\u2679\0\u02df\0\u26aa\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863"+
    "\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u02df\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42"+
    "\0\u2b73\0\u2ba4\0\u0dc8\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99"+
    "\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u0f50\0\u2dbf\0\u2df0"+
    "\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u0f81"+
    "\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf"+
    "\0\u3100\0\u3131\0\u3162\0\u3193\0\u0f1f\0\u31c4\0\u31f5\0\u3226"+
    "\0\u02df\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d"+
    "\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u02df\0\u34d4"+
    "\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c"+
    "\0\u02df\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3"+
    "\0\u37e4\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b"+
    "\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3"+
    "\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b"+
    "\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3"+
    "\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b"+
    "\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3"+
    "\0\u4114\0\u4145\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b"+
    "\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3"+
    "\0\u4424\0\u4455\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b"+
    "\0\u45ac\0\u45dd\0\u460e\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703"+
    "\0\u4734\0\u4765\0\u4796\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b"+
    "\0\u48bc\0\u48ed\0\u491e\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13"+
    "\0\u4a44\0\u4a75\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b"+
    "\0\u4bcc\0\u4bfd\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23"+
    "\0\u4d54\0\u4d85\0\u4db6\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u4eab"+
    "\0\u4edc\0\u4f0d\0\u4f3e\0\u4f6f\0\u4fa0\0\u4fd1\0\u5002\0\u5033"+
    "\0\u5064\0\u5095\0\u50c6\0\u50f7\0\u5128\0\u5159\0\u518a\0\u51bb"+
    "\0\u51ec\0\u521d\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u5312\0\u5343"+
    "\0\u5374\0\u53a5\0\u53d6\0\u5407\0\u5438\0\u5469\0\u549a\0\u54cb"+
    "\0\u54fc\0\u552d\0\u555e\0\u558f\0\u55c0\0\u55f1\0\u5622\0\u5653"+
    "\0\u5684\0\u56b5\0\u56e6\0\u5717\0\u5748\0\u5779\0\u57aa\0\u57db"+
    "\0\u580c\0\u583d\0\u586e\0\u589f\0\u58d0\0\u5901\0\u5932\0\u5963"+
    "\0\u5994\0\u59c5\0\u59f6\0\u5a27\0\u5a58\0\u5a89\0\u5aba\0\u5aeb"+
    "\0\u5b1c\0\u5b4d\0\u5b7e\0\u5baf\0\u5be0\0\u5c11\0\u5c42\0\u5c73"+
    "\0\u5ca4\0\u5cd5\0\u5d06\0\u5d37\0\u5d68\0\u5d99\0\u5dca\0\u5dfb"+
    "\0\u5e2c\0\u5e5d\0\u5e8e\0\u5ebf\0\u5ef0\0\u5f21\0\u5f52\0\u5f83"+
    "\0\u5fb4\0\u02df\0\u5fe5\0\u6016\0\u6047\0\u6078\0\u60a9\0\u60da"+
    "\0\u610b\0\u613c\0\u616d\0\u619e\0\u61cf\0\u6200\0\u6231\0\u6262"+
    "\0\u6293\0\u62c4\0\u62f5\0\u6326\0\u6357\0\u6388\0\u63b9\0\u63ea"+
    "\0\u641b\0\u644c\0\u647d\0\u64ae\0\u05ef\0\u02df\0\u1913\0\u64df"+
    "\0\u6510\0\u6541\0\u6572\0\u65a3\0\u65d4\0\u05ef\0\u6605\0\u6636"+
    "\0\u6667\0\u6698\0\u66c9\0\u66fa\0\u672b\0\u675c\0\u678d\0\u67be"+
    "\0\u67ef\0\u6820\0\u6851\0\u6882\0\u68b3\0\u68e4\0\u6915\0\u6946"+
    "\0\u6977\0\u69a8\0\u69d9\0\u6a0a\0\u6a3b\0\u6a6c\0\u6a9d\0\u6ace"+
    "\0\u6aff\0\u6b30\0\u208a\0\u6b61\0\u6b92\0\u6bc3\0\u6bf4\0\u6c25"+
    "\0\u6c56\0\u6c87\0\u6cb8\0\u6ce9\0\u6d1a\0\u6d4b\0\u6d7c\0\u6dad"+
    "\0\u6dde\0\u2274\0\u6e0f\0\u6e40\0\u6e71\0\u6ea2\0\u6ed3\0\u6f04"+
    "\0\u6f35\0\u6f66\0\u6f97\0\u6fc8\0\u6ff9\0\u702a\0\u705b\0\u708c"+
    "\0\u70bd\0\u70ee\0\u711f\0\u7150\0\u7181\0\u71b2\0\u71e3\0\u7214"+
    "\0\u7245\0\u7276\0\u72a7\0\u72d8\0\u7309\0\u733a\0\u736b\0\u739c"+
    "\0\u73cd\0\u73fe\0\u0ab8\0\u02df\0\u2679\0\u742f\0\u7460\0\u7491"+
    "\0\u74c2\0\u74f3\0\u0ab8\0\u7524\0\u7555\0\u7586\0\u75b7\0\u75e8"+
    "\0\u7619\0\u764a\0\u767b\0\u76ac\0\u76dd\0\u770e\0\u773f\0\u7770"+
    "\0\u77a1\0\u77d2\0\u7803\0\u7834\0\u7865\0\u7896\0\u78c7\0\u78f8"+
    "\0\u7929\0\u795a\0\u798b\0\u79bc\0\u79ed\0\u7a1e\0\u7a4f\0\u7a80"+
    "\0\u7ab1\0\u7ae2\0\u7b13\0\u7b44\0\u7b75\0\u7ba6\0\u7bd7\0\u7c08"+
    "\0\u7c39\0\u7c6a\0\u7c9b\0\u7ccc\0\u7cfd\0\u7d2e\0\u7d5f\0\u7d90"+
    "\0\u7dc1\0\u7df2\0\u7e23\0\u7e54\0\u7e85\0\u7eb6\0\u7ee7\0\u7f18"+
    "\0\u7f49\0\u7f7a\0\u7fab\0\u7fdc\0\u800d\0\u803e\0\u806f\0\u80a0"+
    "\0\u80d1\0\u8102\0\u8133\0\u8164\0\u8195\0\u81c6\0\u81f7\0\u8228"+
    "\0\u8259\0\u828a\0\u82bb\0\u82ec\0\u831d\0\u834e\0\u837f\0\u83b0"+
    "\0\u83e1\0\u8412\0\u8443\0\u8474\0\u84a5\0\u84d6\0\u8507\0\u02df"+
    "\0\u1913\0\u8538\0\u8569\0\u859a\0\u85cb\0\u85fc\0\u02df\0\u862d"+
    "\0\u865e\0\u868f\0\u86c0\0\u86f1\0\u8722\0\u8753\0\u8784\0\u87b5"+
    "\0\u87e6\0\u8817\0\u8848\0\u8879\0\u88aa\0\u88db\0\u890c\0\u893d"+
    "\0\u896e\0\u899f\0\u89d0\0\u8a01\0\u41d8\0\u8a32\0\u8a63\0\u8a94"+
    "\0\u8ac5\0\u8af6\0\u8b27\0\u8b58\0\u8b89\0\u8bba\0\u8beb\0\u208a"+
    "\0\u8c1c\0\u8c4d\0\u8c7e\0\u8caf\0\u8ce0\0\u8d11\0\u8d42\0\u8d73"+
    "\0\u8da4\0\u2274\0\u8dd5\0\u8e06\0\u8e37\0\u8e68\0\u8e99\0\u8eca"+
    "\0\u8efb\0\u8f2c\0\u8f5d\0\u02df\0\u2679\0\u8f8e\0\u8fbf\0\u8ff0"+
    "\0\u9021\0\u9052\0\u02df\0\u9083\0\u90b4\0\u90e5\0\u9116\0\u9147"+
    "\0\u9178\0\u91a9\0\u91da\0\u920b\0\u923c\0\u926d\0\u929e\0\u92cf"+
    "\0\u9300\0\u9331\0\u9362\0\u9393\0\u93c4\0\u93f5\0\u9426\0\u9457"+
    "\0\u527f\0\u9488\0\u94b9\0\u94ea\0\u951b\0\u954c\0\u957d\0\u95ae"+
    "\0\u95df\0\u9610\0\u9641\0\u0f50\0\u9672\0\u96a3\0\u96d4\0\u9705"+
    "\0\u9736\0\u9767\0\u9798\0\u97c9\0\u97fa\0\u0f81\0\u982b\0\u985c"+
    "\0\u988d\0\u98be\0\u98ef\0\u9920\0\u9951\0\u9982\0\u99b3\0\u99e4"+
    "\0\u9a15\0\u9a46\0\u9a77\0\u9aa8\0\u9ad9\0\u9b0a\0\u9b3b\0\u9b6c"+
    "\0\u9b9d\0\u9bce\0\u9bff\0\u9c30\0\u9c61\0\u9c92\0\u9cc3\0\u02df"+
    "\0\u9cf4\0\u9d25\0\u9d56\0\u9d87\0\u9db8\0\u9de9\0\u9e1a\0\u9e4b"+
    "\0\u9e7c\0\u9ead\0\u9ede\0\u9f0f\0\u9f40\0\u9f71\0\u9fa2\0\u9fd3"+
    "\0\ua004\0\ua035\0\ua066\0\u05ef\0\ua097\0\ua0c8\0\ua0f9\0\ua12a"+
    "\0\ua15b\0\ua18c\0\u41d8\0\ua1bd\0\ua1ee\0\ua21f\0\ua250\0\ua281"+
    "\0\ua2b2\0\ua2e3\0\u208a\0\ua314\0\ua345\0\ua376\0\ua3a7\0\ua3d8"+
    "\0\ua409\0\ua43a\0\u2274\0\ua46b\0\ua49c\0\ua4cd\0\ua4fe\0\ua52f"+
    "\0\ua560\0\ua591\0\ua5c2\0\ua5f3\0\ua624\0\ua655\0\ua686\0\ua6b7"+
    "\0\ua6e8\0\ua719\0\ua74a\0\ua77b\0\ua7ac\0\ua7dd\0\ua80e\0\ua83f"+
    "\0\ua870\0\ua8a1\0\ua8d2\0\u0ab8\0\ua903\0\ua934\0\ua965\0\ua996"+
    "\0\ua9c7\0\ua9f8\0\u527f\0\uaa29\0\uaa5a\0\uaa8b\0\uaabc\0\uaaed"+
    "\0\uab1e\0\u0f50\0\uab4f\0\uab80\0\uabb1\0\uabe2\0\uac13\0\uac44"+
    "\0\u0f81\0\uac75\0\uaca6\0\uacd7\0\uad08\0\uad39\0\uad6a\0\uad9b"+
    "\0\uadcc\0\uadfd\0\uae2e\0\uae5f\0\uae90\0\uaec1\0\uaef2\0\u12c2"+
    "\0\uaf23\0\uaf54\0\uaf85\0\uafb6\0\uafe7\0\ub018\0\ub049\0\ub07a"+
    "\0\ub0ab\0\ub0dc\0\ub10d\0\ub13e\0\ub16f\0\ub1a0\0\ub1d1\0\ub202"+
    "\0\ub233\0\ub264\0\ub295\0\ub2c6\0\ub2f7\0\ub328\0\ub359\0\ub38a"+
    "\0\ub3bb\0\ub3ec\0\ub41d\0\ub44e\0\ub47f\0\ub4b0\0\ub4e1\0\ub512"+
    "\0\ub543\0\ub574\0\ub5a5\0\ub5d6\0\ub607\0\ub638\0\ub669\0\ub69a"+
    "\0\ub6cb\0\ub6fc\0\ub72d\0\ub75e\0\ub78f\0\ub7c0\0\ub7f1\0\ub822"+
    "\0\ub853\0\ub884\0\ub8b5\0\ub8e6\0\ub917\0\ub948\0\ub979\0\ub9aa"+
    "\0\ub9db\0\uba0c\0\uba3d\0\uba6e\0\uba9f\0\ubad0\0\ubb01\0\ubb32"+
    "\0\ubb63\0\ubb94\0\ubbc5\0\ubbf6\0\ubc27\0\ubc58\0\ubc89\0\u02df"+
    "\0\ubcba\0\ubceb\0\ubd1c\0\ubd4d\0\ubd7e\0\ubdaf\0\ubde0\0\ube11"+
    "\0\ube42\0\ube73\0\ubea4\0\ubed5\0\ubf06\0\ubf37\0\ubf68\0\ubf99"+
    "\0\ubfca\0\ubffb\0\uc02c\0\u02df\0\uc05d\0\uc08e\0\uc0bf\0\uc0f0"+
    "\0\uc121\0\uc152\0\uc183\0\uc1b4\0\uc1e5\0\uc216\0\uc247\0\uc278"+
    "\0\uc2a9\0\uc2da\0\uc30b\0\uc33c\0\uc36d\0\uc39e\0\u02df\0\uc3cf"+
    "\0\ubb01\0\uc400\0\uc431\0\uc462\0\uc493\0\uc4c4\0\uc4f5\0\uc526"+
    "\0\uc557\0\uc588\0\uc5b9\0\uc5ea\0\uc61b\0\uc64c\0\uc67d\0\uc6ae"+
    "\0\uc6df\0\uc710\0\uc741\0\uc772\0\uc7a3\0\uc7d4\0\uc805\0\u02df"+
    "\0\u12c2\0\uc836\0\uc867\0\uc898\0\uc8c9\0\uc8fa\0\uc92b\0\uc95c"+
    "\0\uc98d\0\uc9be\0\uc9ef\0\uca20\0\uca51\0\u02df\0\uca82\0\ucab3"+
    "\0\ucae4\0\ucb15\0\ucb46\0\ucb77\0\ucba8\0\ucbd9\0\ucc0a\0\ucc3b"+
    "\0\ucc6c\0\ucc9d\0\uccce\0\uccff\0\ucd30\0\ucd61\0\ucd92\0\ucdc3"+
    "\0\ucdf4\0\uce25\0\uce56\0\uce87";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\20\1\26"+
    "\1\27\1\20\1\30\1\31\1\20\1\32\1\33\3\20"+
    "\1\34\1\35\13\20\1\27\1\33\13\20\2\36\2\20"+
    "\1\37\1\21\2\37\1\40\50\37\2\36\3\37\1\41"+
    "\1\42\1\37\1\43\4\42\1\37\5\42\1\37\5\42"+
    "\3\37\3\42\1\37\1\42\3\37\4\42\10\37\1\42"+
    "\2\36\2\37\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\52\1\56\1\57\1\60"+
    "\1\61\1\62\1\52\1\63\1\52\1\64\1\65\2\66"+
    "\1\67\3\52\1\44\1\52\2\44\1\70\1\71\1\72"+
    "\2\52\1\73\2\44\1\74\1\44\1\75\1\76\1\44"+
    "\1\77\2\100\2\44\1\101\1\102\1\103\1\101\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\106\1\112\1\113"+
    "\1\114\1\115\1\116\1\106\1\117\1\106\1\120\1\121"+
    "\1\122\1\123\1\124\3\106\1\101\1\106\2\101\1\37"+
    "\1\125\1\126\2\106\1\127\2\101\1\130\1\101\1\131"+
    "\1\132\1\101\1\133\2\134\2\101\1\135\1\41\1\136"+
    "\1\135\1\137\4\136\1\135\5\136\1\135\5\136\1\140"+
    "\2\135\3\136\1\37\1\136\1\141\2\135\4\136\1\142"+
    "\3\135\1\37\1\143\1\144\1\135\1\136\1\37\1\36"+
    "\2\135\1\145\1\41\1\146\1\145\1\147\1\150\3\146"+
    "\1\151\3\146\1\152\1\146\1\145\5\146\1\153\1\154"+
    "\1\155\3\146\1\156\1\146\2\145\1\157\1\160\3\146"+
    "\1\161\2\145\1\162\1\156\1\163\1\164\1\145\1\165"+
    "\1\156\1\166\2\145\1\37\1\41\2\37\1\167\44\37"+
    "\1\170\1\171\2\37\2\36\1\37\1\172\1\37\1\41"+
    "\1\173\2\37\4\173\1\37\5\173\1\37\5\173\3\37"+
    "\3\173\1\37\1\173\1\174\1\175\1\37\4\173\5\37"+
    "\1\170\1\171\1\37\1\173\5\37\1\41\2\37\1\176"+
    "\51\37\1\36\3\37\1\41\1\177\1\37\1\200\4\177"+
    "\1\37\5\177\1\37\5\177\3\37\3\177\1\37\1\177"+
    "\3\37\4\177\5\37\1\170\1\171\1\37\1\177\1\37"+
    "\1\36\3\37\1\41\33\37\1\174\1\201\12\37\1\170"+
    "\1\171\7\37\1\41\1\202\1\37\1\203\4\202\1\37"+
    "\5\202\1\37\5\202\3\37\3\202\1\37\1\202\3\37"+
    "\4\202\10\37\1\202\1\37\1\36\3\37\1\41\1\204"+
    "\2\37\4\204\1\37\5\204\1\37\5\204\3\37\3\204"+
    "\1\37\1\204\1\174\1\205\1\37\4\204\5\37\1\170"+
    "\1\171\1\37\1\204\5\37\1\21\1\206\1\37\1\207"+
    "\1\210\3\206\1\211\1\206\1\212\2\206\1\213\1\214"+
    "\3\206\1\215\1\206\1\216\2\37\3\206\1\37\1\206"+
    "\3\37\1\217\1\220\2\206\1\127\4\37\1\170\1\171"+
    "\1\37\1\206\2\36\1\221\1\37\73\0\1\222\16\0"+
    "\1\223\35\0\1\224\106\0\1\225\33\0\1\226\65\0"+
    "\1\227\61\0\1\230\55\0\1\231\54\0\1\232\64\0"+
    "\1\233\60\0\1\234\46\0\4\235\1\0\54\235\2\0"+
    "\1\42\2\0\4\42\1\0\5\42\1\0\5\42\3\0"+
    "\3\42\1\0\1\42\2\0\6\42\7\0\1\42\6\0"+
    "\1\236\2\0\1\237\1\0\1\240\1\0\1\241\2\0"+
    "\1\242\1\243\1\0\1\244\1\0\1\245\16\0\1\241"+
    "\1\244\12\0\1\246\6\0\1\52\2\0\4\52\1\0"+
    "\1\247\4\52\1\0\2\52\1\250\2\52\3\0\1\52"+
    "\1\251\1\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\5\0\1\52\2\0\1\52"+
    "\1\254\2\52\1\0\1\255\4\52\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\5\0\1\52\2\0\4\52\1\0"+
    "\5\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\0\5\52\1\0\2\52\1\256"+
    "\2\52\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\4\52\1\0\5\52\1\0\5\52\3\0\3\52\1\252"+
    "\1\257\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\236\2\0\1\260\1\0\1\261\1\0"+
    "\1\241\2\0\1\242\1\243\1\0\1\244\1\0\1\245"+
    "\1\0\1\262\14\0\1\241\1\244\12\0\1\246\6\0"+
    "\1\52\2\0\4\52\1\0\2\52\1\263\2\52\1\0"+
    "\5\52\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\4\52\1\0\3\52\1\264\1\52\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\5\0\1\52\2\0\2\52\1\265"+
    "\1\52\1\0\5\52\1\0\4\52\1\266\3\0\1\267"+
    "\1\52\1\270\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\5\0\1\52\2\0\4\52"+
    "\1\0\1\271\4\52\1\0\2\52\1\272\2\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\5\0\1\236\2\0\1\237\1\273"+
    "\1\240\1\0\1\241\2\0\1\242\1\243\1\0\1\244"+
    "\1\0\1\245\1\274\15\0\1\241\1\244\12\0\1\246"+
    "\6\0\1\52\2\0\4\52\1\0\1\275\4\52\1\0"+
    "\5\52\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\4\52\1\0\1\276\4\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\4\52\1\0\1\277"+
    "\4\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\236\2\0\1\237\1\0\1\240\1\0\1\241\2\0"+
    "\1\242\1\243\1\0\1\244\1\0\1\245\3\0\1\300"+
    "\12\0\1\241\1\244\12\0\1\246\6\0\1\236\2\0"+
    "\1\237\1\0\1\301\1\0\1\241\2\0\1\242\1\302"+
    "\1\0\1\244\1\0\1\245\16\0\1\241\1\244\12\0"+
    "\1\246\6\0\1\52\2\0\1\303\1\52\1\304\1\52"+
    "\1\0\5\52\1\0\3\52\1\305\1\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\1\52\1\306\2\52"+
    "\1\0\5\52\1\0\2\52\1\307\2\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\32\0\1\310\14\0\1\311\16\0\1\312"+
    "\2\0\1\313\1\314\1\315\1\314\1\241\2\314\1\316"+
    "\1\317\1\314\1\244\1\314\1\320\3\314\3\0\3\314"+
    "\1\0\1\314\3\0\1\321\1\322\2\314\10\0\1\323"+
    "\4\0\2\324\1\325\2\324\1\326\1\324\1\327\1\324"+
    "\1\330\2\324\1\331\1\332\1\324\1\333\1\324\1\334"+
    "\16\324\1\330\1\333\7\324\1\335\2\324\1\336\4\324"+
    "\2\337\1\340\2\337\1\341\1\337\1\342\1\337\1\343"+
    "\2\337\1\344\1\345\1\337\1\346\1\337\1\347\16\337"+
    "\1\343\1\346\10\337\1\335\1\337\1\350\4\337\2\0"+
    "\1\52\2\0\4\52\1\0\5\52\1\0\5\52\3\0"+
    "\1\52\1\351\1\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\352\2\0"+
    "\1\237\1\0\1\353\1\0\1\354\2\0\1\355\1\356"+
    "\1\0\1\357\1\0\1\360\16\0\1\354\1\357\12\0"+
    "\1\246\4\0\4\361\1\0\54\361\2\0\1\106\2\0"+
    "\4\106\1\0\1\362\4\106\1\0\2\106\1\363\2\106"+
    "\3\0\1\106\1\364\1\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\1\106\1\367\2\106\1\0\1\370\4\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\4\106\1\0\5\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\106\2\0\4\106\1\0\5\106\1\0"+
    "\2\106\1\371\2\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\5\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\372\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\352\2\0\1\260\1\0"+
    "\1\373\1\0\1\354\2\0\1\355\1\356\1\0\1\357"+
    "\1\0\1\360\1\0\1\374\14\0\1\354\1\357\12\0"+
    "\1\246\6\0\1\106\2\0\4\106\1\0\2\106\1\375"+
    "\2\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\3\106\1\376\1\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\2\106\1\377\1\106\1\0\5\106\1\0\4\106\1\u0100"+
    "\3\0\1\u0101\1\106\1\u0102\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\4\106\1\0\1\u0103\4\106\1\0\2\106\1\u0104"+
    "\2\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\352\2\0"+
    "\1\237\1\u0105\1\353\1\0\1\354\2\0\1\355\1\356"+
    "\1\0\1\357\1\0\1\360\1\u0106\15\0\1\354\1\357"+
    "\12\0\1\246\6\0\1\106\2\0\4\106\1\0\1\u0107"+
    "\4\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\1\u0108\4\106\1\0\5\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\5\0\1\106\2\0\4\106"+
    "\1\0\1\u0109\4\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\352\2\0\1\237\1\0\1\353\1\0"+
    "\1\354\2\0\1\355\1\356\1\0\1\357\1\0\1\360"+
    "\3\0\1\u010a\12\0\1\354\1\357\12\0\1\246\6\0"+
    "\1\352\2\0\1\237\1\0\1\u010b\1\0\1\354\2\0"+
    "\1\355\1\u010c\1\0\1\357\1\0\1\360\16\0\1\354"+
    "\1\357\12\0\1\246\6\0\1\106\2\0\1\u010d\1\106"+
    "\1\u010e\1\106\1\0\5\106\1\0\3\106\1\u010f\1\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\5\0\1\106\2\0\1\106"+
    "\1\u0110\2\106\1\0\5\106\1\0\2\106\1\u0111\2\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\32\0\1\u0112\14\0\1\u0113"+
    "\16\0\1\u0114\2\0\1\u0115\1\u0116\1\u0117\1\u0116\1\354"+
    "\2\u0116\1\u0118\1\u0119\1\u0116\1\357\1\u0116\1\u011a\3\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\3\0\1\u011b\1\u011c\2\u0116"+
    "\10\0\1\u011d\4\0\2\u011e\1\u011f\2\u011e\1\u0120\1\u011e"+
    "\1\u0121\1\u011e\1\u0122\2\u011e\1\u0123\1\u0124\1\u011e\1\u0125"+
    "\1\u011e\1\u0126\16\u011e\1\u0122\1\u0125\7\u011e\1\37\2\u011e"+
    "\1\u0127\4\u011e\2\u0128\1\u0129\2\u0128\1\u012a\1\u0128\1\u012b"+
    "\1\u0128\1\u012c\2\u0128\1\u012d\1\u012e\1\u0128\1\u012f\1\u0128"+
    "\1\u0130\16\u0128\1\u012c\1\u012f\10\u0128\1\37\1\u0128\1\u0131"+
    "\4\u0128\2\0\1\106\2\0\4\106\1\0\5\106\1\0"+
    "\5\106\3\0\1\106\1\u0132\1\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\136\2\0\4\136\1\0\5\136\1\0\5\136\3\0"+
    "\3\136\1\0\1\136\2\0\6\136\7\0\1\136\37\0"+
    "\1\u0133\54\0\1\u0134\14\0\1\u0135\14\0\51\u011e\1\37"+
    "\7\u011e\52\u0128\1\37\6\u0128\5\0\1\237\3\0\1\u0136"+
    "\3\0\1\u0137\22\0\1\u0136\13\0\1\246\6\0\1\146"+
    "\2\0\4\146\1\0\5\146\1\0\5\146\3\0\3\146"+
    "\1\u0138\1\146\1\u0139\1\0\6\146\3\0\1\u0138\3\0"+
    "\1\146\1\u0138\5\0\1\146\2\0\4\146\1\0\1\u013a"+
    "\4\146\1\0\5\146\3\0\3\146\1\u0138\1\146\1\u0139"+
    "\1\0\6\146\3\0\1\u0138\3\0\1\146\1\u0138\10\0"+
    "\1\260\3\0\1\u0136\3\0\1\u0137\22\0\1\u0136\13\0"+
    "\1\246\6\0\1\146\2\0\4\146\1\0\5\146\1\0"+
    "\4\146\1\u013b\3\0\3\146\1\u0138\1\146\1\u0139\1\0"+
    "\6\146\3\0\1\u0138\3\0\1\146\1\u0138\10\0\1\237"+
    "\3\0\1\u0136\3\0\1\u0137\7\0\1\37\12\0\1\u0136"+
    "\13\0\1\246\11\0\1\237\1\0\1\u013c\1\0\1\u0136"+
    "\3\0\1\u013d\22\0\1\u0136\13\0\1\246\6\0\1\146"+
    "\2\0\1\u013e\3\146\1\0\5\146\1\0\5\146\3\0"+
    "\3\146\1\u0138\1\146\1\u0139\1\0\6\146\3\0\1\u0138"+
    "\3\0\1\146\1\u0138\5\0\1\u0116\2\0\1\u0115\3\u0116"+
    "\1\u0136\3\u0116\1\u013f\1\u0116\1\0\5\u0116\3\0\3\u0116"+
    "\1\0\1\u0116\3\0\1\u0140\3\u0116\10\0\1\u011d\4\0"+
    "\5\u011e\1\u0120\3\u011e\1\u0141\3\u011e\1\u0142\22\u011e\1\u0141"+
    "\10\u011e\1\37\2\u011e\1\u0127\4\u011e\5\u0128\1\u012a\3\u0128"+
    "\1\u0143\3\u0128\1\u0144\22\u0128\1\u0143\11\u0128\1\37\1\u0128"+
    "\1\u0131\4\u0128\2\0\1\146\2\0\4\146\1\0\5\146"+
    "\1\0\5\146\3\0\1\146\1\u0145\1\146\1\u0138\1\146"+
    "\1\u0139\1\0\6\146\3\0\1\u0138\3\0\1\146\1\u0138"+
    "\5\0\1\173\2\0\4\173\1\0\5\173\1\0\5\173"+
    "\3\0\3\173\1\0\1\173\2\0\6\173\7\0\1\173"+
    "\6\0\1\177\2\0\4\177\1\0\5\177\1\0\5\177"+
    "\3\0\3\177\1\0\1\177\2\0\6\177\7\0\1\177"+
    "\6\0\1\202\2\0\4\202\1\0\5\202\1\0\5\202"+
    "\3\0\3\202\1\0\1\202\2\0\6\202\7\0\1\202"+
    "\6\0\1\204\2\0\4\204\1\0\5\204\1\0\5\204"+
    "\3\0\3\204\1\0\1\204\2\0\6\204\7\0\1\204"+
    "\6\0\1\206\2\0\4\206\1\0\5\206\1\0\5\206"+
    "\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0"+
    "\1\206\6\0\1\206\2\0\1\206\1\u0148\2\206\1\0"+
    "\5\206\1\0\5\206\3\0\3\206\1\u0146\1\206\1\u0147"+
    "\1\0\6\206\7\0\1\206\13\0\1\u0149\53\0\1\206"+
    "\2\0\4\206\1\0\2\206\1\u014a\2\206\1\0\5\206"+
    "\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0"+
    "\1\206\6\0\1\206\2\0\4\206\1\u014b\5\206\1\0"+
    "\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0\1\206"+
    "\1\u014c\4\206\7\0\1\206\12\0\1\u014d\54\0\1\206"+
    "\2\0\4\206\1\0\1\u014e\4\206\1\0\5\206\3\0"+
    "\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0\1\206"+
    "\6\0\1\206\2\0\2\206\1\u014f\1\206\1\0\5\206"+
    "\1\0\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\6\206\7\0\1\206\6\0\1\206\2\0\1\206\1\u0150"+
    "\2\206\1\0\5\206\1\0\5\206\3\0\3\206\1\u0146"+
    "\1\206\1\u0147\1\0\6\206\7\0\1\206\63\0\1\u0151"+
    "\24\0\1\u0152\57\0\1\u0153\45\0\1\u0154\64\0\1\u0155"+
    "\55\0\1\u0156\62\0\1\u0157\70\0\1\u0158\44\0\1\u0159"+
    "\72\0\1\u015a\56\0\1\u015b\63\0\1\u015c\51\0\1\u015d"+
    "\7\0\1\u015e\50\0\1\u015f\70\0\1\u0160\43\0\1\u0161"+
    "\15\0\1\262\52\0\1\u0162\52\0\1\u0163\14\0\1\u0164"+
    "\3\0\1\u0165\1\0\1\u0166\50\0\1\274\50\0\1\u0167"+
    "\77\0\1\u0168\31\0\1\52\2\0\4\52\1\0\5\52"+
    "\1\0\3\52\1\u0169\1\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\5\52\1\0\4\52"+
    "\1\u016a\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\4\52\1\0\5\52\1\0\2\52\1\u016b\2\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\36\0\1\252\1\0\1\253\12\0"+
    "\1\252\4\0\1\252\5\0\1\52\2\0\2\52\1\u016c"+
    "\1\52\1\0\5\52\1\0\5\52\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\4\52\1\0\2\52\1\u016d"+
    "\2\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\0\5\52\1\0\3\52\1\u016e"+
    "\1\52\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\4\52\1\0\1\52\1\u016f\3\52\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\15\0\1\u015f\20\0\1\u0161\1\0"+
    "\1\37\12\0\1\u0161\4\0\1\u0161\13\0\1\u0170\11\0"+
    "\1\u0160\51\0\1\u0171\47\0\1\52\2\0\4\52\1\0"+
    "\1\u0172\4\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\5\52\1\0\2\52"+
    "\1\u0173\2\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\5\0\1\52"+
    "\2\0\4\52\1\0\4\52\1\u0174\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\5\0\1\52\2\0\4\52\1\0"+
    "\5\52\1\u0175\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\2\52\1\u0176\3\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\1\52\1\u0177\2\52\1\0"+
    "\5\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\3\52\1\u0178\1\0\5\52\1\0\5\52"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\5\0\1\52\2\0\1\52"+
    "\1\u0179\2\52\1\0\5\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\3\52\1\u017a\1\0"+
    "\5\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\23\0"+
    "\1\u017b\102\0\1\u017c\20\0\1\52\2\0\3\52\1\u017d"+
    "\1\0\5\52\1\0\5\52\3\0\3\52\1\u017e\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\4\52\1\u017f\1\0"+
    "\5\52\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\4\52\1\0\5\52\1\0\1\52\1\u0180\3\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\20\0\1\u0181\4\0\1\u0160\45\0"+
    "\1\u0163\14\0\1\u0164\3\0\1\u0182\1\0\1\u0166\30\0"+
    "\1\52\2\0\4\52\1\0\5\52\1\0\5\52\3\0"+
    "\3\52\1\u0161\1\52\1\37\1\0\6\52\3\0\1\u0161"+
    "\3\0\1\52\1\u0161\5\0\1\52\2\0\3\52\1\u0183"+
    "\1\0\5\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\1\52\1\u0184\3\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\5\0\1\52"+
    "\2\0\4\52\1\0\5\52\1\0\1\u0185\4\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\5\0\1\52\2\0\4\52\1\0"+
    "\5\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\3\52\1\u0186\2\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\u0187\2\0\4\u0187\1\0\3\u0187\2\u0188"+
    "\1\0\5\u0187\3\0\3\u0187\1\0\1\u0187\2\0\1\u0189"+
    "\4\u0187\1\u018a\7\0\1\u0187\6\0\1\314\2\0\4\314"+
    "\1\0\1\u018b\4\314\1\0\2\314\1\u018c\2\314\3\0"+
    "\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0"+
    "\1\314\6\0\1\314\2\0\4\314\1\0\1\u018e\4\314"+
    "\1\0\5\314\3\0\3\314\1\0\1\314\2\0\6\314"+
    "\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0\4\314"+
    "\1\0\5\314\1\0\5\314\3\0\3\314\1\0\1\314"+
    "\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314"+
    "\2\0\4\314\1\0\5\314\1\0\2\314\1\u018f\2\314"+
    "\3\0\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d"+
    "\4\0\1\314\6\0\1\314\2\0\4\314\1\0\3\314"+
    "\1\u0190\1\314\1\0\5\314\3\0\3\314\1\0\1\314"+
    "\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314"+
    "\2\0\2\314\1\u0191\1\314\1\0\5\314\1\0\4\314"+
    "\1\u0192\3\0\1\u0193\1\314\1\u0194\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0"+
    "\4\314\1\0\1\u0195\4\314\1\0\5\314\3\0\3\314"+
    "\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\1\u0196\3\314\1\0\5\314\1\0"+
    "\3\314\1\u0197\1\314\3\0\3\314\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0"+
    "\4\314\1\0\5\314\1\0\2\314\1\u0198\2\314\3\0"+
    "\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0"+
    "\1\314\6\0\1\314\2\0\4\314\1\0\5\314\1\0"+
    "\5\314\3\0\1\314\1\u0199\1\314\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\4\0\51\324\1\335"+
    "\21\324\1\u019a\7\324\1\u019b\26\324\1\335\21\324\1\u019c"+
    "\36\324\1\335\31\324\1\u019d\26\324\1\335\14\324\1\u019e"+
    "\15\324\1\u019f\25\324\1\335\24\324\1\u01a0\33\324\1\335"+
    "\16\324\1\u01a1\14\324\1\u01a2\3\324\1\u01a3\1\324\1\u01a4"+
    "\16\324\1\335\31\324\1\u01a5\26\324\1\335\21\324\1\u01a6"+
    "\36\324\1\335\40\324\1\u01a7\17\324\1\335\7\324\52\337"+
    "\1\335\20\337\1\u01a8\7\337\1\u01a9\27\337\1\335\20\337"+
    "\1\u01aa\37\337\1\335\30\337\1\u01ab\27\337\1\335\13\337"+
    "\1\u01ac\15\337\1\u01ad\26\337\1\335\23\337\1\u01ae\34\337"+
    "\1\335\15\337\1\u01af\14\337\1\u01b0\3\337\1\u01b1\1\337"+
    "\1\u01b2\17\337\1\335\30\337\1\u01b3\27\337\1\335\20\337"+
    "\1\u01b4\37\337\1\335\37\337\1\u01b5\20\337\1\335\6\337"+
    "\2\0\1\52\2\0\4\52\1\u01b6\3\52\1\u01b7\1\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\1\52\1\u01b8\4\52\3\0\1\252\3\0\1\52\1\252"+
    "\15\0\1\u01b9\7\0\1\u01ba\60\0\1\u01bb\43\0\1\u0161"+
    "\15\0\1\374\52\0\1\u01bc\52\0\1\u01bd\14\0\1\u0164"+
    "\3\0\1\u01be\1\0\1\u01bf\50\0\1\u0106\50\0\1\u01c0"+
    "\50\0\1\106\2\0\4\106\1\0\5\106\1\0\3\106"+
    "\1\u01c1\1\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\4\106\1\0\5\106\1\0\4\106\1\u01c2\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\0"+
    "\5\106\1\0\2\106\1\u01c3\2\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\36\0\1\365\1\0\1\366\12\0\1\365\4\0"+
    "\1\365\5\0\1\106\2\0\2\106\1\u01c4\1\106\1\0"+
    "\5\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\2\106\1\u01c5\2\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\4\106\1\0\5\106\1\0\3\106\1\u01c6\1\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\0"+
    "\1\106\1\u01c7\3\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\13\0\1\u01c8\11\0\1\u01bb\51\0\1\u01c9\47\0"+
    "\1\106\2\0\4\106\1\0\1\u01ca\4\106\1\0\5\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\5\0\1\106\2\0\4\106"+
    "\1\0\5\106\1\0\2\106\1\u01cb\2\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\5\0\1\106\2\0\4\106\1\0\4\106"+
    "\1\u01cc\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\5\106\1\u0175\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\2\106\1\u01cd\3\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\1\106\1\u01ce\2\106\1\0\5\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\3\106\1\u01cf"+
    "\1\0\5\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\5\0\1\106\2\0\1\106\1\u01d0\2\106\1\0\5\106"+
    "\1\0\5\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\3\106\1\u01d1\1\0\5\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\23\0\1\u01d2\102\0\1\u01d3\20\0"+
    "\1\106\2\0\3\106\1\u01d4\1\0\5\106\1\0\5\106"+
    "\3\0\3\106\1\u01d5\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\5\0\1\106\2\0\4\106"+
    "\1\0\4\106\1\u01d6\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\106\2\0\4\106\1\0\5\106\1\0"+
    "\1\106\1\u01d7\3\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\20\0"+
    "\1\u01d8\4\0\1\u01bb\45\0\1\u01bd\14\0\1\u0164\3\0"+
    "\1\u01d9\1\0\1\u01bf\30\0\1\106\2\0\4\106\1\0"+
    "\5\106\1\0\5\106\3\0\3\106\1\u0161\1\106\1\37"+
    "\1\0\6\106\3\0\1\u0161\3\0\1\106\1\u0161\5\0"+
    "\1\106\2\0\3\106\1\u01da\1\0\5\106\1\0\5\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\5\0\1\106\2\0\4\106"+
    "\1\0\1\106\1\u01db\3\106\1\0\5\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\5\0\1\106\2\0\4\106\1\0\5\106"+
    "\1\0\1\u01dc\4\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\5\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\3\106\1\u01dd\2\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\u01de\2\0"+
    "\4\u01de\1\0\3\u01de\2\u01df\1\0\5\u01de\3\0\3\u01de"+
    "\1\0\1\u01de\2\0\1\u01e0\4\u01de\1\u01e1\7\0\1\u01de"+
    "\6\0\1\u0116\2\0\4\u0116\1\0\1\u01e2\4\u0116\1\0"+
    "\2\u0116\1\u01e3\2\u0116\3\0\3\u0116\1\0\1\u0116\2\0"+
    "\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0"+
    "\4\u0116\1\0\1\u01e5\4\u0116\1\0\5\u0116\3\0\3\u0116"+
    "\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116"+
    "\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0\5\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116"+
    "\1\0\2\u0116\1\u01e6\2\u0116\3\0\3\u0116\1\0\1\u0116"+
    "\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\0\3\u0116\1\u01e7\1\u0116\1\0\5\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\2\u0116\1\u01e8\1\u0116"+
    "\1\0\5\u0116\1\0\4\u0116\1\u01e9\3\0\1\u01ea\1\u0116"+
    "\1\u01eb\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0"+
    "\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\1\u01ec\4\u0116"+
    "\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116"+
    "\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0\1\u01ed"+
    "\3\u0116\1\0\5\u0116\1\0\3\u0116\1\u01ee\1\u0116\3\0"+
    "\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0"+
    "\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0"+
    "\2\u0116\1\u01ef\2\u0116\3\0\3\u0116\1\0\1\u0116\2\0"+
    "\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0"+
    "\4\u0116\1\0\5\u0116\1\0\5\u0116\3\0\1\u0116\1\u01f0"+
    "\1\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0"+
    "\1\u0116\4\0\12\u011e\1\u01f1\7\u011e\1\u01f2\26\u011e\1\37"+
    "\21\u011e\1\u01f3\36\u011e\1\37\31\u011e\1\u01f4\26\u011e\1\37"+
    "\14\u011e\1\u01f5\15\u011e\1\u01f6\25\u011e\1\37\24\u011e\1\u01f7"+
    "\33\u011e\1\37\16\u011e\1\u01f8\14\u011e\1\u01f9\3\u011e\1\u01fa"+
    "\1\u011e\1\u01fb\16\u011e\1\37\31\u011e\1\u01fc\26\u011e\1\37"+
    "\21\u011e\1\u01fd\36\u011e\1\37\40\u011e\1\u01fe\17\u011e\1\37"+
    "\7\u011e\12\u0128\1\u01ff\7\u0128\1\u0200\27\u0128\1\37\20\u0128"+
    "\1\u0201\37\u0128\1\37\30\u0128\1\u0202\27\u0128\1\37\13\u0128"+
    "\1\u0203\15\u0128\1\u0204\26\u0128\1\37\23\u0128\1\u0205\34\u0128"+
    "\1\37\15\u0128\1\u0206\14\u0128\1\u0207\3\u0128\1\u0208\1\u0128"+
    "\1\u0209\17\u0128\1\37\30\u0128\1\u020a\27\u0128\1\37\20\u0128"+
    "\1\u020b\37\u0128\1\37\37\u0128\1\u020c\20\u0128\1\37\6\u0128"+
    "\2\0\1\106\2\0\4\106\1\u01b6\3\106\1\u020d\1\106"+
    "\1\0\5\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\1\106\1\u020e\4\106\3\0\1\365\3\0\1\106\1\365"+
    "\5\0\1\u020f\2\0\4\u020f\1\0\5\u020f\1\0\5\u020f"+
    "\2\0\1\37\3\u020f\1\u0210\1\u020f\3\0\4\u020f\1\37"+
    "\1\0\1\37\4\0\1\37\1\u020f\6\0\1\u0211\2\0"+
    "\4\u0211\1\0\3\u0211\2\u0212\1\0\5\u0211\3\0\3\u0211"+
    "\1\0\1\u0211\2\0\1\u0213\4\u0211\1\u0214\7\0\1\u0211"+
    "\11\0\1\u0161\77\0\1\u0164\67\0\1\u0138\1\0\1\u0139"+
    "\12\0\1\u0138\4\0\1\u0138\5\0\1\146\2\0\4\146"+
    "\1\0\2\146\1\u0215\2\146\1\0\5\146\3\0\3\146"+
    "\1\u0138\1\146\1\u0139\1\0\6\146\3\0\1\u0138\3\0"+
    "\1\146\1\u0138\5\0\1\146\2\0\4\146\1\0\5\146"+
    "\1\u0175\5\146\3\0\3\146\1\u0138\1\146\1\u0139\1\0"+
    "\2\146\1\u0216\3\146\3\0\1\u0138\3\0\1\146\1\u0138"+
    "\20\0\1\u0217\67\0\1\u0164\3\0\1\u0217\32\0\1\146"+
    "\2\0\4\146\1\0\5\146\1\0\5\146\3\0\3\146"+
    "\1\u0161\1\146\1\37\1\0\6\146\3\0\1\u0161\3\0"+
    "\1\146\1\u0161\5\0\1\u0116\2\0\4\u0116\1\0\5\u0116"+
    "\1\0\4\u0116\1\u01e9\3\0\3\u0116\1\0\1\u0116\2\0"+
    "\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0"+
    "\1\u01ed\3\u0116\1\0\5\u0116\1\0\5\u0116\3\0\3\u0116"+
    "\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116"+
    "\4\0\5\u011e\1\u01f5\43\u011e\1\37\33\u011e\1\u01f9\24\u011e"+
    "\1\37\7\u011e\5\u0128\1\u0203\44\u0128\1\37\32\u0128\1\u0207"+
    "\25\u0128\1\37\6\u0128\2\0\1\146\2\0\4\146\1\u01b6"+
    "\3\146\1\u0218\1\146\1\0\5\146\3\0\3\146\1\u0138"+
    "\1\146\1\u0139\1\0\1\146\1\u0219\4\146\3\0\1\u0138"+
    "\3\0\1\146\1\u0138\36\0\1\u0146\1\0\1\u0147\25\0"+
    "\1\206\2\0\2\206\1\u021a\1\206\1\0\5\206\1\0"+
    "\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206"+
    "\7\0\1\206\14\0\1\u021b\52\0\1\206\2\0\4\206"+
    "\1\0\1\u021c\4\206\1\0\5\206\3\0\3\206\1\u0146"+
    "\1\206\1\u0147\1\0\6\206\7\0\1\206\27\0\1\u021d"+
    "\37\0\1\206\2\0\4\206\1\0\5\206\1\0\3\206"+
    "\1\u021e\1\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\6\206\7\0\1\206\24\0\1\u021f\42\0\1\206\2\0"+
    "\4\206\1\0\4\206\1\u0220\1\0\5\206\3\0\3\206"+
    "\1\u0146\1\206\1\u0147\1\0\6\206\7\0\1\206\6\0"+
    "\1\206\2\0\3\206\1\u0221\1\0\5\206\1\0\5\206"+
    "\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0"+
    "\1\206\6\0\1\206\2\0\4\206\1\0\5\206\1\0"+
    "\1\u0222\4\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\6\206\7\0\1\206\17\0\1\u0223\61\0\1\u0224\46\0"+
    "\1\u0225\73\0\1\u0226\60\0\1\u0227\45\0\1\u0228\16\0"+
    "\1\u0229\63\0\1\u022a\54\0\1\u022b\54\0\1\u022c\52\0"+
    "\1\u022d\63\0\1\u022e\26\0\1\u022e\43\0\1\u022f\61\0"+
    "\1\u0230\50\0\1\u0231\67\0\1\u0232\70\0\1\u0161\1\0"+
    "\1\37\12\0\1\u0161\4\0\1\u0161\25\0\1\u0233\54\0"+
    "\1\u0234\61\0\1\u0175\21\0\1\u0175\25\0\1\u0235\62\0"+
    "\1\u0236\60\0\1\u0237\22\0\1\u0167\36\0\1\u01b6\3\0"+
    "\1\u0238\22\0\1\u01b6\22\0\1\52\2\0\4\52\1\0"+
    "\1\52\1\u0239\3\52\1\0\3\52\1\u023a\1\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\5\0\1\52\2\0\4\52\1\0"+
    "\5\52\1\0\4\52\1\u023b\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\2\52\1\u023c\2\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\5\0\1\u023d"+
    "\2\0\4\52\1\0\5\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\4\52\1\0\5\52"+
    "\1\0\2\52\1\u023e\2\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\3\52\1\u023f\1\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\5\0\1\52"+
    "\2\0\4\52\1\0\3\52\1\u0240\1\52\1\0\5\52"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\20\0\1\u0241\67\0\1\u0242"+
    "\36\0\1\u0243\2\0\4\52\1\0\5\52\1\0\1\52"+
    "\1\u0244\3\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\5\0\1\52"+
    "\2\0\4\52\1\0\4\52\1\u023b\1\0\4\52\1\u0245"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\3\0\2\u0246\1\52\1\u0246"+
    "\1\0\4\52\1\u0246\5\52\1\u0246\5\52\3\u0246\3\52"+
    "\1\u0247\1\52\2\u0246\6\52\3\u0246\1\u0247\3\u0246\1\52"+
    "\1\u0247\3\u0246\15\0\1\u0248\45\0\1\52\2\0\4\52"+
    "\1\0\3\52\1\u0249\1\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\4\52\1\u024a\5\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\1\52\1\u024b\4\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\3\52\1\u024c\1\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\5\0\1\52"+
    "\2\0\4\52\1\0\5\52\1\0\1\u024d\4\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\5\0\1\52\2\0\4\52\1\0"+
    "\5\52\1\0\2\52\1\u024e\2\52\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\17\0\1\u024f\61\0\1\u0250\45\0\1\52\2\0"+
    "\4\52\1\0\1\u0174\4\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\13\0\1\u0237\22\0\1\u017e\1\0\1\253"+
    "\12\0\1\252\4\0\1\252\5\0\1\52\2\0\1\52"+
    "\1\u0251\2\52\1\0\5\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\4\52\1\u0252\5\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\1\52\1\u0253\4\52\3\0\1\252\3\0\1\52\1\252"+
    "\32\0\1\300\37\0\1\u0235\20\0\1\300\33\0\1\52"+
    "\2\0\4\52\1\0\3\52\1\u0254\1\52\1\0\5\52"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\5\0\1\52\2\0\4\52"+
    "\1\0\5\52\1\0\4\52\1\u0255\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\4\52\1\0\2\52\1\u0256"+
    "\2\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\0\3\52\1\u023b\1\52\1\0"+
    "\5\52\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\u0187\2\0"+
    "\4\u0187\1\0\5\u0187\1\0\5\u0187\3\0\3\u0187\1\0"+
    "\1\u0187\2\0\6\u0187\7\0\1\u0187\6\0\1\u0187\2\0"+
    "\4\u0187\1\0\5\u0187\1\0\5\u0187\3\0\3\u0187\1\0"+
    "\1\u0187\2\0\6\u0187\2\u0257\5\0\1\u0187\6\0\1\u0187"+
    "\2\0\4\u0187\1\0\5\u0187\1\0\5\u0187\3\0\3\u0187"+
    "\1\0\1\u0187\3\0\4\u0187\10\0\1\u0187\21\0\2\u0258"+
    "\25\0\1\u018a\16\0\1\314\2\0\4\314\1\0\5\314"+
    "\1\0\3\314\1\u0259\1\314\3\0\3\314\1\0\1\314"+
    "\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314"+
    "\2\0\4\314\1\0\5\314\1\0\4\314\1\u025a\3\0"+
    "\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0"+
    "\1\314\6\0\1\314\2\0\4\314\1\0\5\314\1\0"+
    "\5\314\3\0\3\314\1\0\1\314\3\0\4\314\10\0"+
    "\1\314\6\0\1\314\2\0\4\314\1\0\2\314\1\u025b"+
    "\2\314\1\0\5\314\3\0\3\314\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0"+
    "\4\314\1\0\5\314\1\0\3\314\1\u025c\1\314\3\0"+
    "\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0"+
    "\1\314\6\0\1\314\2\0\4\314\1\0\5\314\1\0"+
    "\2\314\1\u025d\2\314\3\0\3\314\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0"+
    "\4\314\1\0\4\314\1\u025e\1\0\5\314\3\0\3\314"+
    "\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\4\314\1\0\5\314\1\u0175\5\314"+
    "\3\0\3\314\1\0\1\314\2\0\2\314\1\u025f\3\314"+
    "\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0\1\314"+
    "\1\u0260\2\314\1\0\5\314\1\0\5\314\3\0\3\314"+
    "\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\3\314\1\u0261\1\0\5\314\1\0"+
    "\5\314\3\0\3\314\1\0\1\314\2\0\6\314\2\0"+
    "\1\u018d\4\0\1\314\6\0\1\314\2\0\3\314\1\u0262"+
    "\1\0\5\314\1\0\5\314\3\0\3\314\1\u0167\1\314"+
    "\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314"+
    "\2\0\4\314\1\0\5\314\1\0\5\314\3\0\3\314"+
    "\1\u0161\1\314\1\37\1\0\6\314\2\0\1\u018d\1\u0161"+
    "\3\0\1\314\1\u0161\5\0\1\314\2\0\4\314\1\0"+
    "\1\314\1\u0263\3\314\1\0\5\314\3\0\3\314\1\0"+
    "\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0"+
    "\1\314\2\0\4\314\1\0\5\314\1\0\5\314\3\0"+
    "\3\314\1\0\1\314\2\0\3\314\1\u0264\2\314\2\0"+
    "\1\u018d\4\0\1\314\6\0\1\314\2\0\4\314\1\u01b6"+
    "\3\314\1\u0265\1\314\1\0\5\314\3\0\3\314\1\0"+
    "\1\314\2\0\1\314\1\u0266\4\314\2\0\1\u018d\4\0"+
    "\1\314\4\0\23\324\1\u0267\25\324\1\335\33\324\1\u0268"+
    "\24\324\1\335\23\324\1\u0269\34\324\1\335\32\324\1\u026a"+
    "\25\324\1\335\42\324\1\u019e\1\324\1\u026b\12\324\1\u019e"+
    "\1\335\3\324\1\u019e\16\324\1\u026c\35\324\1\335\31\324"+
    "\1\u026d\26\324\1\335\25\324\1\u026e\32\324\1\335\26\324"+
    "\1\u026f\21\324\1\u026f\7\324\1\335\15\324\1\u0270\42\324"+
    "\1\335\17\324\1\u0271\40\324\1\335\51\324\1\u0272\6\324"+
    "\1\335\17\324\1\u0273\22\324\1\u01a6\15\324\1\335\20\324"+
    "\1\u0274\3\324\1\u0275\22\324\1\u0274\10\324\1\335\7\324"+
    "\23\337\1\u0276\26\337\1\335\32\337\1\u0277\25\337\1\335"+
    "\22\337\1\u0278\35\337\1\335\31\337\1\u0279\26\337\1\335"+
    "\41\337\1\u01ac\1\337\1\u027a\12\337\1\u01ac\1\337\1\335"+
    "\2\337\1\u01ac\16\337\1\u027b\36\337\1\335\30\337\1\u027c"+
    "\27\337\1\335\24\337\1\u027d\33\337\1\335\25\337\1\u027e"+
    "\21\337\1\u027e\10\337\1\335\14\337\1\u027f\43\337\1\335"+
    "\16\337\1\u0280\41\337\1\335\50\337\1\u0281\7\337\1\335"+
    "\16\337\1\u0282\22\337\1\u01b4\16\337\1\335\17\337\1\u0283"+
    "\3\337\1\u0284\22\337\1\u0283\11\337\1\335\6\337\24\0"+
    "\1\u0285\36\0\1\52\2\0\4\52\1\0\2\52\1\u0286"+
    "\2\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\0\5\52\1\0\4\52\1\u0286"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\26\0\1\u0287\61\0\1\u0288"+
    "\57\0\1\u0289\57\0\1\u028a\54\0\1\u028b\50\0\1\u028c"+
    "\62\0\1\u028d\60\0\1\u028e\22\0\1\u01c0\27\0\1\106"+
    "\2\0\4\106\1\0\1\106\1\u028f\3\106\1\0\3\106"+
    "\1\u0290\1\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\4\106\1\0\5\106\1\0\4\106\1\u0291\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\0"+
    "\2\106\1\u0292\2\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\u0293\2\0\4\106\1\0\5\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\4\106\1\0\5\106\1\0\2\106\1\u0294\2\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\0"+
    "\3\106\1\u0295\1\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\106\2\0\4\106\1\0\3\106\1\u0296"+
    "\1\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\20\0"+
    "\1\u0297\67\0\1\u0298\36\0\1\u0299\2\0\4\106\1\0"+
    "\5\106\1\0\1\106\1\u029a\3\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\106\2\0\4\106\1\0\4\106\1\u0291"+
    "\1\0\4\106\1\u029b\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\3\0"+
    "\2\u029c\1\106\1\u029c\1\0\4\106\1\u029c\5\106\1\u029c"+
    "\5\106\3\u029c\3\106\1\u029d\1\106\2\u029c\6\106\3\u029c"+
    "\1\u029d\3\u029c\1\106\1\u029d\3\u029c\2\0\1\106\2\0"+
    "\4\106\1\0\3\106\1\u029e\1\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\u029f"+
    "\5\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\1\106\1\u02a0\4\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\106\2\0\4\106\1\0\3\106\1\u02a1"+
    "\1\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\5\106\1\0\1\u02a2\4\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\5\0\1\106\2\0\4\106"+
    "\1\0\5\106\1\0\2\106\1\u02a3\2\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\17\0\1\u02a4\61\0\1\u02a5\45\0\1\106"+
    "\2\0\4\106\1\0\1\u01cc\4\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\13\0\1\u028e\22\0\1\u01d5\1\0"+
    "\1\366\12\0\1\365\4\0\1\365\5\0\1\106\2\0"+
    "\1\106\1\u02a6\2\106\1\0\5\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\u02a7"+
    "\5\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\1\106\1\u02a8\4\106\3\0\1\365\3\0\1\106"+
    "\1\365\32\0\1\u010a\37\0\1\u028c\20\0\1\u010a\33\0"+
    "\1\106\2\0\4\106\1\0\3\106\1\u02a9\1\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\4\106\1\0\5\106\1\0\4\106\1\u02aa\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\5\0\1\106\2\0\4\106\1\0\2\106"+
    "\1\u02ab\2\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\5\0\1\106\2\0\4\106\1\0\3\106\1\u0291\1\106"+
    "\1\0\5\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\u01de"+
    "\2\0\4\u01de\1\0\5\u01de\1\0\5\u01de\3\0\3\u01de"+
    "\1\0\1\u01de\2\0\6\u01de\7\0\1\u01de\6\0\1\u01de"+
    "\2\0\4\u01de\1\0\5\u01de\1\0\5\u01de\3\0\3\u01de"+
    "\1\0\1\u01de\2\0\6\u01de\2\u02ac\5\0\1\u01de\6\0"+
    "\1\u01de\2\0\4\u01de\1\0\5\u01de\1\0\5\u01de\3\0"+
    "\3\u01de\1\0\1\u01de\3\0\4\u01de\10\0\1\u01de\21\0"+
    "\2\u02ad\25\0\1\u01e1\16\0\1\u0116\2\0\4\u0116\1\0"+
    "\5\u0116\1\0\3\u0116\1\u02ae\1\u0116\3\0\3\u0116\1\0"+
    "\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0"+
    "\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0\4\u0116\1\u02af"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116"+
    "\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\3\0\4\u0116"+
    "\10\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\2\u0116"+
    "\1\u02b0\2\u0116\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116"+
    "\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\0\5\u0116\1\0\3\u0116\1\u02b1\1\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116"+
    "\1\0\2\u0116\1\u02b2\2\u0116\3\0\3\u0116\1\0\1\u0116"+
    "\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\0\4\u0116\1\u02b3\1\0\5\u0116\3\0"+
    "\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0"+
    "\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116\1\u0175"+
    "\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0\2\u0116\1\u02b4"+
    "\3\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0"+
    "\1\u0116\1\u02b5\2\u0116\1\0\5\u0116\1\0\5\u0116\3\0"+
    "\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0"+
    "\1\u0116\6\0\1\u0116\2\0\3\u0116\1\u02b6\1\0\5\u0116"+
    "\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116"+
    "\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0\3\u0116"+
    "\1\u02b7\1\0\5\u0116\1\0\5\u0116\3\0\3\u0116\1\u01c0"+
    "\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0"+
    "\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0\5\u0116\3\0"+
    "\3\u0116\1\u0161\1\u0116\1\37\1\0\6\u0116\2\0\1\u01e4"+
    "\1\u0161\3\0\1\u0116\1\u0161\5\0\1\u0116\2\0\4\u0116"+
    "\1\0\1\u0116\1\u02b8\3\u0116\1\0\5\u0116\3\0\3\u0116"+
    "\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116"+
    "\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0\5\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\3\u0116\1\u02b9\2\u0116"+
    "\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116"+
    "\1\u01b6\3\u0116\1\u02ba\1\u0116\1\0\5\u0116\3\0\3\u0116"+
    "\1\0\1\u0116\2\0\1\u0116\1\u02bb\4\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\4\0\23\u011e\1\u02bc\25\u011e\1\37\33\u011e"+
    "\1\u02bd\24\u011e\1\37\23\u011e\1\u02be\34\u011e\1\37\32\u011e"+
    "\1\u02bf\25\u011e\1\37\42\u011e\1\u01f5\1\u011e\1\170\12\u011e"+
    "\1\u01f5\1\37\3\u011e\1\u01f5\16\u011e\1\u02c0\35\u011e\1\37"+
    "\31\u011e\1\u02c1\26\u011e\1\37\25\u011e\1\u02c2\32\u011e\1\37"+
    "\26\u011e\1\u02c3\21\u011e\1\u02c3\7\u011e\1\37\15\u011e\1\u02c4"+
    "\42\u011e\1\37\17\u011e\1\u02c5\40\u011e\1\37\51\u011e\1\u02c6"+
    "\6\u011e\1\37\17\u011e\1\u02c7\22\u011e\1\u01fd\15\u011e\1\37"+
    "\20\u011e\1\u02c8\3\u011e\1\u02c9\22\u011e\1\u02c8\10\u011e\1\37"+
    "\7\u011e\23\u0128\1\u02ca\26\u0128\1\37\32\u0128\1\u02cb\25\u0128"+
    "\1\37\22\u0128\1\u02cc\35\u0128\1\37\31\u0128\1\u02cd\26\u0128"+
    "\1\37\41\u0128\1\u0203\1\u0128\1\171\12\u0128\1\u0203\1\u0128"+
    "\1\37\2\u0128\1\u0203\16\u0128\1\u02ce\36\u0128\1\37\30\u0128"+
    "\1\u02cf\27\u0128\1\37\24\u0128\1\u02d0\33\u0128\1\37\25\u0128"+
    "\1\u02d1\21\u0128\1\u02d1\10\u0128\1\37\14\u0128\1\u02d2\43\u0128"+
    "\1\37\16\u0128\1\u02d3\41\u0128\1\37\50\u0128\1\u02d4\7\u0128"+
    "\1\37\16\u0128\1\u02d5\22\u0128\1\u020b\16\u0128\1\37\17\u0128"+
    "\1\u02d6\3\u0128\1\u02d7\22\u0128\1\u02d6\11\u0128\1\37\6\u0128"+
    "\2\0\1\106\2\0\4\106\1\0\2\106\1\u02d8\2\106"+
    "\1\0\5\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\4\106\1\0\5\106\1\0\4\106\1\u02d8\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\36\0\1\37\27\0\1\u020f\2\0"+
    "\4\u020f\1\0\5\u020f\1\0\5\u020f\2\0\1\37\3\u020f"+
    "\1\u02d9\1\u020f\3\0\4\u020f\1\37\1\0\1\37\4\0"+
    "\1\37\1\u020f\6\0\1\u0211\2\0\4\u0211\1\0\5\u0211"+
    "\1\0\5\u0211\3\0\3\u0211\1\0\1\u0211\2\0\6\u0211"+
    "\7\0\1\u0211\6\0\1\u0211\2\0\4\u0211\1\0\5\u0211"+
    "\1\0\5\u0211\3\0\3\u0211\1\0\1\u0211\2\0\6\u0211"+
    "\2\u02da\5\0\1\u0211\6\0\1\u0211\2\0\4\u0211\1\0"+
    "\5\u0211\1\0\5\u0211\3\0\3\u0211\1\0\1\u0211\3\0"+
    "\4\u0211\10\0\1\u0211\21\0\2\u02db\25\0\1\u0214\16\0"+
    "\1\146\2\0\4\146\1\0\5\146\1\0\2\146\1\u02dc"+
    "\2\146\3\0\3\146\1\u0138\1\146\1\u0139\1\0\6\146"+
    "\3\0\1\u0138\3\0\1\146\1\u0138\5\0\1\146\2\0"+
    "\4\146\1\0\3\146\1\u02dd\1\146\1\0\5\146\3\0"+
    "\3\146\1\u0138\1\146\1\u0139\1\0\6\146\3\0\1\u0138"+
    "\3\0\1\146\1\u0138\32\0\1\37\33\0\1\146\2\0"+
    "\4\146\1\0\2\146\1\u02de\2\146\1\0\5\146\3\0"+
    "\3\146\1\u0138\1\146\1\u0139\1\0\6\146\3\0\1\u0138"+
    "\3\0\1\146\1\u0138\5\0\1\146\2\0\4\146\1\0"+
    "\5\146\1\0\4\146\1\u02de\3\0\3\146\1\u0138\1\146"+
    "\1\u0139\1\0\6\146\3\0\1\u0138\3\0\1\146\1\u0138"+
    "\5\0\1\u02df\2\0\4\206\1\0\5\206\1\0\5\206"+
    "\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0"+
    "\1\206\21\0\1\u02e0\45\0\1\u02e1\2\0\4\206\1\0"+
    "\5\206\1\0\1\206\1\u02e2\3\206\3\0\3\206\1\u0146"+
    "\1\206\1\u0147\1\0\6\206\7\0\1\206\21\0\1\u02e3"+
    "\45\0\1\206\2\0\4\206\1\0\3\206\1\u02e4\1\206"+
    "\1\0\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\6\206\7\0\1\206\20\0\1\u02e5\46\0\1\206\2\0"+
    "\1\206\1\u02e6\2\206\1\0\5\206\1\0\5\206\3\0"+
    "\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0\1\206"+
    "\6\0\1\206\2\0\4\206\1\0\3\206\1\u02e7\1\206"+
    "\1\0\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\6\206\7\0\1\206\6\0\1\206\2\0\4\206\1\0"+
    "\2\206\1\u02e8\2\206\1\0\5\206\3\0\3\206\1\u0146"+
    "\1\206\1\u0147\1\0\6\206\7\0\1\206\30\0\1\u02e9"+
    "\56\0\1\u02ea\46\0\1\u02eb\103\0\1\u0226\1\0\1\u022a"+
    "\44\0\1\u02ec\54\0\1\u02ed\57\0\1\u02ee\70\0\1\u02ef"+
    "\46\0\1\u02f0\72\0\1\u02f1\36\0\1\230\101\0\1\u02f2"+
    "\61\0\1\u0250\56\0\1\u02f3\53\0\1\u02f4\61\0\1\u0250"+
    "\42\0\2\u0246\1\0\1\u0246\5\0\1\u0246\5\0\1\u0246"+
    "\5\0\3\u0246\3\0\1\u0246\1\0\2\u0246\6\0\7\u0246"+
    "\1\0\4\u0246\11\0\1\u024a\26\0\1\u024a\35\0\1\u02f5"+
    "\55\0\1\u0234\62\0\1\u0285\46\0\1\52\2\0\4\52"+
    "\1\0\5\52\1\0\4\52\1\u02f6\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\4\52\1\0\1\u02f7\4\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\3\0\2\u02f8"+
    "\1\52\1\u02f8\1\0\4\52\1\u02f8\5\52\1\u02f8\5\52"+
    "\3\u02f8\3\52\1\u02f9\1\52\2\u02f8\6\52\3\u02f8\1\u02f9"+
    "\3\u02f8\1\52\1\u02f9\3\u02f8\2\0\1\52\2\0\4\52"+
    "\1\0\5\52\1\0\2\52\1\u02fa\2\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\3\52\1\u02fb\1\0"+
    "\5\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\0\5\52\1\0\4\52\1\u02fc"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\5\0\1\52\2\0\4\52"+
    "\1\0\5\52\1\0\4\52\1\u02fd\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\4\52\1\0\5\52\1\0"+
    "\5\52\3\0\3\52\1\u02fe\1\52\1\u02ff\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\24\0\1\u0300\50\0"+
    "\1\u0301\26\0\1\u0301\22\0\1\52\2\0\4\52\1\0"+
    "\3\52\1\u0302\1\52\1\0\5\52\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\4\52\1\0\2\52\1\u0303"+
    "\2\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\14\0"+
    "\1\u0136\26\0\1\u0136\22\0\1\52\2\0\4\52\1\u0136"+
    "\5\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\1\52\1\u0304\4\52\3\0\1\252\3\0\1\52"+
    "\1\252\45\0\1\u0305\20\0\1\52\2\0\4\52\1\0"+
    "\5\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\3\52\1\u0306\2\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\4\52\1\0\2\52\1\u0307"+
    "\2\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\0\5\52\1\0\4\52\1\u0308"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\15\0\1\u0309\46\0\2\u02f8"+
    "\1\0\1\u02f8\5\0\1\u02f8\5\0\1\u02f8\5\0\3\u02f8"+
    "\3\0\1\u02f8\1\0\2\u02f8\6\0\7\u02f8\1\0\4\u02f8"+
    "\2\0\1\52\2\0\4\52\1\0\5\52\1\0\4\52"+
    "\1\u030a\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\u030b\60\0"+
    "\1\u030c\2\0\4\52\1\0\5\52\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\5\0\1\52\2\0\4\52\1\0"+
    "\5\52\1\0\1\52\1\u030d\3\52\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\4\52\1\u0301\5\52\1\0"+
    "\5\52\3\0\3\52\1\252\1\52\1\253\1\0\1\52"+
    "\1\u030e\4\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\0\1\u030f\4\52\1\0\5\52"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\47\0\1\u0310\60\0\1\u0310"+
    "\2\u0257\14\0\1\314\2\0\4\314\1\0\5\314\1\0"+
    "\3\314\1\u0311\1\314\3\0\3\314\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0"+
    "\4\314\1\0\5\314\1\0\4\314\1\u0312\3\0\3\314"+
    "\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\4\314\1\0\5\314\1\0\2\314"+
    "\1\u0313\2\314\3\0\3\314\1\0\1\314\2\0\6\314"+
    "\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0\4\314"+
    "\1\0\3\314\1\u0314\1\314\1\0\5\314\3\0\3\314"+
    "\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\4\314\1\0\4\314\1\u0312\1\0"+
    "\5\314\3\0\3\314\1\0\1\314\2\0\6\314\2\0"+
    "\1\u018d\4\0\1\314\4\0\2\u0246\1\314\1\u0246\1\0"+
    "\4\314\1\u0246\5\314\1\u0246\5\314\3\u0246\3\314\1\u0246"+
    "\1\314\2\u0246\6\314\2\u0246\1\u0315\4\u0246\1\314\4\u0246"+
    "\2\0\1\314\2\0\4\314\1\0\3\314\1\u0316\1\314"+
    "\1\0\5\314\3\0\3\314\1\0\1\314\2\0\6\314"+
    "\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0\4\314"+
    "\1\u024a\5\314\1\0\5\314\3\0\3\314\1\0\1\314"+
    "\2\0\1\314\1\u0317\4\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\4\314\1\0\3\314\1\u0318\1\314"+
    "\1\0\5\314\3\0\3\314\1\0\1\314\2\0\6\314"+
    "\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0\4\314"+
    "\1\0\1\u025e\4\314\1\0\5\314\3\0\3\314\1\0"+
    "\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0"+
    "\1\314\2\0\4\314\1\0\5\314\1\0\4\314\1\u0319"+
    "\3\0\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d"+
    "\4\0\1\314\6\0\1\314\2\0\4\314\1\0\3\314"+
    "\1\u0312\1\314\1\0\5\314\3\0\3\314\1\0\1\314"+
    "\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314"+
    "\2\0\4\314\1\0\2\314\1\u031a\2\314\1\0\5\314"+
    "\3\0\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d"+
    "\4\0\1\314\6\0\1\314\2\0\4\314\1\0\5\314"+
    "\1\0\4\314\1\u031a\3\0\3\314\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\4\0\23\324\1\u031b"+
    "\25\324\1\335\33\324\1\u031c\24\324\1\335\31\324\1\u031d"+
    "\26\324\1\335\24\324\1\u031e\33\324\1\335\33\324\1\u031f"+
    "\24\324\1\335\25\324\1\u031c\32\324\1\335\7\324\2\u0320"+
    "\1\324\1\u0320\5\324\1\u0320\5\324\1\u0320\5\324\3\u0320"+
    "\3\324\1\u0320\1\324\2\u0320\6\324\4\u0320\1\335\2\u0320"+
    "\1\324\4\u0320\15\324\1\u0321\33\324\1\335\20\324\1\u0322"+
    "\26\324\1\u0322\10\324\1\335\24\324\1\u0323\33\324\1\335"+
    "\24\324\1\u031c\33\324\1\335\21\324\1\u026e\36\324\1\335"+
    "\33\324\1\u0324\24\324\1\335\23\324\1\u0324\34\324\1\335"+
    "\7\324\23\337\1\u0325\26\337\1\335\32\337\1\u0326\25\337"+
    "\1\335\30\337\1\u0327\27\337\1\335\23\337\1\u0328\34\337"+
    "\1\335\32\337\1\u0329\25\337\1\335\24\337\1\u0326\33\337"+
    "\1\335\6\337\2\u032a\1\337\1\u032a\5\337\1\u032a\5\337"+
    "\1\u032a\5\337\3\u032a\3\337\1\u032a\1\337\2\u032a\6\337"+
    "\5\u032a\1\335\1\u032a\1\337\4\u032a\15\337\1\u032b\34\337"+
    "\1\335\17\337\1\u032c\26\337\1\u032c\11\337\1\335\23\337"+
    "\1\u032d\34\337\1\335\23\337\1\u0326\34\337\1\335\20\337"+
    "\1\u027d\37\337\1\335\32\337\1\u032e\25\337\1\335\22\337"+
    "\1\u032e\35\337\1\335\6\337\15\0\1\u0161\45\0\1\52"+
    "\2\0\4\52\1\0\3\52\1\303\1\52\1\0\5\52"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\26\0\1\u032f\61\0\1\u02a5"+
    "\51\0\1\u0330\61\0\1\u02a5\42\0\2\u029c\1\0\1\u029c"+
    "\5\0\1\u029c\5\0\1\u029c\5\0\3\u029c\3\0\1\u029c"+
    "\1\0\2\u029c\6\0\7\u029c\1\0\4\u029c\11\0\1\u029f"+
    "\26\0\1\u029f\35\0\1\u0331\55\0\1\u028b\50\0\1\106"+
    "\2\0\4\106\1\0\5\106\1\0\4\106\1\u0332\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\0"+
    "\1\u0333\4\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\3\0\2\u0334\1\106\1\u0334\1\0\4\106\1\u0334\5\106"+
    "\1\u0334\5\106\3\u0334\3\106\1\u0335\1\106\2\u0334\6\106"+
    "\3\u0334\1\u0335\3\u0334\1\106\1\u0335\3\u0334\2\0\1\106"+
    "\2\0\4\106\1\0\5\106\1\0\2\106\1\u0336\2\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\5\0\1\106\2\0\3\106"+
    "\1\u0337\1\0\5\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\106\2\0\4\106\1\0\5\106\1\0"+
    "\4\106\1\u0338\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\4\106\1\0\5\106\1\0\4\106\1\u0339\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\0"+
    "\5\106\1\0\5\106\3\0\3\106\1\u033a\1\106\1\u033b"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\24\0"+
    "\1\u033c\50\0\1\u033d\26\0\1\u033d\22\0\1\106\2\0"+
    "\4\106\1\0\3\106\1\u033e\1\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\0"+
    "\2\106\1\u033f\2\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\106\2\0\4\106\1\u0136\5\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\1\106"+
    "\1\u0340\4\106\3\0\1\365\3\0\1\106\1\365\45\0"+
    "\1\u0341\20\0\1\106\2\0\4\106\1\0\5\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\3\106"+
    "\1\u0342\2\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\2\106\1\u0343\2\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\4\106\1\0\5\106\1\0\4\106\1\u0344\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\15\0\1\u0345\46\0\2\u0334\1\0\1\u0334"+
    "\5\0\1\u0334\5\0\1\u0334\5\0\3\u0334\3\0\1\u0334"+
    "\1\0\2\u0334\6\0\7\u0334\1\0\4\u0334\2\0\1\106"+
    "\2\0\4\106\1\0\5\106\1\0\4\106\1\u0346\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\u0347\60\0\1\u0348\2\0"+
    "\4\106\1\0\5\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\106\2\0\4\106\1\0\5\106\1\0"+
    "\1\106\1\u0349\3\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\u033d\5\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\1\106\1\u034a\4\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\4\106\1\0\1\u034b\4\106\1\0\5\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\47\0\1\u034c\60\0\1\u034c\2\u02ac\14\0"+
    "\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0\3\u0116\1\u034d"+
    "\1\u0116\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0"+
    "\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0"+
    "\5\u0116\1\0\4\u0116\1\u034e\3\0\3\u0116\1\0\1\u0116"+
    "\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\0\5\u0116\1\0\2\u0116\1\u034f\2\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\3\u0116"+
    "\1\u0350\1\u0116\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116"+
    "\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\0\4\u0116\1\u034e\1\0\5\u0116\3\0"+
    "\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0"+
    "\1\u0116\4\0\2\u029c\1\u0116\1\u029c\1\0\4\u0116\1\u029c"+
    "\5\u0116\1\u029c\5\u0116\3\u029c\3\u0116\1\u029c\1\u0116\2\u029c"+
    "\6\u0116\2\u029c\1\u0351\4\u029c\1\u0116\4\u029c\2\0\1\u0116"+
    "\2\0\4\u0116\1\0\3\u0116\1\u0352\1\u0116\1\0\5\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\u029f\5\u0116"+
    "\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0\1\u0116"+
    "\1\u0353\4\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\0\3\u0116\1\u0354\1\u0116\1\0\5\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\1\u02b3"+
    "\4\u0116\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0"+
    "\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0"+
    "\4\u0116\1\0\5\u0116\1\0\4\u0116\1\u0355\3\0\3\u0116"+
    "\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116"+
    "\6\0\1\u0116\2\0\4\u0116\1\0\3\u0116\1\u034e\1\u0116"+
    "\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116"+
    "\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116"+
    "\1\0\2\u0116\1\u0356\2\u0116\1\0\5\u0116\3\0\3\u0116"+
    "\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116"+
    "\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0\4\u0116"+
    "\1\u0356\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0"+
    "\1\u01e4\4\0\1\u0116\4\0\23\u011e\1\u0357\25\u011e\1\37"+
    "\33\u011e\1\u0358\24\u011e\1\37\31\u011e\1\u0359\26\u011e\1\37"+
    "\24\u011e\1\u035a\33\u011e\1\37\33\u011e\1\u035b\24\u011e\1\37"+
    "\25\u011e\1\u0358\32\u011e\1\37\7\u011e\2\u035c\1\u011e\1\u035c"+
    "\5\u011e\1\u035c\5\u011e\1\u035c\5\u011e\3\u035c\3\u011e\1\u035c"+
    "\1\u011e\2\u035c\6\u011e\4\u035c\1\37\2\u035c\1\u011e\4\u035c"+
    "\15\u011e\1\u035d\33\u011e\1\37\20\u011e\1\u035e\26\u011e\1\u035e"+
    "\10\u011e\1\37\24\u011e\1\u035f\33\u011e\1\37\24\u011e\1\u0358"+
    "\33\u011e\1\37\21\u011e\1\u02c2\36\u011e\1\37\33\u011e\1\u0360"+
    "\24\u011e\1\37\23\u011e\1\u0360\34\u011e\1\37\7\u011e\23\u0128"+
    "\1\u0361\26\u0128\1\37\32\u0128\1\u0362\25\u0128\1\37\30\u0128"+
    "\1\u0363\27\u0128\1\37\23\u0128\1\u0364\34\u0128\1\37\32\u0128"+
    "\1\u0365\25\u0128\1\37\24\u0128\1\u0362\33\u0128\1\37\6\u0128"+
    "\2\u0366\1\u0128\1\u0366\5\u0128\1\u0366\5\u0128\1\u0366\5\u0128"+
    "\3\u0366\3\u0128\1\u0366\1\u0128\2\u0366\6\u0128\5\u0366\1\37"+
    "\1\u0366\1\u0128\4\u0366\15\u0128\1\u0367\34\u0128\1\37\17\u0128"+
    "\1\u0368\26\u0128\1\u0368\11\u0128\1\37\23\u0128\1\u0369\34\u0128"+
    "\1\37\23\u0128\1\u0362\34\u0128\1\37\20\u0128\1\u02d0\37\u0128"+
    "\1\37\32\u0128\1\u036a\25\u0128\1\37\22\u0128\1\u036a\35\u0128"+
    "\1\37\6\u0128\2\0\1\106\2\0\4\106\1\0\3\106"+
    "\1\u010d\1\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\5\0\1\u020f\2\0\4\u020f\1\0\5\u020f\1\0\5\u020f"+
    "\2\0\1\37\3\u020f\1\u036b\1\u020f\3\0\4\u020f\1\37"+
    "\1\0\1\37\4\0\1\37\1\u020f\50\0\1\u036c\60\0"+
    "\1\u036c\2\u02da\14\0\1\146\2\0\4\146\1\0\5\146"+
    "\1\0\4\146\1\u036d\3\0\3\146\1\u0138\1\146\1\u0139"+
    "\1\0\6\146\3\0\1\u0138\3\0\1\146\1\u0138\5\0"+
    "\1\146\2\0\4\146\1\u0136\5\146\1\0\5\146\3\0"+
    "\3\146\1\u0138\1\146\1\u0139\1\0\1\146\1\160\4\146"+
    "\3\0\1\u0138\3\0\1\146\1\u0138\5\0\1\146\2\0"+
    "\4\146\1\0\3\146\1\u013e\1\146\1\0\5\146\3\0"+
    "\3\146\1\u0138\1\146\1\u0139\1\0\6\146\3\0\1\u0138"+
    "\3\0\1\146\1\u0138\5\0\1\206\2\0\3\206\1\u036e"+
    "\1\0\5\206\1\0\5\206\3\0\3\206\1\u0146\1\206"+
    "\1\u0147\1\0\6\206\7\0\1\206\13\0\1\u036f\53\0"+
    "\1\206\2\0\4\206\1\0\3\206\1\u0370\1\206\1\0"+
    "\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206"+
    "\7\0\1\206\6\0\1\206\2\0\4\206\1\0\2\206"+
    "\1\u0371\2\206\1\0\5\206\3\0\3\206\1\u0146\1\206"+
    "\1\u0147\1\0\6\206\7\0\1\206\13\0\1\u0372\53\0"+
    "\1\206\2\0\2\206\1\u0373\1\206\1\0\5\206\1\0"+
    "\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206"+
    "\7\0\1\206\16\0\1\u0374\50\0\1\206\2\0\4\206"+
    "\1\0\5\206\1\0\4\206\1\u0375\3\0\3\206\1\u0146"+
    "\1\206\1\u0147\1\0\6\206\7\0\1\206\6\0\1\206"+
    "\2\0\2\206\1\u0376\1\206\1\0\5\206\1\0\5\206"+
    "\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0"+
    "\1\206\6\0\1\206\2\0\4\206\1\0\1\u0377\4\206"+
    "\1\0\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\6\206\7\0\1\206\21\0\1\u0378\45\0\1\u0379\67\0"+
    "\1\u037a\26\0\1\u037a\35\0\1\u037b\61\0\1\u037c\64\0"+
    "\1\u037d\53\0\1\u037e\51\0\1\u037f\67\0\1\u0380\55\0"+
    "\1\u0381\72\0\1\u0382\60\0\1\u0383\50\0\1\u0384\46\0"+
    "\1\52\2\0\4\52\1\0\3\52\1\u0385\1\52\1\0"+
    "\5\52\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\2\52\1\u023b\1\52\1\0\5\52\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\5\0\1\u0386\2\0\4\52\1\0"+
    "\5\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\u0387\5\52\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\1\52\1\u0388\4\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\4\52\1\0\5\52\1\0\4\52\1\303\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\4\52\1\u0389\5\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\1\52\1\u038a\4\52\3\0\1\252\3\0\1\52\1\252"+
    "\36\0\1\u02fe\1\0\1\u02ff\12\0\1\252\4\0\1\252"+
    "\20\0\1\u038b\45\0\1\u038c\60\0\1\52\2\0\4\52"+
    "\1\0\4\52\1\u038d\1\0\5\52\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\4\52\1\0\5\52\1\0"+
    "\2\52\1\u038e\2\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\1\303\3\52\1\0\5\52\1\0\5\52"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\25\0\1\u038f\40\0\1\52"+
    "\2\0\4\52\1\0\5\52\1\0\2\52\1\u0390\2\52"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\5\0\1\52\2\0\2\52"+
    "\1\u0391\1\52\1\0\5\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\4\52\1\0\3\52"+
    "\1\u0392\1\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\11\0\1\u0393\54\0\1\52\2\0\4\52\1\0\3\52"+
    "\1\u0394\1\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\25\0\1\u0395\40\0\1\52\2\0\4\52\1\0\5\52"+
    "\1\0\2\52\1\u0396\2\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\3\52\1\u0397\1\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\5\0\1\u0398"+
    "\2\0\4\52\1\0\5\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\1\52\1\u0399\2\52"+
    "\1\0\5\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\u0187\2\0\4\u0187\1\0\5\u0187\1\0\5\u0187"+
    "\3\0\3\u0187\1\0\1\u0187\2\0\1\u0189\4\u0187\1\u0310"+
    "\7\0\1\u0187\6\0\1\314\2\0\4\314\1\0\1\u039a"+
    "\4\314\1\0\5\314\3\0\3\314\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\4\0\2\u02f8\1\314"+
    "\1\u02f8\1\0\4\314\1\u02f8\5\314\1\u02f8\5\314\3\u02f8"+
    "\3\314\1\u02f8\1\314\2\u02f8\6\314\2\u02f8\1\u039b\4\u02f8"+
    "\1\314\4\u02f8\2\0\1\314\2\0\4\314\1\0\5\314"+
    "\1\0\4\314\1\u039c\3\0\3\314\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0"+
    "\4\314\1\0\5\314\1\0\4\314\1\u039d\3\0\3\314"+
    "\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\4\314\1\u0136\5\314\1\0\5\314"+
    "\3\0\3\314\1\0\1\314\2\0\1\314\1\u039e\4\314"+
    "\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0\4\314"+
    "\1\0\5\314\1\0\5\314\3\0\3\314\1\0\1\314"+
    "\2\0\3\314\1\u039f\2\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\4\314\1\0\2\314\1\u03a0\2\314"+
    "\1\0\5\314\3\0\3\314\1\0\1\314\2\0\6\314"+
    "\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0\4\314"+
    "\1\u0301\5\314\1\0\5\314\3\0\3\314\1\0\1\314"+
    "\2\0\1\314\1\u03a1\4\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\4\314\1\0\3\314\1\u0196\1\314"+
    "\1\0\5\314\3\0\3\314\1\0\1\314\2\0\6\314"+
    "\2\0\1\u018d\4\0\1\314\4\0\12\324\1\u03a2\36\324"+
    "\1\335\7\324\2\u03a3\1\324\1\u03a3\5\324\1\u03a3\5\324"+
    "\1\u03a3\5\324\3\u03a3\3\324\1\u03a3\1\324\2\u03a3\6\324"+
    "\4\u03a3\1\335\2\u03a3\1\324\4\u03a3\24\324\1\u03a4\24\324"+
    "\1\335\33\324\1\u03a5\24\324\1\335\20\324\1\u03a6\26\324"+
    "\1\u03a6\10\324\1\335\20\324\1\u03a7\26\324\1\u03a7\10\324"+
    "\1\335\51\324\1\u03a8\6\324\1\335\23\324\1\u03a9\34\324"+
    "\1\335\24\324\1\u019e\33\324\1\335\7\324\12\337\1\u03aa"+
    "\37\337\1\335\6\337\2\u03ab\1\337\1\u03ab\5\337\1\u03ab"+
    "\5\337\1\u03ab\5\337\3\u03ab\3\337\1\u03ab\1\337\2\u03ab"+
    "\6\337\5\u03ab\1\335\1\u03ab\1\337\4\u03ab\24\337\1\u03ac"+
    "\25\337\1\335\32\337\1\u03ad\25\337\1\335\17\337\1\u03ae"+
    "\26\337\1\u03ae\11\337\1\335\17\337\1\u03af\26\337\1\u03af"+
    "\11\337\1\335\50\337\1\u03b0\7\337\1\335\22\337\1\u03b1"+
    "\35\337\1\335\23\337\1\u01ac\34\337\1\335\6\337\12\0"+
    "\1\u03b2\72\0\1\u03b3\50\0\1\u03b4\46\0\1\106\2\0"+
    "\4\106\1\0\3\106\1\u03b5\1\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\2\106\1\u0291"+
    "\1\106\1\0\5\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\5\0\1\u03b6\2\0\4\106\1\0\5\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\4\106\1\u03b7\5\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\1\106\1\u03b8\4\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\0"+
    "\5\106\1\0\4\106\1\u010d\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\5\0\1\106\2\0\4\106\1\u03b9\5\106\1\0\5\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\1\106\1\u03ba"+
    "\4\106\3\0\1\365\3\0\1\106\1\365\36\0\1\u033a"+
    "\1\0\1\u033b\12\0\1\365\4\0\1\365\20\0\1\u03bb"+
    "\45\0\1\u03bc\60\0\1\106\2\0\4\106\1\0\4\106"+
    "\1\u03bd\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\5\106\1\0\2\106\1\u03be"+
    "\2\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\1\u010d\3\106\1\0\5\106\1\0\5\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\25\0\1\u03bf\40\0\1\106\2\0\4\106"+
    "\1\0\5\106\1\0\2\106\1\u03c0\2\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\5\0\1\106\2\0\2\106\1\u03c1\1\106"+
    "\1\0\5\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\5\0\1\106\2\0\4\106\1\0\3\106\1\u03c2\1\106"+
    "\1\0\5\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\11\0\1\u03c3"+
    "\54\0\1\106\2\0\4\106\1\0\3\106\1\u03c4\1\106"+
    "\1\0\5\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\25\0\1\u03c5"+
    "\40\0\1\106\2\0\4\106\1\0\5\106\1\0\2\106"+
    "\1\u03c6\2\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\4\106\1\0\3\106\1\u03c7\1\106\1\0\5\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\5\0\1\u03c8\2\0\4\106"+
    "\1\0\5\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\5\0\1\106\2\0\1\106\1\u03c9\2\106\1\0\5\106"+
    "\1\0\5\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\u01de"+
    "\2\0\4\u01de\1\0\5\u01de\1\0\5\u01de\3\0\3\u01de"+
    "\1\0\1\u01de\2\0\1\u01e0\4\u01de\1\u034c\7\0\1\u01de"+
    "\6\0\1\u0116\2\0\4\u0116\1\0\1\u03ca\4\u0116\1\0"+
    "\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0"+
    "\1\u01e4\4\0\1\u0116\4\0\2\u0334\1\u0116\1\u0334\1\0"+
    "\4\u0116\1\u0334\5\u0116\1\u0334\5\u0116\3\u0334\3\u0116\1\u0334"+
    "\1\u0116\2\u0334\6\u0116\2\u0334\1\u03cb\4\u0334\1\u0116\4\u0334"+
    "\2\0\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0\4\u0116"+
    "\1\u03cc\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0"+
    "\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0"+
    "\5\u0116\1\0\4\u0116\1\u03cd\3\0\3\u0116\1\0\1\u0116"+
    "\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\u0136\5\u0116\1\0\5\u0116\3\0\3\u0116"+
    "\1\0\1\u0116\2\0\1\u0116\1\u0140\4\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116"+
    "\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0\3\u0116"+
    "\1\u03ce\2\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\0\2\u0116\1\u03cf\2\u0116\1\0\5\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\u033d\5\u0116"+
    "\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0\1\u0116"+
    "\1\u03d0\4\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\0\3\u0116\1\u01ed\1\u0116\1\0\5\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\4\0\12\u011e\1\u03d1\36\u011e\1\37\7\u011e"+
    "\2\u03d2\1\u011e\1\u03d2\5\u011e\1\u03d2\5\u011e\1\u03d2\5\u011e"+
    "\3\u03d2\3\u011e\1\u03d2\1\u011e\2\u03d2\6\u011e\4\u03d2\1\37"+
    "\2\u03d2\1\u011e\4\u03d2\24\u011e\1\u03d3\24\u011e\1\37\33\u011e"+
    "\1\u03d4\24\u011e\1\37\20\u011e\1\u03d5\26\u011e\1\u03d5\10\u011e"+
    "\1\37\20\u011e\1\u0141\26\u011e\1\u0141\10\u011e\1\37\51\u011e"+
    "\1\u03d6\6\u011e\1\37\23\u011e\1\u03d7\34\u011e\1\37\24\u011e"+
    "\1\u01f5\33\u011e\1\37\7\u011e\12\u0128\1\u03d8\37\u0128\1\37"+
    "\6\u0128\2\u03d9\1\u0128\1\u03d9\5\u0128\1\u03d9\5\u0128\1\u03d9"+
    "\5\u0128\3\u03d9\3\u0128\1\u03d9\1\u0128\2\u03d9\6\u0128\5\u03d9"+
    "\1\37\1\u03d9\1\u0128\4\u03d9\24\u0128\1\u03da\25\u0128\1\37"+
    "\32\u0128\1\u03db\25\u0128\1\37\17\u0128\1\u03dc\26\u0128\1\u03dc"+
    "\11\u0128\1\37\17\u0128\1\u0143\26\u0128\1\u0143\11\u0128\1\37"+
    "\50\u0128\1\u03dd\7\u0128\1\37\22\u0128\1\u03de\35\u0128\1\37"+
    "\23\u0128\1\u0203\34\u0128\1\37\6\u0128\2\0\1\u020f\2\0"+
    "\4\u020f\1\0\5\u020f\1\0\5\u020f\2\0\1\37\3\u020f"+
    "\1\u03df\1\u020f\3\0\4\u020f\1\37\1\0\1\37\4\0"+
    "\1\37\1\u020f\6\0\1\u0211\2\0\4\u0211\1\0\5\u0211"+
    "\1\0\5\u0211\3\0\3\u0211\1\0\1\u0211\2\0\1\u0213"+
    "\4\u0211\1\u036c\7\0\1\u0211\6\0\1\146\2\0\4\146"+
    "\1\0\5\146\1\0\4\146\1\u013e\3\0\3\146\1\u0138"+
    "\1\146\1\u0139\1\0\6\146\3\0\1\u0138\3\0\1\146"+
    "\1\u0138\5\0\1\206\2\0\4\206\1\u03e0\5\206\1\0"+
    "\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0\1\206"+
    "\1\u03e1\4\206\7\0\1\206\14\0\1\u03e2\52\0\1\206"+
    "\2\0\4\206\1\0\4\206\1\u03e3\1\0\5\206\3\0"+
    "\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0\1\206"+
    "\6\0\1\206\2\0\4\206\1\0\5\206\1\0\2\206"+
    "\1\u03e4\2\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\6\206\7\0\1\206\23\0\1\u03e5\21\0\1\u03e5\21\0"+
    "\1\206\2\0\4\206\1\0\5\206\1\u03e5\5\206\3\0"+
    "\3\206\1\u0146\1\206\1\u0147\1\0\2\206\1\u03e6\3\206"+
    "\7\0\1\206\12\0\1\u03e7\54\0\1\206\2\0\4\206"+
    "\1\0\3\206\1\u03e8\1\206\1\0\5\206\3\0\3\206"+
    "\1\u0146\1\206\1\u0147\1\0\6\206\7\0\1\206\6\0"+
    "\1\206\2\0\3\206\1\u03e9\1\0\5\206\1\0\5\206"+
    "\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0"+
    "\1\206\6\0\1\206\2\0\1\206\1\u03ea\2\206\1\0"+
    "\5\206\1\0\5\206\3\0\3\206\1\u0146\1\206\1\u0147"+
    "\1\0\6\206\7\0\1\206\36\0\1\u022a\36\0\1\u02ec"+
    "\62\0\1\u03eb\62\0\1\u022a\52\0\1\u03ec\75\0\1\u0380"+
    "\50\0\1\u03ed\17\0\1\u037e\35\0\1\u03ee\57\0\1\u0250"+
    "\75\0\1\u0161\45\0\1\u0389\26\0\1\u0389\27\0\1\u03ef"+
    "\53\0\1\52\2\0\4\52\1\0\5\52\1\0\5\52"+
    "\3\0\2\52\1\u0245\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\3\52\1\u030d\1\0\5\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\15\0\1\u03f0\50\0\1\52\2\0\4\52"+
    "\1\0\1\u03f1\4\52\1\0\5\52\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\22\0\1\u03f2\21\0\1\u03f2\21\0\1\52\2\0"+
    "\4\52\1\0\5\52\1\u03f2\5\52\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\2\52\1\u03f3\3\52\3\0\1\252"+
    "\3\0\1\52\1\252\17\0\1\u02ff\55\0\1\u03f4\26\0"+
    "\1\u03f4\22\0\1\52\2\0\1\52\1\u03f5\2\52\1\0"+
    "\5\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\0\5\52\1\0\3\52\1\u0394"+
    "\1\52\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\27\0\1\u03f6\36\0"+
    "\1\52\2\0\4\52\1\0\5\52\1\0\4\52\1\u03f7"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\5\0\1\52\2\0\4\52"+
    "\1\0\5\52\1\0\2\52\1\u03f8\2\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\52\2\0\4\52\1\0\1\52"+
    "\1\u03f9\3\52\1\0\5\52\3\0\3\52\1\u03fa\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\13\0\1\u03fb\74\0\1\u02ff\36\0\1\52\2\0\4\52"+
    "\1\0\5\52\1\0\4\52\1\u0245\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\5\0\1\52\2\0\4\52\1\0\2\52\1\u0245"+
    "\2\52\1\0\5\52\3\0\3\52\1\252\1\52\1\253"+
    "\1\0\6\52\3\0\1\252\3\0\1\52\1\252\5\0"+
    "\1\52\2\0\4\52\1\u03f4\5\52\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\1\52\1\u03fc\4\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\3\52\1\u03fd\1\0\5\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\5\0\1\314\2\0\2\314\1\u0312\1\314"+
    "\1\0\5\314\1\0\5\314\3\0\3\314\1\0\1\314"+
    "\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0\1\314"+
    "\2\0\4\314\1\0\5\314\1\0\4\314\1\u0196\3\0"+
    "\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0"+
    "\1\314\6\0\1\314\2\0\4\314\1\u0389\5\314\1\0"+
    "\5\314\3\0\3\314\1\0\1\314\2\0\1\314\1\u03fe"+
    "\4\314\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0"+
    "\1\u0196\3\314\1\0\5\314\1\0\5\314\3\0\3\314"+
    "\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\4\314\1\0\5\314\1\0\2\314"+
    "\1\u03ff\2\314\3\0\3\314\1\0\1\314\2\0\6\314"+
    "\2\0\1\u018d\4\0\1\314\6\0\1\314\2\0\2\314"+
    "\1\u0400\1\314\1\0\5\314\1\0\5\314\3\0\3\314"+
    "\1\0\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\u0401\2\0\4\314\1\0\5\314\1\0\5\314"+
    "\3\0\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d"+
    "\4\0\1\314\4\0\7\324\1\u031c\41\324\1\335\33\324"+
    "\1\u019e\24\324\1\335\20\324\1\u0402\26\324\1\u0402\10\324"+
    "\1\335\11\324\1\u0403\46\324\1\335\14\324\1\u019e\43\324"+
    "\1\335\31\324\1\u0404\26\324\1\335\16\324\1\u0405\41\324"+
    "\1\335\7\324\7\337\1\u0326\42\337\1\335\32\337\1\u01ac"+
    "\25\337\1\335\17\337\1\u0406\26\337\1\u0406\11\337\1\335"+
    "\10\337\1\u0407\47\337\1\335\13\337\1\u01ac\44\337\1\335"+
    "\30\337\1\u0408\27\337\1\335\15\337\1\u0409\42\337\1\335"+
    "\6\337\7\0\1\u02a5\62\0\1\u03b9\26\0\1\u03b9\27\0"+
    "\1\u040a\53\0\1\106\2\0\4\106\1\0\5\106\1\0"+
    "\5\106\3\0\2\106\1\u029b\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\3\106\1\u0349\1\0\5\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\15\0\1\u040b\50\0\1\106\2\0"+
    "\4\106\1\0\1\u040c\4\106\1\0\5\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\22\0\1\u040d\21\0\1\u040d\21\0\1\106"+
    "\2\0\4\106\1\0\5\106\1\u040d\5\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\2\106\1\u040e\3\106\3\0"+
    "\1\365\3\0\1\106\1\365\17\0\1\u033b\55\0\1\u040f"+
    "\26\0\1\u040f\22\0\1\106\2\0\1\106\1\u0410\2\106"+
    "\1\0\5\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\5\0\1\106\2\0\4\106\1\0\5\106\1\0\3\106"+
    "\1\u03c4\1\106\3\0\3\106\1\365\1\106\1\366\1\0"+
    "\6\106\3\0\1\365\3\0\1\106\1\365\27\0\1\u0411"+
    "\36\0\1\106\2\0\4\106\1\0\5\106\1\0\4\106"+
    "\1\u0412\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\4\106\1\0\5\106\1\0\2\106\1\u0413\2\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\106\2\0\4\106\1\0"+
    "\1\106\1\u0414\3\106\1\0\5\106\3\0\3\106\1\u0415"+
    "\1\106\1\366\1\0\6\106\3\0\1\365\3\0\1\106"+
    "\1\365\13\0\1\u0416\74\0\1\u033b\36\0\1\106\2\0"+
    "\4\106\1\0\5\106\1\0\4\106\1\u029b\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\5\0\1\106\2\0\4\106\1\0\2\106"+
    "\1\u029b\2\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\5\0\1\106\2\0\4\106\1\u040f\5\106\1\0\5\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\1\106\1\u0417"+
    "\4\106\3\0\1\365\3\0\1\106\1\365\5\0\1\106"+
    "\2\0\3\106\1\u0418\1\0\5\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\u0116\2\0\2\u0116\1\u034e"+
    "\1\u0116\1\0\5\u0116\1\0\5\u0116\3\0\3\u0116\1\0"+
    "\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0"+
    "\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0\4\u0116\1\u01ed"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\u03b9\5\u0116"+
    "\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0\1\u0116"+
    "\1\u0419\4\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\0\5\u0116\1\0\2\u0116\1\u041a\2\u0116"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\2\u0116\1\u041b\1\u0116"+
    "\1\0\5\u0116\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116"+
    "\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u041c"+
    "\2\0\4\u0116\1\0\5\u0116\1\0\5\u0116\3\0\3\u0116"+
    "\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116"+
    "\4\0\7\u011e\1\u0358\41\u011e\1\37\33\u011e\1\u01f5\24\u011e"+
    "\1\37\20\u011e\1\u041d\26\u011e\1\u041d\10\u011e\1\37\11\u011e"+
    "\1\u041e\46\u011e\1\37\31\u011e\1\u041f\26\u011e\1\37\16\u011e"+
    "\1\u0420\41\u011e\1\37\7\u011e\7\u0128\1\u0362\42\u0128\1\37"+
    "\32\u0128\1\u0203\25\u0128\1\37\17\u0128\1\u0421\26\u0128\1\u0421"+
    "\11\u0128\1\37\10\u0128\1\u0422\47\u0128\1\37\30\u0128\1\u0423"+
    "\27\u0128\1\37\15\u0128\1\u0424\42\u0128\1\37\6\u0128\2\0"+
    "\1\u020f\2\0\4\u020f\1\0\5\u020f\1\0\5\u020f\2\0"+
    "\1\37\3\u020f\1\0\1\u020f\3\0\4\u020f\1\37\1\0"+
    "\1\37\4\0\1\37\1\u020f\16\0\1\u0425\50\0\1\206"+
    "\2\0\4\206\1\0\1\u0426\4\206\1\0\5\206\3\0"+
    "\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0\1\206"+
    "\37\0\1\u03e2\1\0\1\u0427\12\0\1\u03e2\4\0\1\u03e2"+
    "\5\0\1\206\2\0\1\206\1\u0428\2\206\1\0\5\206"+
    "\1\0\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\6\206\7\0\1\206\6\0\1\206\2\0\4\206\1\0"+
    "\5\206\1\0\3\206\1\u03e8\1\206\3\0\3\206\1\u0146"+
    "\1\206\1\u0147\1\0\6\206\7\0\1\206\15\0\1\u0429"+
    "\26\0\1\u0429\22\0\1\206\2\0\4\206\1\u0429\5\206"+
    "\1\0\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\1\206\1\u042a\4\206\7\0\1\206\14\0\1\u042b\52\0"+
    "\1\206\2\0\4\206\1\0\5\206\1\0\5\206\3\0"+
    "\3\206\1\u03e2\1\206\1\u0427\1\0\6\206\3\0\1\u03e2"+
    "\3\0\1\206\1\u03e2\5\0\1\206\2\0\3\206\1\u042c"+
    "\1\0\5\206\1\0\5\206\3\0\3\206\1\u0146\1\206"+
    "\1\u0147\1\0\6\206\7\0\1\206\13\0\1\u0380\65\0"+
    "\1\u02f1\60\0\1\u042d\55\0\1\u042e\26\0\1\u042e\42\0"+
    "\1\u042f\45\0\1\u0430\53\0\1\52\2\0\2\52\1\u0394"+
    "\1\52\1\0\5\52\1\0\5\52\3\0\3\52\1\252"+
    "\1\52\1\253\1\0\6\52\3\0\1\252\3\0\1\52"+
    "\1\252\13\0\1\u0250\52\0\1\52\2\0\3\52\1\u023b"+
    "\1\0\5\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\13\0\1\u0234\52\0\1\52\2\0\4\52\1\0\2\52"+
    "\1\u030a\2\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\20\0\1\u0431\45\0\1\52\2\0\4\52\1\0\3\52"+
    "\1\u0432\1\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\5\52\1\0\4\52"+
    "\1\u0174\3\0\3\52\1\252\1\52\1\253\1\0\6\52"+
    "\3\0\1\252\3\0\1\52\1\252\5\0\1\52\2\0"+
    "\4\52\1\0\2\52\1\u0433\2\52\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\16\0\1\u0434\17\0\1\u03fa\1\0"+
    "\1\253\12\0\1\252\4\0\1\252\14\0\1\u0435\26\0"+
    "\1\u0435\22\0\1\52\2\0\3\52\1\u0174\1\0\5\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\5\0\1\52"+
    "\2\0\4\52\1\u0435\5\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\1\52\1\u0436\4\52\3\0"+
    "\1\252\3\0\1\52\1\252\5\0\1\314\2\0\4\314"+
    "\1\0\5\314\1\u03f2\5\314\3\0\3\314\1\0\1\314"+
    "\2\0\2\314\1\u0437\3\314\2\0\1\u018d\4\0\1\314"+
    "\6\0\1\314\2\0\4\314\1\0\5\314\1\0\4\314"+
    "\1\u0438\3\0\3\314\1\0\1\314\2\0\6\314\2\0"+
    "\1\u018d\4\0\1\314\6\0\1\314\2\0\4\314\1\0"+
    "\5\314\1\0\2\314\1\u0439\2\314\3\0\3\314\1\0"+
    "\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0"+
    "\1\314\2\0\4\314\1\u03f4\5\314\1\0\5\314\3\0"+
    "\3\314\1\0\1\314\2\0\1\314\1\u043a\4\314\2\0"+
    "\1\u018d\4\0\1\314\4\0\17\324\1\u043b\21\324\1\u043b"+
    "\7\324\1\335\20\324\1\u043c\26\324\1\u043c\10\324\1\335"+
    "\33\324\1\u043d\24\324\1\335\31\324\1\u043e\26\324\1\335"+
    "\7\324\17\337\1\u043f\21\337\1\u043f\10\337\1\335\17\337"+
    "\1\u0440\26\337\1\u0440\11\337\1\335\32\337\1\u0441\25\337"+
    "\1\335\30\337\1\u0442\27\337\1\335\6\337\22\0\1\u0443"+
    "\45\0\1\u0444\53\0\1\106\2\0\2\106\1\u03c4\1\106"+
    "\1\0\5\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\13\0\1\u02a5\52\0\1\106\2\0\3\106\1\u0291\1\0"+
    "\5\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\13\0"+
    "\1\u028b\52\0\1\106\2\0\4\106\1\0\2\106\1\u0346"+
    "\2\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\20\0"+
    "\1\u0445\45\0\1\106\2\0\4\106\1\0\3\106\1\u0446"+
    "\1\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\5\0"+
    "\1\106\2\0\4\106\1\0\5\106\1\0\4\106\1\u01cc"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\5\0\1\106\2\0\4\106"+
    "\1\0\2\106\1\u0447\2\106\1\0\5\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\16\0\1\u0448\17\0\1\u0415\1\0\1\366"+
    "\12\0\1\365\4\0\1\365\14\0\1\u0449\26\0\1\u0449"+
    "\22\0\1\106\2\0\3\106\1\u01cc\1\0\5\106\1\0"+
    "\5\106\3\0\3\106\1\365\1\106\1\366\1\0\6\106"+
    "\3\0\1\365\3\0\1\106\1\365\5\0\1\106\2\0"+
    "\4\106\1\u0449\5\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\1\106\1\u044a\4\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\u0116\2\0\4\u0116\1\0"+
    "\5\u0116\1\u040d\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0"+
    "\2\u0116\1\u044b\3\u0116\2\0\1\u01e4\4\0\1\u0116\6\0"+
    "\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0\4\u0116\1\u044c"+
    "\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116"+
    "\1\0\2\u0116\1\u044d\2\u0116\3\0\3\u0116\1\0\1\u0116"+
    "\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116"+
    "\2\0\4\u0116\1\u040f\5\u0116\1\0\5\u0116\3\0\3\u0116"+
    "\1\0\1\u0116\2\0\1\u0116\1\u044e\4\u0116\2\0\1\u01e4"+
    "\4\0\1\u0116\4\0\17\u011e\1\u044f\21\u011e\1\u044f\7\u011e"+
    "\1\37\20\u011e\1\u0450\26\u011e\1\u0450\10\u011e\1\37\33\u011e"+
    "\1\u0451\24\u011e\1\37\31\u011e\1\u0452\26\u011e\1\37\7\u011e"+
    "\17\u0128\1\u0453\21\u0128\1\u0453\10\u0128\1\37\17\u0128\1\u0454"+
    "\26\u0128\1\u0454\11\u0128\1\37\32\u0128\1\u0455\25\u0128\1\37"+
    "\30\u0128\1\u0456\27\u0128\1\37\6\u0128\7\0\1\u0457\53\0"+
    "\1\206\2\0\2\206\1\u03e8\1\206\1\0\5\206\1\0"+
    "\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206"+
    "\7\0\1\206\15\0\1\u0458\21\0\1\u0459\4\0\1\u0458"+
    "\7\0\1\u0459\4\0\1\u0459\5\0\1\206\2\0\4\206"+
    "\1\0\2\206\1\u0375\2\206\1\0\5\206\3\0\3\206"+
    "\1\u0146\1\206\1\u0147\1\0\6\206\7\0\1\206\16\0"+
    "\1\u045a\50\0\1\206\2\0\4\206\1\0\1\u045b\4\206"+
    "\1\0\5\206\3\0\3\206\1\u0146\1\206\1\u0147\1\0"+
    "\6\206\7\0\1\206\15\0\1\u045c\26\0\1\u045c\22\0"+
    "\1\206\2\0\4\206\1\u045c\5\206\1\0\5\206\3\0"+
    "\3\206\1\u0146\1\206\1\u0147\1\0\1\206\1\u045d\4\206"+
    "\7\0\1\206\21\0\1\u045e\52\0\1\u02f1\75\0\1\u0234"+
    "\43\0\1\u045f\53\0\1\52\2\0\2\52\1\u0460\1\52"+
    "\1\0\5\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\52\2\0\4\52\1\0\3\52\1\u0461\1\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\17\0\1\u0462"+
    "\53\0\1\u0463\53\0\1\52\2\0\2\52\1\u030a\1\52"+
    "\1\0\5\52\1\0\5\52\3\0\3\52\1\252\1\52"+
    "\1\253\1\0\6\52\3\0\1\252\3\0\1\52\1\252"+
    "\5\0\1\314\2\0\3\314\1\u0312\1\0\5\314\1\0"+
    "\5\314\3\0\3\314\1\0\1\314\2\0\6\314\2\0"+
    "\1\u018d\4\0\1\314\6\0\1\314\2\0\4\314\1\0"+
    "\3\314\1\u0464\1\314\1\0\5\314\3\0\3\314\1\0"+
    "\1\314\2\0\6\314\2\0\1\u018d\4\0\1\314\6\0"+
    "\1\314\2\0\4\314\1\0\5\314\1\0\4\314\1\u025e"+
    "\3\0\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d"+
    "\4\0\1\314\6\0\1\314\2\0\3\314\1\u025e\1\0"+
    "\5\314\1\0\5\314\3\0\3\314\1\0\1\314\2\0"+
    "\6\314\2\0\1\u018d\4\0\1\314\4\0\10\324\1\u031c"+
    "\40\324\1\335\17\324\1\u026e\40\324\1\335\24\324\1\u0465"+
    "\33\324\1\335\33\324\1\u026e\24\324\1\335\7\324\10\337"+
    "\1\u0326\41\337\1\335\16\337\1\u027d\41\337\1\335\23\337"+
    "\1\u0466\34\337\1\335\32\337\1\u027d\25\337\1\335\6\337"+
    "\24\0\1\u028b\43\0\1\u0467\53\0\1\106\2\0\2\106"+
    "\1\u0468\1\106\1\0\5\106\1\0\5\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\5\0\1\106\2\0\4\106\1\0\3\106"+
    "\1\u0469\1\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\6\106\3\0\1\365\3\0\1\106\1\365"+
    "\17\0\1\u046a\53\0\1\u046b\53\0\1\106\2\0\2\106"+
    "\1\u0346\1\106\1\0\5\106\1\0\5\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\5\0\1\u0116\2\0\3\u0116\1\u034e\1\0"+
    "\5\u0116\1\0\5\u0116\3\0\3\u0116\1\0\1\u0116\2\0"+
    "\6\u0116\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0"+
    "\4\u0116\1\0\3\u0116\1\u046c\1\u0116\1\0\5\u0116\3\0"+
    "\3\u0116\1\0\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0"+
    "\1\u0116\6\0\1\u0116\2\0\4\u0116\1\0\5\u0116\1\0"+
    "\4\u0116\1\u02b3\3\0\3\u0116\1\0\1\u0116\2\0\6\u0116"+
    "\2\0\1\u01e4\4\0\1\u0116\6\0\1\u0116\2\0\3\u0116"+
    "\1\u02b3\1\0\5\u0116\1\0\5\u0116\3\0\3\u0116\1\0"+
    "\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\4\0"+
    "\10\u011e\1\u0358\40\u011e\1\37\17\u011e\1\u02c2\40\u011e\1\37"+
    "\24\u011e\1\u046d\33\u011e\1\37\33\u011e\1\u02c2\24\u011e\1\37"+
    "\7\u011e\10\u0128\1\u0362\41\u0128\1\37\16\u0128\1\u02d0\41\u0128"+
    "\1\37\23\u0128\1\u046e\34\u0128\1\37\32\u0128\1\u02d0\25\u0128"+
    "\1\37\6\u0128\7\0\1\u046f\60\0\1\u0470\53\0\1\206"+
    "\2\0\2\206\1\u0471\1\206\1\0\5\206\1\0\5\206"+
    "\3\0\3\206\1\u0146\1\206\1\u0147\1\0\6\206\7\0"+
    "\1\206\13\0\1\u0472\53\0\1\206\2\0\2\206\1\u0375"+
    "\1\206\1\0\5\206\1\0\5\206\3\0\3\206\1\u0146"+
    "\1\206\1\u0147\1\0\6\206\7\0\1\206\6\0\1\u0473"+
    "\60\0\1\u017c\60\0\1\u0186\2\0\4\52\1\0\5\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\6\52\3\0\1\252\3\0\1\52\1\252\5\0\1\u0474"+
    "\2\0\4\52\1\0\5\52\1\0\5\52\3\0\3\52"+
    "\1\252\1\52\1\253\1\0\6\52\3\0\1\252\3\0"+
    "\1\52\1\252\20\0\1\u0475\60\0\1\u0430\45\0\1\314"+
    "\2\0\2\314\1\u0476\1\314\1\0\5\314\1\0\5\314"+
    "\3\0\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d"+
    "\4\0\1\314\4\0\7\324\1\u0477\41\324\1\335\7\324"+
    "\7\337\1\u0478\42\337\1\335\6\337\2\0\1\u01d3\60\0"+
    "\1\u01dd\2\0\4\106\1\0\5\106\1\0\5\106\3\0"+
    "\3\106\1\365\1\106\1\366\1\0\6\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\u0479\2\0\4\106\1\0"+
    "\5\106\1\0\5\106\3\0\3\106\1\365\1\106\1\366"+
    "\1\0\6\106\3\0\1\365\3\0\1\106\1\365\20\0"+
    "\1\u047a\60\0\1\u0444\45\0\1\u0116\2\0\2\u0116\1\u047b"+
    "\1\u0116\1\0\5\u0116\1\0\5\u0116\3\0\3\u0116\1\0"+
    "\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\4\0"+
    "\7\u011e\1\u047c\41\u011e\1\37\7\u011e\7\u0128\1\u047d\42\u0128"+
    "\1\37\6\u0128\33\0\1\u046f\2\0\1\u047e\11\0\1\u046f"+
    "\4\0\1\u046f\20\0\1\u0457\54\0\1\u047f\26\0\1\u047f"+
    "\22\0\1\52\2\0\4\52\1\u0480\5\52\1\0\5\52"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\1\52\1\u0481"+
    "\4\52\3\0\1\252\3\0\1\52\1\252\5\0\1\u0482"+
    "\60\0\1\u0264\2\0\4\314\1\0\5\314\1\0\5\314"+
    "\3\0\3\314\1\0\1\314\2\0\6\314\2\0\1\u018d"+
    "\4\0\1\314\4\0\2\324\1\u0272\46\324\1\335\7\324"+
    "\2\337\1\u0281\47\337\1\335\6\337\2\0\1\106\2\0"+
    "\4\106\1\u0483\5\106\1\0\5\106\3\0\3\106\1\365"+
    "\1\106\1\366\1\0\1\106\1\u0484\4\106\3\0\1\365"+
    "\3\0\1\106\1\365\5\0\1\u0485\60\0\1\u02b9\2\0"+
    "\4\u0116\1\0\5\u0116\1\0\5\u0116\3\0\3\u0116\1\0"+
    "\1\u0116\2\0\6\u0116\2\0\1\u01e4\4\0\1\u0116\4\0"+
    "\2\u011e\1\u02c6\46\u011e\1\37\7\u011e\2\u0128\1\u02d4\47\u0128"+
    "\1\37\6\u0128\17\0\1\u0486\21\0\1\u0486\36\0\1\u0487"+
    "\21\0\1\u0487\21\0\1\52\2\0\4\52\1\0\5\52"+
    "\1\u0487\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\2\52\1\u0488\3\52\3\0\1\252\3\0\1\52\1\252"+
    "\14\0\1\u0480\26\0\1\u0480\37\0\1\u0489\21\0\1\u0489"+
    "\21\0\1\106\2\0\4\106\1\0\5\106\1\u0489\5\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\2\106\1\u048a"+
    "\3\106\3\0\1\365\3\0\1\106\1\365\14\0\1\u0483"+
    "\26\0\1\u0483\31\0\1\u048b\26\0\1\u048b\31\0\1\u048c"+
    "\26\0\1\u048c\22\0\1\52\2\0\4\52\1\u048c\5\52"+
    "\1\0\5\52\3\0\3\52\1\252\1\52\1\253\1\0"+
    "\1\52\1\u048d\4\52\3\0\1\252\3\0\1\52\1\252"+
    "\14\0\1\u048e\26\0\1\u048e\22\0\1\106\2\0\4\106"+
    "\1\u048e\5\106\1\0\5\106\3\0\3\106\1\365\1\106"+
    "\1\366\1\0\1\106\1\u048f\4\106\3\0\1\365\3\0"+
    "\1\106\1\365\15\0\1\u0490\60\0\1\u0491\50\0\1\52"+
    "\2\0\4\52\1\0\1\u0492\4\52\1\0\5\52\3\0"+
    "\3\52\1\252\1\52\1\253\1\0\6\52\3\0\1\252"+
    "\3\0\1\52\1\252\15\0\1\u0493\50\0\1\106\2\0"+
    "\4\106\1\0\1\u0494\4\106\1\0\5\106\3\0\3\106"+
    "\1\365\1\106\1\366\1\0\6\106\3\0\1\365\3\0"+
    "\1\106\1\365\12\0\1\u022a\60\0\1\u02ff\53\0\1\52"+
    "\2\0\2\52\1\u0245\1\52\1\0\5\52\1\0\5\52"+
    "\3\0\3\52\1\252\1\52\1\253\1\0\6\52\3\0"+
    "\1\252\3\0\1\52\1\252\12\0\1\u033b\53\0\1\106"+
    "\2\0\2\106\1\u029b\1\106\1\0\5\106\1\0\5\106"+
    "\3\0\3\106\1\365\1\106\1\366\1\0\6\106\3\0"+
    "\1\365\3\0\1\106\1\365\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[52920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\2\11\1\1\2\11\11\1\3\11\2\1\1\11"+
    "\24\1\1\11\44\1\1\11\2\1\2\11\15\1\1\11"+
    "\7\1\1\11\2\1\1\11\1\1\2\11\3\1\1\11"+
    "\3\1\1\11\10\1\1\11\3\1\13\0\1\1\11\0"+
    "\3\1\1\0\1\11\4\1\3\0\10\1\2\0\3\1"+
    "\1\11\2\0\6\1\1\0\12\1\11\0\1\11\13\0"+
    "\1\1\7\0\4\1\1\0\1\11\4\1\2\0\10\1"+
    "\2\0\3\1\1\11\2\0\6\1\1\0\12\1\24\0"+
    "\1\1\1\0\1\1\4\0\1\11\2\1\2\0\3\1"+
    "\4\0\1\1\1\0\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\11\27\0\7\1\2\0\3\1"+
    "\1\0\5\1\2\0\1\1\1\0\2\1\2\0\6\1"+
    "\2\0\2\1\1\0\14\1\35\0\2\1\10\0\7\1"+
    "\2\0\10\1\2\0\1\1\1\0\2\1\2\0\6\1"+
    "\2\0\2\1\1\0\14\1\34\0\2\1\2\0\2\1"+
    "\2\0\2\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\7\0\1\11\16\0\10\1\2\0\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\4\1\2\0\1\1"+
    "\1\0\4\1\2\0\16\1\4\0\1\1\16\0\1\1"+
    "\13\0\1\1\10\0\10\1\2\0\3\1\1\11\2\1"+
    "\1\0\4\1\2\0\1\1\1\0\4\1\2\0\16\1"+
    "\34\0\1\1\3\0\4\1\1\0\2\1\1\0\1\1"+
    "\1\0\3\1\15\0\2\1\1\11\5\1\1\0\1\11"+
    "\2\0\3\1\1\0\3\1\1\0\1\1\1\0\17\1"+
    "\5\0\1\1\11\0\1\1\7\0\2\1\1\11\5\1"+
    "\1\0\1\11\2\0\3\1\1\0\3\1\1\0\1\1"+
    "\1\0\17\1\5\0\1\1\11\0\1\1\5\0\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\3\1\10\0\1\11"+
    "\4\0\2\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\3\1\1\0\1\1\1\0\14\1\1\0\1\1"+
    "\7\0\1\1\11\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\3\1\1\0\1\1\1\0\13\1"+
    "\1\0\1\1\6\0\1\1\7\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\6\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\2\0\6\1\12\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\2\0\6\1"+
    "\11\0\3\1\1\0\1\1\1\0\1\1\3\0\1\11"+
    "\1\0\2\1\2\0\5\1\11\0\1\11\1\0\2\1"+
    "\2\0\5\1\10\0\1\11\3\0\1\1\1\0\1\1"+
    "\2\0\2\1\2\0\1\1\3\0\2\1\2\0\1\1"+
    "\3\0\1\11\1\1\2\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\2\0\1\11\2\0\1\1\2\0"+
    "\1\1\3\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private static final Logger LOGGER = Logger.getLogger(COMDATAInitialisation.class.getName());
	
	String location = "MAIN PROGRAM";
	
	Map<String, Boolean> variables = new HashMap<String, Boolean>();
	List<String> dimension = new LinkedList<String>();
	
	//mantis EGL 316
	Map<String, List<String>> mVariableByCallType = new HashMap<String, List<String>>();
	Map<String, List<String>> mVariableByType = new HashMap<String, List<String>>();
	
	String variable = "";
	boolean initialized = false;
	int par = 0;
	boolean dim = false, fin = true;
	
	//mantis EGL 312/316/324/313
	boolean isPotentialError = false;
	//when a call is fire
	boolean isCall=false;
	boolean firstCall=false;
	//when an intent(out) is produce
	boolean isIntentout=false;
	//name of sunroutine
	String nameType="";
	//name of the input file
	String parsedFileName;
	

    public COMDATAInitialisation() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
		this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
	//Mantis 316 EGL : detect initialized by local fonction
	/**
	 * This function add Naming subroutin, function, module in List  
	 * in order to analyse at the end of parsing if 
	 * this variable is initialized by this naming which called in source code.
	 * this function is call when a call of naming is done.
	 * @param funct
	 * @param paramVar
	 * @param position
	 */
	private void addVariableByCallType(final String funct, final String paramVar,final String location,final int line){
		//if variable is declared
        LOGGER.finest("begin method addVariableByCallType");
		if(variables.containsKey(paramVar)){
			//if variable is not initialized
			//then add in this  mVariableByType to check if this type naming  
			//initialize it.
			if(!variables.get(paramVar)){

				List<String> param ;
				if (mVariableByCallType.get(funct)!=null){
					param = mVariableByCallType.get(funct);
				}else{					
					param = new ArrayList<String>();					
				}
				param.add("paramVar="+paramVar);
				param.add("location="+location);
				param.add("line="+line);
				param.add("error=false");

				mVariableByCallType.put(funct,param);

			}
		}
        LOGGER.finest("begin method addVariableByCallType");
	}

	/**
	 * This function parse Naming subroutin, function, module in List  
	 * in order to analyse at the end of parsing if 
	 * this variable is initialized by this naming .
	 * this function is applied in type or naming .
	 * @param funct
	 * @param paramVar
	 * @param position
	 */
	private void addVariableByType(final String funct, final String paramVar){
        LOGGER.finest("begin method addVariableByType");



		List<String> param ;
		if (mVariableByType.get(funct)!=null){
			param = mVariableByType.get(funct);										
		}else{					
			param = new ArrayList<String>();				
		}
		param.add("paramVar="+paramVar);
		mVariableByType.put(funct,param);
        LOGGER.finest("end method addVariableByType");
	}

	/**
	 * This fonction is recommended in intent treatment to update initialized state of variable
	 * @param funct
	 * @param paramVar
	 * @return true if this variable is updated as no initialized false else
	 */
	private boolean setErrorVariableByType(final String funct, final String paramVar){
        LOGGER.finest("begin method setErrorVariableByType");
		//test limitation of this rule with call function
		boolean ret = false;  
		if(mVariableByCallType.containsKey(funct)  && mVariableByType.containsKey(funct)){
			List<String> paramCall = mVariableByCallType.get(funct);
			List<String> param = mVariableByType.get(funct);
			if(param!=null && paramCall!=null ){
				final int indexParam = param.indexOf("paramVar="+paramVar);
				//if it is the same function cause of prototype function
				//then param are in same place in signature function
				if((indexParam > -1) && (paramCall.size() >(indexParam * 4))){
					final String sParamCall = paramCall.get(indexParam * 4);
					if(sParamCall.contains("paramVar=")){
						paramCall.set(indexParam + 3, "error=true");
						ret = true;
					}
				}
			}
		}
		LOGGER.finest("end method setErrorVariableByType");
		return ret;
	}
	
	/**
	 * this function display add violation for variables which are not initialized in call function 
	 * @throws JFlexException
	 * @throws NumberFormatException
	 */
	private void displayErrorVariableByType() throws JFlexException,NumberFormatException {
		LOGGER.finest("begin method displayErrorVariableByType");
		//add at the end all violation error 
		//function shall be described in this source code
		if(!mVariableByCallType.isEmpty()){
			final Set<Map.Entry<String,List<String>>> entryCall = mVariableByCallType.entrySet();
			
			
			for (Map.Entry<String,List<String>> ent:entryCall){
				
				final List<String> entList =  ent.getValue();			
				if(entList!=null && !entList.isEmpty())
				for(int i=0;i<entList.size();i++){				
					if(entList.get(i).contains("paramVar=")){
						final String error= entList.get(i+3).substring(entList.get(i+3).indexOf("=")+1, entList.get(i+3).length());
						final String paramVar= entList.get(i).substring(entList.get(i).indexOf("=")+1, entList.get(i).length());
						if("true".equals(error)){
							final String dLocation= entList.get(i+1).substring(entList.get(i+1).indexOf("=")+1, entList.get(i+1).length());
							final String line= entList.get(i+2).substring(entList.get(i+2).indexOf("=")+1, entList.get(i+2).length());
							LOGGER.fine("Setting error line "+line+" for the variable "+paramVar+".");								
							setError(dLocation,"The variable " + paramVar + " is used before being initialized. ", Integer.parseInt(line));
												 
						}
						
					}
					
				}
				
			}	
		}
        LOGGER.finest("end method displayErrorVariableByType");
	}
		


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMDATAInitialisation(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { //mantis 316
displayErrorVariableByType();
return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 66: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\")");
				                    yybegin(COMMENT);
            }
          case 67: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 68: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 69: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+yyline+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 70: break;
          case 6: 
            { 
            }
          case 71: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n)");
                                        yybegin(NEW_LINE);
            }
          case 72: break;
          case 8: 
            { nameType=yytext();location = location + " " + yytext(); variables.clear(); dimension.clear(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> PARAMS (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(PARAMS);
            }
          case 73: break;
          case 9: 
            { variables.clear(); dimension.clear();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n)");
                                    yybegin(NEW_LINE);
            }
          case 74: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 75: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                     yybegin(COMMENT);
            }
          case 76: break;
          case 12: 
            { if(variables.containsKey(yytext())) {
                                        variable = yytext();
                                        initialized = false;
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> VAR_EQ (Transition : VAR \""+yytext()+"\" )");
                                        yybegin(VAR_EQ);
                                    }
            }
          case 77: break;
          case 13: 
            { if(variables.containsKey(yytext())) {
                                        variable = yytext();
                                        initialized = false;
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> VAR_EQ (Transition : VAR \""+yytext()+"\" )");
                                        yybegin(VAR_EQ);
                                    }
            }
          case 78: break;
          case 14: 
            { if(isPotentialError && variables.containsKey(variable)){
									Boolean init = variables.get(variable);
								 	if(init != null && !init){
								  		LOGGER.fine("Setting error line "+yyline+1+" for the variable "+variable+"."); 
								  		setError(location,"The variable " + variable + " is used before being initialized. ", yyline+1); 
									}
									isPotentialError=false;
								  }
								  LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
								  yybegin(NEW_LINE);
            }
          case 79: break;
          case 15: 
            { isPotentialError = false;if(variables.containsKey(variable)) variables.put(variable, true );
            }
          case 80: break;
          case 16: 
            { isIntentout=false;	fin=true;
            }
          case 81: break;
          case 17: 
            { variable = yytext(); fin=true;
									 if (isIntentout){
									 	setErrorVariableByType(nameType, variable);		
									 							 
									 }	
								 	 if(!variables.containsKey(variable)) variables.put(variable, false);
								 	 if(dim) dimension.add(variable);
            }
          case 82: break;
          case 18: 
            { dim=false;
                                        if(fin){
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - INIT -> NEW_LINE (Transition : \\n )");
                                            yybegin(NEW_LINE);
                                        }
            }
          case 83: break;
          case 19: 
            { variables.put(variable, true );
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - INIT -> WAIT (Transition : EQUAL \""+yytext()+"\" )");
                                        yybegin(WAIT);
            }
          case 84: break;
          case 20: 
            { par=1;
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - INIT -> WAIT_ARRAY (Transition : [(] )");
                                        yybegin(WAIT_ARRAY);
            }
          case 85: break;
          case 21: 
            { if(!initialized) {
									Boolean init = variables.get(variable);
									if(init != null && !init){
									   LOGGER.fine("Setting error line "+yyline+1+" for the variable "+variable+".");
									   setError(location,"The variable " + variable + " is used before being initialized. ", yyline+1);
								    }
								 } 
								 initialized = false; variable = yytext();
            }
          case 86: break;
          case 22: 
            { variable = yytext(); initialized = false;
            }
          case 87: break;
          case 23: 
            { if(!initialized) {
									Boolean init = variables.get(variable);
									if(init != null && !init){
									   LOGGER.fine("Setting error line "+yyline+1+" for the variable "+variable+"."); 
									   setError(location,"The variable " + variable + " is used before being initialized. ", yyline+1);
								   }
								 } 
								 initialized = false;
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - VAR_EQ -> NEW_LINE (Transition : \\n )");
								 yybegin(NEW_LINE);
            }
          case 88: break;
          case 24: 
            { initialized = true;
								 variables.put(variable, true );
            }
          case 89: break;
          case 25: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - WAIT -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 90: break;
          case 26: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - WAIT -> DECLARATION (Transition : [,] )");
                                    yybegin(DECLARATION);
            }
          case 91: break;
          case 27: 
            { String var = yytext();
								 if(variables.containsKey(var)) variables.put(var, true);
            }
          case 92: break;
          case 28: 
            { par++;
            }
          case 93: break;
          case 29: 
            { par--;
                                    if(par==0){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - FUNC -> LINE (Transition : [)] )");
                                        yybegin(LINE);
                                    }
            }
          case 94: break;
          case 30: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> NEW_LINE (Transition : \\n)");
                                        yybegin(NEW_LINE);
            }
          case 95: break;
          case 31: 
            { if (firstCall){
										 nameType=yytext();
										 firstCall=false;
										}	
										if(isCall){
										    final String var = yytext();
											addVariableByCallType(nameType, var, location,yyline +1);
										}						
										variables.put(yytext(), true)
										; fin=true;
            }
          case 96: break;
          case 32: 
            { isCall=false;
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DATA -> NEW_LINE (Transition : \\n )");
                                        yybegin(NEW_LINE);
            }
          case 97: break;
          case 33: 
            { par--;
                                        if(par==0){
                                            LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - WAIT_ARRAY -> DECLARATION (Transition : [)] )");
                                            yybegin(DECLARATION);
                                        }
            }
          case 98: break;
          case 34: 
            { addVariableByType(nameType, yytext());variables.put(yytext(), true);
            }
          case 99: break;
          case 35: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - PARAMS -> NEW_LINE (Transition : \\n)");
                                        yybegin(NEW_LINE);
            }
          case 100: break;
          case 36: 
            { String var = yytext();
								 Boolean init = variables.get(var);
								 if(init != null && !init){
								    LOGGER.fine("Setting error line "+yyline+1+" for the variable "+var+"."); 
								    setError(location,"The variable " + var + " is used before being initialized. ", yyline+1); 
							     }
            }
          case 101: break;
          case 37: 
            { par--;
                                    if(par==0){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ARRAY -> LINE (Transition : [)] )");
                                        yybegin(LINE);
                                    }
            }
          case 102: break;
          case 38: 
            { if(!variables.containsKey(yytext())) variables.put(yytext(), false);
            }
          case 103: break;
          case 39: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> NEW_LINE (Transition : \\n )");
                                        yybegin(NEW_LINE);
            }
          case 104: break;
          case 40: 
            { variables.put(variable, true );
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> WAIT (Transition : EQUAL \""+yytext()+"\" )");
                                        yybegin(WAIT);
            }
          case 105: break;
          case 41: 
            { variable = yytext().substring(0,yytext().length()-1).trim();  par = 1;
								 if (!dimension.contains(variable)){
								     LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> FUNC (Transition : VAR_PAR \""+yytext()+"\" )");
								 	 yybegin(FUNC);
								 		 
								 }else{
								 	 isPotentialError = true;
								 	 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> ARRAY (Transition : VAR_PAR \""+yytext()+"\" )");
								 	 yybegin(ARRAY);
								 }
            }
          case 106: break;
          case 42: 
            { if(isPotentialError && variables.containsKey(variable)){
									Boolean init = variables.get(variable);
								 	if(init != null && !init){
								  		LOGGER.fine("Setting error line "+yyline+1+" for the variable "+variable+".");    
								  		setError(location,"The variable " + variable + " is used before being initialized. ", yyline+1); 
									}
									isPotentialError=false;
								  }
            }
          case 107: break;
          case 43: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : NUM | POINT  \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 108: break;
          case 44: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : STRING \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 109: break;
          case 45: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : COMMENT_LINE  \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 110: break;
          case 46: 
            { variable = yytext().substring(0,yytext().length()-1).trim();  par = 1;
								  if (!dimension.contains(variable)){
								        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> FUNC (Transition : VAR_PAR \""+yytext()+"\" )");
								        yybegin(FUNC);
								  }else{
								  		isPotentialError = true;
								  		LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> ARRAY (Transition : VAR_PAR \""+yytext()+"\" )");
								        yybegin(ARRAY);
								  }
            }
          case 111: break;
          case 47: 
            { if(isPotentialError && variables.containsKey(variable)){
									Boolean init = variables.get(variable);
								 	if(init != null && !init){
								 	    LOGGER.fine("Setting error line "+yyline+1+" for the variable "+variable+".");   
								  		setError(location,"The variable " + variable + " is used before being initialized. ", yyline+1); 
									}
									isPotentialError=false;
								  }
            }
          case 112: break;
          case 48: 
            { fin=true;
            }
          case 113: break;
          case 49: 
            { String var = yytext().substring(0,yytext().length()-1).trim();
                                    if (!dimension.contains(var)) {
                                        par = 1;
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - VAR_EQ -> FUNC (Transition : VAR_PAR \""+yytext()+"\" )");
                                        yybegin(FUNC);
                                    }
            }
          case 114: break;
          case 50: 
            { variable = yytext().substring(0, yytext().length()-1).trim();  
									 if(!variables.containsKey(variable))variables.put(variable, false); 
									 dimension.add(variable);
            }
          case 115: break;
          case 51: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> INIT (Transition : [::] )");
										yybegin(INIT);
            }
          case 116: break;
          case 52: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> DECLARATION (Transition : VAR_T \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 117: break;
          case 53: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> DECLARATION (Transition : VAR_T \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 118: break;
          case 54: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> AVOID (Transition : CLE \""+yytext()+"\" )");
                                    yybegin(AVOID);
            }
          case 119: break;
          case 55: 
            { if ("call".equals(yytext().trim().toLowerCase())){
									 isCall=true;	
									 firstCall=true;	
									 }
									 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> DATA (Transition : INITILIAZE \""+yytext()+"\" )");							
									 yybegin(DATA);
            }
          case 120: break;
          case 56: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> DECLARATION (Transition : VAR_T \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 121: break;
          case 57: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> AVOID (Transition : CLE \""+yytext()+"\" )");
                                    yybegin(AVOID);
            }
          case 122: break;
          case 58: 
            { if ("call".equals(yytext().trim().toLowerCase())){
									 isCall=true;
		                             firstCall=true;
		                             }							 
									 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> DATA (Transition : INITILIAZE \""+yytext()+"\" )");
									 yybegin(DATA);
            }
          case 123: break;
          case 59: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 124: break;
          case 60: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 125: break;
          case 61: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 126: break;
          case 62: 
            { location = yytext();
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                        yybegin(NAMING);
            }
          case 127: break;
          case 63: 
            { dim=false;
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> COMMENT (Transition : INTENT \""+yytext()+"\" )");
                                        yybegin(COMMENT);
            }
          case 128: break;
          case 64: 
            { dim=true;
            }
          case 129: break;
          case 65: 
            { dim=false; isIntentout=true;
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
