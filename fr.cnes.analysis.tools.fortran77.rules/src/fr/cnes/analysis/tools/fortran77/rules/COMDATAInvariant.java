/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.DATA.Invariant rule. 	*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMDATAInvariant.lex</tt>
 */
public class COMDATAInvariant extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int DECL_PARAMS = 10;
  public static final int DECLARATION = 12;
  public static final int WAIT_DECL = 14;
  public static final int FUNC_DEC = 16;
  public static final int FUNCTION = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\40\1\41\1\41\1\41\22\0\1\26\1\1\1\37\4\0"+
    "\1\36\1\30\1\31\1\3\1\0\1\42\3\0\12\35\3\0\1\27"+
    "\3\0\1\21\1\17\1\2\1\15\1\14\1\4\1\20\1\24\1\33"+
    "\2\32\1\23\1\22\1\6\1\11\1\12\1\32\1\13\1\34\1\7"+
    "\1\5\2\32\1\25\2\32\4\0\1\35\1\0\1\21\1\17\1\2"+
    "\1\15\1\14\1\4\1\20\1\24\1\33\2\32\1\23\1\22\1\6"+
    "\1\11\1\12\1\32\1\13\1\34\1\7\1\5\2\32\1\25\2\32"+
    "\12\0\1\41\252\0\2\10\115\0\1\16\u1ea8\0\1\41\1\41\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\4\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\2\14\1\12\3\14"+
    "\1\12\2\14\1\12\2\14\2\12\3\14\1\6\3\14"+
    "\1\6\2\14\1\6\2\14\2\6\1\15\3\16\1\6"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\4\0\3\14\1\0\1\26\1\0\1\14\1\0\3\14"+
    "\1\0\2\14\1\27\1\0\2\14\2\0\3\14\1\0"+
    "\1\30\1\0\1\14\1\0\3\14\1\0\2\14\1\31"+
    "\1\0\2\14\2\16\1\0\2\16\4\0\4\14\1\0"+
    "\3\14\1\0\10\14\1\0\3\14\1\0\4\14\2\16"+
    "\1\0\2\16\5\0\1\14\1\32\2\14\1\0\2\14"+
    "\1\33\1\14\1\0\1\14\1\0\4\14\1\34\2\14"+
    "\1\0\2\14\1\35\1\14\1\0\1\14\1\0\3\14"+
    "\3\16\1\0\2\16\5\0\3\14\1\0\3\14\1\0"+
    "\1\14\1\0\5\14\1\0\3\14\1\0\1\14\1\0"+
    "\2\14\3\16\1\0\2\16\4\0\1\36\2\14\1\0"+
    "\1\14\1\0\3\14\1\0\1\37\1\0\4\14\1\0"+
    "\1\14\1\0\3\14\1\0\1\40\1\0\2\14\1\0"+
    "\3\16\1\0\1\41\1\16\4\0\1\14\1\33\1\14"+
    "\2\0\1\14\1\0\1\14\1\35\1\14\2\0\1\14"+
    "\1\0\2\16\1\0\1\16\1\0\1\37\2\0\1\14"+
    "\1\40\2\0\1\14\1\41\1\0\1\16\21\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u015e\0\u015e\0\u0181\0\u01a4\0\u01c7"+
    "\0\u01ea\0\u015e\0\u015e\0\u015e\0\u015e\0\u020d\0\u015e\0\u015e"+
    "\0\u0230\0\u015e\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302"+
    "\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a"+
    "\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532"+
    "\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u03f7\0\u041a\0\u015e"+
    "\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u06d6\0\u015e\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u015e\0\u0811\0\u0834"+
    "\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u094c"+
    "\0\u038e\0\u096f\0\u0992\0\u03f7\0\u041a\0\u09b5\0\u09d8\0\u09fb"+
    "\0\u0a1e\0\u015e\0\u0a41\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0"+
    "\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u059b\0\u0b9f\0\u0bc2\0\u0be5"+
    "\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd"+
    "\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\u0e15"+
    "\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d"+
    "\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045"+
    "\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d"+
    "\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u0276\0\u122f\0\u1252"+
    "\0\u1275\0\u1298\0\u12bb\0\u0276\0\u12de\0\u1301\0\u1324\0\u1347"+
    "\0\u136a\0\u138d\0\u13b0\0\u13d3\0\u0483\0\u13f6\0\u1419\0\u143c"+
    "\0\u145f\0\u1482\0\u0483\0\u14a5\0\u14c8\0\u14eb\0\u150e\0\u1531"+
    "\0\u1554\0\u1577\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u1626\0\u1649"+
    "\0\u166c\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b\0\u173e\0\u1761"+
    "\0\u1784\0\u17a7\0\u17ca\0\u17ed\0\u1810\0\u1833\0\u1856\0\u1879"+
    "\0\u189c\0\u18bf\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991"+
    "\0\u19b4\0\u19d7\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u1aa9"+
    "\0\u1acc\0\u1aef\0\u1b12\0\u1b35\0\u1b58\0\u1b7b\0\u1b9e\0\u015e"+
    "\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a\0\u1c4d\0\u1c70\0\u1c93\0\u1cb6"+
    "\0\u1cd9\0\u0276\0\u1cfc\0\u1d1f\0\u1d42\0\u1d65\0\u1d88\0\u1dab"+
    "\0\u1dce\0\u1df1\0\u1e14\0\u1e37\0\u1e5a\0\u1e7d\0\u0483\0\u1ea0"+
    "\0\u1ec3\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72\0\u1f95\0\u0604"+
    "\0\u1fb8\0\u1fdb\0\u1ffe\0\u2021\0\u2044\0\u2067\0\u015e\0\u208a"+
    "\0\u20ad\0\u20d0\0\u20f3\0\u2116\0\u2139\0\u015e\0\u215c\0\u217f"+
    "\0\u21a2\0\u21c5\0\u21e8\0\u220b\0\u222e\0\u2251\0\u2274\0\u2297"+
    "\0\u015e\0\u22ba\0\u22dd\0\u2300\0\u015e\0\u2323\0\u2346\0\u2369"+
    "\0\u015e\0\u238c\0\u23af\0\u23d2\0\u23f5\0\u2418\0\u243b\0\u245e"+
    "\0\u2481\0\u24a4\0\u24c7\0\u24ea\0\u250d\0\u2530\0\u2553\0\u2576"+
    "\0\u2599\0\u25bc\0\u25df\0\u2602";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\2\15\1\16\5\13\1\17\3\13\1\20"+
    "\3\13\1\21\11\13\1\20\3\13\1\22\1\23\1\13"+
    "\1\24\1\14\36\24\1\25\1\23\2\24\1\14\1\26"+
    "\1\24\4\26\1\24\5\26\1\24\7\26\4\24\3\26"+
    "\3\24\1\27\1\23\1\24\1\30\1\14\1\31\1\32"+
    "\1\33\3\34\1\35\1\34\1\36\1\37\1\34\1\40"+
    "\1\41\3\34\1\42\1\43\2\34\1\30\1\44\2\30"+
    "\1\34\1\45\1\46\1\30\1\47\1\50\1\24\1\23"+
    "\1\30\1\24\1\14\1\51\1\24\1\52\3\53\1\54"+
    "\1\53\1\55\1\56\1\53\1\57\1\60\3\53\1\61"+
    "\1\62\2\53\1\24\1\63\2\24\1\53\1\64\1\65"+
    "\1\24\1\66\1\67\1\70\1\23\1\24\1\23\1\14"+
    "\41\23\1\24\1\14\1\71\1\24\1\72\3\71\1\24"+
    "\1\71\1\73\3\71\1\74\3\71\1\75\3\71\4\24"+
    "\2\71\1\76\1\24\1\66\1\67\1\77\1\23\2\24"+
    "\1\14\34\24\1\66\1\67\1\100\1\23\1\101\1\24"+
    "\1\14\26\24\1\102\7\24\1\103\1\23\2\24\1\14"+
    "\1\104\1\24\4\104\1\24\5\104\1\24\7\104\4\24"+
    "\3\104\3\24\1\105\1\23\1\24\50\0\1\106\50\0"+
    "\1\107\34\0\1\110\46\0\1\111\33\0\1\26\1\0"+
    "\4\26\1\0\5\26\1\0\7\26\4\0\4\26\7\0"+
    "\1\34\1\0\4\34\1\0\1\112\4\34\1\0\2\34"+
    "\1\113\2\34\1\114\1\34\1\115\1\116\1\117\1\0"+
    "\4\34\7\0\1\34\1\0\1\34\1\120\2\34\1\0"+
    "\5\34\1\0\7\34\1\115\1\116\1\117\1\0\4\34"+
    "\7\0\1\34\1\0\4\34\1\0\5\34\1\0\7\34"+
    "\1\115\1\116\1\117\1\0\4\34\13\0\1\121\36\0"+
    "\1\34\1\0\4\34\1\0\2\34\1\122\2\34\1\0"+
    "\7\34\1\115\1\116\1\117\1\0\4\34\7\0\1\34"+
    "\1\0\4\34\1\0\3\34\1\123\1\34\1\0\7\34"+
    "\1\115\1\116\1\117\1\0\4\34\7\0\1\34\1\0"+
    "\4\34\1\0\1\124\4\34\1\0\7\34\1\115\1\116"+
    "\1\117\1\0\4\34\12\0\1\125\37\0\1\34\1\0"+
    "\4\34\1\0\1\126\4\34\1\0\7\34\1\115\1\116"+
    "\1\117\1\0\4\34\7\0\1\34\1\0\4\34\1\0"+
    "\1\127\4\34\1\0\7\34\1\115\1\116\1\117\1\0"+
    "\4\34\7\0\1\130\1\0\4\130\1\0\5\130\1\0"+
    "\7\130\1\131\3\0\3\130\10\0\1\34\1\0\2\34"+
    "\1\132\1\34\1\0\5\34\1\0\7\34\1\115\1\116"+
    "\1\117\1\0\4\34\7\0\1\34\1\0\1\34\1\133"+
    "\2\34\1\0\5\34\1\0\7\34\1\115\1\116\1\117"+
    "\1\0\4\34\5\0\36\134\1\24\4\134\37\135\1\24"+
    "\3\135\2\0\1\53\1\0\4\53\1\0\1\136\4\53"+
    "\1\0\2\53\1\137\2\53\1\140\1\53\1\141\1\142"+
    "\1\143\1\0\4\53\7\0\1\53\1\0\1\53\1\144"+
    "\2\53\1\0\5\53\1\0\7\53\1\141\1\142\1\143"+
    "\1\0\4\53\7\0\1\53\1\0\4\53\1\0\5\53"+
    "\1\0\7\53\1\141\1\142\1\143\1\0\4\53\13\0"+
    "\1\145\36\0\1\53\1\0\4\53\1\0\2\53\1\146"+
    "\2\53\1\0\7\53\1\141\1\142\1\143\1\0\4\53"+
    "\7\0\1\53\1\0\4\53\1\0\3\53\1\147\1\53"+
    "\1\0\7\53\1\141\1\142\1\143\1\0\4\53\7\0"+
    "\1\53\1\0\4\53\1\0\1\150\4\53\1\0\7\53"+
    "\1\141\1\142\1\143\1\0\4\53\12\0\1\151\37\0"+
    "\1\53\1\0\4\53\1\0\1\152\4\53\1\0\7\53"+
    "\1\141\1\142\1\143\1\0\4\53\7\0\1\53\1\0"+
    "\4\53\1\0\1\153\4\53\1\0\7\53\1\141\1\142"+
    "\1\143\1\0\4\53\7\0\1\154\1\0\4\154\1\0"+
    "\5\154\1\0\7\154\1\155\3\0\3\154\10\0\1\53"+
    "\1\0\2\53\1\156\1\53\1\0\5\53\1\0\7\53"+
    "\1\141\1\142\1\143\1\0\4\53\7\0\1\53\1\0"+
    "\1\53\1\157\2\53\1\0\5\53\1\0\7\53\1\141"+
    "\1\142\1\143\1\0\4\53\7\0\1\71\1\0\4\71"+
    "\1\0\5\71\1\0\7\71\4\0\4\71\7\0\1\71"+
    "\1\0\1\71\1\160\2\71\1\0\5\71\1\0\7\71"+
    "\4\0\4\71\7\0\1\71\1\0\4\71\1\0\2\71"+
    "\1\161\2\71\1\0\7\71\4\0\4\71\12\0\1\162"+
    "\37\0\1\71\1\0\4\71\1\0\1\163\4\71\1\0"+
    "\7\71\4\0\4\71\7\0\1\71\1\0\1\71\1\164"+
    "\2\71\1\0\5\71\1\0\7\71\4\0\4\71\7\0"+
    "\1\104\1\0\4\104\1\0\5\104\1\0\7\104\4\0"+
    "\4\104\13\0\1\165\45\0\1\166\50\0\1\167\40\0"+
    "\1\170\27\0\1\34\1\0\4\34\1\0\5\34\1\0"+
    "\3\34\1\171\3\34\1\115\1\116\1\117\1\0\4\34"+
    "\7\0\1\34\1\0\4\34\1\0\5\34\1\0\4\34"+
    "\1\172\2\34\1\115\1\116\1\117\1\0\4\34\7\0"+
    "\1\34\1\0\4\34\1\0\5\34\1\0\2\34\1\173"+
    "\4\34\1\115\1\116\1\117\1\0\4\34\33\0\1\115"+
    "\1\116\13\0\31\117\1\115\11\117\2\0\1\34\1\0"+
    "\2\34\1\174\1\34\1\0\5\34\1\0\7\34\1\115"+
    "\1\116\1\117\1\0\4\34\14\0\1\175\35\0\1\34"+
    "\1\0\4\34\1\0\1\176\4\34\1\0\7\34\1\115"+
    "\1\116\1\117\1\0\4\34\7\0\1\34\1\0\4\34"+
    "\1\0\5\34\1\0\2\34\1\177\4\34\1\115\1\116"+
    "\1\117\1\0\4\34\7\0\1\34\1\0\1\34\1\200"+
    "\2\34\1\0\5\34\1\0\7\34\1\115\1\116\1\117"+
    "\1\0\4\34\24\0\1\201\25\0\1\34\1\0\4\34"+
    "\1\0\4\34\1\202\1\0\7\34\1\115\1\116\1\117"+
    "\1\0\4\34\7\0\1\34\1\0\4\34\1\0\5\34"+
    "\1\0\1\34\1\203\5\34\1\115\1\116\1\117\1\0"+
    "\4\34\7\0\1\130\1\0\4\130\1\0\5\130\1\0"+
    "\7\130\4\0\4\130\7\0\1\34\1\0\3\34\1\204"+
    "\1\0\5\34\1\0\7\34\1\115\1\116\1\117\1\0"+
    "\4\34\7\0\1\34\1\0\4\34\1\0\5\34\1\0"+
    "\1\205\6\34\1\115\1\116\1\117\1\0\4\34\7\0"+
    "\1\53\1\0\4\53\1\0\5\53\1\0\3\53\1\206"+
    "\3\53\1\141\1\142\1\143\1\0\4\53\7\0\1\53"+
    "\1\0\4\53\1\0\5\53\1\0\4\53\1\207\2\53"+
    "\1\141\1\142\1\143\1\0\4\53\7\0\1\53\1\0"+
    "\4\53\1\0\5\53\1\0\2\53\1\210\4\53\1\141"+
    "\1\142\1\143\1\0\4\53\33\0\1\141\1\142\13\0"+
    "\31\143\1\141\11\143\2\0\1\53\1\0\2\53\1\211"+
    "\1\53\1\0\5\53\1\0\7\53\1\141\1\142\1\143"+
    "\1\0\4\53\14\0\1\212\35\0\1\53\1\0\4\53"+
    "\1\0\1\213\4\53\1\0\7\53\1\141\1\142\1\143"+
    "\1\0\4\53\7\0\1\53\1\0\4\53\1\0\5\53"+
    "\1\0\2\53\1\214\4\53\1\141\1\142\1\143\1\0"+
    "\4\53\7\0\1\53\1\0\1\53\1\215\2\53\1\0"+
    "\5\53\1\0\7\53\1\141\1\142\1\143\1\0\4\53"+
    "\24\0\1\216\25\0\1\53\1\0\4\53\1\0\4\53"+
    "\1\217\1\0\7\53\1\141\1\142\1\143\1\0\4\53"+
    "\7\0\1\53\1\0\4\53\1\0\5\53\1\0\1\53"+
    "\1\220\5\53\1\141\1\142\1\143\1\0\4\53\7\0"+
    "\1\154\1\0\4\154\1\0\5\154\1\0\7\154\4\0"+
    "\4\154\7\0\1\53\1\0\3\53\1\221\1\0\5\53"+
    "\1\0\7\53\1\141\1\142\1\143\1\0\4\53\7\0"+
    "\1\53\1\0\4\53\1\0\5\53\1\0\1\222\6\53"+
    "\1\141\1\142\1\143\1\0\4\53\7\0\1\71\1\0"+
    "\2\71\1\223\1\71\1\0\5\71\1\0\7\71\4\0"+
    "\4\71\7\0\1\71\1\0\4\71\1\0\1\224\4\71"+
    "\1\0\7\71\4\0\4\71\24\0\1\225\25\0\1\71"+
    "\1\0\4\71\1\0\4\71\1\226\1\0\7\71\4\0"+
    "\4\71\7\0\1\71\1\0\4\71\1\0\5\71\1\0"+
    "\1\227\6\71\4\0\4\71\7\0\1\230\42\0\1\231"+
    "\15\0\1\232\35\0\1\233\34\0\1\234\37\0\1\34"+
    "\1\0\4\34\1\0\1\34\1\235\3\34\1\0\7\34"+
    "\1\115\1\116\1\117\1\0\4\34\7\0\1\34\1\0"+
    "\4\34\1\0\5\34\1\0\4\34\1\236\2\34\1\115"+
    "\1\116\1\117\1\0\4\34\7\0\1\34\1\0\4\34"+
    "\1\0\2\34\1\237\2\34\1\0\7\34\1\115\1\116"+
    "\1\117\1\0\4\34\7\0\1\240\1\0\4\34\1\0"+
    "\5\34\1\0\7\34\1\115\1\116\1\117\1\0\4\34"+
    "\21\0\1\241\30\0\1\242\1\0\4\34\1\0\5\34"+
    "\1\0\1\34\1\243\5\34\1\115\1\116\1\117\1\0"+
    "\4\34\7\0\1\34\1\0\4\34\1\0\5\34\1\0"+
    "\4\34\1\244\2\34\1\115\1\116\1\117\1\0\4\34"+
    "\7\0\1\34\1\0\4\34\1\0\5\34\1\0\1\245"+
    "\6\34\1\115\1\116\1\117\1\0\4\34\20\0\1\246"+
    "\31\0\1\34\1\0\1\34\1\247\2\34\1\0\5\34"+
    "\1\0\7\34\1\115\1\116\1\117\1\0\4\34\7\0"+
    "\1\34\1\0\4\34\1\250\5\34\1\0\7\34\1\115"+
    "\1\116\1\117\1\0\1\34\1\251\2\34\7\0\1\34"+
    "\1\0\4\34\1\0\3\34\1\252\1\34\1\0\7\34"+
    "\1\115\1\116\1\117\1\0\4\34\7\0\1\34\1\0"+
    "\4\34\1\0\2\34\1\253\2\34\1\0\7\34\1\115"+
    "\1\116\1\117\1\0\4\34\7\0\1\53\1\0\4\53"+
    "\1\0\1\53\1\254\3\53\1\0\7\53\1\141\1\142"+
    "\1\143\1\0\4\53\7\0\1\53\1\0\4\53\1\0"+
    "\5\53\1\0\4\53\1\255\2\53\1\141\1\142\1\143"+
    "\1\0\4\53\7\0\1\53\1\0\4\53\1\0\2\53"+
    "\1\256\2\53\1\0\7\53\1\141\1\142\1\143\1\0"+
    "\4\53\7\0\1\257\1\0\4\53\1\0\5\53\1\0"+
    "\7\53\1\141\1\142\1\143\1\0\4\53\21\0\1\260"+
    "\30\0\1\261\1\0\4\53\1\0\5\53\1\0\1\53"+
    "\1\262\5\53\1\141\1\142\1\143\1\0\4\53\7\0"+
    "\1\53\1\0\4\53\1\0\5\53\1\0\4\53\1\263"+
    "\2\53\1\141\1\142\1\143\1\0\4\53\7\0\1\53"+
    "\1\0\4\53\1\0\5\53\1\0\1\264\6\53\1\141"+
    "\1\142\1\143\1\0\4\53\20\0\1\265\31\0\1\53"+
    "\1\0\1\53\1\266\2\53\1\0\5\53\1\0\7\53"+
    "\1\141\1\142\1\143\1\0\4\53\7\0\1\53\1\0"+
    "\4\53\1\267\5\53\1\0\7\53\1\141\1\142\1\143"+
    "\1\0\1\53\1\270\2\53\7\0\1\53\1\0\4\53"+
    "\1\0\3\53\1\271\1\53\1\0\7\53\1\141\1\142"+
    "\1\143\1\0\4\53\7\0\1\53\1\0\4\53\1\0"+
    "\2\53\1\272\2\53\1\0\7\53\1\141\1\142\1\143"+
    "\1\0\4\53\7\0\1\273\1\0\4\71\1\0\5\71"+
    "\1\0\7\71\4\0\4\71\7\0\1\274\1\0\4\71"+
    "\1\0\5\71\1\0\1\71\1\275\5\71\4\0\4\71"+
    "\20\0\1\276\31\0\1\71\1\0\1\71\1\277\2\71"+
    "\1\0\5\71\1\0\7\71\4\0\4\71\7\0\1\71"+
    "\1\0\4\71\1\0\2\71\1\300\2\71\1\0\7\71"+
    "\4\0\4\71\14\0\1\301\47\0\1\302\41\0\1\303"+
    "\40\0\1\304\54\0\1\305\21\0\1\34\1\0\4\34"+
    "\1\0\5\34\1\0\4\34\1\306\2\34\1\115\1\116"+
    "\1\117\1\0\4\34\7\0\1\34\1\0\4\34\1\0"+
    "\5\34\1\0\2\34\1\307\4\34\1\115\1\116\1\117"+
    "\1\0\4\34\7\0\1\34\1\0\3\34\1\310\1\0"+
    "\5\34\1\0\7\34\1\115\1\116\1\117\1\0\4\34"+
    "\25\0\1\311\24\0\1\34\1\0\4\34\1\0\3\34"+
    "\1\312\1\34\1\0\7\34\1\115\1\116\1\117\1\0"+
    "\4\34\7\0\1\34\1\0\4\34\1\0\2\34\1\313"+
    "\2\34\1\0\7\34\1\115\1\116\1\117\1\0\4\34"+
    "\7\0\1\34\1\0\4\34\1\0\5\34\1\0\4\34"+
    "\1\314\2\34\1\115\1\116\1\117\1\0\4\34\16\0"+
    "\1\315\33\0\1\34\1\0\4\34\1\0\5\34\1\0"+
    "\4\34\1\316\2\34\1\115\1\116\1\117\1\0\4\34"+
    "\7\0\1\317\42\0\1\123\1\0\4\34\1\0\5\34"+
    "\1\0\7\34\1\115\1\116\1\117\1\0\4\34\7\0"+
    "\1\34\1\0\4\34\1\0\5\34\1\0\1\34\1\320"+
    "\5\34\1\115\1\116\1\117\1\0\4\34\7\0\1\34"+
    "\1\0\4\34\1\0\1\321\4\34\1\0\7\34\1\115"+
    "\1\116\1\117\1\0\4\34\7\0\1\53\1\0\4\53"+
    "\1\0\5\53\1\0\4\53\1\322\2\53\1\141\1\142"+
    "\1\143\1\0\4\53\7\0\1\53\1\0\4\53\1\0"+
    "\5\53\1\0\2\53\1\323\4\53\1\141\1\142\1\143"+
    "\1\0\4\53\7\0\1\53\1\0\3\53\1\324\1\0"+
    "\5\53\1\0\7\53\1\141\1\142\1\143\1\0\4\53"+
    "\25\0\1\325\24\0\1\53\1\0\4\53\1\0\3\53"+
    "\1\326\1\53\1\0\7\53\1\141\1\142\1\143\1\0"+
    "\4\53\7\0\1\53\1\0\4\53\1\0\2\53\1\327"+
    "\2\53\1\0\7\53\1\141\1\142\1\143\1\0\4\53"+
    "\7\0\1\53\1\0\4\53\1\0\5\53\1\0\4\53"+
    "\1\330\2\53\1\141\1\142\1\143\1\0\4\53\16\0"+
    "\1\331\33\0\1\53\1\0\4\53\1\0\5\53\1\0"+
    "\4\53\1\332\2\53\1\141\1\142\1\143\1\0\4\53"+
    "\7\0\1\333\42\0\1\147\1\0\4\53\1\0\5\53"+
    "\1\0\7\53\1\141\1\142\1\143\1\0\4\53\7\0"+
    "\1\53\1\0\4\53\1\0\5\53\1\0\1\53\1\334"+
    "\5\53\1\141\1\142\1\143\1\0\4\53\7\0\1\53"+
    "\1\0\4\53\1\0\1\335\4\53\1\0\7\53\1\141"+
    "\1\142\1\143\1\0\4\53\7\0\1\71\1\0\3\71"+
    "\1\336\1\0\5\71\1\0\7\71\4\0\4\71\7\0"+
    "\1\71\1\0\4\71\1\0\3\71\1\337\1\71\1\0"+
    "\7\71\4\0\4\71\7\0\1\71\1\0\4\71\1\0"+
    "\2\71\1\340\2\71\1\0\7\71\4\0\4\71\16\0"+
    "\1\341\33\0\1\71\1\0\4\71\1\0\5\71\1\0"+
    "\4\71\1\342\2\71\4\0\4\71\7\0\1\71\1\0"+
    "\4\71\1\0\1\343\4\71\1\0\7\71\4\0\4\71"+
    "\15\0\1\344\22\0\1\344\24\0\1\345\46\0\1\346"+
    "\26\0\1\347\51\0\1\350\30\0\1\34\1\0\4\34"+
    "\1\0\3\34\1\351\1\34\1\0\7\34\1\115\1\116"+
    "\1\117\1\0\4\34\7\0\1\352\1\0\4\34\1\0"+
    "\5\34\1\0\7\34\1\115\1\116\1\117\1\0\4\34"+
    "\7\0\1\34\1\0\4\34\1\353\5\34\1\0\7\34"+
    "\1\115\1\116\1\117\1\0\1\34\1\354\2\34\21\0"+
    "\1\355\30\0\1\34\1\0\4\34\1\0\4\34\1\356"+
    "\1\0\7\34\1\115\1\116\1\117\1\0\4\34\7\0"+
    "\1\34\1\0\4\34\1\0\5\34\1\0\2\34\1\357"+
    "\4\34\1\115\1\116\1\117\1\0\4\34\7\0\1\34"+
    "\1\0\4\34\1\0\3\34\1\360\1\34\1\0\7\34"+
    "\1\115\1\116\1\117\1\0\4\34\12\0\1\361\37\0"+
    "\1\34\1\0\4\34\1\0\3\34\1\362\1\34\1\0"+
    "\7\34\1\115\1\116\1\117\1\0\4\34\26\0\1\363"+
    "\23\0\1\34\1\0\4\34\1\0\3\34\1\364\1\34"+
    "\1\0\7\34\1\115\1\116\1\117\1\0\4\34\7\0"+
    "\1\34\1\0\1\34\1\365\2\34\1\0\5\34\1\0"+
    "\7\34\1\115\1\116\1\117\1\0\4\34\7\0\1\53"+
    "\1\0\4\53\1\0\3\53\1\366\1\53\1\0\7\53"+
    "\1\141\1\142\1\143\1\0\4\53\7\0\1\367\1\0"+
    "\4\53\1\0\5\53\1\0\7\53\1\141\1\142\1\143"+
    "\1\0\4\53\7\0\1\53\1\0\4\53\1\370\5\53"+
    "\1\0\7\53\1\141\1\142\1\143\1\0\1\53\1\371"+
    "\2\53\21\0\1\372\30\0\1\53\1\0\4\53\1\0"+
    "\4\53\1\373\1\0\7\53\1\141\1\142\1\143\1\0"+
    "\4\53\7\0\1\53\1\0\4\53\1\0\5\53\1\0"+
    "\2\53\1\374\4\53\1\141\1\142\1\143\1\0\4\53"+
    "\7\0\1\53\1\0\4\53\1\0\3\53\1\375\1\53"+
    "\1\0\7\53\1\141\1\142\1\143\1\0\4\53\12\0"+
    "\1\376\37\0\1\53\1\0\4\53\1\0\3\53\1\377"+
    "\1\53\1\0\7\53\1\141\1\142\1\143\1\0\4\53"+
    "\26\0\1\u0100\23\0\1\53\1\0\4\53\1\0\3\53"+
    "\1\u0101\1\53\1\0\7\53\1\141\1\142\1\143\1\0"+
    "\4\53\7\0\1\53\1\0\1\53\1\u0102\2\53\1\0"+
    "\5\53\1\0\7\53\1\141\1\142\1\143\1\0\4\53"+
    "\7\0\1\71\1\0\4\71\1\u0103\5\71\1\0\7\71"+
    "\4\0\1\71\1\u0104\2\71\7\0\1\71\1\0\4\71"+
    "\1\0\4\71\1\u0105\1\0\7\71\4\0\4\71\7\0"+
    "\1\71\1\0\4\71\1\0\5\71\1\0\2\71\1\u0106"+
    "\4\71\4\0\4\71\12\0\1\u0107\37\0\1\71\1\0"+
    "\4\71\1\0\3\71\1\u0108\1\71\1\0\7\71\4\0"+
    "\4\71\7\0\1\71\1\0\1\71\1\u0109\2\71\1\0"+
    "\5\71\1\0\7\71\4\0\4\71\16\0\1\u010a\36\0"+
    "\1\u010b\57\0\1\350\27\0\1\u010c\35\0\1\34\1\0"+
    "\4\34\1\0\5\34\1\0\6\34\1\244\1\115\1\116"+
    "\1\117\1\0\4\34\7\0\1\34\1\0\3\34\1\320"+
    "\1\0\5\34\1\0\7\34\1\115\1\116\1\117\1\0"+
    "\4\34\16\0\1\u010d\33\0\1\34\1\0\4\34\1\0"+
    "\1\u010e\4\34\1\0\7\34\1\115\1\116\1\117\1\0"+
    "\4\34\20\0\1\u010f\31\0\1\34\1\0\1\34\1\u0110"+
    "\2\34\1\0\5\34\1\0\7\34\1\115\1\116\1\117"+
    "\1\0\4\34\7\0\1\34\1\0\4\34\1\0\5\34"+
    "\1\0\3\34\1\362\3\34\1\115\1\116\1\117\1\0"+
    "\4\34\7\0\1\34\1\0\4\34\1\0\5\34\1\0"+
    "\7\34\1\u0111\1\116\1\117\1\0\4\34\14\0\1\u0112"+
    "\56\0\1\u010f\21\0\1\34\1\0\4\34\1\0\2\34"+
    "\1\244\2\34\1\0\7\34\1\115\1\116\1\117\1\0"+
    "\4\34\7\0\1\34\1\0\3\34\1\u0113\1\0\5\34"+
    "\1\0\7\34\1\115\1\116\1\117\1\0\4\34\7\0"+
    "\1\53\1\0\4\53\1\0\5\53\1\0\6\53\1\263"+
    "\1\141\1\142\1\143\1\0\4\53\7\0\1\53\1\0"+
    "\3\53\1\334\1\0\5\53\1\0\7\53\1\141\1\142"+
    "\1\143\1\0\4\53\16\0\1\u0114\33\0\1\53\1\0"+
    "\4\53\1\0\1\u0115\4\53\1\0\7\53\1\141\1\142"+
    "\1\143\1\0\4\53\20\0\1\u0116\31\0\1\53\1\0"+
    "\1\53\1\u0117\2\53\1\0\5\53\1\0\7\53\1\141"+
    "\1\142\1\143\1\0\4\53\7\0\1\53\1\0\4\53"+
    "\1\0\5\53\1\0\3\53\1\377\3\53\1\141\1\142"+
    "\1\143\1\0\4\53\7\0\1\53\1\0\4\53\1\0"+
    "\5\53\1\0\7\53\1\u0118\1\142\1\143\1\0\4\53"+
    "\14\0\1\u0119\56\0\1\u0116\21\0\1\53\1\0\4\53"+
    "\1\0\2\53\1\263\2\53\1\0\7\53\1\141\1\142"+
    "\1\143\1\0\4\53\7\0\1\53\1\0\3\53\1\u011a"+
    "\1\0\5\53\1\0\7\53\1\141\1\142\1\143\1\0"+
    "\4\53\16\0\1\u011b\33\0\1\71\1\0\4\71\1\0"+
    "\1\u011c\4\71\1\0\7\71\4\0\4\71\7\0\1\71"+
    "\1\0\1\71\1\u011d\2\71\1\0\5\71\1\0\7\71"+
    "\4\0\4\71\7\0\1\71\1\0\4\71\1\0\5\71"+
    "\1\0\3\71\1\u0108\3\71\4\0\4\71\14\0\1\u011e"+
    "\35\0\1\71\1\0\3\71\1\u011f\1\0\5\71\1\0"+
    "\7\71\4\0\4\71\13\0\1\350\47\0\1\305\37\0"+
    "\1\u0120\22\0\1\u0120\15\0\1\u0121\36\0\1\34\1\0"+
    "\2\34\1\362\1\34\1\0\5\34\1\0\7\34\1\115"+
    "\1\116\1\117\1\0\4\34\7\0\1\34\1\0\4\34"+
    "\1\0\2\34\1\316\2\34\1\0\7\34\1\115\1\116"+
    "\1\117\1\0\4\34\17\0\1\u0122\13\0\1\u0111\1\116"+
    "\23\0\1\u0123\22\0\1\u0123\11\0\1\34\1\0\4\34"+
    "\1\u0123\5\34\1\0\7\34\1\115\1\116\1\117\1\0"+
    "\1\34\1\u0124\2\34\13\0\1\u0125\36\0\1\53\1\0"+
    "\2\53\1\377\1\53\1\0\5\53\1\0\7\53\1\141"+
    "\1\142\1\143\1\0\4\53\7\0\1\53\1\0\4\53"+
    "\1\0\2\53\1\332\2\53\1\0\7\53\1\141\1\142"+
    "\1\143\1\0\4\53\17\0\1\u0126\13\0\1\u0118\1\142"+
    "\23\0\1\u0127\22\0\1\u0127\11\0\1\53\1\0\4\53"+
    "\1\u0127\5\53\1\0\7\53\1\141\1\142\1\143\1\0"+
    "\1\53\1\u0128\2\53\13\0\1\u0129\36\0\1\71\1\0"+
    "\2\71\1\u0108\1\71\1\0\5\71\1\0\7\71\4\0"+
    "\4\71\7\0\1\71\1\0\4\71\1\0\2\71\1\342"+
    "\2\71\1\0\7\71\4\0\4\71\15\0\1\u012a\22\0"+
    "\1\u012a\11\0\1\71\1\0\4\71\1\u012a\5\71\1\0"+
    "\7\71\4\0\1\71\1\u012b\2\71\13\0\1\305\47\0"+
    "\1\u012c\35\0\1\u012d\36\0\1\34\1\0\2\34\1\316"+
    "\1\34\1\0\5\34\1\0\7\34\1\115\1\116\1\117"+
    "\1\0\4\34\20\0\1\u012e\35\0\1\u012f\36\0\1\53"+
    "\1\0\2\53\1\332\1\53\1\0\5\53\1\0\7\53"+
    "\1\141\1\142\1\143\1\0\4\53\13\0\1\u0130\36\0"+
    "\1\71\1\0\2\71\1\342\1\71\1\0\5\71\1\0"+
    "\7\71\4\0\4\71\21\0\1\u0131\42\0\1\u0121\42\0"+
    "\1\u0132\42\0\1\u0125\42\0\1\u0129\30\0\1\u0133\42\0"+
    "\1\u0134\50\0\1\u0135\22\0\1\u0135\17\0\1\u0136\22\0"+
    "\1\u0136\25\0\1\u0137\15\0\1\u0137\24\0\1\u0138\15\0"+
    "\1\u0138\16\0\1\u0139\22\0\1\u0139\17\0\1\u013a\22\0"+
    "\1\u013a\20\0\1\u013b\42\0\1\u013c\37\0\1\u010f\42\0"+
    "\1\u0116\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9765];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\3\11\4\1\4\11\1\1\2\11\1\1\1\11"+
    "\35\1\1\11\6\1\5\11\1\1\1\11\4\0\3\1"+
    "\1\0\1\11\1\0\1\1\1\0\3\1\1\0\3\1"+
    "\1\0\2\1\2\0\3\1\1\0\1\11\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\4\1\1\0\2\1"+
    "\4\0\4\1\1\0\3\1\1\0\10\1\1\0\3\1"+
    "\1\0\6\1\1\0\2\1\5\0\4\1\1\0\4\1"+
    "\1\0\1\1\1\0\7\1\1\0\4\1\1\0\1\1"+
    "\1\0\6\1\1\0\2\1\5\0\3\1\1\0\3\1"+
    "\1\0\1\1\1\0\5\1\1\0\3\1\1\0\1\1"+
    "\1\0\5\1\1\0\2\1\4\0\1\11\2\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\0\2\1\4\0\1\1\1\11\1\1\2\0"+
    "\1\1\1\0\1\1\1\11\1\1\2\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\11\2\0\1\1\1\11"+
    "\2\0\1\1\1\11\1\0\1\1\21\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	private static final Logger LOGGER = Logger.getLogger(COMDATAInvariant.class.getName());
	
	String location = "MAIN PROGRAM";
	
	List<String> variables = new LinkedList<String>();
	//mantis 322 use to keep used variables
	List<String> usedVariables = new LinkedList<String>();
	List<String> locations = new LinkedList<String>();
	List<Integer> errors   = new LinkedList<Integer>();
	
	String parsedFileName;
	
	public COMDATAInvariant(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
		this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
	private void checkVar(String word) {
        LOGGER.finest("begin method checkVar");
		if (word.contains("(")) word = word.split("\\(")[0];
		int index = variables.lastIndexOf(word);
		if (index != -1) {
			variables.remove(index);
			locations.remove(index);
			errors.remove(index);
		}
        LOGGER.finest("end method checkVar");
		yybegin(FUNCTION);
	}
	
	private void printError() throws JFlexException {
        LOGGER.finest("begin method printError");
		for(int i=0; i < locations.size(); i++) {
			if(usedVariables.contains(variables.get(i))){
		        LOGGER.fine("Setting error line "+errors.get(i)+" for the variable "+variables.get(i)+".");
				setError(locations.get(i),"The variable " + variables.get(i) + " must be defined as constant.", errors.get(i));
            }		
		}
        LOGGER.finest("end method printError");
	}

	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMDATAInvariant(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	printError();
	
return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 34: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\")");
                				    yybegin(COMMENT);
            }
          case 35: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 36: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 37: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+yyline+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 38: break;
          case 6: 
            { 
            }
          case 39: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n)");
                                    yybegin(NEW_LINE);
            }
          case 40: break;
          case 8: 
            { location = location + " " + yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\")");
                                    yybegin(COMMENT);
            }
          case 41: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n)");
                                    yybegin(NEW_LINE);
            }
          case 42: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 43: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 44: break;
          case 12: 
            { String var = yytext().trim();usedVariables.add(var);
            }
          case 45: break;
          case 13: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 46: break;
          case 14: 
            { variables.add(yytext());
								 locations.add(location);
								 errors.add(yyline+1);
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> WAIT_DECL (Transition : VAR \""+yytext()+"\" )");
								 yybegin(WAIT_DECL);
            }
          case 47: break;
          case 15: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 48: break;
          case 16: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - WAIT_DECL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 49: break;
          case 17: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - WAIT_DECL -> DECLARATION (Transition : [,] )");
                                    yybegin(DECLARATION);
            }
          case 50: break;
          case 18: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - FUNC_DEC -> FUNCTION (Transition : [(] )");
                                    yybegin(FUNCTION);
            }
          case 51: break;
          case 19: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - FUNC_DEC -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 52: break;
          case 20: 
            { String var = yytext().trim();usedVariables.add(var);checkVar(var);
            }
          case 53: break;
          case 21: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - FUNCTION -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 54: break;
          case 22: 
            { String var = yytext().substring(0, yytext().length()-1).trim();
                                    usedVariables.add(var);
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> FUNCTION (Transition : VAR_MODIF ) by running checkVar("+var+")");
                                    checkVar(var);
            }
          case 55: break;
          case 23: 
            { String var = yytext().substring(1).trim();
                                    usedVariables.add(var);		
                                    if(!variables.contains(var)){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> FUNC_DEC (Transition : FUNC_CALL \""+yytext()+"\" )");
                                        yybegin(FUNC_DEC);
                                    }
            }
          case 56: break;
          case 24: 
            { String var = yytext().substring(0, yytext().length()-1).trim(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> FUNCTION (Transition : VAR_MODIF ) by running checkVar("+var+")");
                                    checkVar(var);
            }
          case 57: break;
          case 25: 
            { String var = yytext().substring(1).trim();
                                    if(!variables.contains(var)){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> FUNC_DEC (Transition : FUNC_CALL \""+yytext()+"\" )");
                                        yybegin(FUNC_DEC);
                                    }
            }
          case 58: break;
          case 26: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> FUNC_DEC (Transition : CALL \""+yytext()+"\" )");
                                    yybegin(FUNC_DEC);
            }
          case 59: break;
          case 27: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> DECLARATION (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 60: break;
          case 28: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> FUNC_DEC (Transition : CALL \""+yytext()+"\" )");
                                    yybegin(FUNC_DEC);
            }
          case 61: break;
          case 29: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> DECLARATION (Transition : DATA_TYPE \""+yytext()+"\" )");
                                    yybegin(DECLARATION);
            }
          case 62: break;
          case 30: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 63: break;
          case 31: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    location = yytext();
                                    yybegin(NAMING);
            }
          case 64: break;
          case 32: 
            { location=yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 65: break;
          case 33: 
            { location=yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - DECLARATION -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
