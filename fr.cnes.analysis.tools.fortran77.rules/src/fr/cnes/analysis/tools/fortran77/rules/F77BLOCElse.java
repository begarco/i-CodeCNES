/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F77.BLOC.Else rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77BLOCElse.lex</tt>
 */
public class F77BLOCElse extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int ELSE_LINE = 10;
  public static final int IFLINE = 12;
  public static final int ENDLINE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\54\1\55\1\55\1\55\22\0\1\56\1\1\1\50"+
    "\4\0\1\47\2\0\1\4\5\0\12\51\7\0\1\36\1\32\1\3"+
    "\1\24\1\23\1\5\1\35\1\53\1\11\2\45\1\43\1\37\1\7"+
    "\1\12\1\21\1\45\1\22\1\31\1\10\1\6\5\45\4\0\1\46"+
    "\1\0\1\41\1\34\1\2\1\30\1\27\1\13\1\40\1\52\1\17"+
    "\2\45\1\44\1\42\1\15\1\20\1\25\1\45\1\26\1\33\1\16"+
    "\1\14\5\45\12\0\1\55\u1fa2\0\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\16\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\3\13\20\12\23\14\1\6"+
    "\1\15\2\6\1\16\2\6\1\17\3\20\1\21\1\0"+
    "\1\22\2\0\1\23\6\0\1\24\4\0\1\25\4\0"+
    "\1\26\10\0\1\27\4\0\1\30\15\0\1\31\21\0"+
    "\1\32\14\0\1\33\33\0\1\34\14\0\1\35\6\0"+
    "\1\36\1\37\52\0\1\40\12\0\1\41\12\0\1\42"+
    "\34\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u0178\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0178\0\u0178\0\u0178\0\u0178\0\u0439\0\u0178\0\u0178"+
    "\0\u0468\0\u0497\0\u0178\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\u0729\0\u0758\0\u0787\0\u0178\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u05e0\0\u092e\0\u095d\0\u066d"+
    "\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0178"+
    "\0\u0ad5\0\u0b04\0\u0178\0\u0b33\0\u0b62\0\u0178\0\u0178\0\u0b91"+
    "\0\u0bc0\0\u0178\0\u0bef\0\u0178\0\u0c1e\0\u0c4d\0\u0178\0\u0c7c"+
    "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u03db\0\u0178\0\u040a\0\u0d67"+
    "\0\u0d96\0\u0dc5\0\u0178\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0178"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0758"+
    "\0\u0178\0\u0787\0\u0ff9\0\u1028\0\u1057\0\u0178\0\u1086\0\u10b5"+
    "\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u0a48\0\u0a77\0\u0178\0\u128b\0\u12ba\0\u12e9\0\u1318"+
    "\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490"+
    "\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u0178\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751"+
    "\0\u1780\0\u17af\0\u0178\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a"+
    "\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12"+
    "\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u0178\0\u1cd3"+
    "\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b"+
    "\0\u1e7a\0\u1ea9\0\u1ed8\0\u0178\0\u1f07\0\u1f36\0\u1f65\0\u1f94"+
    "\0\u1fc3\0\u1ff2\0\u0178\0\u0178\0\u2021\0\u2050\0\u207f\0\u20ae"+
    "\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226"+
    "\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e"+
    "\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516"+
    "\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e"+
    "\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779\0\u27a8\0\u0178\0\u27d7"+
    "\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f"+
    "\0\u297e\0\u0178\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98"+
    "\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u0178\0\u2b83\0\u2bb2\0\u2be1"+
    "\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59"+
    "\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1"+
    "\0\u2f00\0\u2f2f\0\u2f5e\0\u2f8d\0\u2fbc\0\u2feb\0\u301a\0\u3049"+
    "\0\u3078";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\3\13\1\14\3\11\1\15\1\11\1\16"+
    "\3\11\1\17\1\11\1\20\2\11\1\21\1\22\2\11"+
    "\1\23\1\24\1\11\1\25\3\11\1\26\2\11\1\27"+
    "\4\11\1\30\1\31\3\11\1\32\1\33\1\11\1\34"+
    "\1\12\52\34\1\35\1\33\2\34\1\12\2\36\1\34"+
    "\41\36\4\34\2\36\1\37\1\33\1\34\1\40\1\12"+
    "\1\41\1\42\1\43\1\44\3\40\1\45\1\40\1\46"+
    "\3\40\1\47\1\40\1\50\1\40\1\51\1\52\1\53"+
    "\1\40\1\54\1\55\1\56\1\40\1\57\3\40\1\60"+
    "\2\40\1\61\4\40\1\62\1\63\3\40\1\34\1\33"+
    "\1\40\1\64\1\12\1\65\1\66\1\64\1\67\3\64"+
    "\1\70\1\64\1\71\3\64\1\72\1\64\1\73\1\64"+
    "\1\74\1\75\1\76\1\64\1\77\1\100\1\101\1\64"+
    "\1\102\3\64\1\103\2\64\1\104\4\64\1\105\1\106"+
    "\1\107\2\64\1\110\1\64\2\34\1\12\7\34\1\111"+
    "\5\34\1\112\34\34\1\113\1\33\2\34\1\12\6\34"+
    "\1\114\5\34\1\115\35\34\1\116\1\33\1\34\1\117"+
    "\1\12\3\117\1\120\5\117\1\121\40\117\1\122\1\33"+
    "\1\117\65\0\1\123\55\0\1\124\65\0\1\125\55\0"+
    "\1\124\65\0\1\126\46\0\1\127\72\0\1\130\50\0"+
    "\1\127\44\0\1\131\64\0\1\132\54\0\1\133\64\0"+
    "\1\134\36\0\47\135\1\136\7\135\50\137\1\136\6\137"+
    "\2\0\2\36\1\0\42\36\2\0\3\36\23\0\1\140"+
    "\50\0\1\141\52\0\1\142\55\0\1\143\65\0\1\144"+
    "\55\0\1\143\65\0\1\145\43\0\1\146\33\0\1\147"+
    "\25\0\1\150\72\0\1\151\45\0\1\152\26\0\1\153"+
    "\32\0\1\150\44\0\1\154\64\0\1\155\54\0\1\156"+
    "\64\0\1\157\36\0\47\160\1\161\7\160\50\162\1\161"+
    "\6\162\20\0\1\163\50\0\1\164\52\0\1\165\55\0"+
    "\1\166\65\0\1\167\55\0\1\166\65\0\1\170\43\0"+
    "\1\171\33\0\1\172\41\0\1\173\45\0\1\174\26\0"+
    "\1\175\20\0\1\176\64\0\1\177\54\0\1\200\64\0"+
    "\1\201\36\0\47\202\1\34\7\202\50\203\1\34\6\203"+
    "\51\0\1\107\12\0\1\204\64\0\1\204\116\0\1\205"+
    "\55\0\1\206\15\0\1\207\64\0\1\210\46\0\1\211"+
    "\64\0\1\212\53\0\1\213\64\0\1\214\70\0\1\215"+
    "\60\0\1\216\46\0\1\217\62\0\1\220\43\0\1\221"+
    "\50\0\1\222\56\0\1\223\64\0\1\224\53\0\1\225"+
    "\70\0\1\226\63\0\1\227\45\0\1\230\66\0\1\226"+
    "\61\0\1\231\55\0\1\232\60\0\1\233\46\0\1\234"+
    "\62\0\1\235\43\0\1\236\50\0\1\237\56\0\1\240"+
    "\64\0\1\241\53\0\1\242\70\0\1\243\63\0\1\244"+
    "\45\0\1\245\66\0\1\243\61\0\1\246\55\0\1\247"+
    "\60\0\1\250\46\0\1\251\62\0\1\252\51\0\1\253"+
    "\62\0\1\254\72\0\1\255\57\0\1\256\15\0\1\257"+
    "\55\0\1\260\57\0\1\261\31\0\1\262\23\0\1\263"+
    "\35\0\1\264\40\0\1\265\62\0\1\266\36\0\1\267"+
    "\64\0\1\270\60\0\1\271\50\0\1\272\51\0\1\273"+
    "\55\0\1\274\57\0\1\275\31\0\1\276\44\0\1\277"+
    "\35\0\1\300\35\0\1\301\45\0\1\277\51\0\1\302"+
    "\62\0\1\303\36\0\1\304\64\0\1\305\60\0\1\306"+
    "\50\0\1\307\51\0\1\310\55\0\1\311\57\0\1\312"+
    "\31\0\1\313\44\0\1\314\35\0\1\315\35\0\1\316"+
    "\45\0\1\314\51\0\1\317\62\0\1\320\36\0\1\321"+
    "\64\0\1\322\51\0\1\323\64\0\1\323\64\0\1\324"+
    "\62\0\1\324\37\0\1\325\64\0\1\326\63\0\1\327"+
    "\55\0\1\330\63\0\1\331\55\0\1\332\42\0\1\333"+
    "\64\0\1\334\101\0\1\335\57\0\1\336\31\0\1\337"+
    "\50\0\1\340\55\0\1\341\64\0\1\342\63\0\1\343"+
    "\55\0\1\344\63\0\1\345\55\0\1\346\42\0\1\347"+
    "\64\0\1\350\101\0\1\351\57\0\1\352\31\0\1\353"+
    "\50\0\1\354\55\0\1\355\64\0\1\356\63\0\1\357"+
    "\55\0\1\360\63\0\1\361\55\0\1\362\42\0\1\363"+
    "\64\0\1\364\101\0\1\365\57\0\1\366\23\0\1\367"+
    "\64\0\1\370\63\0\1\371\70\0\1\372\50\0\1\373"+
    "\67\0\1\374\23\0\1\375\64\0\1\376\65\0\1\377"+
    "\62\0\1\377\44\0\1\u0100\50\0\1\u0101\60\0\1\u0102"+
    "\64\0\1\u0103\63\0\1\u0104\70\0\1\u0105\50\0\1\u0106"+
    "\67\0\1\u0107\23\0\1\u0108\64\0\1\u0109\65\0\1\u010a"+
    "\62\0\1\u010a\44\0\1\u010b\50\0\1\u010c\60\0\1\u010d"+
    "\64\0\1\u010e\63\0\1\u010f\70\0\1\u0110\50\0\1\u0111"+
    "\67\0\1\u0112\23\0\1\u0113\64\0\1\u0114\65\0\1\u0115"+
    "\62\0\1\u0115\41\0\1\u0116\64\0\1\u0117\44\0\1\u0118"+
    "\107\0\1\377\33\0\1\u0119\104\0\1\377\24\0\1\u011a"+
    "\64\0\1\u011b\54\0\1\u011c\50\0\1\u011d\62\0\1\u011e"+
    "\64\0\1\u011f\44\0\1\u0120\107\0\1\u010a\33\0\1\u0121"+
    "\104\0\1\u010a\24\0\1\u0122\64\0\1\u0123\54\0\1\u0124"+
    "\50\0\1\u0125\62\0\1\u0126\64\0\1\u0127\44\0\1\u0128"+
    "\107\0\1\u0115\33\0\1\u0129\104\0\1\u0115\24\0\1\u012a"+
    "\64\0\1\u012b\47\0\1\377\64\0\1\377\63\0\1\335"+
    "\62\0\1\336\41\0\1\u012c\64\0\1\u012d\66\0\1\226"+
    "\52\0\1\226\42\0\1\u010a\64\0\1\u010a\63\0\1\351"+
    "\62\0\1\352\41\0\1\u012e\64\0\1\u012f\66\0\1\243"+
    "\52\0\1\243\42\0\1\u0115\64\0\1\u0115\63\0\1\365"+
    "\62\0\1\366\41\0\1\u0130\64\0\1\u0131\46\0\1\335"+
    "\64\0\1\336\50\0\1\351\64\0\1\352\50\0\1\365"+
    "\64\0\1\366\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12455];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\3\11\16\1\4\11\1\1\2\11\2\1\1\11"+
    "\20\1\1\11\23\1\1\11\2\1\1\11\2\1\2\11"+
    "\2\1\1\11\1\0\1\11\2\0\1\11\6\0\1\11"+
    "\4\0\1\11\4\0\1\11\10\0\1\11\4\0\1\11"+
    "\15\0\1\11\21\0\1\11\14\0\1\11\33\0\1\11"+
    "\14\0\1\11\6\0\2\11\52\0\1\11\12\0\1\11"+
    "\12\0\1\11\34\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(F77BLOCElse.class.getName());

	String location = "MAIN PROGRAM";
    String parsedFileName;
	
	
	public F77BLOCElse() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
        this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	List<String> identifiers = new LinkedList<String>();
	List<Boolean> elseFound = new LinkedList<Boolean>();
	int LAST_STATE = LINE;
	
	private void checkIdentifier(final List<String> identifiers, final List<Boolean> elseFound) throws JFlexException {
		if (!identifiers.isEmpty()){
			int idLength = identifiers.size();
			if (identifiers.get(idLength-1).equals("IF")){
				int elseLength = elseFound.size();
				if (!elseFound.isEmpty() && !elseFound.get(elseLength-1)) {
					LOGGER.fine("Setting error line "+(yyline+1)+" because the IF instruction shall finish with an ELSE after the last ELSE IF.");
					this.setError(location,"The IF instruction shall finish with an ELSE after the last ELSE IF.", yyline + 1);
				}
				elseFound.remove(elseLength-1);
			}
			identifiers.remove(idLength-1);
		}
		yybegin(COMMENT);
	}
	
	private void setElse(List<Boolean> elseFound, boolean value) {
		if (!elseFound.isEmpty()) {
			elseFound.set(elseFound.size()-1, value);
		}
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77BLOCElse(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ENDLINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 35: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\" )");
                    				yybegin(COMMENT);
            }
          case 36: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 37: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ENDLINE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 38: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 39: break;
          case 6: 
            { 
            }
          case 40: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 41: break;
          case 8: 
            { location = location + " " + yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
								    yybegin(COMMENT);
            }
          case 42: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 43: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 44: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 45: break;
          case 12: 
            { if (yycolumn == 5){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> LAST_STATE (Transition : [^ \\t])");
                                        yybegin(LAST_STATE);
                                    }
            }
          case 46: break;
          case 13: 
            { LAST_STATE = LINE;
								    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
								    yybegin(NEW_LINE);
            }
          case 47: break;
          case 14: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ELSE_LINE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 48: break;
          case 15: 
            { LAST_STATE = IFLINE;
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - IFLINE -> LINE (Transition : \\n )");
								 yybegin(NEW_LINE);
            }
          case 49: break;
          case 16: 
            { checkIdentifier(identifiers, elseFound);
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ENDLINE -> COMMENT (Transition : . )");
								 yybegin(COMMENT);
            }
          case 50: break;
          case 17: 
            { checkIdentifier(identifiers, elseFound);
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ENDLINE -> COMMENT (Transition : \\n )");
								 yybegin(NEW_LINE);
            }
          case 51: break;
          case 18: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> IFLINE (Transition : IF \""+yytext()+"\" )");
                                    yybegin(IFLINE);
            }
          case 52: break;
          case 19: 
            { identifiers.add("DO");
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : DO \""+yytext()+"\" )");
								    yybegin(LINE);
            }
          case 53: break;
          case 20: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : STRING \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 54: break;
          case 21: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> IFLINE (Transition : IF \""+yytext()+"\" )");
                                    yybegin(IFLINE);
            }
          case 55: break;
          case 22: 
            { identifiers.add("DO");
            }
          case 56: break;
          case 23: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : STRING \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 57: break;
          case 24: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> IFLINE (Transition : IF \""+yytext()+"\" )");
                                    yybegin(IFLINE);
            }
          case 58: break;
          case 25: 
            { setElse(elseFound, false);
            }
          case 59: break;
          case 26: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> ENDLINE (Transition : END or CONT \""+yytext()+"\" )");
                                    yybegin(ENDLINE);
            }
          case 60: break;
          case 27: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> ENDLINE (Transition : END or CONT \""+yytext()+"\" )");
                                    yybegin(ENDLINE);
            }
          case 61: break;
          case 28: 
            { setElse(elseFound, true);
								    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> ELSE_LINE (Transition : RULE_WORD \""+yytext()+"\" )");
								    yybegin(ELSE_LINE);
            }
          case 62: break;
          case 29: 
            { setElse(elseFound, true);
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> ELSE_LINE (Transition : RULE_WORD \""+yytext()+"\" )");
								 yybegin(ELSE_LINE);
            }
          case 63: break;
          case 30: 
            { identifiers.add("IF");
								 elseFound.add(true);
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - IFLINE -> LINE (Transition : THEN \""+yytext()+"\" )");
								 yybegin(LINE);
            }
          case 64: break;
          case 31: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ENDLINE -> COMMENT (Transition : FILE \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 65: break;
          case 32: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
								    yybegin(NAMING);
            }
          case 66: break;
          case 33: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
    								yybegin(NAMING);
            }
          case 67: break;
          case 34: 
            { location = yytext();
								    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
								    yybegin(NAMING);
            }
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
