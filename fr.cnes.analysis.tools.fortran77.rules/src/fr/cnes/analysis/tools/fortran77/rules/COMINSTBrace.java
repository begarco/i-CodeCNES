/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.INST.Brace rule.		*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMINSTBrace.lex</tt>
 */
public class COMINSTBrace extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int AVOID = 10;
  public static final int FUNC = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\4\1\51\1\50\1\50\22\0\1\42\1\1\1\46"+
    "\1\34\1\36\1\0\1\35\1\45\1\52\1\53\1\3\1\26\1\54"+
    "\1\27\1\30\1\25\12\43\7\0\1\22\1\20\1\2\1\16\1\15"+
    "\1\5\1\21\1\37\1\40\2\37\1\24\1\23\1\7\1\12\1\13"+
    "\1\31\1\14\1\41\1\10\1\6\1\32\1\37\1\33\2\37\4\0"+
    "\1\44\1\0\1\22\1\20\1\2\1\16\1\15\1\5\1\21\1\37"+
    "\1\40\2\37\1\24\1\23\1\7\1\12\1\13\1\31\1\14\1\41"+
    "\1\10\1\6\1\32\1\37\1\33\2\37\3\0\1\36\6\0\1\51"+
    "\252\0\2\11\115\0\1\17\u1ea8\0\1\51\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\4\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\3\13\1\7\5\5\1\12"+
    "\1\5\2\14\1\12\1\15\1\16\1\5\1\17\1\5"+
    "\2\12\1\20\1\21\1\22\1\23\1\5\1\24\1\25"+
    "\4\5\1\23\1\5\2\24\1\23\1\26\1\5\2\23"+
    "\1\27\1\30\1\31\1\32\1\23\1\33\4\0\5\5"+
    "\2\0\1\5\1\34\6\0\2\5\1\0\1\5\1\0"+
    "\1\35\1\0\1\5\1\0\4\5\2\0\1\5\6\0"+
    "\2\5\6\0\5\5\2\0\1\5\5\0\2\5\1\0"+
    "\1\5\2\0\4\5\2\0\1\5\5\0\2\5\5\0"+
    "\4\5\1\0\1\5\1\15\1\0\1\5\1\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\26\1\0\1\5\1\0"+
    "\1\5\5\0\4\5\1\0\1\5\1\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\2\5\4\0\1\36\1\0"+
    "\3\5\1\0\1\5\1\0\1\37\1\5\2\0\3\5"+
    "\1\0\1\5\1\0\1\40\1\5\4\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\37\1\0\1\5\1\0\1\5\1\40"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u013b\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u013b\0\u013b"+
    "\0\u013b\0\u021c\0\u0249\0\u0276\0\u013b\0\u021c\0\u02a3\0\u02d0"+
    "\0\u0276\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u013b\0\u0465\0\u013b\0\u013b\0\u0492\0\u013b\0\u04bf"+
    "\0\u04ec\0\u0519\0\u013b\0\u013b\0\u013b\0\u013b\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u013b\0\u0708\0\u013b\0\u0735\0\u0762\0\u078f\0\u013b\0\u013b"+
    "\0\u013b\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u013b\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u04ec\0\u013b\0\u0519\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6"+
    "\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0762"+
    "\0\u078f\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c"+
    "\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734"+
    "\0\u1761\0\u032a\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1275\0\u1842"+
    "\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u032a\0\u197d"+
    "\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5"+
    "\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u013b"+
    "\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u032a"+
    "\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193"+
    "\0\u21c0\0\u032a\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce"+
    "\0\u22fb\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436"+
    "\0\u2463\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u013b\0\u2544\0\u2571"+
    "\0\u259e\0\u25cb\0\u013b\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac"+
    "\0\u26d9\0\u2706\0\u2733\0\u2760\0\u278d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\1\13\5\10\1\14\3\10\1\15"+
    "\3\10\1\16\15\10\1\15\6\10\2\17\3\10\4\20"+
    "\1\21\43\20\2\17\4\20\1\22\1\23\1\20\1\24"+
    "\4\23\1\20\5\23\1\20\5\23\4\20\3\23\3\20"+
    "\3\23\6\20\2\17\3\20\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\3\33\1\25\1\33\1\34\1\33\1\35"+
    "\1\36\1\37\3\33\1\40\1\33\1\41\2\42\1\43"+
    "\3\33\1\44\1\45\1\25\2\33\1\46\1\47\1\50"+
    "\1\25\1\51\1\52\2\47\1\17\1\53\1\54\1\55"+
    "\1\56\1\22\1\57\1\60\1\61\1\62\3\33\1\56"+
    "\1\33\1\63\1\33\1\64\1\65\1\66\3\33\1\67"+
    "\1\33\1\70\2\71\1\72\3\33\1\73\1\45\1\56"+
    "\2\33\1\74\1\56\1\50\1\56\1\75\1\76\1\56"+
    "\2\17\1\77\1\100\1\101\1\20\1\102\1\103\1\20"+
    "\1\104\4\103\1\20\5\103\1\20\5\103\4\20\3\103"+
    "\1\20\1\45\1\20\3\103\6\20\2\17\3\20\55\17"+
    "\63\0\1\105\62\0\1\106\46\0\1\107\60\0\1\110"+
    "\42\0\4\22\1\0\50\22\2\0\1\23\2\0\4\23"+
    "\1\0\5\23\1\0\5\23\4\0\3\23\3\0\3\23"+
    "\1\0\2\23\11\0\3\22\53\0\1\33\2\0\4\33"+
    "\1\0\1\111\4\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\13\0\1\42\53\0\1\33\2\0"+
    "\1\33\1\112\2\33\1\0\5\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\12\0\1\33\2\0"+
    "\4\33\1\0\5\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\12\0\1\33\2\0\4\33\1\0"+
    "\2\33\1\113\2\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\12\0\1\33\2\0\4\33\1\0"+
    "\5\33\1\0\5\33\4\0\1\114\2\33\3\0\3\33"+
    "\1\0\2\33\12\0\1\33\2\0\4\33\1\0\5\33"+
    "\1\0\2\33\1\115\2\33\4\0\3\33\3\0\3\33"+
    "\1\0\2\33\16\0\1\116\13\0\1\117\34\0\1\33"+
    "\2\0\4\33\1\0\1\120\4\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\35\0\1\121\36\0"+
    "\1\122\2\0\1\123\2\0\1\124\3\0\1\125\1\126"+
    "\1\0\1\125\6\0\1\127\23\0\1\33\2\0\1\33"+
    "\1\130\2\33\1\0\5\33\1\0\2\33\1\131\2\33"+
    "\4\0\3\33\3\0\3\33\1\0\2\33\25\0\2\132"+
    "\11\0\1\133\12\0\1\50\11\0\45\134\1\135\7\134"+
    "\46\136\1\135\6\136\2\0\1\33\2\0\4\33\1\0"+
    "\1\137\4\33\1\0\5\33\4\0\3\33\3\0\3\33"+
    "\1\0\2\33\13\0\1\71\52\0\3\22\36\0\1\140"+
    "\14\0\1\33\2\0\1\33\1\141\2\33\1\0\5\33"+
    "\1\0\5\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\12\0\1\33\2\0\4\33\1\0\2\33\1\142\2\33"+
    "\1\0\5\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\12\0\1\33\2\0\4\33\1\0\5\33\1\0\5\33"+
    "\4\0\1\143\2\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\33\2\0\4\33\1\0\5\33\1\0\2\33\1\144"+
    "\2\33\4\0\3\33\3\0\3\33\1\0\2\33\16\0"+
    "\1\145\13\0\1\146\34\0\1\33\2\0\4\33\1\0"+
    "\1\147\4\33\1\0\5\33\4\0\3\33\3\0\3\33"+
    "\1\0\2\33\35\0\1\20\36\0\1\150\2\0\1\151"+
    "\2\0\1\152\3\0\1\153\1\154\1\0\1\153\6\0"+
    "\1\155\23\0\1\33\2\0\1\33\1\156\2\33\1\0"+
    "\5\33\1\0\2\33\1\157\2\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\10\0\45\160\1\20\7\160\46\161"+
    "\1\20\6\161\4\102\1\0\50\102\2\0\1\103\2\0"+
    "\4\103\1\0\5\103\1\0\5\103\4\0\3\103\3\0"+
    "\3\103\1\0\2\103\11\0\3\102\36\0\1\140\21\0"+
    "\1\162\57\0\1\163\62\0\1\164\52\0\1\165\40\0"+
    "\1\33\2\0\4\33\1\0\5\33\1\0\3\33\1\166"+
    "\1\33\4\0\3\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\33\2\0\2\33\1\167\1\33\1\0\5\33\1\0"+
    "\5\33\4\0\3\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\33\2\0\4\33\1\0\1\170\4\33\1\0\5\33"+
    "\4\0\3\33\3\0\3\33\1\0\2\33\12\0\1\33"+
    "\2\0\1\33\1\171\2\33\1\0\5\33\1\0\5\33"+
    "\4\0\3\33\3\0\3\33\1\0\2\33\12\0\1\33"+
    "\2\0\3\33\1\172\1\0\5\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\30\0\1\173\66\0"+
    "\1\174\24\0\1\33\2\0\4\33\1\0\4\33\1\175"+
    "\1\0\5\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\22\0\1\176\2\0\1\177\53\0\1\200\71\0\1\201"+
    "\33\0\1\200\4\0\1\200\46\0\1\202\57\0\1\123"+
    "\44\0\1\33\2\0\4\33\1\0\5\33\1\0\1\203"+
    "\4\33\4\0\3\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\33\2\0\4\33\1\0\5\33\1\0\5\33\4\0"+
    "\1\33\1\204\1\33\3\0\3\33\1\0\2\33\36\0"+
    "\2\205\42\0\2\132\24\0\1\133\13\0\1\33\2\0"+
    "\4\33\1\0\5\33\1\0\3\33\1\206\1\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\12\0\1\207\2\0"+
    "\4\207\1\0\5\207\1\0\5\207\1\0\1\20\1\0"+
    "\1\20\3\207\1\0\2\20\3\207\1\210\1\207\13\0"+
    "\1\33\2\0\2\33\1\211\1\33\1\0\5\33\1\0"+
    "\5\33\4\0\3\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\33\2\0\4\33\1\0\1\212\4\33\1\0\5\33"+
    "\4\0\3\33\3\0\3\33\1\0\2\33\12\0\1\33"+
    "\2\0\1\33\1\213\2\33\1\0\5\33\1\0\5\33"+
    "\4\0\3\33\3\0\3\33\1\0\2\33\12\0\1\33"+
    "\2\0\3\33\1\214\1\0\5\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\30\0\1\215\66\0"+
    "\1\216\24\0\1\33\2\0\4\33\1\0\4\33\1\217"+
    "\1\0\5\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\22\0\1\220\2\0\1\221\53\0\1\222\71\0\1\223"+
    "\33\0\1\222\4\0\1\222\46\0\1\224\57\0\1\151"+
    "\44\0\1\33\2\0\4\33\1\0\5\33\1\0\1\225"+
    "\4\33\4\0\3\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\33\2\0\4\33\1\0\5\33\1\0\5\33\4\0"+
    "\1\33\1\226\1\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\227\54\0\1\230\16\0\1\231\47\0\1\232\46\0"+
    "\1\233\50\0\1\33\2\0\4\33\1\0\5\33\1\0"+
    "\3\33\1\234\1\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\12\0\1\235\2\0\4\33\1\0\5\33\1\0"+
    "\5\33\4\0\3\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\236\2\0\4\33\1\0\5\33\1\0\1\33\1\237"+
    "\3\33\4\0\3\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\33\2\0\4\33\1\240\5\33\1\0\5\33\4\0"+
    "\3\33\3\0\1\33\1\241\1\33\1\0\2\33\12\0"+
    "\1\33\2\0\4\33\1\0\5\33\1\0\2\33\1\242"+
    "\2\33\4\0\3\33\3\0\3\33\1\0\2\33\24\0"+
    "\1\243\55\0\1\44\41\0\1\33\2\0\1\33\1\244"+
    "\2\33\1\0\5\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\20\0\1\200\74\0\1\42\1\245"+
    "\53\0\1\42\54\0\1\42\1\0\1\200\40\0\1\200"+
    "\40\0\1\33\2\0\4\33\1\0\2\33\1\246\2\33"+
    "\1\0\5\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\12\0\1\33\2\0\4\33\1\0\3\33\1\242\1\33"+
    "\1\0\5\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\53\0\1\247\13\0\1\33\2\0\4\33\1\0\5\33"+
    "\1\0\3\33\1\250\1\33\4\0\3\33\3\0\3\33"+
    "\1\0\2\33\52\0\1\20\14\0\1\207\2\0\4\207"+
    "\1\0\5\207\1\0\5\207\1\0\1\20\1\0\1\20"+
    "\3\207\1\0\2\20\3\207\1\251\1\207\13\0\1\252"+
    "\2\0\4\33\1\0\5\33\1\0\5\33\4\0\3\33"+
    "\3\0\3\33\1\0\2\33\12\0\1\253\2\0\4\33"+
    "\1\0\5\33\1\0\1\33\1\254\3\33\4\0\3\33"+
    "\3\0\3\33\1\0\2\33\12\0\1\33\2\0\4\33"+
    "\1\255\5\33\1\0\5\33\4\0\3\33\3\0\1\33"+
    "\1\256\1\33\1\0\2\33\12\0\1\33\2\0\4\33"+
    "\1\0\5\33\1\0\2\33\1\257\2\33\4\0\3\33"+
    "\3\0\3\33\1\0\2\33\24\0\1\260\55\0\1\73"+
    "\41\0\1\33\2\0\1\33\1\261\2\33\1\0\5\33"+
    "\1\0\5\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\20\0\1\222\74\0\1\71\1\262\53\0\1\71\54\0"+
    "\1\71\1\0\1\222\40\0\1\222\40\0\1\33\2\0"+
    "\4\33\1\0\2\33\1\263\2\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\12\0\1\33\2\0"+
    "\4\33\1\0\3\33\1\257\1\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\20\0\1\264\61\0"+
    "\1\265\53\0\1\266\52\0\1\267\66\0\1\270\32\0"+
    "\1\33\2\0\4\33\1\0\1\271\4\33\1\0\5\33"+
    "\4\0\3\33\3\0\3\33\1\0\2\33\12\0\1\33"+
    "\2\0\3\33\1\272\1\0\5\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\12\0\1\33\2\0"+
    "\4\33\1\0\3\33\1\273\1\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\12\0\1\33\2\0"+
    "\4\33\1\0\2\33\1\274\2\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\42\0\1\275\24\0"+
    "\1\33\2\0\4\33\1\0\5\33\1\0\5\33\4\0"+
    "\1\33\1\276\1\33\3\0\3\33\1\0\2\33\22\0"+
    "\1\277\44\0\1\33\2\0\4\33\1\0\5\33\1\0"+
    "\4\33\1\300\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\42\0\1\200\24\0\1\33\2\0\4\33\1\0\1\301"+
    "\4\33\1\0\5\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\12\0\1\33\2\0\4\33\1\0\1\302\4\33"+
    "\1\0\5\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\12\0\1\207\2\0\4\207\1\0\5\207\1\0\5\207"+
    "\1\0\1\20\1\0\1\20\3\207\1\0\2\20\3\207"+
    "\1\303\1\207\13\0\1\33\2\0\3\33\1\304\1\0"+
    "\5\33\1\0\5\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\12\0\1\33\2\0\4\33\1\0\3\33\1\305"+
    "\1\33\1\0\5\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\12\0\1\33\2\0\4\33\1\0\2\33\1\306"+
    "\2\33\1\0\5\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\42\0\1\307\24\0\1\33\2\0\4\33\1\0"+
    "\5\33\1\0\5\33\4\0\1\33\1\310\1\33\3\0"+
    "\3\33\1\0\2\33\22\0\1\311\44\0\1\33\2\0"+
    "\4\33\1\0\5\33\1\0\4\33\1\312\4\0\3\33"+
    "\3\0\3\33\1\0\2\33\42\0\1\222\24\0\1\33"+
    "\2\0\4\33\1\0\1\313\4\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\21\0\1\314\26\0"+
    "\1\314\32\0\1\315\60\0\1\316\40\0\1\317\63\0"+
    "\1\320\41\0\1\33\2\0\2\33\1\242\1\33\1\0"+
    "\5\33\1\0\5\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\12\0\1\33\2\0\4\33\1\321\5\33\1\0"+
    "\5\33\4\0\3\33\3\0\1\33\1\322\1\33\1\0"+
    "\2\33\12\0\1\33\2\0\4\33\1\0\4\33\1\323"+
    "\1\0\5\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\12\0\1\33\2\0\4\33\1\0\5\33\1\0\2\33"+
    "\1\324\2\33\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\32\0\1\325\34\0\1\33\2\0\4\33\1\0\5\33"+
    "\1\0\2\33\1\326\2\33\4\0\3\33\3\0\3\33"+
    "\1\0\2\33\16\0\1\327\50\0\1\33\2\0\4\33"+
    "\1\0\3\33\1\330\1\33\1\0\5\33\4\0\3\33"+
    "\3\0\3\33\1\0\2\33\12\0\1\33\2\0\1\33"+
    "\1\331\2\33\1\0\5\33\1\0\5\33\4\0\3\33"+
    "\3\0\3\33\1\0\2\33\12\0\1\33\2\0\2\33"+
    "\1\257\1\33\1\0\5\33\1\0\5\33\4\0\3\33"+
    "\3\0\3\33\1\0\2\33\12\0\1\207\2\0\4\207"+
    "\1\0\5\207\1\0\5\207\1\0\1\20\1\0\1\20"+
    "\3\207\1\0\2\20\3\207\1\332\1\207\13\0\1\33"+
    "\2\0\4\33\1\333\5\33\1\0\5\33\4\0\3\33"+
    "\3\0\1\33\1\334\1\33\1\0\2\33\12\0\1\33"+
    "\2\0\4\33\1\0\4\33\1\335\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\12\0\1\33\2\0"+
    "\4\33\1\0\5\33\1\0\2\33\1\336\2\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\32\0\1\337\34\0"+
    "\1\33\2\0\4\33\1\0\5\33\1\0\2\33\1\340"+
    "\2\33\4\0\3\33\3\0\3\33\1\0\2\33\16\0"+
    "\1\341\50\0\1\33\2\0\4\33\1\0\3\33\1\342"+
    "\1\33\1\0\5\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\12\0\1\33\2\0\1\33\1\343\2\33\1\0"+
    "\5\33\1\0\5\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\22\0\1\344\50\0\1\345\71\0\1\320\41\0"+
    "\1\346\56\0\1\347\44\0\1\33\2\0\4\33\1\0"+
    "\1\350\4\33\1\0\5\33\4\0\3\33\3\0\3\33"+
    "\1\0\2\33\12\0\1\33\2\0\1\33\1\351\2\33"+
    "\1\0\5\33\1\0\5\33\4\0\3\33\3\0\3\33"+
    "\1\0\2\33\12\0\1\33\2\0\4\33\1\0\5\33"+
    "\1\0\3\33\1\330\1\33\4\0\3\33\3\0\3\33"+
    "\1\0\2\33\34\0\1\352\32\0\1\33\2\0\4\33"+
    "\1\0\5\33\1\0\4\33\1\353\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\20\0\1\354\46\0\1\33\2\0"+
    "\3\33\1\355\1\0\5\33\1\0\5\33\4\0\3\33"+
    "\3\0\3\33\1\0\2\33\12\0\1\207\2\0\4\207"+
    "\1\0\5\207\1\0\5\207\1\0\1\20\1\0\1\20"+
    "\3\207\1\0\2\20\3\207\1\0\1\207\23\0\1\356"+
    "\44\0\1\33\2\0\4\33\1\0\1\357\4\33\1\0"+
    "\5\33\4\0\3\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\33\2\0\1\33\1\360\2\33\1\0\5\33\1\0"+
    "\5\33\4\0\3\33\3\0\3\33\1\0\2\33\12\0"+
    "\1\33\2\0\4\33\1\0\5\33\1\0\3\33\1\342"+
    "\1\33\4\0\3\33\3\0\3\33\1\0\2\33\34\0"+
    "\1\361\32\0\1\33\2\0\4\33\1\0\5\33\1\0"+
    "\4\33\1\362\4\0\3\33\3\0\3\33\1\0\2\33"+
    "\20\0\1\363\46\0\1\33\2\0\3\33\1\364\1\0"+
    "\5\33\1\0\5\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\17\0\1\320\61\0\1\270\51\0\1\365\26\0"+
    "\1\365\23\0\1\366\47\0\1\33\2\0\2\33\1\330"+
    "\1\33\1\0\5\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\12\0\1\33\2\0\4\33\1\0"+
    "\2\33\1\300\2\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\25\0\1\367\41\0\1\33\2\0"+
    "\4\33\1\0\3\33\1\370\1\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\21\0\1\371\26\0"+
    "\1\371\16\0\1\33\2\0\4\33\1\371\5\33\1\0"+
    "\5\33\4\0\3\33\3\0\1\33\1\372\1\33\1\0"+
    "\2\33\17\0\1\373\47\0\1\33\2\0\2\33\1\342"+
    "\1\33\1\0\5\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\12\0\1\33\2\0\4\33\1\0"+
    "\2\33\1\312\2\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\25\0\1\374\41\0\1\33\2\0"+
    "\4\33\1\0\3\33\1\375\1\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\21\0\1\376\26\0"+
    "\1\376\16\0\1\33\2\0\4\33\1\376\5\33\1\0"+
    "\5\33\4\0\3\33\3\0\1\33\1\377\1\33\1\0"+
    "\2\33\17\0\1\270\54\0\1\u0100\47\0\1\33\2\0"+
    "\2\33\1\u0101\1\33\1\0\5\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\17\0\1\u0102\47\0"+
    "\1\33\2\0\2\33\1\300\1\33\1\0\5\33\1\0"+
    "\5\33\4\0\3\33\3\0\3\33\1\0\2\33\17\0"+
    "\1\u0103\47\0\1\33\2\0\2\33\1\u0104\1\33\1\0"+
    "\5\33\1\0\5\33\4\0\3\33\3\0\3\33\1\0"+
    "\2\33\17\0\1\u0105\47\0\1\33\2\0\2\33\1\312"+
    "\1\33\1\0\5\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\12\0\1\174\54\0\1\204\2\0"+
    "\4\33\1\0\5\33\1\0\5\33\4\0\3\33\3\0"+
    "\3\33\1\0\2\33\25\0\1\366\41\0\1\216\54\0"+
    "\1\226\2\0\4\33\1\0\5\33\1\0\5\33\4\0"+
    "\3\33\3\0\3\33\1\0\2\33\25\0\1\373\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10170];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\3\11\4\1\3\11\3\1\1\11\14\1\1\11"+
    "\1\1\2\11\1\1\1\11\3\1\4\11\12\1\1\11"+
    "\1\1\1\11\3\1\3\11\3\1\4\0\5\1\2\0"+
    "\1\1\1\11\6\0\2\1\1\0\1\1\1\0\1\11"+
    "\1\0\1\1\1\0\4\1\2\0\1\1\6\0\2\1"+
    "\6\0\5\1\2\0\1\1\5\0\2\1\1\0\1\1"+
    "\2\0\4\1\2\0\1\1\5\0\2\1\5\0\4\1"+
    "\1\0\2\1\1\0\1\1\1\0\3\1\1\0\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\5\0\4\1"+
    "\1\0\1\1\1\0\3\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\4\0\1\11\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\2\0\3\1\1\0\1\1\1\0\2\1"+
    "\4\0\2\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\1\0\1\1"+
    "\1\0\1\1\1\11\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMINSTBrace.class.getName());

	String location = "MAIN PROGRAM";
	
	List<Integer> parenthesis = new LinkedList<Integer>();
	List<Integer> operators   = new LinkedList<Integer>();
	boolean end = true, check = true;
    String parsedFileName;
	
	public COMINSTBrace(){
	}
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
        this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}

	private void addParenthesis(){
        LOGGER.finest("begin method addParenthesis");
		parenthesis.add(1);
		operators.add(0);
        LOGGER.finest("end method addParenthesis");
	}

	private void closeParenthesis() throws JFlexException {
        LOGGER.finest("begin method closeParenthesis");
		int index = parenthesis.size() - 1;
		if(index >= 0) {
			int value = parenthesis.get(index) - 1;
			parenthesis.remove(index);
			parenthesis.add(value);
			if (value == 0) {
				if (operators.get(index) > 1){
				    LOGGER.fine("Setting error line "+(yyline+1)+" because parentheses are needed for readability.");
				    setError(location,"Parentheses are needed for readability.", yyline+1);
			    }
				parenthesis.remove(index);
				operators.remove(index);
			}
		}
        LOGGER.finest("end method closeParenthesis");
	}
	
	private void addOperator() {
        LOGGER.finest("begin method addOperator");
		int index = operators.size() - 1; 
		if (index >= 0){
			int value = operators.get(index) + 1;
			operators.remove(index);
			operators.add(value);
		}
		else {
			parenthesis.add(0);
			operators.add(1);
		}
        LOGGER.finest("end method addOperator");
	}
	
	private void checkOperators() throws JFlexException {
        LOGGER.finest("begin method checkOperators");
		if(!operators.isEmpty()) {
			int index = operators.size() - 1;
			if (index >= 0) {
				if (operators.get(index) > 1) {
					LOGGER.fine("Setting error line "+(yyline+1)+" because parentheses are needed for readability.");
					setError(location,"Parentheses are needed for readability.", yyline+1);
				}
				parenthesis.clear();
				operators.clear();
			}
		}
        LOGGER.finest("end method checkOperators");
	}
	
	private void parameterFunction() throws JFlexException {
        LOGGER.finest("begin method parameterFunction");
		if(!parenthesis.isEmpty()) {
			int index = operators.size() - 1;
			if (index >= 0) {
				int value = operators.get(index);
				if(value > 1){
				    LOGGER.fine("Setting error line "+(yyline+1)+" because parentheses are needed for readability.");
				    setError(location,"Parentheses are needed for readability.", yyline+1);
			    }
				operators.remove(index);
				operators.add(0);
			}
		}
        LOGGER.finest("end method parameterFunction");
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMINSTBrace(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 33: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 34: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 35: break;
          case 4: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 36: break;
          case 5: 
            { 
            }
          case 37: break;
          case 6: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 38: break;
          case 7: 
            { if(end){
                                        checkOperators();
                                    }
            }
          case 39: break;
          case 8: 
            { location = location + " " + yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> LINE (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 40: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 41: break;
          case 10: 
            { end=true;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 42: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 43: break;
          case 12: 
            { addOperator();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : OPERATOR \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 44: break;
          case 13: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> AVOID (Transition : AVOID \""+yytext()+"\" )");
                                    yybegin(AVOID);
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : AVOID \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 45: break;
          case 14: 
            { end=false;
            }
          case 46: break;
          case 15: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : SPACE \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 47: break;
          case 16: 
            { addParenthesis();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : ( )");
                                    yybegin(LINE);
            }
          case 48: break;
          case 17: 
            { closeParenthesis();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : ) )");
                                    yybegin(LINE);
            }
          case 49: break;
          case 18: 
            { parameterFunction();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : , )");
                                    yybegin(LINE);
            }
          case 50: break;
          case 19: 
            { end=true;
            }
          case 51: break;
          case 20: 
            { addOperator();
            }
          case 52: break;
          case 21: 
            { if(end){
                                        checkOperators();
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 53: break;
          case 22: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> AVOID (Transition : AVOID \""+yytext()+"\" )");
                                    yybegin(AVOID);
            }
          case 54: break;
          case 23: 
            { addParenthesis();
            }
          case 55: break;
          case 24: 
            { closeParenthesis();
            }
          case 56: break;
          case 25: 
            { parameterFunction();
            }
          case 57: break;
          case 26: 
            { if(end){
        checkOperators();
    }
            }
          case 58: break;
          case 27: 
            { if(end){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
                                        yybegin(NEW_LINE);
                                    }
            }
          case 59: break;
          case 28: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : // )");
                                    yybegin(LINE);
            }
          case 60: break;
          case 29: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : STRING \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 61: break;
          case 30: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 62: break;
          case 31: 
            { checkOperators();
                                    location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 63: break;
          case 32: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
