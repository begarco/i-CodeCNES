/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for F77.BLOC.Function rule.	 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77BLOCFunction.lex</tt>
 */
public class F77BLOCFunction extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int RIGHT_SIDE = 10;
  public static final int PAR = 12;
  public static final int FUNCTION = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\54\1\55\1\55\1\55\22\0\1\47\1\1\1\46\4\0"+
    "\1\45\1\50\1\0\1\4\5\0\12\52\3\0\1\53\3\0\1\36"+
    "\1\32\1\3\1\24\1\23\1\5\1\35\1\51\1\11\2\51\1\43"+
    "\1\37\1\7\1\12\1\21\1\51\1\22\1\31\1\10\1\6\5\51"+
    "\4\0\1\52\1\0\1\41\1\34\1\2\1\30\1\27\1\13\1\40"+
    "\1\51\1\17\2\51\1\44\1\42\1\15\1\20\1\25\1\51\1\26"+
    "\1\33\1\16\1\14\5\51\12\0\1\55\u1fa2\0\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\10\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\10\12\12\6\1\14"+
    "\1\15\1\16\1\17\2\20\1\21\1\22\1\23\1\24"+
    "\167\0\1\25\10\0\1\26\10\0\1\27\22\0\1\30"+
    "\2\0\1\31\2\0\1\32\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u0170\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\u02b2\0\u02e0\0\u0170\0\u0170\0\u0170\0\u0170\0\u030e"+
    "\0\u0170\0\u0170\0\u0170\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0170\0\u0170\0\u0678"+
    "\0\u0170\0\u0170\0\u06a6\0\u0170\0\u0170\0\u06d4\0\u0170\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u061c"+
    "\0\u064a\0\u06a6\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8"+
    "\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18"+
    "\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088"+
    "\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8"+
    "\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368"+
    "\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8"+
    "\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648"+
    "\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8"+
    "\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928"+
    "\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98"+
    "\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u0170\0\u1bda"+
    "\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u0170"+
    "\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c"+
    "\0\u0170\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce"+
    "\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e"+
    "\0\u216c\0\u219a\0\u21c8\0\u0170\0\u21f6\0\u2224\0\u0170\0\u2252"+
    "\0\u2280\0\u0170\0\u22ae\0\u22dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\3\13\1\14\5\11\1\15\5\11\1\16"+
    "\3\11\1\17\3\11\1\20\1\11\1\21\3\11\1\22"+
    "\2\11\1\23\11\11\1\24\1\25\1\26\1\12\52\26"+
    "\1\27\1\25\1\26\1\12\2\30\1\26\40\30\4\26"+
    "\1\30\2\26\1\31\1\25\1\32\1\12\3\33\1\34"+
    "\5\32\1\35\5\32\1\36\3\32\1\37\3\32\1\40"+
    "\1\32\1\41\3\32\1\42\2\32\1\43\11\32\1\26"+
    "\1\25\1\26\1\12\3\26\1\44\5\26\1\45\5\26"+
    "\1\46\3\26\1\47\3\26\1\50\1\26\1\51\3\26"+
    "\1\52\2\26\1\53\2\26\1\54\1\55\4\26\1\56"+
    "\1\57\1\25\1\26\1\12\2\60\1\26\40\60\4\26"+
    "\1\60\2\26\1\61\1\25\1\62\1\12\45\62\1\63"+
    "\1\64\3\62\1\65\1\25\1\26\1\12\2\66\1\26"+
    "\40\66\4\26\1\66\2\26\1\67\1\25\64\0\1\70"+
    "\63\0\1\71\63\0\1\72\61\0\1\73\35\0\1\74"+
    "\63\0\1\75\53\0\1\76\63\0\1\77\37\0\2\30"+
    "\1\0\40\30\4\0\2\30\11\0\1\100\63\0\1\101"+
    "\63\0\1\102\61\0\1\103\35\0\1\104\63\0\1\105"+
    "\53\0\1\106\63\0\1\107\43\0\1\110\63\0\1\111"+
    "\63\0\1\112\61\0\1\113\35\0\1\114\63\0\1\115"+
    "\53\0\1\116\63\0\1\117\35\0\45\120\1\26\10\120"+
    "\46\121\1\26\7\121\2\0\2\60\1\0\40\60\4\0"+
    "\2\60\52\0\1\122\1\64\7\0\2\66\1\0\40\66"+
    "\4\0\2\66\12\0\1\123\63\0\1\124\52\0\1\125"+
    "\63\0\1\126\67\0\1\127\57\0\1\130\45\0\1\131"+
    "\61\0\1\132\34\0\1\133\63\0\1\134\52\0\1\135"+
    "\63\0\1\136\67\0\1\137\57\0\1\140\45\0\1\141"+
    "\61\0\1\142\34\0\1\143\63\0\1\144\52\0\1\145"+
    "\63\0\1\146\67\0\1\147\57\0\1\150\45\0\1\151"+
    "\61\0\1\152\30\0\1\153\54\0\1\154\56\0\1\155"+
    "\31\0\1\156\22\0\1\157\35\0\1\160\37\0\1\161"+
    "\61\0\1\162\35\0\1\163\63\0\1\164\44\0\1\165"+
    "\54\0\1\166\56\0\1\167\31\0\1\170\22\0\1\171"+
    "\35\0\1\172\37\0\1\173\61\0\1\174\35\0\1\175"+
    "\63\0\1\176\44\0\1\177\54\0\1\200\56\0\1\201"+
    "\31\0\1\202\22\0\1\203\35\0\1\204\37\0\1\205"+
    "\61\0\1\206\35\0\1\207\63\0\1\210\51\0\1\211"+
    "\63\0\1\212\62\0\1\213\54\0\1\214\62\0\1\215"+
    "\54\0\1\216\41\0\1\217\63\0\1\220\100\0\1\221"+
    "\56\0\1\222\21\0\1\223\63\0\1\224\62\0\1\225"+
    "\54\0\1\226\62\0\1\227\54\0\1\230\41\0\1\231"+
    "\63\0\1\232\100\0\1\233\56\0\1\234\21\0\1\235"+
    "\63\0\1\236\62\0\1\237\54\0\1\240\62\0\1\241"+
    "\54\0\1\242\41\0\1\243\63\0\1\244\100\0\1\245"+
    "\56\0\1\246\22\0\1\247\63\0\1\250\62\0\1\251"+
    "\67\0\1\252\47\0\1\253\66\0\1\254\22\0\1\255"+
    "\63\0\1\256\64\0\1\257\61\0\1\257\37\0\1\260"+
    "\63\0\1\261\62\0\1\262\67\0\1\263\47\0\1\264"+
    "\66\0\1\265\22\0\1\266\63\0\1\267\64\0\1\270"+
    "\61\0\1\270\37\0\1\271\63\0\1\272\62\0\1\273"+
    "\67\0\1\274\47\0\1\275\66\0\1\276\22\0\1\277"+
    "\63\0\1\300\64\0\1\301\61\0\1\301\40\0\1\302"+
    "\63\0\1\303\43\0\1\304\106\0\1\257\32\0\1\305"+
    "\103\0\1\257\23\0\1\306\63\0\1\307\51\0\1\310"+
    "\63\0\1\311\43\0\1\312\106\0\1\270\32\0\1\313"+
    "\103\0\1\270\23\0\1\314\63\0\1\315\51\0\1\316"+
    "\63\0\1\317\43\0\1\320\106\0\1\301\32\0\1\321"+
    "\103\0\1\301\23\0\1\322\63\0\1\323\46\0\1\324"+
    "\63\0\1\324\62\0\1\221\61\0\1\222\40\0\1\325"+
    "\63\0\1\326\45\0\1\327\63\0\1\327\62\0\1\233"+
    "\61\0\1\234\40\0\1\330\63\0\1\331\45\0\1\332"+
    "\63\0\1\332\62\0\1\245\61\0\1\246\40\0\1\333"+
    "\63\0\1\334\45\0\1\221\63\0\1\222\47\0\1\233"+
    "\63\0\1\234\47\0\1\245\63\0\1\246\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8970];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\3\11\10\1\4\11\1\1\3\11\22\1\2\11"+
    "\1\1\2\11\1\1\2\11\1\1\1\11\167\0\1\11"+
    "\10\0\1\11\10\0\1\11\22\0\1\11\2\0\1\11"+
    "\2\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(F77BLOCFunction.class.getName());
	String location = "MAIN PROGRAM";
    String parsedFileName;
	
	List<String> functionList = new LinkedList<String>();
	List<String> functionCalls = new LinkedList<String>();
	List<String> errorLoc = new LinkedList<String>();
	List<Integer> errorLine = new LinkedList<Integer>();
	List<Boolean> parenthesis = new LinkedList<Boolean>();
	
	public F77BLOCFunction() {
    }

	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
        this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
	private void checkList() throws JFlexException {
        LOGGER.finest("begin method checkList");
		for (int i = 0; i < functionCalls.size(); i++) {
			if (functionList.contains(functionCalls.get(i))) {
				if(!parenthesis.get(i)) {
					LOGGER.fine("Setting error line "+(errorLine.get(i))+" because the brackets following the function name are mandatory.");
					setError(errorLoc.get(i),"When calling a function, the brackets following the function name are mandatory.", errorLine.get(i));
				}
			}
		}
		functionList.clear();
		functionCalls.clear();
		errorLoc.clear();
		errorLine.clear();
		parenthesis.clear();
        LOGGER.finest("end method checkList");
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77BLOCFunction(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	checkList();
return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 27: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\" )");
                       				yybegin(COMMENT);
            }
          case 28: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 29: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 30: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 31: break;
          case 6: 
            { 
            }
          case 32: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 33: break;
          case 8: 
            { location = location + " " + yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
    							    yybegin(COMMENT);
            }
          case 34: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 35: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 36: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 37: break;
          case 12: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> RIGHT_SIDE (Transition : EQUAL \""+yytext()+"\" )");
                                    yybegin(RIGHT_SIDE);
            }
          case 38: break;
          case 13: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 39: break;
          case 14: 
            { functionCalls.add(yytext()); 
								 errorLoc.add(location);
								 errorLine.add(yyline+1);
                                 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - RIGHT_SIDE -> PAR (Transition : VAR \""+yytext()+"\" )");
								 yybegin(PAR);
            }
          case 40: break;
          case 15: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - RIGHT_SIDE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 41: break;
          case 16: 
            { parenthesis.add(false); 
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - PAR -> COMMENT (Transition : . )");
								 yybegin(COMMENT);
            }
          case 42: break;
          case 17: 
            { parenthesis.add(true); 
                                 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - PAR -> COMMENT (Transition : PARENTHESIS \""+yytext()+"\" )");
                                 yybegin(COMMENT);
            }
          case 43: break;
          case 18: 
            { parenthesis.add(false); 
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - PAR -> NEW_LINE (Transition : \\n )");
								 yybegin(NEW_LINE);
            }
          case 44: break;
          case 19: 
            { location = location + " " + yytext(); 
                                 functionList.add(yytext()); 
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - FUNCTION -> LINE (Transition : VAR \""+yytext()+"\" )");
								 yybegin(LINE);
            }
          case 45: break;
          case 20: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - FUNCTION -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 46: break;
          case 21: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
								    yybegin(NAMING);
            }
          case 47: break;
          case 22: 
            { location = yytext();
								    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
								    yybegin(NAMING);
            }
          case 48: break;
          case 23: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
    								 yybegin(NAMING);
            }
          case 49: break;
          case 24: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> FUNCTION (Transition : FUNC \""+yytext()+"\" )");
								    yybegin(FUNCTION);
            }
          case 50: break;
          case 25: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> FUNCTION (Transition : FUNC \""+yytext()+"\" )");
                                    yybegin(FUNCTION);
            }
          case 51: break;
          case 26: 
            { location = yytext(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> FUNCTION (Transition : FUNC \""+yytext()+"\" )");
								    yybegin(FUNCTION);
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
