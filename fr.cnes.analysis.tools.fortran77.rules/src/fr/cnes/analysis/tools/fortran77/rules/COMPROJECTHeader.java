/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for Pr.CartStd rule.		 */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.IPath;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMPROJECTHeader.lex</tt>
 */
public class COMPROJECTHeader extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int AVOID = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\33\1\34\1\35\1\33\22\0\1\32\1\1\1\31"+
    "\3\0\1\36\1\30\2\0\1\3\5\0\12\24\7\0\1\21\1\17"+
    "\1\2\1\15\1\14\1\4\1\20\1\27\1\25\2\27\1\23\1\22"+
    "\1\6\1\11\1\12\1\27\1\13\1\26\1\7\1\5\5\27\4\0"+
    "\1\24\1\0\1\21\1\17\1\2\1\15\1\14\1\4\1\20\1\27"+
    "\1\25\2\27\1\23\1\22\1\6\1\11\1\12\1\27\1\13\1\26"+
    "\1\7\1\5\5\27\12\0\1\34\252\0\2\10\115\0\1\16\u1ea8\0"+
    "\1\34\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\12\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\13\15\14\11\1\17\1\20\45\0\1\21\5\0\1\22"+
    "\74\0\1\23\5\0\1\24\5\0\1\25\5\0\1\11"+
    "\3\0\1\23\1\0\1\11\4\0\1\24\4\0\1\25"+
    "\24\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\272"+
    "\0\331\0\272\0\370\0\331\0\u0117\0\u0136\0\u0155\0\u0174"+
    "\0\u0193\0\u01b2\0\u01d1\0\u01f0\0\u020f\0\272\0\272\0\272"+
    "\0\272\0\272\0\u022e\0\272\0\272\0\272\0\331\0\272"+
    "\0\u024d\0\331\0\u026c\0\u028b\0\u02aa\0\u02c9\0\u02e8\0\u0307"+
    "\0\u0326\0\u01d1\0\u01f0\0\u0345\0\331\0\u0364\0\u0383\0\u03a2"+
    "\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u01d1\0\u01f0\0\272"+
    "\0\272\0\u045c\0\u047b\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516"+
    "\0\u0535\0\u0554\0\u0573\0\u01d1\0\u01f0\0\u0592\0\u05b1\0\u05d0"+
    "\0\u05ef\0\u060e\0\u062d\0\u064c\0\u066b\0\u068a\0\u06a9\0\u06c8"+
    "\0\u06e7\0\u0706\0\u0725\0\u0744\0\u0763\0\u0782\0\u07a1\0\u07c0"+
    "\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b\0\u087a\0\272\0\u0899"+
    "\0\u08b8\0\u08d7\0\u08f6\0\u0915\0\272\0\u0934\0\u0953\0\u0972"+
    "\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b\0\u0a6a"+
    "\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24\0\u0b43\0\u0b62"+
    "\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u0c1c\0\u0c3b\0\u0c5a"+
    "\0\u0c79\0\u0c98\0\u0cb7\0\u0cd6\0\u0cf5\0\u0d14\0\u0d33\0\u0d52"+
    "\0\u0d71\0\u0d90\0\u0daf\0\u0dce\0\u0ded\0\u0e0c\0\u0e2b\0\u0e4a"+
    "\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6\0\u0ee5\0\u0f04\0\u0f23\0\u0f42"+
    "\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe\0\u0fdd\0\u0ffc\0\u101b\0\u103a"+
    "\0\u1059\0\u1078\0\u1097\0\u10b6\0\u10d5\0\u10f4\0\u1113\0\u1078"+
    "\0\u1132\0\u1151\0\u1170\0\u118f\0\u11ae\0\u1078\0\u11cd\0\u11ec"+
    "\0\u120b\0\u122a\0\u1249\0\u1268\0\u1287\0\u12a6\0\u12c5\0\u1268"+
    "\0\u12e4\0\u1303\0\u1322\0\u1341\0\u1360\0\u137f\0\u1268\0\u139e"+
    "\0\u13bd\0\u13dc\0\u13fb\0\u1268\0\u141a\0\u1439\0\u1458\0\u1477"+
    "\0\u1496\0\u14b5\0\u14d4\0\u14f3\0\u1303\0\u1512\0\u1531\0\u1550"+
    "\0\u156f\0\u158e\0\u15ad\0\u15cc\0\u15eb\0\u160a\0\u1629\0\u1648";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\3\14\1\15\1\14"+
    "\1\16\3\14\1\17\3\14\1\20\2\14\1\21\1\22"+
    "\1\14\1\23\1\24\1\25\1\26\1\27\1\25\1\7"+
    "\1\30\1\10\31\30\1\31\2\27\1\30\1\32\1\10"+
    "\1\33\1\32\4\33\1\32\5\33\1\32\5\33\1\32"+
    "\3\33\3\32\1\34\2\27\1\35\1\36\1\10\1\37"+
    "\1\40\1\41\3\42\1\43\1\42\1\44\1\42\1\45"+
    "\1\42\1\46\3\42\1\47\2\42\1\50\1\51\1\42"+
    "\1\52\1\53\1\54\1\32\1\27\1\54\1\36\1\32"+
    "\1\10\1\55\1\32\1\56\3\55\1\57\1\55\1\60"+
    "\1\55\1\61\1\55\1\62\3\55\1\63\2\55\1\64"+
    "\1\65\1\55\1\66\1\67\1\32\1\70\2\27\2\32"+
    "\1\10\31\32\1\71\2\27\1\32\43\0\1\72\3\0"+
    "\1\73\1\0\1\74\3\0\1\75\3\0\1\76\2\0"+
    "\1\73\1\75\14\0\1\72\1\77\2\0\1\73\1\0"+
    "\1\74\3\0\1\75\3\0\1\76\2\0\1\73\1\75"+
    "\16\0\1\100\34\0\1\72\3\0\1\73\1\0\1\74"+
    "\1\101\2\0\1\75\3\0\1\76\2\0\1\73\1\75"+
    "\15\0\1\102\35\0\1\72\3\0\1\73\1\103\1\74"+
    "\3\0\1\75\3\0\1\76\2\0\1\73\1\75\14\0"+
    "\1\72\1\0\1\100\1\0\1\73\1\0\1\74\3\0"+
    "\1\75\3\0\1\76\2\0\1\73\1\75\14\0\1\72"+
    "\1\102\2\0\1\73\1\0\1\74\3\0\1\75\3\0"+
    "\1\76\2\0\1\73\1\75\10\0\30\104\1\32\6\104"+
    "\31\105\1\32\5\105\32\0\1\25\2\0\1\25\3\0"+
    "\1\33\1\0\4\33\1\0\5\33\1\0\11\33\13\0"+
    "\1\72\1\106\2\0\1\73\1\0\1\74\3\0\1\75"+
    "\3\0\1\76\2\0\1\73\1\75\16\0\1\107\34\0"+
    "\1\72\3\0\1\73\1\0\1\74\1\110\2\0\1\75"+
    "\3\0\1\76\2\0\1\73\1\75\14\0\1\72\1\0"+
    "\1\111\1\0\1\73\1\0\1\74\3\0\1\75\3\0"+
    "\1\76\2\0\1\73\1\75\15\0\1\112\35\0\1\72"+
    "\3\0\1\73\1\113\1\74\3\0\1\75\3\0\1\76"+
    "\2\0\1\73\1\75\14\0\1\72\1\0\1\107\1\0"+
    "\1\73\1\0\1\74\3\0\1\75\3\0\1\76\2\0"+
    "\1\73\1\75\14\0\1\72\1\112\2\0\1\73\1\0"+
    "\1\74\3\0\1\75\3\0\1\76\2\0\1\73\1\75"+
    "\42\0\1\54\2\0\1\54\5\0\1\72\1\114\2\0"+
    "\1\73\1\0\1\74\3\0\1\75\3\0\1\76\2\0"+
    "\1\73\1\75\16\0\1\115\34\0\1\72\3\0\1\73"+
    "\1\0\1\74\1\116\2\0\1\75\3\0\1\76\2\0"+
    "\1\73\1\75\14\0\1\72\1\0\1\117\1\0\1\73"+
    "\1\0\1\74\3\0\1\75\3\0\1\76\2\0\1\73"+
    "\1\75\15\0\1\120\35\0\1\72\3\0\1\73\1\121"+
    "\1\74\3\0\1\75\3\0\1\76\2\0\1\73\1\75"+
    "\14\0\1\72\1\0\1\115\1\0\1\73\1\0\1\74"+
    "\3\0\1\75\3\0\1\76\2\0\1\73\1\75\14\0"+
    "\1\72\1\120\2\0\1\73\1\0\1\74\3\0\1\75"+
    "\3\0\1\76\2\0\1\73\1\75\15\0\1\122\37\0"+
    "\1\123\43\0\1\124\30\0\1\125\42\0\1\126\33\0"+
    "\1\127\37\0\1\130\40\0\1\131\44\0\1\132\34\0"+
    "\1\133\27\0\1\134\37\0\1\135\40\0\1\136\42\0"+
    "\1\137\40\0\1\140\34\0\1\141\27\0\1\142\37\0"+
    "\1\143\40\0\1\144\42\0\1\145\40\0\1\146\34\0"+
    "\1\147\27\0\1\150\37\0\1\151\40\0\1\152\44\0"+
    "\1\153\34\0\1\154\23\0\1\155\50\0\1\156\24\0"+
    "\1\157\15\0\1\160\31\0\1\161\30\0\1\162\33\0"+
    "\1\163\50\0\1\164\24\0\1\165\15\0\1\166\31\0"+
    "\1\167\30\0\1\170\33\0\1\171\50\0\1\172\24\0"+
    "\1\173\15\0\1\174\31\0\1\175\30\0\1\176\33\0"+
    "\1\177\50\0\1\200\24\0\1\201\15\0\1\202\31\0"+
    "\1\203\30\0\1\204\40\0\1\205\42\0\1\206\37\0"+
    "\1\207\35\0\1\210\34\0\1\211\50\0\1\212\22\0"+
    "\1\213\42\0\1\214\37\0\1\215\35\0\1\216\34\0"+
    "\1\217\50\0\1\220\22\0\1\221\42\0\1\222\37\0"+
    "\1\223\35\0\1\224\34\0\1\225\50\0\1\226\22\0"+
    "\1\227\42\0\1\230\37\0\1\231\35\0\1\232\34\0"+
    "\1\233\50\0\1\234\23\0\1\235\14\0\1\235\15\0"+
    "\1\236\47\0\1\237\42\0\1\240\22\0\1\241\45\0"+
    "\1\242\32\0\1\243\14\0\1\243\15\0\1\244\47\0"+
    "\1\245\42\0\1\246\22\0\1\247\45\0\1\250\32\0"+
    "\1\251\14\0\1\251\15\0\1\252\47\0\1\253\42\0"+
    "\1\254\22\0\1\255\45\0\1\256\32\0\1\257\14\0"+
    "\1\257\15\0\1\260\47\0\1\261\42\0\1\262\22\0"+
    "\1\263\45\0\1\264\33\0\1\265\46\0\1\266\22\0"+
    "\1\267\53\0\1\270\23\0\1\271\31\0\1\32\1\0"+
    "\4\32\1\0\1\32\1\272\3\32\1\0\11\32\2\0"+
    "\1\273\2\0\1\273\12\0\1\274\46\0\1\275\22\0"+
    "\1\276\53\0\1\277\23\0\1\300\40\0\1\301\46\0"+
    "\1\302\22\0\1\303\53\0\1\304\23\0\1\305\40\0"+
    "\1\306\46\0\1\307\22\0\1\310\53\0\1\264\23\0"+
    "\1\311\31\0\1\32\1\0\4\32\1\0\5\32\1\0"+
    "\11\32\15\0\1\270\32\0\1\312\47\0\1\312\33\0"+
    "\1\313\14\0\1\313\24\0\1\314\35\0\1\315\17\0"+
    "\1\273\2\0\1\273\7\0\1\277\32\0\1\316\47\0"+
    "\1\316\33\0\1\317\14\0\1\317\17\0\1\304\32\0"+
    "\1\320\47\0\1\320\33\0\1\321\14\0\1\321\17\0"+
    "\1\264\32\0\1\234\47\0\1\234\33\0\1\322\14\0"+
    "\1\322\25\0\1\270\30\0\1\312\41\0\1\323\41\0"+
    "\1\277\30\0\1\316\44\0\1\304\30\0\1\320\36\0"+
    "\1\234\32\0\1\324\50\0\1\325\37\0\1\326\26\0"+
    "\1\327\44\0\1\330\37\0\1\32\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5735];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\1\1\1\11\13\1\5\11\1\1\3\11"+
    "\1\1\1\11\27\1\2\11\45\0\1\11\5\0\1\11"+
    "\74\0\1\1\5\0\1\1\5\0\1\1\5\0\1\1"+
    "\3\0\1\1\1\0\1\1\4\0\1\1\4\0\1\1"+
    "\24\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMPROJECTHeader.class.getName());
	String location = "MAIN PROGRAM";
    String parsedFileName;
	
	List<String> linesType = new LinkedList<String>();
	List<StringBuilder> locations = new LinkedList<StringBuilder>();
	List<Integer> lines = new LinkedList<Integer>();
	boolean endLine = true;
	boolean first = true;
	int errorLine = 0;
	
	public COMPROJECTHeader() {
    }
	
	@Override
	public void setInputFile(IPath file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
        this.zzReader = new FileReader(file.toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
	private void addType(String type, String location, int line){
        LOGGER.finest("begin method addType");
		if (linesType.isEmpty()){
			linesType.add(type);
			StringBuilder buffer = new StringBuilder();
			buffer.append(location);
			locations.add(buffer);
			lines.add(line);
		} else {
			int last = linesType.size()-1;
			if (linesType.get(last).equals("comment") && type.equals("comment")){
				locations.get(last).append(location);
			} else {
				linesType.add(type);
				StringBuilder buffer = new StringBuilder();
				buffer.append(location);
				locations.add(buffer);
				lines.add(line);
			}
		}
        LOGGER.finest("end method addType");
	}
	
	private void raiseErrors() throws JFlexException {	
        LOGGER.finest("begin method raiseErrors");
	
		if (!linesType.get(0).equals("comment") && !linesType.get(1).equals("comment")){
            LOGGER.fine("Setting error line 0 because no file header (file name not found). This module/function should have a header with a brief description..");
			this.setError("No file header existing.","This module/function should have a header with a brief description.", 0);
		} else if (linesType.get(0).equals("comment") && !locations.get(0).toString().toLowerCase()
															.contains(getViolation().getFilePath().toFile().getName().replaceFirst("[.][^.]+$", "").toLowerCase())){
            LOGGER.fine("Setting error line "+(lines.get(0))+" because no file header (file name not found). This module/function should have a header with a brief description..");
			this.setError("No file header (file name not found)."," This module/function should have a header with a brief description.", lines.get(0));
		} else if (linesType.get(1).equals("comment") && !locations.get(1).toString().toLowerCase()
															.contains(getViolation().getFilePath().toFile().getName().replaceFirst("[.][^.]+$", "").toLowerCase())){
			LOGGER.fine("Setting error line "+(lines.get(1))+" because no file header (file name not found). This module/function should have a header with a brief description..");
			this.setError("No file header (file name not found)."," This module/function should have a header with a brief description.", lines.get(1));
		}	
		
		int index = linesType.indexOf("function");
		while(index != -1){
			int prevIndex = index - 1;
			int nextIndex = index + 1;
			boolean prevIndexNoHead = prevIndex < 0 || !linesType.get(prevIndex).equals("comment")
										|| !locations.get(prevIndex).toString().toLowerCase().contains(
											locations.get(index).substring(locations.get(index).indexOf(" ")+1).toLowerCase());
			boolean nextIndexNoHead = nextIndex >= linesType.size() || !linesType.get(nextIndex).equals("comment")
										|| !locations.get(nextIndex).toString().toLowerCase().contains(
											locations.get(index).substring(locations.get(index).indexOf(" ")+1).toLowerCase());
			
			if (prevIndexNoHead && nextIndexNoHead){
                LOGGER.fine("Setting error line "+(lines.get(index))+" because the module/function should have a header with a brief description.");
				this.setError(locations.get(index).toString(),"This module/function should have a header with a brief description.", lines.get(index));
			}
			
			linesType.remove(index);
			locations.remove(index);
			lines.remove(index);
			index = linesType.indexOf("function");
		}
        LOGGER.finest("end method raiseErrors");
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMPROJECTHeader(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	raiseErrors();
	linesType.clear();
	locations.clear();
	lines.clear();
return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 22: break;
          case 2: 
            { location = " ";
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\" )");
				                    yybegin(COMMENT);
            }
          case 23: break;
          case 3: 
            { location = " ";
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 24: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : SPACE \""+yytext()+"\" )");
                                    yybegin(NEW_LINE);
            }
          case 25: break;
          case 5: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n|\\r )");
                                    yybegin(NEW_LINE);
            }
          case 26: break;
          case 6: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 27: break;
          case 7: 
            { location = location + yytext();
            }
          case 28: break;
          case 8: 
            { this.addType("comment", location, yyline + 1);
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n|\\r )");
                                    yybegin(NEW_LINE);
            }
          case 29: break;
          case 9: 
            { 
            }
          case 30: break;
          case 10: 
            { if (first){
									errorLine = yyline + 1;
									location = location + " " + yytext();
									first = false;
								 }
            }
          case 31: break;
          case 11: 
            { if (endLine){
									this.addType("function", location, errorLine);
									first = true;
									LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n|\\r )");
									yybegin(NEW_LINE);
								 }
								 endLine = true;
            }
          case 32: break;
          case 12: 
            { endLine = false;
            }
          case 33: break;
          case 13: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 34: break;
          case 14: 
            { location = " ";
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 35: break;
          case 15: 
            { this.addType("line", location, yyline + 1);
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n|\\r )");
                                    yybegin(NEW_LINE);
            }
          case 36: break;
          case 16: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - AVOID -> NEW_LINE (Transition : \\n|\\r )");
                                    yybegin(NEW_LINE);
            }
          case 37: break;
          case 17: 
            { this.addType("line", location, yyline + 1);
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> AVOID (Transition : END \""+yytext()+"\" )");
                                    yybegin(AVOID);
            }
          case 38: break;
          case 18: 
            { this.addType("line", location, yyline + 1);
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> AVOID (Transition : END \""+yytext()+"\" )");
                                    yybegin(AVOID);
            }
          case 39: break;
          case 19: 
            { location = yytext();
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
								 yybegin(NAMING);
            }
          case 40: break;
          case 20: 
            { location = yytext(); 
								    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
								    yybegin(NAMING);
            }
          case 41: break;
          case 21: 
            { location = yytext(); 
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
